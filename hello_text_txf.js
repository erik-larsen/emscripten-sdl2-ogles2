// include: shell.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(moduleArg) => Promise<Module>
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != 'undefined' ? Module : {};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window == 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
}

if (ENVIRONMENT_IS_NODE) {
  // `require()` is no-op in an ESM module, use `createRequire()` to construct
  // the require()` function.  This is only necessary for multi-environment
  // builds, `-sENVIRONMENT=node` emits a static import declaration instead.
  // TODO: Swap all `require()`'s with `import()`'s?

}

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// include: /var/folders/th/pflssrmn4x9_x7s3tslbc1rh0000gn/T/tmp7xywbohu.js

  if (!Module['expectedDataFileDownloads']) {
    Module['expectedDataFileDownloads'] = 0;
  }

  Module['expectedDataFileDownloads']++;
  (() => {
    // Do not attempt to redownload the virtual filesystem data when in a pthread or a Wasm Worker context.
    var isPthread = typeof ENVIRONMENT_IS_PTHREAD != 'undefined' && ENVIRONMENT_IS_PTHREAD;
    var isWasmWorker = typeof ENVIRONMENT_IS_WASM_WORKER != 'undefined' && ENVIRONMENT_IS_WASM_WORKER;
    if (isPthread || isWasmWorker) return;
    function loadPackage(metadata) {

      var PACKAGE_PATH = '';
      if (typeof window === 'object') {
        PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
      } else if (typeof process === 'undefined' && typeof location !== 'undefined') {
        // web worker
        PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
      }
      var PACKAGE_NAME = '../hello_text_txf.data';
      var REMOTE_PACKAGE_BASE = 'hello_text_txf.data';
      if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
        Module['locateFile'] = Module['locateFilePackage'];
        err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
      }
      var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
var REMOTE_PACKAGE_SIZE = metadata['remote_package_size'];

      function fetchRemotePackage(packageName, packageSize, callback, errback) {
        if (typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string') {
          require('fs').readFile(packageName, (err, contents) => {
            if (err) {
              errback(err);
            } else {
              callback(contents.buffer);
            }
          });
          return;
        }
        var xhr = new XMLHttpRequest();
        xhr.open('GET', packageName, true);
        xhr.responseType = 'arraybuffer';
        xhr.onprogress = (event) => {
          var url = packageName;
          var size = packageSize;
          if (event.total) size = event.total;
          if (event.loaded) {
            if (!xhr.addedTotal) {
              xhr.addedTotal = true;
              if (!Module['dataFileDownloads']) Module['dataFileDownloads'] = {};
              Module['dataFileDownloads'][url] = {
                loaded: event.loaded,
                total: size
              };
            } else {
              Module['dataFileDownloads'][url].loaded = event.loaded;
            }
            var total = 0;
            var loaded = 0;
            var num = 0;
            for (var download in Module['dataFileDownloads']) {
            var data = Module['dataFileDownloads'][download];
              total += data.total;
              loaded += data.loaded;
              num++;
            }
            total = Math.ceil(total * Module['expectedDataFileDownloads']/num);
            Module['setStatus']?.(`Downloading data... (${loaded}/${total})`);
          } else if (!Module['dataFileDownloads']) {
            Module['setStatus']?.('Downloading data...');
          }
        };
        xhr.onerror = (event) => {
          throw new Error("NetworkError for: " + packageName);
        }
        xhr.onload = (event) => {
          if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            var packageData = xhr.response;
            callback(packageData);
          } else {
            throw new Error(xhr.statusText + " : " + xhr.responseURL);
          }
        };
        xhr.send(null);
      };

      function handleError(error) {
        console.error('package error:', error);
      };

      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, (data) => {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);

    function runWithFS(Module) {

      function assert(check, msg) {
        if (!check) throw msg + new Error().stack;
      }
Module['FS_createPath']("/", "media", true, true);

      /** @constructor */
      function DataRequest(start, end, audio) {
        this.start = start;
        this.end = end;
        this.audio = audio;
      }
      DataRequest.prototype = {
        requests: {},
        open: function(mode, name) {
          this.name = name;
          this.requests[name] = this;
          Module['addRunDependency'](`fp ${this.name}`);
        },
        send: function() {},
        onload: function() {
          var byteArray = this.byteArray.subarray(this.start, this.end);
          this.finish(byteArray);
        },
        finish: function(byteArray) {
          var that = this;
          // canOwn this data in the filesystem, it is a slide into the heap that will never change
          Module['FS_createDataFile'](this.name, null, byteArray, true, true, true);
          Module['removeRunDependency'](`fp ${that.name}`);
          this.requests[this.name] = null;
        }
      };

      var files = metadata['files'];
      for (var i = 0; i < files.length; ++i) {
        new DataRequest(files[i]['start'], files[i]['end'], files[i]['audio'] || 0).open('GET', files[i]['filename']);
      }

      function processPackageData(arrayBuffer) {
        assert(arrayBuffer, 'Loading data file failed.');
        assert(arrayBuffer.constructor.name === ArrayBuffer.name, 'bad input to processPackageData');
        var byteArray = new Uint8Array(arrayBuffer);
        var curr;
        // Reuse the bytearray from the XHR as the source for file reads.
          DataRequest.prototype.byteArray = byteArray;
          var files = metadata['files'];
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }          Module['removeRunDependency']('datafile_../hello_text_txf.data');

      };
      Module['addRunDependency']('datafile_../hello_text_txf.data');

      if (!Module['preloadResults']) Module['preloadResults'] = {};

      Module['preloadResults'][PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }

    }
    if (Module['calledRun']) {
      runWithFS(Module);
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }

    }
    loadPackage({"files": [{"filename": "/media/rockfont.txf", "start": 0, "end": 8416}], "remote_package_size": 8416});

  })();

// end include: /var/folders/th/pflssrmn4x9_x7s3tslbc1rh0000gn/T/tmp7xywbohu.js
// include: /var/folders/th/pflssrmn4x9_x7s3tslbc1rh0000gn/T/tmpgnwfetbc.js

    // All the pre-js content up to here must remain later on, we need to run
    // it.
    if (Module['$ww'] || (typeof ENVIRONMENT_IS_PTHREAD != 'undefined' && ENVIRONMENT_IS_PTHREAD)) Module['preRun'] = [];
    var necessaryPreJSTasks = Module['preRun'].slice();
  // end include: /var/folders/th/pflssrmn4x9_x7s3tslbc1rh0000gn/T/tmpgnwfetbc.js
// include: /var/folders/th/pflssrmn4x9_x7s3tslbc1rh0000gn/T/tmp00uvjkyp.js

    if (!Module['preRun']) throw 'Module.preRun should exist because file support used it; did a pre-js delete it?';
    necessaryPreJSTasks.forEach((task) => {
      if (Module['preRun'].indexOf(task) < 0) throw 'All preRun tasks that exist before user pre-js code should remain after; did you replace Module or modify Module.preRun?';
    });
  // end include: /var/folders/th/pflssrmn4x9_x7s3tslbc1rh0000gn/T/tmp00uvjkyp.js


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var readAsync, readBinary;

if (ENVIRONMENT_IS_NODE) {
  if (typeof process == 'undefined' || !process.release || process.release.name !== 'node') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  var nodeVersion = process.versions.node;
  var numericVersion = nodeVersion.split('.').slice(0, 3);
  numericVersion = (numericVersion[0] * 10000) + (numericVersion[1] * 100) + (numericVersion[2].split('-')[0] * 1);
  var minVersion = 160000;
  if (numericVersion < 160000) {
    throw new Error('This emscripten-generated code requires node v16.0.0 (detected v' + nodeVersion + ')');
  }

  // These modules will usually be used on Node.js. Load them eagerly to avoid
  // the complexity of lazy-loading.
  var fs = require('fs');
  var nodePath = require('path');

  scriptDirectory = __dirname + '/';

// include: node_shell_read.js
readBinary = (filename) => {
  // We need to re-wrap `file://` strings to URLs. Normalizing isn't
  // necessary in that case, the path should already be absolute.
  filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
  var ret = fs.readFileSync(filename);
  assert(ret.buffer);
  return ret;
};

readAsync = (filename, binary = true) => {
  // See the comment in the `readBinary` function.
  filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
  return new Promise((resolve, reject) => {
    fs.readFile(filename, binary ? undefined : 'utf8', (err, data) => {
      if (err) reject(err);
      else resolve(binary ? data.buffer : data);
    });
  });
};
// end include: node_shell_read.js
  if (!Module['thisProgram'] && process.argv.length > 1) {
    thisProgram = process.argv[1].replace(/\\/g, '/');
  }

  arguments_ = process.argv.slice(2);

  if (typeof module != 'undefined') {
    module['exports'] = Module;
  }

  quit_ = (status, toThrow) => {
    process.exitCode = status;
    throw toThrow;
  };

} else
if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof importScripts == 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.startsWith('blob:')) {
    scriptDirectory = '';
  } else {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/')+1);
  }

  if (!(typeof window == 'object' || typeof importScripts == 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  {
// include: web_or_worker_shell_read.js
if (ENVIRONMENT_IS_WORKER) {
    readBinary = (url) => {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
    };
  }

  readAsync = (url) => {
    // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
    // See https://github.com/github/fetch/pull/92#issuecomment-140665932
    // Cordova or Electron apps are typically loaded from a file:// url.
    // So use XHR on webview if URL is a file URL.
    if (isFileURI(url)) {
      return new Promise((resolve, reject) => {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = () => {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            resolve(xhr.response);
            return;
          }
          reject(xhr.status);
        };
        xhr.onerror = reject;
        xhr.send(null);
      });
    }
    return fetch(url, { credentials: 'same-origin' })
      .then((response) => {
        if (response.ok) {
          return response.arrayBuffer();
        }
        return Promise.reject(new Error(response.status + ' : ' + response.url));
      })
  };
// end include: web_or_worker_shell_read.js
  }
} else
{
  throw new Error('environment detection error');
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.error.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used.
moduleOverrides = null;
checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] == 'undefined', 'Module.read option was removed');
assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)');
assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
legacyModuleProp('asm', 'wasmExports');
legacyModuleProp('readAsync', 'readAsync');
legacyModuleProp('readBinary', 'readBinary');
legacyModuleProp('setWindowTitle', 'setWindowTitle');
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var FETCHFS = 'FETCHFS is no longer included by default; build with -lfetchfs.js';
var ICASEFS = 'ICASEFS is no longer included by default; build with -licasefs.js';
var JSFILEFS = 'JSFILEFS is no longer included by default; build with -ljsfilefs.js';
var OPFS = 'OPFS is no longer included by default; build with -lopfs.js';

var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';

assert(!ENVIRONMENT_IS_SHELL, 'shell environment detected but not enabled at build time.  Add `shell` to `-sENVIRONMENT` to enable.');

// end include: shell.js

// include: preamble.js
// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');

// include: wasm2js.js
// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(info) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 65536, "");
  base64DecodeToExistingUint8Array(bufferView, 114288, "OFEBAF8ZAQDTSwEAPkkBANpGAQDFRQEANhQBAD0NAQAIAAAAAAAAAEoWAQCQEwEAEQAAAAEAAACOAAEAJg0BABQAAAABAAAABgAAAAQAAAADAAAAKwAAACwAAAAtAAAALgAAAC8AAAAAAAAAPwAAAEAAAABBAAAAQgAAAEMAAABEAAAARQAAAEYAAABHAAAASAAAAEkAAAD//////////wQYFhYEGBYWAAIAAAAAAACUAAAABBgWFgQYFhbwAAAAAAAAAJUAAAAEGBYWBBgWFvACAAAAAAAAlgAAAAQYFhYEGBYWAwAAAAAAAACXAAAABBgWFgQYFhYDAgAAAAAAAJgAAAAEGBYWBBgWFvMAAAAAAAAAmQAAAAQYFhYEGBYW8wIAAAAAAACaAAAABBgWFgQYVhYAAgAAAAAAAJsAAAAEGBYWBBhWFvAAAAAAAAAAnAAAAAQYFhYEGFYW8AIAAAAAAACdAAAABBgWFgQYVhYDAAAAAAAAAJ4AAAAEGBYWBBhWFgMCAAAAAAAAnwAAAAQYFhYEGFYW8wAAAAAAAACgAAAABBgWFgQYVhbzAgAAAAAAAKEAAAAEGBYWBCA2FgACAAAAAAAAogAAAAQYFhYEIDYW8AAAAAAAAACjAAAABBgWFgQgNhbwAgAAAAAAAKQAAAAEGBYWBCA2FgMAAAAAAAAApQAAAAQYFhYEIDYWAwIAAAAAAACmAAAABBgWFgQgNhbzAAAAAAAAAKcAAAAEGBYWBCA2FvMCAAAAAAAAqAAAAAQYVhYEGBYWAAIAAAAAAACpAAAABBhWFgQYFhbwAAAAAAAAAKoAAAAEGFYWBBgWFvACAAAAAAAAqwAAAAQYVhYEGBYWAwAAAAAAAACsAAAABBhWFgQYFhYDAgAAAAAAAK0AAAAEGFYWBBgWFvMAAAAAAAAArgAAAAQYVhYEGBYW8wIAAAAAAACvAAAABBhWFgQYVhYAAgAAAAAAALAAAAAEGFYWBBhWFvAAAAAAAAAAsQAAAAQYVhYEGFYW8AIAAAAAAACyAAAABBhWFgQYVhYDAAAAAAAAALMAAAAEGFYWBBhWFgMCAAAAAAAAtAAAAAQYVhYEGFYW8wAAAAAAAAC1AAAABBhWFgQYVhbzAgAAAAAAALYAAAAEGFYWBCA2FgACAAAAAAAAtwAAAAQYVhYEIDYW8AAAAAAAAAC4AAAABBhWFgQgNhbwAgAAAAAAALkAAAAEGFYWBCA2FgMAAAAAAAAAugAAAAQYVhYEIDYWAwIAAAAAAAC7AAAABBhWFgQgNhbzAAAAAAAAALwAAAAEGFYWBCA2FvMCAAAAAAAAvQAAAAQgNhYEGBYWAAIAAAAAAAC+AAAABCA2FgQYFhbwAAAAAAAAAL8AAAAEIDYWBBgWFvACAAAAAAAAwAAAAAQgNhYEGBYWAwAAAAAAAADBAAAABCA2FgQYFhYDAgAAAAAAAMIAAAAEIDYWBBgWFvMAAAAAAAAAwwAAAAQgNhYEGBYW8wIAAAAAAADEAAAABCA2FgQYVhYAAgAAAAAAAMUAAAAEIDYWBBhWFvAAAAAAAAAAxgAAAAQgNhYEGFYW8AIAAAAAAADHAAAABCA2FgQYVhYDAAAAAAAAAMgAAAAEIDYWBBhWFgMCAAAAAAAAyQAAAAQgNhYEGFYW8wAAAAAAAADKAAAABCA2FgQYVhbzAgAAAAAAAMsAAAAEIDYWBCA2FgACAAAAAAAAzAAAAAQgNhYEIDYW8AAAAAAAAADNAAAABCA2FgQgNhbwAgAAAAAAAM4AAAAEIDYWBCA2FgMAAAAAAAAAzwAAAAQgNhYEIDYWAwIAAAAAAADQAAAABCA2FgQgNhbzAAAAAAAAANEAAAAEIDYWBCA2FvMCAAAAAAAA0gAAAAQgRhYEGBYWAAIAAAAAAADTAAAABCBGFgQYFhbwAAAAAAAAANQAAAAEIEYWBBgWFvACAAAAAAAA1QAAAAQgRhYEGBYWAwAAAAAAAADWAAAABCBGFgQYFhYDAgAAAAAAANcAAAAEIEYWBBgWFvMAAAAAAAAA2AAAAAQgRhYEGBYW8wIAAAAAAADZAAAABCBGFgQYVhYAAgAAAAAAANoAAAAEIEYWBBhWFvAAAAAAAAAA2wAAAAQgRhYEGFYW8AIAAAAAAADcAAAABCBGFgQYVhYDAAAAAAAAAN0AAAAEIEYWBBhWFgMCAAAAAAAA3gAAAAQgRhYEGFYW8wAAAAAAAADfAAAABCBGFgQYVhbzAgAAAAAAAOAAAAAEIEYWBCA2FgACAAAAAAAA4QAAAAQgRhYEIDYW8AAAAAAAAADiAAAABCBGFgQgNhbwAgAAAAAAAOMAAAAEIEYWBCA2FgMAAAAAAAAA5AAAAAQgRhYEIDYWAwIAAAAAAADlAAAABCBGFgQgNhbzAAAAAAAAAOYAAAAEIEYWBCA2FvMCAAAAAAAA5wAAAAQgdhYEGBYWAAIAAAAAAADoAAAABCB2FgQYFhbwAAAAAAAAAOkAAAAEIHYWBBgWFvACAAAAAAAA6gAAAAQgdhYEGBYWAwAAAAAAAADrAAAABCB2FgQYFhYDAgAAAAAAAOwAAAAEIHYWBBgWFvMAAAAAAAAA7QAAAAQgdhYEGBYW8wIAAAAAAADuAAAABCB2FgQYVhYAAgAAAAAAAO8AAAAEIHYWBBhWFvAAAAAAAAAA8AAAAAQgdhYEGFYW8AIAAAAAAADxAAAABCB2FgQYVhYDAAAAAAAAAPIAAAAEIHYWBBhWFgMCAAAAAAAA8wAAAAQgdhYEGFYW8wAAAAAAAAD0AAAABCB2FgQYVhbzAgAAAAAAAPUAAAAEIHYWBCA2FgACAAAAAAAA9gAAAAQgdhYEIDYW8AAAAAAAAAD3AAAABCB2FgQgNhbwAgAAAAAAAPgAAAAEIHYWBCA2FgMAAAAAAAAA+QAAAAQgdhYEIDYWAwIAAAAAAAD6AAAABCB2FgQgNhbzAAAAAAAAAPsAAAAEIHYWBCA2FvMCAAAAAAAA/AAAAAQghhYEGBYWAAIAAAAAAAD9AAAABCCGFgQYFhbwAAAAAAAAAP4AAAAEIIYWBBgWFvACAAAAAAAA/wAAAAQghhYEGBYWAwAAAAAAAAAAAQAABCCGFgQYFhYDAgAAAAAAAAEBAAAEIIYWBBgWFvMAAAAAAAAAAgEAAAQghhYEGBYW8wIAAAAAAAADAQAABCCGFgQYVhYAAgAAAAAAAAQBAAAEIIYWBBhWFvAAAAAAAAAABQEAAAQghhYEGFYW8AIAAAAAAAAGAQAABCCGFgQYVhYDAAAAAAAAAAcBAAAEIIYWBBhWFgMCAAAAAAAACAEAAAQghhYEGFYW8wAAAAAAAAAJAQAABCCGFgQYVhbzAgAAAAAAAAoBAAAEIIYWBCA2FgACAAAAAAAACwEAAAQghhYEIDYW8AAAAAAAAAAMAQAABCCGFgQgNhbwAgAAAAAAAA0BAAAEIIYWBCA2FgMAAAAAAAAADgEAAAQghhYEIDYWAwIAAAAAAAAPAQAABCCGFgQgNhbzAAAAAAAAABABAAAEIIYWBCA2FvMCAAAAAAAAEQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////fwABAgMEBQYHCAkKCwwNDg8QERITFBUWFxgZGhscHR4fICEiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/gIGCg4SFhoeIiYqLjI2Oj5CRkpOUlZaXmJmam5ydnp+goaKjpKWmp6ipqqusra6vsLGys7S1tre4ubq7vL2+v8DBwsPExcbHyMnKy8zNzs/Q0dLT1NXW19jZ2tvc3d7f4OHi4+Tl5ufo6err7O3u7/Dx8vP09fb3+Pn6+/z9/v8AAgQGCAoMDhASFBYYGhweICIkJigqLC4wMjQ2ODo8PkBCREZISkxOUFJUVlhaXF5gYmRmaGpsbnBydHZ4enx+gIKEhoiKjI6QkpSWmJqcnqCipKaoqqyusLK0tri6vL7AwsTGyMrMztDS1NbY2tze4OLk5ujq7O7w8vT2+Pr8/wAECAwQFBgcICQoLDA0ODxAREhMUFVZXWFlaW1xdXl9gYWJjZGVmZ2hpaqusra6vsLGys7S1tre4ubq7vL2+v8ACBAYICkxOUFKUlpianN7g4uUnKSstL3FzdXe5u72/wARIjNEVWZ3iJmqu8zd7v8AJEhtkbba/wBVqv8A//8AAMkBAADKAQCAygEAwMoBAODKAQDwygEA+MoBAPzKAQD+ygEAFgEAABcBAAAYAQAAGQEAABoBAAAbAQAAHAEAAB0BAAAeAQAAHwEAACABAAAhAQAAIgEAACMBAAAkAQAAJQEAACYBAAAnAQAAKAEAACkBAAA2FAEAWQ0BAGkBAAAFAAAAAAAAAAAAAAAVAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAgAAEgIAAHQkAgAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAA//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAywEAAAAAAAUAAAAAAAAAAAAAABcCAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMCAAAYAgAAiCQCAAAEAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAD/////CgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABjMAQCAKgIAHQIAAA==");
  base64DecodeToExistingUint8Array(bufferView, 117940, "JGF1dG9SZXN1bWVBdWRpb0NvbnRleHQsJGR5bkNhbGwAJHN0cmluZ1RvVVRGOCwkVVRGOFRvU3RyaW5nAA==");
  base64DecodeToExistingUint8Array(bufferView, 118001, "");
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      function wasm2js_trap() { throw new Error('abort'); }

  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(imports) {
 var buffer = new ArrayBuffer(16973824);
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var env = imports.env;
 var fimport$0 = env.glUseProgram;
 var fimport$1 = env.glUniform2fv;
 var fimport$2 = env.glUniform1i;
 var fimport$3 = env.glUniform1f;
 var fimport$4 = env.glCreateShader;
 var fimport$5 = env.glShaderSource;
 var fimport$6 = env.glCompileShader;
 var fimport$7 = env.glCreateProgram;
 var fimport$8 = env.glAttachShader;
 var fimport$9 = env.glBindAttribLocation;
 var fimport$10 = env.glLinkProgram;
 var fimport$11 = env.glGetError;
 var fimport$12 = env.glGetUniformLocation;
 var fimport$13 = env.glGenBuffers;
 var fimport$14 = env.glBindBuffer;
 var fimport$15 = env.glBufferData;
 var fimport$16 = env.glEnable;
 var fimport$17 = env.glBlendFunc;
 var fimport$18 = env.glTexParameteri;
 var fimport$19 = env.glClear;
 var fimport$20 = env.glEnableVertexAttribArray;
 var fimport$21 = env.glVertexAttribPointer;
 var fimport$22 = env.glDrawArrays;
 var fimport$23 = env.glDisableVertexAttribArray;
 var fimport$24 = env.emscripten_set_main_loop_arg;
 var fimport$25 = env.glViewport;
 var fimport$26 = env.glClearColor;
 var fimport$27 = env.glDeleteTextures;
 var fimport$28 = env.glDeleteBuffers;
 var fimport$29 = env.glGenTextures;
 var fimport$30 = env.glBindTexture;
 var fimport$31 = env.glTexImage2D;
 var fimport$32 = env.__cxa_throw;
 var fimport$33 = env.emscripten_asm_const_int_sync_on_main_thread;
 var fimport$34 = env.emscripten_asm_const_int;
 var fimport$35 = env.emscripten_asm_const_ptr_sync_on_main_thread;
 var fimport$36 = env.emscripten_sample_gamepad_data;
 var fimport$37 = env.emscripten_get_num_gamepads;
 var fimport$38 = env.emscripten_get_gamepad_status;
 var fimport$39 = env.emscripten_set_gamepadconnected_callback_on_thread;
 var fimport$40 = env.emscripten_set_gamepaddisconnected_callback_on_thread;
 var fimport$41 = env.emscripten_has_asyncify;
 var fimport$42 = env.emscripten_sleep;
 var fimport$43 = env.eglGetConfigAttrib;
 var fimport$44 = env.eglChooseConfig;
 var fimport$45 = env.eglTerminate;
 var fimport$46 = env.eglInitialize;
 var fimport$47 = env.eglGetDisplay;
 var fimport$48 = env.eglBindAPI;
 var fimport$49 = env.eglWaitGL;
 var fimport$50 = env.eglWaitNative;
 var fimport$51 = env.eglSwapInterval;
 var fimport$52 = env.eglSwapBuffers;
 var fimport$53 = env.eglMakeCurrent;
 var fimport$54 = env.eglDestroySurface;
 var fimport$55 = env.eglCreateWindowSurface;
 var fimport$56 = env.eglDestroyContext;
 var fimport$57 = env.eglCreateContext;
 var fimport$58 = env.eglGetError;
 var fimport$59 = env.eglQueryString;
 var fimport$60 = env.emscripten_get_screen_size;
 var fimport$61 = env.emscripten_request_pointerlock;
 var fimport$62 = env.emscripten_exit_pointerlock;
 var fimport$63 = env.emscripten_get_device_pixel_ratio;
 var fimport$64 = env.emscripten_set_canvas_element_size;
 var fimport$65 = env.emscripten_get_element_css_size;
 var fimport$66 = env.emscripten_set_element_css_size;
 var fimport$67 = env.emscripten_set_mousemove_callback_on_thread;
 var fimport$68 = env.emscripten_set_mousedown_callback_on_thread;
 var fimport$69 = env.emscripten_set_mouseup_callback_on_thread;
 var fimport$70 = env.emscripten_set_mouseenter_callback_on_thread;
 var fimport$71 = env.emscripten_set_mouseleave_callback_on_thread;
 var fimport$72 = env.emscripten_set_wheel_callback_on_thread;
 var fimport$73 = env.emscripten_set_focus_callback_on_thread;
 var fimport$74 = env.emscripten_set_blur_callback_on_thread;
 var fimport$75 = env.emscripten_set_touchstart_callback_on_thread;
 var fimport$76 = env.emscripten_set_touchend_callback_on_thread;
 var fimport$77 = env.emscripten_set_touchmove_callback_on_thread;
 var fimport$78 = env.emscripten_set_touchcancel_callback_on_thread;
 var fimport$79 = env.emscripten_set_pointerlockchange_callback_on_thread;
 var fimport$80 = env.emscripten_set_keydown_callback_on_thread;
 var fimport$81 = env.emscripten_set_keyup_callback_on_thread;
 var fimport$82 = env.emscripten_set_keypress_callback_on_thread;
 var fimport$83 = env.emscripten_set_fullscreenchange_callback_on_thread;
 var fimport$84 = env.emscripten_set_resize_callback_on_thread;
 var fimport$85 = env.emscripten_set_visibilitychange_callback_on_thread;
 var fimport$86 = env.emscripten_set_beforeunload_callback_on_thread;
 var fimport$87 = env.emscripten_set_window_title;
 var fimport$88 = env.emscripten_request_fullscreen_strategy;
 var fimport$89 = env.emscripten_exit_fullscreen;
 var fimport$90 = env.emscripten_glGenQueriesEXT;
 var fimport$91 = env.emscripten_glDeleteQueriesEXT;
 var fimport$92 = env.emscripten_glIsQueryEXT;
 var fimport$93 = env.emscripten_glBeginQueryEXT;
 var fimport$94 = env.emscripten_glEndQueryEXT;
 var fimport$95 = env.emscripten_glQueryCounterEXT;
 var fimport$96 = env.emscripten_glGetQueryivEXT;
 var fimport$97 = env.emscripten_glGetQueryObjectivEXT;
 var fimport$98 = env.emscripten_glGetQueryObjectuivEXT;
 var fimport$99 = env.emscripten_glGetQueryObjecti64vEXT;
 var fimport$100 = env.emscripten_glGetQueryObjectui64vEXT;
 var fimport$101 = env.emscripten_glBindVertexArrayOES;
 var fimport$102 = env.emscripten_glDeleteVertexArraysOES;
 var fimport$103 = env.emscripten_glGenVertexArraysOES;
 var fimport$104 = env.emscripten_glIsVertexArrayOES;
 var fimport$105 = env.emscripten_glDrawBuffersWEBGL;
 var fimport$106 = env.emscripten_glDrawArraysInstancedANGLE;
 var fimport$107 = env.emscripten_glDrawElementsInstancedANGLE;
 var fimport$108 = env.emscripten_glVertexAttribDivisorANGLE;
 var fimport$109 = env.emscripten_glActiveTexture;
 var fimport$110 = env.emscripten_glAttachShader;
 var fimport$111 = env.emscripten_glBindAttribLocation;
 var fimport$112 = env.emscripten_glBindBuffer;
 var fimport$113 = env.emscripten_glBindFramebuffer;
 var fimport$114 = env.emscripten_glBindRenderbuffer;
 var fimport$115 = env.emscripten_glBindTexture;
 var fimport$116 = env.emscripten_glBlendColor;
 var fimport$117 = env.emscripten_glBlendEquation;
 var fimport$118 = env.emscripten_glBlendEquationSeparate;
 var fimport$119 = env.emscripten_glBlendFunc;
 var fimport$120 = env.emscripten_glBlendFuncSeparate;
 var fimport$121 = env.emscripten_glBufferData;
 var fimport$122 = env.emscripten_glBufferSubData;
 var fimport$123 = env.emscripten_glCheckFramebufferStatus;
 var fimport$124 = env.emscripten_glClear;
 var fimport$125 = env.emscripten_glClearColor;
 var fimport$126 = env.emscripten_glClearDepthf;
 var fimport$127 = env.emscripten_glClearStencil;
 var fimport$128 = env.emscripten_glColorMask;
 var fimport$129 = env.emscripten_glCompileShader;
 var fimport$130 = env.emscripten_glCompressedTexImage2D;
 var fimport$131 = env.emscripten_glCompressedTexSubImage2D;
 var fimport$132 = env.emscripten_glCopyTexImage2D;
 var fimport$133 = env.emscripten_glCopyTexSubImage2D;
 var fimport$134 = env.emscripten_glCreateProgram;
 var fimport$135 = env.emscripten_glCreateShader;
 var fimport$136 = env.emscripten_glCullFace;
 var fimport$137 = env.emscripten_glDeleteBuffers;
 var fimport$138 = env.emscripten_glDeleteFramebuffers;
 var fimport$139 = env.emscripten_glDeleteProgram;
 var fimport$140 = env.emscripten_glDeleteRenderbuffers;
 var fimport$141 = env.emscripten_glDeleteShader;
 var fimport$142 = env.emscripten_glDeleteTextures;
 var fimport$143 = env.emscripten_glDepthFunc;
 var fimport$144 = env.emscripten_glDepthMask;
 var fimport$145 = env.emscripten_glDepthRangef;
 var fimport$146 = env.emscripten_glDetachShader;
 var fimport$147 = env.emscripten_glDisable;
 var fimport$148 = env.emscripten_glDisableVertexAttribArray;
 var fimport$149 = env.emscripten_glDrawArrays;
 var fimport$150 = env.emscripten_glDrawElements;
 var fimport$151 = env.emscripten_glEnable;
 var fimport$152 = env.emscripten_glEnableVertexAttribArray;
 var fimport$153 = env.emscripten_glFinish;
 var fimport$154 = env.emscripten_glFlush;
 var fimport$155 = env.emscripten_glFramebufferRenderbuffer;
 var fimport$156 = env.emscripten_glFramebufferTexture2D;
 var fimport$157 = env.emscripten_glFrontFace;
 var fimport$158 = env.emscripten_glGenBuffers;
 var fimport$159 = env.emscripten_glGenerateMipmap;
 var fimport$160 = env.emscripten_glGenFramebuffers;
 var fimport$161 = env.emscripten_glGenRenderbuffers;
 var fimport$162 = env.emscripten_glGenTextures;
 var fimport$163 = env.emscripten_glGetActiveAttrib;
 var fimport$164 = env.emscripten_glGetActiveUniform;
 var fimport$165 = env.emscripten_glGetAttachedShaders;
 var fimport$166 = env.emscripten_glGetAttribLocation;
 var fimport$167 = env.emscripten_glGetBooleanv;
 var fimport$168 = env.emscripten_glGetBufferParameteriv;
 var fimport$169 = env.emscripten_glGetError;
 var fimport$170 = env.emscripten_glGetFloatv;
 var fimport$171 = env.emscripten_glGetFramebufferAttachmentParameteriv;
 var fimport$172 = env.emscripten_glGetIntegerv;
 var fimport$173 = env.emscripten_glGetProgramiv;
 var fimport$174 = env.emscripten_glGetProgramInfoLog;
 var fimport$175 = env.emscripten_glGetRenderbufferParameteriv;
 var fimport$176 = env.emscripten_glGetShaderiv;
 var fimport$177 = env.emscripten_glGetShaderInfoLog;
 var fimport$178 = env.emscripten_glGetShaderPrecisionFormat;
 var fimport$179 = env.emscripten_glGetShaderSource;
 var fimport$180 = env.emscripten_glGetString;
 var fimport$181 = env.emscripten_glGetTexParameterfv;
 var fimport$182 = env.emscripten_glGetTexParameteriv;
 var fimport$183 = env.emscripten_glGetUniformfv;
 var fimport$184 = env.emscripten_glGetUniformiv;
 var fimport$185 = env.emscripten_glGetUniformLocation;
 var fimport$186 = env.emscripten_glGetVertexAttribfv;
 var fimport$187 = env.emscripten_glGetVertexAttribiv;
 var fimport$188 = env.emscripten_glGetVertexAttribPointerv;
 var fimport$189 = env.emscripten_glHint;
 var fimport$190 = env.emscripten_glIsBuffer;
 var fimport$191 = env.emscripten_glIsEnabled;
 var fimport$192 = env.emscripten_glIsFramebuffer;
 var fimport$193 = env.emscripten_glIsProgram;
 var fimport$194 = env.emscripten_glIsRenderbuffer;
 var fimport$195 = env.emscripten_glIsShader;
 var fimport$196 = env.emscripten_glIsTexture;
 var fimport$197 = env.emscripten_glLineWidth;
 var fimport$198 = env.emscripten_glLinkProgram;
 var fimport$199 = env.emscripten_glPixelStorei;
 var fimport$200 = env.emscripten_glPolygonOffset;
 var fimport$201 = env.emscripten_glReadPixels;
 var fimport$202 = env.emscripten_glReleaseShaderCompiler;
 var fimport$203 = env.emscripten_glRenderbufferStorage;
 var fimport$204 = env.emscripten_glSampleCoverage;
 var fimport$205 = env.emscripten_glScissor;
 var fimport$206 = env.emscripten_glShaderBinary;
 var fimport$207 = env.emscripten_glShaderSource;
 var fimport$208 = env.emscripten_glStencilFunc;
 var fimport$209 = env.emscripten_glStencilFuncSeparate;
 var fimport$210 = env.emscripten_glStencilMask;
 var fimport$211 = env.emscripten_glStencilMaskSeparate;
 var fimport$212 = env.emscripten_glStencilOp;
 var fimport$213 = env.emscripten_glStencilOpSeparate;
 var fimport$214 = env.emscripten_glTexImage2D;
 var fimport$215 = env.emscripten_glTexParameterf;
 var fimport$216 = env.emscripten_glTexParameterfv;
 var fimport$217 = env.emscripten_glTexParameteri;
 var fimport$218 = env.emscripten_glTexParameteriv;
 var fimport$219 = env.emscripten_glTexSubImage2D;
 var fimport$220 = env.emscripten_glUniform1f;
 var fimport$221 = env.emscripten_glUniform1fv;
 var fimport$222 = env.emscripten_glUniform1i;
 var fimport$223 = env.emscripten_glUniform1iv;
 var fimport$224 = env.emscripten_glUniform2f;
 var fimport$225 = env.emscripten_glUniform2fv;
 var fimport$226 = env.emscripten_glUniform2i;
 var fimport$227 = env.emscripten_glUniform2iv;
 var fimport$228 = env.emscripten_glUniform3f;
 var fimport$229 = env.emscripten_glUniform3fv;
 var fimport$230 = env.emscripten_glUniform3i;
 var fimport$231 = env.emscripten_glUniform3iv;
 var fimport$232 = env.emscripten_glUniform4f;
 var fimport$233 = env.emscripten_glUniform4fv;
 var fimport$234 = env.emscripten_glUniform4i;
 var fimport$235 = env.emscripten_glUniform4iv;
 var fimport$236 = env.emscripten_glUniformMatrix2fv;
 var fimport$237 = env.emscripten_glUniformMatrix3fv;
 var fimport$238 = env.emscripten_glUniformMatrix4fv;
 var fimport$239 = env.emscripten_glUseProgram;
 var fimport$240 = env.emscripten_glValidateProgram;
 var fimport$241 = env.emscripten_glVertexAttrib1f;
 var fimport$242 = env.emscripten_glVertexAttrib1fv;
 var fimport$243 = env.emscripten_glVertexAttrib2f;
 var fimport$244 = env.emscripten_glVertexAttrib2fv;
 var fimport$245 = env.emscripten_glVertexAttrib3f;
 var fimport$246 = env.emscripten_glVertexAttrib3fv;
 var fimport$247 = env.emscripten_glVertexAttrib4f;
 var fimport$248 = env.emscripten_glVertexAttrib4fv;
 var fimport$249 = env.emscripten_glVertexAttribPointer;
 var fimport$250 = env.emscripten_glViewport;
 var fimport$251 = env.emscripten_glPolygonOffsetClampEXT;
 var fimport$252 = env.emscripten_glClipControlEXT;
 var fimport$253 = env.emscripten_glPolygonModeWEBGL;
 var fimport$254 = env._emscripten_memcpy_js;
 var fimport$255 = env.emscripten_date_now;
 var fimport$256 = env._emscripten_get_now_is_monotonic;
 var fimport$257 = env.emscripten_get_now;
 var fimport$258 = env.__syscall_openat;
 var fimport$259 = env.__syscall_fcntl64;
 var fimport$260 = env.__syscall_ioctl;
 var wasi_snapshot_preview1 = imports.wasi_snapshot_preview1;
 var fimport$261 = wasi_snapshot_preview1.fd_write;
 var fimport$262 = wasi_snapshot_preview1.fd_read;
 var fimport$263 = wasi_snapshot_preview1.fd_close;
 var fimport$264 = wasi_snapshot_preview1.environ_sizes_get;
 var fimport$265 = wasi_snapshot_preview1.environ_get;
 var fimport$266 = env.emscripten_resize_heap;
 var fimport$267 = env._abort_js;
 var fimport$268 = env.__assert_fail;
 var fimport$269 = wasi_snapshot_preview1.fd_seek;
 var global$0 = 65536;
 var global$1 = 0;
 var global$2 = 0;
 var global$3 = 0;
 var global$4 = 117940;
 var global$5 = 117973;
 var global$6 = 117940;
 var global$7 = 118001;
 var global$8 = 118001;
 var global$9 = 125933;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $1335();
  $1035();
  $1057();
 }
 
 function $1($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  fimport$0(HEAP32[(0 + 125936 | 0) >> 2] | 0 | 0);
  fimport$1(HEAP32[(0 + 125940 | 0) >> 2] | 0 | 0, 1 | 0, $3(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  fimport$2(HEAP32[(0 + 125944 | 0) >> 2] | 0 | 0, 0 | 0);
  fimport$0(HEAP32[(0 + 125956 | 0) >> 2] | 0 | 0);
  fimport$1(HEAP32[(0 + 125968 | 0) >> 2] | 0 | 0, 1 | 0, $3(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  fimport$1(HEAP32[(0 + 125972 | 0) >> 2] | 0 | 0, 1 | 0, 125960 | 0);
  fimport$2(HEAP32[(0 + 125976 | 0) >> 2] | 0 | 0, 0 | 0);
  fimport$0(HEAP32[(0 + 125984 | 0) >> 2] | 0 | 0);
  fimport$1(HEAP32[(0 + 125988 | 0) >> 2] | 0 | 0, 1 | 0, $4(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  fimport$3(HEAP32[(0 + 125992 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($5(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0))));
  fimport$3(HEAP32[(0 + 125996 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($6(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0))));
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $2($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $3($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0;
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0 | 0;
 }
 
 function $5($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 2]));
 }
 
 function $6($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2]));
 }
 
 function $7($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $42_1 = 0, $49_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 39 | 0) >> 0] = $2_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = fimport$4(35633 | 0) | 0;
  fimport$5(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0, 1 | 0, $5_1 + 44 | 0 | 0, 0 | 0);
  fimport$6(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 28 | 0) >> 2] = fimport$4(35632 | 0) | 0;
  fimport$5(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, 1 | 0, $5_1 + 40 | 0 | 0, 0 | 0);
  fimport$6(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 24 | 0) >> 2] = fimport$7() | 0;
  fimport$8(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
  fimport$8(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0);
  fimport$9(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, 0 | 0, 70623 | 0);
  label$1 : {
   if (!((HEAPU8[($5_1 + 39 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   fimport$9(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, 1 | 0, 73386 | 0);
  }
  fimport$10(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 20 | 0) >> 2] = fimport$11() | 0;
  label$2 : {
   label$3 : {
    if (!(HEAP32[($5_1 + 20 | 0) >> 2] | 0)) {
     break label$3
    }
    $42_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    HEAP32[$5_1 >> 2] = $42_1;
    $1055(83155 | 0, $5_1 | 0) | 0;
    break label$2;
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   $1055(83267 | 0, $5_1 + 16 | 0 | 0) | 0;
  }
  $49_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $49_1 | 0;
 }
 
 function $8($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[(0 + 125936 | 0) >> 2] = $7(HEAP32[(0 + 114288 | 0) >> 2] | 0 | 0, HEAP32[(0 + 114300 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
  HEAP32[(0 + 125956 | 0) >> 2] = $7(HEAP32[(0 + 114296 | 0) >> 2] | 0 | 0, HEAP32[(0 + 114300 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
  HEAP32[(0 + 125984 | 0) >> 2] = $7(HEAP32[(0 + 114304 | 0) >> 2] | 0 | 0, HEAP32[(0 + 114308 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
  HEAP32[(0 + 125940 | 0) >> 2] = fimport$12(HEAP32[(0 + 125936 | 0) >> 2] | 0 | 0, 67086 | 0) | 0;
  HEAP32[(0 + 125944 | 0) >> 2] = fimport$12(HEAP32[(0 + 125936 | 0) >> 2] | 0 | 0, 69026 | 0) | 0;
  HEAP32[(0 + 125968 | 0) >> 2] = fimport$12(HEAP32[(0 + 125956 | 0) >> 2] | 0 | 0, 67086 | 0) | 0;
  HEAP32[(0 + 125972 | 0) >> 2] = fimport$12(HEAP32[(0 + 125956 | 0) >> 2] | 0 | 0, 72262 | 0) | 0;
  HEAP32[(0 + 125976 | 0) >> 2] = fimport$12(HEAP32[(0 + 125956 | 0) >> 2] | 0 | 0, 69026 | 0) | 0;
  HEAP32[(0 + 125988 | 0) >> 2] = fimport$12(HEAP32[(0 + 125984 | 0) >> 2] | 0 | 0, 70759 | 0) | 0;
  HEAP32[(0 + 125992 | 0) >> 2] = fimport$12(HEAP32[(0 + 125984 | 0) >> 2] | 0 | 0, 70976 | 0) | 0;
  HEAP32[(0 + 125996 | 0) >> 2] = fimport$12(HEAP32[(0 + 125984 | 0) >> 2] | 0 | 0, 67521 | 0) | 0;
  $1(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $9() {
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $40_1 = 0, $41_1 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  fimport$13(1 | 0, 125952 | 0);
  fimport$14(34962 | 0, HEAP32[(0 + 125952 | 0) >> 2] | 0 | 0);
  i64toi32_i32$0 = 0;
  $40_1 = 0;
  i64toi32_i32$1 = $2_1 + 88 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $40_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 80 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $40_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 72 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $40_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 64 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $40_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 56 | 0) >> 2] = $40_1;
  HEAP32[($2_1 + 60 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 48 | 0) >> 2] = $40_1;
  HEAP32[($2_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[($2_1 + 52 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($2_1 + 60 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($2_1 + 64 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($2_1 + 84 | 0) >> 2] = Math_fround(1.0);
  fimport$15(34962 | 0, 48 | 0, $2_1 + 48 | 0 | 0, 35044 | 0);
  fimport$13(1 | 0, 125980 | 0);
  fimport$14(34962 | 0, HEAP32[(0 + 125980 | 0) >> 2] | 0 | 0);
  HEAP32[($2_1 + 32 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  $41_1 = 0;
  i64toi32_i32$1 = $2_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $41_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $41_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $41_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  HEAP32[$2_1 >> 2] = $41_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround(.5);
  HEAPF32[($2_1 + 12 | 0) >> 2] = Math_fround(-.5);
  HEAPF32[($2_1 + 16 | 0) >> 2] = Math_fround(-.5);
  HEAPF32[($2_1 + 24 | 0) >> 2] = Math_fround(.5);
  HEAPF32[($2_1 + 28 | 0) >> 2] = Math_fround(-.5);
  fimport$15(34962 | 0, 36 | 0, $2_1 | 0, 35044 | 0);
  global$0 = $2_1 + 96 | 0;
  return;
 }
 
 function $10($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[(0 + 125948 | 0) >> 2] = $54(HEAP32[(0 + 114292 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(0 + 125948 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $16_1 = HEAP32[((HEAP32[(0 + 125948 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[(0 + 125948 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = $16_1;
    $1055(83129 | 0, $3_1 | 0) | 0;
    fimport$16(3042 | 0);
    fimport$17(770 | 0, 771 | 0);
    $59(HEAP32[(0 + 125948 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
    fimport$18(3553 | 0, 10242 | 0, 33071 | 0);
    fimport$18(3553 | 0, 10243 | 0, 10497 | 0);
    fimport$18(3553 | 0, 10241 | 0, 9728 | 0);
    fimport$18(3553 | 0, 10240 | 0, 9728 | 0);
    HEAPF32[(0 + 125960 | 0) >> 2] = Math_fround(HEAP32[((HEAP32[(0 + 125948 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
    HEAPF32[(0 + 125964 | 0) >> 2] = Math_fround(HEAP32[((HEAP32[(0 + 125948 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
    $1(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $1055(83070 | 0, 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $11() {
  $47(HEAP32[(0 + 125948 | 0) >> 2] | 0 | 0);
  return;
 }
 
 function $12($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$19(16384 | 0);
  fimport$20(0 | 0);
  fimport$0(HEAP32[(0 + 125984 | 0) >> 2] | 0 | 0);
  fimport$14(34962 | 0, HEAP32[(0 + 125980 | 0) >> 2] | 0 | 0);
  $11_1 = 0;
  fimport$21($11_1 | 0, 3 | 0, 5126 | 0, 0 & 255 | 0 | 0, $11_1 | 0, $11_1 | 0);
  fimport$22(4 | 0, 0 | 0, 3 | 0);
  fimport$0(HEAP32[(0 + 125956 | 0) >> 2] | 0 | 0);
  fimport$14(34962 | 0, HEAP32[(0 + 125952 | 0) >> 2] | 0 | 0);
  $25_1 = 0;
  fimport$21($25_1 | 0, 3 | 0, 5126 | 0, 0 & 255 | 0 | 0, $25_1 | 0, $25_1 | 0);
  fimport$22(5 | 0, 0 | 0, 4 | 0);
  fimport$20(1 | 0);
  fimport$0(HEAP32[(0 + 125936 | 0) >> 2] | 0 | 0);
  $61(HEAP32[(0 + 125948 | 0) >> 2] | 0 | 0, 76355 | 0, Math_fround(Math_fround(-160.0)), Math_fround(Math_fround(0 | 0)));
  $61(HEAP32[(0 + 125948 | 0) >> 2] | 0 | 0, 77972 | 0, Math_fround(Math_fround(-64.0)), Math_fround(Math_fround(-96.0)));
  fimport$23(1 | 0);
  fimport$23(0 | 0);
  $20(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $13($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $29(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!(($32($2(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $1(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  }
  $12(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $14($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 140 | 0) >> 2] = 0;
  HEAP32[($4_1 + 136 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 132 | 0) >> 2] = $1_1;
  $15($4_1 + 8 | 0 | 0, 66975 | 0) | 0;
  $8($4_1 + 8 | 0 | 0);
  $9();
  $10($4_1 + 8 | 0 | 0);
  HEAP32[($4_1 + 4 | 0) >> 2] = $4_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = 0;
  fimport$24(1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, 1 & 1 | 0 | 0);
  $11();
  global$0 = $4_1 + 144 | 0;
  return 0 | 0;
 }
 
 function $15($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $16($5_1 | 0) | 0;
  HEAP32[($5_1 + 52 | 0) >> 2] = 0;
  HEAP32[($5_1 + 56 | 0) >> 2] = 0;
  HEAPF32[($5_1 + 60 | 0) >> 2] = Math_fround(.05000000074505806);
  HEAP8[($5_1 + 64 | 0) >> 0] = 0;
  HEAP32[($5_1 + 68 | 0) >> 2] = 0;
  HEAP32[($5_1 + 72 | 0) >> 2] = 0;
  HEAP32[($5_1 + 76 | 0) >> 2] = 0;
  HEAP32[($5_1 + 80 | 0) >> 2] = 0;
  HEAP8[($5_1 + 84 | 0) >> 0] = 0;
  HEAPF32[($5_1 + 88 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5_1 + 92 | 0) >> 2] = Math_fround(0 | 0);
  i64toi32_i32$0 = 0;
  HEAP32[($5_1 + 96 | 0) >> 2] = 0;
  HEAP32[($5_1 + 100 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[($5_1 + 104 | 0) >> 2] = Math_fround(1.0000000474974513e-03);
  HEAPF32[($5_1 + 108 | 0) >> 2] = Math_fround(8.0);
  HEAP8[($5_1 + 112 | 0) >> 0] = 0;
  $18($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $16($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP8[$4_1 >> 0] = 0;
  HEAP8[($4_1 + 1 | 0) >> 0] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(.10000000149011612);
  HEAPF32[($4_1 + 24 | 0) >> 2] = Math_fround(10.0);
  HEAPF32[($4_1 + 28 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4_1 + 44 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($4_1 + 48 | 0) >> 2] = Math_fround(1.0);
  $33($4_1 | 0, 640 | 0, 480 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $17($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $9_1 = 0;
  fimport$25($9_1 | 0, $9_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  $33($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $18($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $34_1 = Math_fround(0), $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $11_1 = 805240832;
  HEAP32[($5_1 + 52 | 0) >> 2] = $941(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $11_1 | 0, $11_1 | 0, HEAP32[($19($5_1 | 0) | 0) >> 2] | 0 | 0, HEAP32[(($19($5_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0, 38 | 0) | 0;
  HEAP32[($5_1 + 56 | 0) >> 2] = $954(HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) | 0;
  $968(17 | 0, 2 | 0) | 0;
  $968(18 | 0, 0 | 0) | 0;
  $971(1 | 0) | 0;
  $968(5 | 0, 1 | 0) | 0;
  $968(6 | 0, 24 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $969(HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) | 0;
  $34_1 = Math_fround(0 | 0);
  fimport$26(Math_fround($34_1), Math_fround($34_1), Math_fround($34_1), Math_fround(Math_fround(1.0)));
  $17($5_1 | 0, HEAP32[($19($5_1 | 0) | 0) >> 2] | 0 | 0, HEAP32[(($19($5_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $19($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0;
 }
 
 function $20($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $973(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $21($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $32_1 = Math_fround(0), $137_1 = 0, $141_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $0_1;
  HEAP8[($6_1 + 59 | 0) >> 0] = $1_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $3_1;
  $8_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  $43($8_1 | 0, HEAP32[($8_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 80 | 0) >> 2] | 0 | 0, $6_1 + 44 | 0 | 0, $6_1 + 40 | 0 | 0);
  label$1 : {
   label$2 : {
    if (!((HEAPU8[($6_1 + 59 | 0) >> 0] | 0) & 1 | 0)) {
     break label$2
    }
    $32_1 = Math_fround(-Math_fround(HEAPF32[($8_1 + 60 | 0) >> 2]));
    break label$1;
   }
   $32_1 = Math_fround(HEAPF32[($8_1 + 60 | 0) >> 2]);
  }
  HEAPF32[($6_1 + 36 | 0) >> 2] = $32_1;
  $22($8_1 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2])));
  $43($8_1 | 0, HEAP32[($8_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 80 | 0) >> 2] | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0);
  HEAPF32[($6_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[($6_1 + 44 | 0) >> 2]));
  HEAPF32[($6_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2]) - Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2]));
  i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  $137_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $137_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $141_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[$6_1 >> 2] = $141_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $23($8_1 | 0, $6_1 | 0);
  global$0 = $6_1 + 64 | 0;
  return;
 }
 
 function $22($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround($35($5_1 | 0, Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2]) + Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))), Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]))));
  HEAP8[$5_1 >> 0] = 1;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $23($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]) + Math_fround(HEAPF32[$1_1 >> 2]));
  HEAPF32[($5_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]) + Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]));
  HEAP8[$5_1 >> 0] = 1;
  return;
 }
 
 function $24($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $121_1 = 0, $125_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $0_1;
  HEAPF32[($6_1 + 56 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 52 | 0) >> 2] = $2_1;
  HEAPF32[($6_1 + 48 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  $44($7_1 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 48 | 0) >> 2])), $6_1 + 44 | 0 | 0, $6_1 + 40 | 0 | 0);
  HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 108 | 0) >> 2]));
  $22($7_1 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2])));
  $44($7_1 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + 48 | 0) >> 2])), $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0);
  HEAPF32[($6_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[($6_1 + 44 | 0) >> 2]));
  HEAPF32[($6_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2]) - Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2]));
  i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  $121_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $121_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $125_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[$6_1 >> 2] = $125_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $23($7_1 | 0, $6_1 | 0);
  global$0 = $6_1 + 64 | 0;
  return;
 }
 
 function $25($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $159_1 = 0, $163_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
  HEAP32[($5_1 + 48 | 0) >> 2] = ((HEAP32[($19($6_1 | 0) | 0) >> 2] | 0 | 0) / (2 | 0) | 0) + ((HEAP32[($5_1 + 56 | 0) >> 2] | 0) - (HEAP32[($6_1 + 68 | 0) >> 2] | 0) | 0) | 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = ((HEAP32[(($19($6_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0) / (2 | 0) | 0) + ((HEAP32[($5_1 + 52 | 0) >> 2] | 0) - (HEAP32[($6_1 + 72 | 0) >> 2] | 0) | 0) | 0;
  $41($6_1 | 0, HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, $5_1 + 40 | 0 | 0, $5_1 + 36 | 0 | 0);
  HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($26($6_1 | 0) | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]) / Math_fround($5($6_1 | 0))));
  HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(($26($6_1 | 0) | 0) + 4 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]) / Math_fround($5($6_1 | 0))) / Math_fround($6($6_1 | 0))));
  i64toi32_i32$0 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
  $159_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $159_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  $163_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $163_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $27($6_1 | 0, $5_1 + 8 | 0 | 0);
  global$0 = $5_1 + 64 | 0;
  return;
 }
 
 function $26($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 28 | 0 | 0;
 }
 
 function $27($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $24_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $24_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + 36 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $24_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[$5_1 >> 0] = 1;
  return;
 }
 
 function $28($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $139_1 = 0, $143_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 52 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 48 | 0) >> 2] = Math_fround(Math_fround(.5) + Math_fround(Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]) - Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2])));
  HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround(Math_fround(.5) + Math_fround(Math_fround(HEAPF32[($5_1 + 52 | 0) >> 2]) - Math_fround(HEAPF32[($6_1 + 92 | 0) >> 2])));
  $40($6_1 | 0, Math_fround(Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2])), $5_1 + 40 | 0 | 0, $5_1 + 36 | 0 | 0);
  HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($26($6_1 | 0) | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]) / Math_fround($5($6_1 | 0))));
  HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(($26($6_1 | 0) | 0) + 4 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]) / Math_fround($5($6_1 | 0))) / Math_fround($6($6_1 | 0))));
  i64toi32_i32$0 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
  $139_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $139_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  $143_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $143_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $27($6_1 | 0, $5_1 + 8 | 0 | 0);
  global$0 = $5_1 + 64 | 0;
  return;
 }
 
 function $29($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $174$hi = 0, $175$hi = 0, $174_1 = 0, $445_1 = 0, $503_1 = 0;
  $3_1 = global$0 - 112 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 108 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!($328($3_1 + 48 | 0 | 0) | 0)) {
     break label$1
    }
    $9_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               if (($9_1 | 0) == (256 | 0)) {
                break label$13
               }
               if (($9_1 | 0) == (512 | 0)) {
                break label$12
               }
               if (($9_1 | 0) == (1024 | 0)) {
                break label$10
               }
               if (($9_1 | 0) == (1025 | 0)) {
                break label$9
               }
               if (($9_1 | 0) == (1026 | 0)) {
                break label$8
               }
               if (($9_1 | 0) == (1027 | 0)) {
                break label$11
               }
               if (($9_1 | 0) == (1792 | 0)) {
                break label$6
               }
               if (($9_1 | 0) == (1793 | 0)) {
                break label$4
               }
               if (($9_1 | 0) == (1794 | 0)) {
                break label$7
               }
               if (($9_1 | 0) == (2050 | 0)) {
                break label$5
               }
               break label$3;
              }
              $1297();
              wasm2js_trap();
             }
             label$14 : {
              if (!((HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$14
              }
              if (!(((HEAPU8[($3_1 + 60 | 0) >> 0] | 0) & 255 | 0 | 0) == (6 | 0) & 1 | 0)) {
               break label$14
              }
              HEAP32[($3_1 + 44 | 0) >> 2] = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
              HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
              $17($4_1 | 0, HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0);
             }
             break label$3;
            }
            HEAP32[($3_1 + 36 | 0) >> 2] = $3_1 + 48 | 0;
            HEAP8[($3_1 + 35 | 0) >> 0] = +Math_fround(HEAPF32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 32 | 0) >> 2]) < +(0 | 0) & 1 | 0;
            $21($4_1 | 0, (HEAPU8[($3_1 + 35 | 0) >> 0] | 0) & 1 | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 80 | 0) >> 2] | 0 | 0);
            break label$3;
           }
           HEAP32[($3_1 + 28 | 0) >> 2] = $3_1 + 48 | 0;
           HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
           HEAP32[($4_1 + 80 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
           label$15 : {
            if (!((HEAPU8[($4_1 + 64 | 0) >> 0] | 0) & 1 | 0)) {
             break label$15
            }
            if ((HEAPU8[($4_1 + 84 | 0) >> 0] | 0) & 1 | 0) {
             break label$15
            }
            if ((HEAPU8[($4_1 + 112 | 0) >> 0] | 0) & 1 | 0) {
             break label$15
            }
            $25($4_1 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 80 | 0) >> 2] | 0 | 0);
           }
           break label$3;
          }
          HEAP32[($3_1 + 24 | 0) >> 2] = $3_1 + 48 | 0;
          label$16 : {
           if (!(((HEAPU8[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 255 | 0 | 0) == (1 | 0) & 1 | 0)) {
            break label$16
           }
           if ((HEAPU8[($4_1 + 84 | 0) >> 0] | 0) & 1 | 0) {
            break label$16
           }
           if ((HEAPU8[($4_1 + 112 | 0) >> 0] | 0) & 1 | 0) {
            break label$16
           }
           HEAP8[($4_1 + 64 | 0) >> 0] = 1;
           HEAP32[($4_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
           HEAP32[($4_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
           $30($4_1 | 0);
          }
          break label$3;
         }
         HEAP32[($3_1 + 20 | 0) >> 2] = $3_1 + 48 | 0;
         label$17 : {
          if (!(((HEAPU8[((HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 255 | 0 | 0) == (1 | 0) & 1 | 0)) {
           break label$17
          }
          HEAP8[($4_1 + 64 | 0) >> 0] = 0;
         }
         break label$3;
        }
        label$18 : {
         if (!((HEAPU8[($4_1 + 84 | 0) >> 0] | 0) & 1 | 0)) {
          break label$18
         }
         HEAP32[($3_1 + 16 | 0) >> 2] = $3_1 + 48 | 0;
         i64toi32_i32$2 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
         $174_1 = i64toi32_i32$0;
         $174$hi = i64toi32_i32$1;
         i64toi32_i32$2 = $4_1;
         i64toi32_i32$1 = HEAP32[($4_1 + 96 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($4_1 + 100 | 0) >> 2] | 0;
         $175$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $174$hi;
         i64toi32_i32$0 = $175$hi;
         $445_1 = i64toi32_i32$1;
         i64toi32_i32$0 = $174$hi;
         i64toi32_i32$2 = $174_1;
         i64toi32_i32$1 = $175$hi;
         i64toi32_i32$3 = $445_1;
         label$19 : {
          if (!(((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) & 1 | 0)) {
           break label$19
          }
          $28($4_1 | 0, Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 24 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 28 | 0) >> 2])));
         }
        }
        break label$3;
       }
       label$20 : {
        if ((HEAPU8[($4_1 + 112 | 0) >> 0] | 0) & 1 | 0) {
         break label$20
        }
        label$21 : {
         label$22 : {
          if (!((HEAPU8[($4_1 + 84 | 0) >> 0] | 0) & 1 | 0)) {
           break label$22
          }
          HEAP8[($4_1 + 84 | 0) >> 0] = 0;
          break label$21;
         }
         HEAP32[($3_1 + 12 | 0) >> 2] = $3_1 + 48 | 0;
         HEAP8[($4_1 + 84 | 0) >> 0] = 1;
         HEAPF32[($4_1 + 88 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2]);
         HEAPF32[($4_1 + 92 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2]);
         i64toi32_i32$3 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
         $503_1 = i64toi32_i32$2;
         i64toi32_i32$2 = $4_1;
         HEAP32[($4_1 + 96 | 0) >> 2] = $503_1;
         HEAP32[($4_1 + 100 | 0) >> 2] = i64toi32_i32$0;
         $30($4_1 | 0);
        }
       }
       break label$3;
      }
      HEAP32[($3_1 + 8 | 0) >> 2] = $3_1 + 48 | 0;
      label$23 : {
       if (!(((HEAPU16[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 32 | 0) >> 1] | 0) & 65535 | 0 | 0) == (2 | 0) & 1 | 0)) {
        break label$23
       }
       if (!(Math_fround($31(Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2])))) >= Math_fround(HEAPF32[($4_1 + 104 | 0) >> 2]) & 1 | 0)) {
        break label$23
       }
       HEAP8[($4_1 + 112 | 0) >> 0] = 1;
       HEAP8[($4_1 + 84 | 0) >> 0] = 0;
       HEAP8[($4_1 + 64 | 0) >> 0] = 0;
       $24($4_1 | 0, Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 28 | 0) >> 2])));
      }
      break label$3;
     }
     HEAP8[($4_1 + 84 | 0) >> 0] = 0;
     HEAP8[($4_1 + 112 | 0) >> 0] = 0;
    }
    continue label$2;
   };
  }
  global$0 = $3_1 + 112 | 0;
  return;
 }
 
 function $30($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = $4_1 + 36 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $27_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + 28 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $27_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return;
 }
 
 function $31($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(Math_abs(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
 }
 
 function $32($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP8[($3_1 + 11 | 0) >> 0] = (HEAPU8[$4_1 >> 0] | 0) & 1 | 0;
  HEAP8[$4_1 >> 0] = 0;
  return (HEAPU8[($3_1 + 11 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $33($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $89_1 = 0, $108_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   HEAP8[($6_1 + 1 | 0) >> 0] = 1;
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   $89_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $6_1 + 4 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $89_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0);
   HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
   i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   $108_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $6_1 + 12 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $108_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $34($6_1 | 0, Math_fround(Math_fround(Math_fround(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) / Math_fround(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0))));
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $34($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($5_1 + 48 | 0) >> 2] = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  HEAP8[$5_1 >> 0] = 1;
  return;
 }
 
 function $35($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $18_1 = Math_fround(0);
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAPF32[$6_1 >> 2] = $3_1;
  $18_1 = Math_fround(HEAPF32[($37($6_1 + 4 | 0 | 0, $36($6_1 + 8 | 0 | 0, $6_1 | 0) | 0 | 0) | 0) >> 2]);
  global$0 = $6_1 + 16 | 0;
  return Math_fround($18_1);
 }
 
 function $36($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $39(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $37($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $38(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $38($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($45($4_1 + 15 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $39($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($45($4_1 + 15 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $40($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAPF32[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]) - Math_fround(.5)) * Math_fround(2.0));
  HEAPF32[(HEAP32[($7_1 + 12 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2])) - Math_fround(.5)) * Math_fround(2.0));
  return;
 }
 
 function $41($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  $40($8_1 | 0, Math_fround(Math_fround(Math_fround(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) / Math_fround(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(Math_fround(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) / Math_fround(HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0))), HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $42($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAPF32[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]) / Math_fround(HEAPF32[($8_1 + 44 | 0) >> 2])) - Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]));
  HEAPF32[(HEAP32[($7_1 + 12 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]) / Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2])) / Math_fround(HEAPF32[($8_1 + 44 | 0) >> 2])) - Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]));
  return;
 }
 
 function $43($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  $41($8_1 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, $7_1 + 8 | 0 | 0, $7_1 + 4 | 0 | 0);
  $42($8_1 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2])), HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $44($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAPF32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  $40($8_1 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2])), $7_1 + 8 | 0 | 0, $7_1 + 4 | 0 | 0);
  $42($8_1 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2])), HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $45($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return Math_fround(HEAPF32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2]) < Math_fround(HEAPF32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2]) & 1 | 0 | 0;
 }
 
 function $46($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(0 + 126e3 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(0 + 126e3 | 0) >> 2] | 0;
  $1055(83097 | 0, $5_1 | 0) | 0;
  $47(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1013(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $47($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $64_1 = 0, $41_1 = 0, $47_1 = 0, $53_1 = 0, $59_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0)) {
     break label$2
    }
    fimport$27(1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $48((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 48 | 0 | 0) | 0;
   label$3 : {
    label$4 : while (1) {
     HEAP32[($3_1 + 4 | 0) >> 2] = $49((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 48 | 0 | 0) | 0;
     if (!(($50($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) & 1 | 0)) {
      break label$3
     }
     fimport$28(1 | 0, ($51($3_1 + 8 | 0 | 0) | 0) + 12 | 0 | 0);
     $52($3_1 + 8 | 0 | 0) | 0;
     continue label$4;
    };
   }
   $41_1 = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
   label$5 : {
    if (($41_1 | 0) == (0 | 0) & 1 | 0) {
     break label$5
    }
    $1198($41_1 | 0);
   }
   $47_1 = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0;
   label$6 : {
    if (($47_1 | 0) == (0 | 0) & 1 | 0) {
     break label$6
    }
    $1198($47_1 | 0);
   }
   $53_1 = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
   label$7 : {
    if (($53_1 | 0) == (0 | 0) & 1 | 0) {
     break label$7
    }
    $1198($53_1 | 0);
   }
   $59_1 = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
   label$8 : {
    if (($59_1 | 0) == (0 | 0) & 1 | 0) {
     break label$8
    }
    $1198($59_1 | 0);
   }
   $64_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   label$9 : {
    if (($64_1 | 0) == (0 | 0) & 1 | 0) {
     break label$9
    }
    $53($64_1 | 0) | 0;
    $1196($64_1 | 0);
   }
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $48($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $79(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $69($3_1 + 12 | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $49($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $73(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $69($3_1 + 12 | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $50($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = ($80(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $51($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $78($77($76(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $52($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $81($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $53($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $82($4_1 + 48 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $54($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $322_1 = 0, $466_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $314_1 = 0, $461_1 = 0, $956$hi = 0, $961$hi = 0, $475_1 = 0, $481_1 = 0, $494_1 = 0, $497_1 = 0, $703_1 = 0, $18_1 = 0, $954$hi = 0, $955$hi = 0, $957$hi = 0, $50_1 = 0, $959$hi = 0, $960$hi = 0, $962$hi = 0, $51_1 = 0, $1042_1 = 0.0, $346_1 = 0, $362_1 = 0, $378_1 = 0, $387_1 = 0, $396_1 = 0, $405_1 = 0, $421_1 = 0, $437_1 = 0, $629_1 = 0, $1034_1 = Math_fround(0), $630_1 = 0, $775_1 = 0, $781_1 = 0, $834_1 = 0, $871_1 = 0, $944_1 = 0, $956_1 = 0, $216_1 = 0, $961_1 = 0, $288_1 = 0, $713_1 = 0, $788_1 = 0, $878_1 = 0, $951_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 136 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 132 | 0) >> 2] = 0;
  HEAP32[($3_1 + 128 | 0) >> 2] = $1024(HEAP32[($3_1 + 136 | 0) >> 2] | 0 | 0, 74381 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    $46(78375 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 140 | 0) >> 2] = 0;
    break label$1;
   }
   $18_1 = $1192(68 | 0) | 0;
   $55($18_1 | 0) | 0;
   HEAP32[($3_1 + 132 | 0) >> 2] = $18_1;
   label$3 : {
    if (!((HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$3
    }
    $46(78291 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 140 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 32 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 36 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 44 | 0) >> 2] = 0;
   HEAP32[($3_1 + 120 | 0) >> 2] = $1027($3_1 + 124 | 0 | 0, 1 | 0, 4 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     if ((HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) != (4 | 0) & 1 | 0) {
      break label$5
     }
     if (!($1085($3_1 + 124 | 0 | 0, 72026 | 0, 4 | 0) | 0)) {
      break label$4
     }
    }
    $46(78306 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 140 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 120 | 0) >> 2] = $1027($3_1 + 116 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0) | 0;
   label$6 : {
    label$7 : {
     if (!((HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$7
     }
     if (!((HEAP32[($3_1 + 116 | 0) >> 2] | 0 | 0) == (305419896 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[($3_1 + 112 | 0) >> 2] = 0;
     break label$6;
    }
    label$8 : {
     label$9 : {
      if (!((HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$9
      }
      if (!((HEAP32[($3_1 + 116 | 0) >> 2] | 0 | 0) == (2018915346 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[($3_1 + 112 | 0) >> 2] = 1;
      break label$8;
     }
     $46(78306 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
     HEAP32[($3_1 + 140 | 0) >> 2] = 0;
     break label$1;
    }
   }
   HEAP32[($3_1 + 120 | 0) >> 2] = $1027($3_1 + 108 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0) | 0;
   label$10 : {
    if (!((HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$10
    }
    $46(78331 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 140 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 120 | 0) >> 2] = $1027((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 4 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0) | 0;
   label$11 : {
    if (!((HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$11
    }
    $46(78331 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 140 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 120 | 0) >> 2] = $1027((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 8 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0) | 0;
   label$12 : {
    if (!((HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$12
    }
    $46(78331 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 140 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 120 | 0) >> 2] = $1027((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 12 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0) | 0;
   label$13 : {
    if (!((HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$13
    }
    $46(78331 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 140 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 120 | 0) >> 2] = $1027((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 16 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0) | 0;
   label$14 : {
    if (!((HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$14
    }
    $46(78331 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 140 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 120 | 0) >> 2] = $1027((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 20 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0) | 0;
   label$15 : {
    if (!((HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$15
    }
    $46(78331 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 140 | 0) >> 2] = 0;
    break label$1;
   }
   label$16 : {
    if (!(HEAP32[($3_1 + 112 | 0) >> 2] | 0)) {
     break label$16
    }
    $56($3_1 + 108 | 0 | 0);
    $56((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 4 | 0 | 0);
    $56((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 8 | 0 | 0);
    $56((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 12 | 0 | 0);
    $56((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 16 | 0 | 0);
    $56((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 20 | 0 | 0);
   }
   i64toi32_i32$0 = 0;
   $954$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $955$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $954$hi;
   i64toi32_i32$0 = $955$hi;
   i64toi32_i32$0 = $954$hi;
   i64toi32_i32$1 = $955$hi;
   i64toi32_i32$1 = __wasm_i64_mul(HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0, i64toi32_i32$0 | 0, 12 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $956_1 = i64toi32_i32$1;
   $956$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $957$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $956$hi;
   i64toi32_i32$0 = $957$hi;
   i64toi32_i32$0 = $956$hi;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = $957$hi;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $50_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $50_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   i64toi32_i32$1 = $956$hi;
   $216_1 = $1195((($50_1 | 0) != (0 | 0) & 1 | 0 ? -1 : $956_1) | 0) | 0;
   HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 36 | 0) >> 2] = $216_1;
   label$17 : {
    if (!((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$17
    }
    $46(78291 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 140 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 120 | 0) >> 2] = $1027(HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0, 12 | 0, HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0) | 0;
   label$18 : {
    if (!((HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$18
    }
    $46(78331 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 140 | 0) >> 2] = 0;
    break label$1;
   }
   label$19 : {
    if (!(HEAP32[($3_1 + 112 | 0) >> 2] | 0)) {
     break label$19
    }
    HEAP32[($3_1 + 104 | 0) >> 2] = 0;
    label$20 : {
     label$21 : while (1) {
      if (!((HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$20
      }
      $57((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 104 | 0) >> 2] | 0, 12) | 0 | 0);
      $57(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 104 | 0) >> 2] | 0, 12) | 0) + 8 | 0 | 0);
      $57(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 104 | 0) >> 2] | 0, 12) | 0) + 10 | 0 | 0);
      HEAP32[($3_1 + 104 | 0) >> 2] = (HEAP32[($3_1 + 104 | 0) >> 2] | 0) + 1 | 0;
      continue label$21;
     };
    }
   }
   i64toi32_i32$1 = 0;
   $959$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   $960$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $959$hi;
   i64toi32_i32$1 = $960$hi;
   i64toi32_i32$1 = $959$hi;
   i64toi32_i32$2 = $960$hi;
   i64toi32_i32$2 = __wasm_i64_mul(HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0, 132 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $961_1 = i64toi32_i32$2;
   $961$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   $962$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $961$hi;
   i64toi32_i32$1 = $962$hi;
   i64toi32_i32$1 = $961$hi;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = $962$hi;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $51_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $51_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   i64toi32_i32$2 = $961$hi;
   $288_1 = $1195((($51_1 | 0) != (0 | 0) & 1 | 0 ? -1 : $961_1) | 0) | 0;
   HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] = $288_1;
   label$22 : {
    if (!((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$22
    }
    $46(78291 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 140 | 0) >> 2] = 0;
    break label$1;
   }
   HEAPF32[($3_1 + 100 | 0) >> 2] = Math_fround(HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   HEAPF32[($3_1 + 96 | 0) >> 2] = Math_fround(HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
   $1042_1 = .5;
   HEAPF32[($3_1 + 92 | 0) >> 2] = Math_fround($1042_1 / +Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2]));
   HEAPF32[($3_1 + 88 | 0) >> 2] = Math_fround($1042_1 / +Math_fround(HEAPF32[($3_1 + 96 | 0) >> 2]));
   HEAP32[($3_1 + 84 | 0) >> 2] = 0;
   label$23 : {
    label$24 : while (1) {
     if (!((HEAP32[($3_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$23
     }
     $314_1 = 12;
     HEAP32[($3_1 + 80 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $314_1) | 0;
     $322_1 = 132;
     HEAPF32[((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAP16[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 8 | 0) >> 1] | 0 | 0) / Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2]));
     HEAPF32[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAP16[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 10 | 0) >> 1] | 0 | 0) / Math_fround(HEAPF32[($3_1 + 96 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2]));
     HEAP16[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 8 | 0) >> 1] = HEAP8[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0;
     HEAP16[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 10 | 0) >> 1] = HEAP8[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0;
     $346_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
     HEAPF32[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround((HEAP16[($346_1 + 8 | 0) >> 1] | 0) + (HEAPU8[($346_1 + 2 | 0) >> 0] | 0) | 0 | 0) / Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2]));
     HEAPF32[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAP16[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 10 | 0) >> 1] | 0 | 0) / Math_fround(HEAPF32[($3_1 + 96 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2]));
     $362_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
     HEAP16[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 20 | 0) >> 1] = (HEAP8[($362_1 + 4 | 0) >> 0] | 0) + (HEAPU8[($362_1 + 2 | 0) >> 0] | 0) | 0;
     HEAP16[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 22 | 0) >> 1] = HEAP8[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0;
     $378_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
     HEAPF32[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround((HEAP16[($378_1 + 8 | 0) >> 1] | 0) + (HEAPU8[($378_1 + 2 | 0) >> 0] | 0) | 0 | 0) / Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2]));
     $387_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
     HEAPF32[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround((HEAP16[($387_1 + 10 | 0) >> 1] | 0) + (HEAPU8[($387_1 + 3 | 0) >> 0] | 0) | 0 | 0) / Math_fround(HEAPF32[($3_1 + 96 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2]));
     $396_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
     HEAP16[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 32 | 0) >> 1] = (HEAP8[($396_1 + 4 | 0) >> 0] | 0) + (HEAPU8[($396_1 + 2 | 0) >> 0] | 0) | 0;
     $405_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
     HEAP16[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 34 | 0) >> 1] = (HEAP8[($405_1 + 5 | 0) >> 0] | 0) + (HEAPU8[($405_1 + 3 | 0) >> 0] | 0) | 0;
     HEAPF32[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAP16[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 8 | 0) >> 1] | 0 | 0) / Math_fround(HEAPF32[($3_1 + 100 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2]));
     $421_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
     HEAPF32[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround((HEAP16[($421_1 + 10 | 0) >> 1] | 0) + (HEAPU8[($421_1 + 3 | 0) >> 0] | 0) | 0 | 0) / Math_fround(HEAPF32[($3_1 + 96 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2]));
     HEAP16[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 44 | 0) >> 1] = HEAP8[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0;
     $437_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
     HEAP16[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 46 | 0) >> 1] = (HEAP8[($437_1 + 5 | 0) >> 0] | 0) + (HEAPU8[($437_1 + 3 | 0) >> 0] | 0) | 0;
     HEAPF32[(((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0) + 48 | 0) >> 2] = Math_fround(HEAP8[((HEAP32[($3_1 + 80 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0 | 0);
     HEAP32[($3_1 + 76 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, $322_1) | 0;
     HEAP32[($3_1 + 72 | 0) >> 2] = (HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 52 | 0;
     $461_1 = 0;
     HEAP32[($3_1 + 68 | 0) >> 2] = $461_1;
     $466_1 = 2;
     HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) | 0) >> 2] = Math_fround(HEAP16[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 44 | 0) >> 1] | 0 | 0);
     $475_1 = 4;
     HEAPF32[((((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) + $475_1 | 0) >> 2] = Math_fround(HEAP16[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 46 | 0) >> 1] | 0 | 0);
     $481_1 = 8;
     HEAP32[((((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) + $481_1 | 0) >> 2] = $461_1;
     HEAPF32[((((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) + $314_1 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 36 | 0) >> 2]);
     $494_1 = 16;
     HEAPF32[((((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) + $494_1 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 40 | 0) >> 2]);
     $497_1 = 5;
     HEAP32[($3_1 + 68 | 0) >> 2] = (HEAP32[($3_1 + 68 | 0) >> 2] | 0) + $497_1 | 0;
     HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) | 0) >> 2] = Math_fround(HEAP16[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 32 | 0) >> 1] | 0 | 0);
     HEAPF32[((((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) + $475_1 | 0) >> 2] = Math_fround(HEAP16[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 34 | 0) >> 1] | 0 | 0);
     HEAP32[((((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) + $481_1 | 0) >> 2] = $461_1;
     HEAPF32[((((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) + $314_1 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 24 | 0) >> 2]);
     HEAPF32[((((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) + $494_1 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 28 | 0) >> 2]);
     HEAP32[($3_1 + 68 | 0) >> 2] = (HEAP32[($3_1 + 68 | 0) >> 2] | 0) + $497_1 | 0;
     HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) | 0) >> 2] = Math_fround(HEAP16[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 1] | 0 | 0);
     HEAPF32[((((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) + $475_1 | 0) >> 2] = Math_fround(HEAP16[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 10 | 0) >> 1] | 0 | 0);
     HEAP32[((((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) + $481_1 | 0) >> 2] = $461_1;
     HEAPF32[((((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) + $314_1 | 0) >> 2] = Math_fround(HEAPF32[(HEAP32[($3_1 + 76 | 0) >> 2] | 0) >> 2]);
     HEAPF32[((((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) + $494_1 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 4 | 0) >> 2]);
     HEAP32[($3_1 + 68 | 0) >> 2] = (HEAP32[($3_1 + 68 | 0) >> 2] | 0) + $497_1 | 0;
     HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 68 | 0) >> 2] | 0) << $466_1 | 0) | 0) >> 2] = Math_fround(HEAP16[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 20 | 0) >> 1] | 0 | 0);
     HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAP16[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 22 | 0) >> 1] | 0 | 0);
     HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 2 | 0) << 2 | 0) | 0) >> 2] = Math_fround(0 | 0);
     HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 3 | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 12 | 0) >> 2]);
     HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 4 | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2]);
     HEAPF32[($3_1 + 64 | 0) >> 2] = Math_fround(HEAPF32[(HEAP32[($3_1 + 72 | 0) >> 2] | 0) >> 2]);
     HEAP32[($3_1 + 60 | 0) >> 2] = 1;
     label$25 : {
      label$26 : while (1) {
       if (!((HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
        break label$25
       }
       label$27 : {
        if (!(Math_fround(HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + (Math_imul(HEAP32[($3_1 + 60 | 0) >> 2] | 0, 5) << 2 | 0) | 0) >> 2]) < Math_fround(HEAPF32[($3_1 + 64 | 0) >> 2]) & 1 | 0)) {
         break label$27
        }
        HEAPF32[($3_1 + 64 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3_1 + 72 | 0) >> 2] | 0) + (Math_imul(HEAP32[($3_1 + 60 | 0) >> 2] | 0, 5) << 2 | 0) | 0) >> 2]);
       }
       HEAP32[($3_1 + 60 | 0) >> 2] = (HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 1 | 0;
       continue label$26;
      };
     }
     $629_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
     $1034_1 = Math_fround(-Math_fround(HEAPF32[($3_1 + 64 | 0) >> 2]));
     HEAPF32[($629_1 + 48 | 0) >> 2] = Math_fround(Math_fround($1034_1 + $1034_1) + Math_fround(HEAPF32[($629_1 + 48 | 0) >> 2]));
     HEAPF32[($3_1 + 56 | 0) >> 2] = Math_fround(3.0);
     $630_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
     HEAPF32[($630_1 + 48 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($630_1 + 48 | 0) >> 2]) + Math_fround(3.0));
     HEAP32[($3_1 + 84 | 0) >> 2] = (HEAP32[($3_1 + 84 | 0) >> 2] | 0) + 1 | 0;
     continue label$24;
    };
   }
   HEAP32[($3_1 + 52 | 0) >> 2] = (HEAPU16[(HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) >> 1] | 0) & 65535 | 0;
   HEAP32[($3_1 + 48 | 0) >> 2] = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
   HEAP32[($3_1 + 44 | 0) >> 2] = 1;
   label$28 : {
    label$29 : while (1) {
     if (!((HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$28
     }
     label$30 : {
      if (!(((HEAPU16[((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 44 | 0) >> 2] | 0, 12) | 0) >> 1] | 0) & 65535 | 0 | 0) < (HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$30
      }
      HEAP32[($3_1 + 52 | 0) >> 2] = (HEAPU16[((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 44 | 0) >> 2] | 0, 12) | 0) >> 1] | 0) & 65535 | 0;
     }
     label$31 : {
      if (!(((HEAPU16[((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 44 | 0) >> 2] | 0, 12) | 0) >> 1] | 0) & 65535 | 0 | 0) > (HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$31
      }
      HEAP32[($3_1 + 48 | 0) >> 2] = (HEAPU16[((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 44 | 0) >> 2] | 0, 12) | 0) >> 1] | 0) & 65535 | 0;
     }
     HEAP32[($3_1 + 44 | 0) >> 2] = (HEAP32[($3_1 + 44 | 0) >> 2] | 0) + 1 | 0;
     continue label$29;
    };
   }
   HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 28 | 0) >> 2] = ((HEAP32[($3_1 + 48 | 0) >> 2] | 0) - (HEAP32[($3_1 + 52 | 0) >> 2] | 0) | 0) + 1 | 0;
   $703_1 = HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
   $713_1 = $1195((($703_1 & 1073741823 | 0 | 0) != ($703_1 | 0) & 1 | 0 ? -1 : $703_1 << 2 | 0) | 0) | 0;
   HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 44 | 0) >> 2] = $713_1;
   label$32 : {
    if (!((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$32
    }
    $46(78291 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 140 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = 0;
   label$33 : {
    label$34 : while (1) {
     if (!((HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$33
     }
     HEAP32[((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
     HEAP32[($3_1 + 40 | 0) >> 2] = (HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 1 | 0;
     continue label$34;
    };
   }
   HEAP32[($3_1 + 36 | 0) >> 2] = 0;
   label$35 : {
    label$36 : while (1) {
     if (!((HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$35
     }
     HEAP32[((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((((HEAPU16[((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 36 | 0) >> 2] | 0, 12) | 0) >> 1] | 0) & 65535 | 0) - (HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 36 | 0) >> 2] | 0, 132) | 0;
     HEAP32[($3_1 + 36 | 0) >> 2] = (HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$36;
    };
   }
   $775_1 = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
   label$37 : {
    label$38 : {
     switch ($775_1 | 0) {
     case 0:
      $781_1 = Math_imul(HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0);
      $788_1 = $1195((($781_1 | 0) < (0 | 0) & 1 | 0 ? -1 : $781_1) | 0) | 0;
      HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 32 | 0) >> 2] = $788_1;
      label$40 : {
       if (!((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
        break label$40
       }
       $46(78291 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
       HEAP32[($3_1 + 140 | 0) >> 2] = 0;
       break label$1;
      }
      HEAP32[($3_1 + 120 | 0) >> 2] = $1027(HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0, 1 | 0, Math_imul(HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0) | 0;
      label$41 : {
       if (!((HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) != (Math_imul(HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0) & 1 | 0)) {
        break label$41
       }
       $46(78331 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
       HEAP32[($3_1 + 140 | 0) >> 2] = 0;
       break label$1;
      }
      break label$37;
     case 1:
      break label$38;
     default:
      break label$37;
     };
    }
    HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 24 | 0) >> 2] = ((HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 7 | 0) >> 3 | 0;
    $834_1 = Math_imul(HEAP32[($3_1 + 24 | 0) >> 2] | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0);
    HEAP32[($3_1 + 20 | 0) >> 2] = $1195((($834_1 | 0) < (0 | 0) & 1 | 0 ? -1 : $834_1) | 0) | 0;
    label$42 : {
     if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$42
     }
     $46(78291 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
     HEAP32[($3_1 + 140 | 0) >> 2] = 0;
     break label$1;
    }
    HEAP32[($3_1 + 120 | 0) >> 2] = $1027(HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, 1 | 0, Math_imul(HEAP32[($3_1 + 24 | 0) >> 2] | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0) | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0) | 0;
    label$43 : {
     if (!((HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) != (Math_imul(HEAP32[($3_1 + 24 | 0) >> 2] | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0) | 0) & 1 | 0)) {
      break label$43
     }
     $46(78331 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
     HEAP32[($3_1 + 140 | 0) >> 2] = 0;
     break label$1;
    }
    $871_1 = Math_imul(HEAP32[($3_1 + 32 | 0) >> 2] | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0);
    $878_1 = $1195((($871_1 | 0) < (0 | 0) & 1 | 0 ? -1 : $871_1) | 0) | 0;
    HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 32 | 0) >> 2] = $878_1;
    label$44 : {
     if (!((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$44
     }
     $46(78291 | 0, HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0);
     HEAP32[($3_1 + 140 | 0) >> 2] = 0;
     break label$1;
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = 0;
    label$45 : {
     label$46 : while (1) {
      if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$45
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 0;
      label$47 : {
       label$48 : while (1) {
        if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$47
        }
        label$49 : {
         label$50 : {
          if (!(((HEAPU8[((HEAP32[($3_1 + 20 | 0) >> 2] | 0) + (Math_imul(HEAP32[($3_1 + 16 | 0) >> 2] | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 3 | 0) | 0) | 0) >> 0] | 0) & 255 | 0) & (1 << ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 7 | 0) | 0) | 0)) {
           break label$50
          }
          HEAP8[((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + (Math_imul(HEAP32[($3_1 + 16 | 0) >> 2] | 0, HEAP32[($3_1 + 32 | 0) >> 2] | 0) + (HEAP32[($3_1 + 12 | 0) >> 2] | 0) | 0) | 0) >> 0] = 255;
          break label$49;
         }
         HEAP8[((HEAP32[((HEAP32[($3_1 + 132 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + (Math_imul(HEAP32[($3_1 + 16 | 0) >> 2] | 0, HEAP32[($3_1 + 32 | 0) >> 2] | 0) + (HEAP32[($3_1 + 12 | 0) >> 2] | 0) | 0) | 0) >> 0] = 0;
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
        continue label$48;
       };
      }
      HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      continue label$46;
     };
    }
    $944_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    label$51 : {
     if (($944_1 | 0) == (0 | 0) & 1 | 0) {
      break label$51
     }
     $1198($944_1 | 0);
    }
   }
   $1013(HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($3_1 + 140 | 0) >> 2] = HEAP32[($3_1 + 132 | 0) >> 2] | 0;
  }
  $951_1 = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
  global$0 = $3_1 + 144 | 0;
  return $951_1 | 0;
 }
 
 function $55($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $58($4_1 + 48 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $56($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP8[($3_1 + 7 | 0) >> 0] = HEAPU8[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 0] | 0;
  HEAP8[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 0] = HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 3 | 0) >> 0] | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 3 | 0) >> 0] = HEAPU8[($3_1 + 7 | 0) >> 0] | 0;
  HEAP8[($3_1 + 7 | 0) >> 0] = HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] = HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 2 | 0) >> 0] = HEAPU8[($3_1 + 7 | 0) >> 0] | 0;
  return;
 }
 
 function $57($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP8[($3_1 + 7 | 0) >> 0] = HEAPU8[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 0] | 0;
  HEAP8[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 0] = HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] = HEAPU8[($3_1 + 7 | 0) >> 0] | 0;
  return;
 }
 
 function $58($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $83($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $59($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $23_1 = 0, $24_1 = 0, $27_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (HEAP32[($4_1 + 8 | 0) >> 2] | 0) {
      break label$3
     }
     fimport$29(1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
     break label$2;
    }
    HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   }
  }
  fimport$30(3553 | 0, HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 4 | 0) >> 2] = 6406;
  $23_1 = 0;
  $24_1 = 6406;
  fimport$31(3553 | 0, $23_1 | 0, $24_1 | 0, HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, $23_1 | 0, $24_1 | 0, 5121 | 0, HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0);
  $27_1 = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $27_1 | 0;
 }
 
 function $60($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $97_1 = 0, $103_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) >= (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < ((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] | 0;
    label$3 : {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     break label$1;
    }
    label$4 : {
     if (!($1039(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0)) {
      break label$4
     }
     HEAP32[($4_1 + 20 | 0) >> 2] = $1113(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
     label$5 : {
      if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) >= (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < ((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] | 0;
      break label$1;
     }
    }
    label$6 : {
     if (!($1041(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0)) {
      break label$6
     }
     HEAP32[($4_1 + 20 | 0) >> 2] = $1112(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
     label$7 : {
      if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) >= (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < ((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] | 0;
      break label$1;
     }
    }
   }
   label$8 : {
    label$9 : {
     if (!($1040(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0)) {
      break label$9
     }
     $97_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
     break label$8;
    }
    $97_1 = 32;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = $97_1;
   $1055(83288 | 0, $4_1 | 0) | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $103_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $103_1 | 0;
 }
 
 function $61($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $6_1 = 0, $62_1 = 0, $88_1 = 0, $205_1 = 0, $220_1 = 0, $242_1 = 0, $37_1 = 0, $249_1 = 0;
  $6_1 = global$0 - 160 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 156 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 152 | 0) >> 2] = $1_1;
  HEAPF32[($6_1 + 148 | 0) >> 2] = $2_1;
  HEAPF32[($6_1 + 144 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 140 | 0) >> 2] = $1083(HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!((HEAP32[($6_1 + 140 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   HEAP32[($6_1 + 136 | 0) >> 2] = 3;
   HEAP32[($6_1 + 132 | 0) >> 2] = 2;
   HEAP32[($6_1 + 128 | 0) >> 2] = 5;
   HEAP32[($6_1 + 124 | 0) >> 2] = 20;
   HEAP32[($6_1 + 120 | 0) >> 2] = 6;
   HEAP32[($6_1 + 116 | 0) >> 2] = 30;
   HEAP32[($6_1 + 112 | 0) >> 2] = Math_imul(HEAP32[($6_1 + 140 | 0) >> 2] | 0, 6);
   HEAP32[($6_1 + 108 | 0) >> 2] = Math_imul(HEAP32[($6_1 + 112 | 0) >> 2] | 0, 5);
   HEAP32[($6_1 + 104 | 0) >> 2] = Math_imul(HEAP32[($6_1 + 112 | 0) >> 2] | 0, 20);
   HEAP32[($6_1 + 100 | 0) >> 2] = 0;
   $37_1 = (HEAP32[($6_1 + 156 | 0) >> 2] | 0) + 48 | 0;
   $62($6_1 + 84 | 0 | 0, HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($6_1 + 96 | 0) >> 2] = $63($37_1 | 0, $6_1 + 84 | 0 | 0) | 0;
   $1242($6_1 + 84 | 0 | 0) | 0;
   HEAP32[($6_1 + 80 | 0) >> 2] = $49((HEAP32[($6_1 + 156 | 0) >> 2] | 0) + 48 | 0 | 0) | 0;
   label$2 : {
    label$3 : {
     if (!(($64($6_1 + 96 | 0 | 0, $6_1 + 80 | 0 | 0) | 0) & 1 | 0)) {
      break label$3
     }
     $62_1 = HEAP32[($6_1 + 108 | 0) >> 2] | 0;
     HEAP32[($6_1 + 76 | 0) >> 2] = $1195((($62_1 & 1073741823 | 0 | 0) != ($62_1 | 0) & 1 | 0 ? -1 : $62_1 << 2 | 0) | 0) | 0;
     HEAPF32[($6_1 + 72 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 148 | 0) >> 2]);
     HEAP32[($6_1 + 68 | 0) >> 2] = 0;
     label$4 : {
      label$5 : while (1) {
       if (!((HEAP32[($6_1 + 68 | 0) >> 2] | 0) >>> 0 < (HEAP32[($6_1 + 140 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$4
       }
       HEAP8[($6_1 + 67 | 0) >> 0] = HEAPU8[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + (HEAP32[($6_1 + 68 | 0) >> 2] | 0) | 0) >> 0] | 0;
       HEAP32[($6_1 + 60 | 0) >> 2] = Math_imul(HEAP32[($6_1 + 68 | 0) >> 2] | 0, 30);
       $88_1 = 24;
       HEAP32[($6_1 + 56 | 0) >> 2] = $60(HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0, ((HEAPU8[($6_1 + 67 | 0) >> 0] | 0) << $88_1 | 0) >> $88_1 | 0 | 0) | 0;
       label$6 : {
        if (!((HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$6
        }
        HEAP32[($6_1 + 52 | 0) >> 2] = 0;
        label$7 : {
         label$8 : while (1) {
          if (!((HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) < (3 | 0) & 1 | 0)) {
           break label$7
          }
          HEAP32[($6_1 + 48 | 0) >> 2] = 0;
          label$9 : {
           label$10 : while (1) {
            if (!((HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
             break label$9
            }
            HEAPF32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + (((Math_imul(Math_imul(HEAP32[($6_1 + 68 | 0) >> 2] | 0, 5), 6) + Math_imul(HEAP32[($6_1 + 52 | 0) >> 2] | 0, 5) | 0) + (HEAP32[($6_1 + 48 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[(((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 52 | 0) + ((Math_imul(HEAP32[($6_1 + 52 | 0) >> 2] | 0, 5) + (HEAP32[($6_1 + 48 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2]);
            HEAP32[($6_1 + 48 | 0) >> 2] = (HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 1 | 0;
            continue label$10;
           };
          }
          HEAP32[($6_1 + 52 | 0) >> 2] = (HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 1 | 0;
          continue label$8;
         };
        }
        HEAP32[($6_1 + 44 | 0) >> 2] = 3;
        label$11 : {
         label$12 : while (1) {
          if (!((HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) < (6 | 0) & 1 | 0)) {
           break label$11
          }
          HEAP32[($6_1 + 40 | 0) >> 2] = 0;
          label$13 : {
           label$14 : while (1) {
            if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
             break label$13
            }
            HEAPF32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + (((Math_imul(Math_imul(HEAP32[($6_1 + 68 | 0) >> 2] | 0, 5), 6) + Math_imul(HEAP32[($6_1 + 44 | 0) >> 2] | 0, 5) | 0) + (HEAP32[($6_1 + 40 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[(((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 52 | 0) + ((Math_imul((HEAP32[($6_1 + 44 | 0) >> 2] | 0) - 2 | 0, 5) + (HEAP32[($6_1 + 40 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2]);
            HEAP32[($6_1 + 40 | 0) >> 2] = (HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 1 | 0;
            continue label$14;
           };
          }
          HEAP32[($6_1 + 44 | 0) >> 2] = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 1 | 0;
          continue label$12;
         };
        }
        HEAP32[($6_1 + 36 | 0) >> 2] = 0;
        label$15 : {
         label$16 : while (1) {
          if (!((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) < (6 | 0) & 1 | 0)) {
           break label$15
          }
          $205_1 = (HEAP32[($6_1 + 76 | 0) >> 2] | 0) + ((Math_imul(Math_imul(HEAP32[($6_1 + 68 | 0) >> 2] | 0, 5), 6) + Math_imul(HEAP32[($6_1 + 36 | 0) >> 2] | 0, 5) | 0) << 2 | 0) | 0;
          HEAPF32[$205_1 >> 2] = Math_fround(Math_fround(HEAPF32[$205_1 >> 2]) + Math_fround(HEAPF32[($6_1 + 72 | 0) >> 2]));
          $220_1 = (HEAP32[($6_1 + 76 | 0) >> 2] | 0) + (((Math_imul(Math_imul(HEAP32[($6_1 + 68 | 0) >> 2] | 0, 5), 6) + Math_imul(HEAP32[($6_1 + 36 | 0) >> 2] | 0, 5) | 0) + 1 | 0) << 2 | 0) | 0;
          HEAPF32[$220_1 >> 2] = Math_fround(Math_fround(HEAPF32[$220_1 >> 2]) + Math_fround(HEAPF32[($6_1 + 144 | 0) >> 2]));
          HEAP32[($6_1 + 36 | 0) >> 2] = (HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 1 | 0;
          continue label$16;
         };
        }
        HEAPF32[($6_1 + 72 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 72 | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 48 | 0) >> 2]));
       }
       HEAP32[($6_1 + 68 | 0) >> 2] = (HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 1 | 0;
       continue label$5;
      };
     }
     fimport$13(1 | 0, $6_1 + 100 | 0 | 0);
     fimport$14(34962 | 0, HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0);
     fimport$15(34962 | 0, Math_imul(HEAP32[($6_1 + 140 | 0) >> 2] | 0, 30) << 2 | 0 | 0, HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, 35044 | 0);
     $242_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
     label$17 : {
      if (($242_1 | 0) == (0 | 0) & 1 | 0) {
       break label$17
      }
      $1198($242_1 | 0);
     }
     $249_1 = (HEAP32[($6_1 + 156 | 0) >> 2] | 0) + 48 | 0;
     $65($6_1 + 20 | 0 | 0, $6_1 + 152 | 0 | 0, $6_1 + 100 | 0 | 0) | 0;
     $66($6_1 + 12 | 0 | 0, $249_1 | 0, $6_1 + 20 | 0 | 0);
     $67($6_1 + 20 | 0 | 0) | 0;
     break label$2;
    }
    HEAP32[($6_1 + 100 | 0) >> 2] = HEAP32[(($51($6_1 + 96 | 0 | 0) | 0) + 12 | 0) >> 2] | 0;
    fimport$14(34962 | 0, HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0);
   }
   label$18 : {
    if (!(HEAP32[($6_1 + 100 | 0) >> 2] | 0)) {
     break label$18
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = 1;
    HEAP32[$6_1 >> 2] = 0;
    fimport$21(0 | 0, 3 | 0, 5126 | 0, 0 & 255 | 0 | 0, 20 | 0, HEAP32[$6_1 >> 2] | 0 | 0);
    HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) + 12 | 0;
    fimport$21(1 | 0, 2 | 0, 5126 | 0, 0 & 255 | 0 | 0, 20 | 0, HEAP32[$6_1 >> 2] | 0 | 0);
    fimport$22(4 | 0, 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0);
   }
  }
  global$0 = $6_1 + 160 | 0;
  return;
 }
 
 function $62($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $70($5_1 | 0, $4_1 + 7 | 0 | 0, $4_1 + 6 | 0 | 0) | 0;
  $1245($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $71(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $63($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = $68(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $69($4_1 + 12 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  $12_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $64($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = ($72(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $65($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $62($6_1 | 0, HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $66($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $74($5_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  $75($0_1 | 0, $5_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $67($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1242($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $68($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $30_1 = 0, $38_1 = 0, $70_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $143($142($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $144($5_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = $145(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($146($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$3 : {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
     label$4 : while (1) {
      $30_1 = 0;
      label$5 : {
       if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$5
       }
       $38_1 = 1;
       label$6 : {
        if (($147(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) == (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0) {
         break label$6
        }
        $38_1 = ($145($147(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
       }
       $30_1 = $38_1;
      }
      label$7 : {
       if (!($30_1 & 1 | 0)) {
        break label$7
       }
       label$8 : {
        if (!(($147(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) == (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$8
        }
        if (!(($149($148($5_1 | 0) | 0 | 0, $113($112(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
         break label$8
        }
        $150($4_1 + 28 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
        break label$1;
       }
       HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
       continue label$4;
      }
      break label$4;
     };
    }
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = $73($5_1 | 0) | 0;
  }
  $70_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $70_1 | 0;
 }
 
 function $69($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $70($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $183($6_1 | 0) | 0;
  $184($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $71($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $185(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $72($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $73($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $150($3_1 + 12 | 0 | 0, 0 | 0) | 0;
  $8_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $74($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $189($0_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $188(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $75($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  $69($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP8[($5_1 + 4 | 0) >> 0] = (HEAPU8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $76($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = $256($113($112(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $77($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $78($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $79($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $150($3_1 + 12 | 0 | 0, HEAP32[($108((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
  $12_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $80($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($72(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $81($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $82($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $107($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $83($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  $84($4_1 | 0) | 0;
  $85($4_1 + 8 | 0 | 0) | 0;
  HEAP32[($3_1 + 24 | 0) >> 2] = 0;
  $86($4_1 + 12 | 0 | 0, $3_1 + 24 | 0 | 0, $3_1 + 23 | 0 | 0) | 0;
  HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(1.0);
  $87($4_1 + 16 | 0 | 0, $3_1 + 16 | 0 | 0, $3_1 + 15 | 0 | 0) | 0;
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $84($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $88($4_1 | 0, $3_1 + 11 | 0 | 0, $3_1 + 10 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $85($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $89($4_1 | 0) | 0;
  $90($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $86($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $91($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $92($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $87($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $93($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $94($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $88($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $95($6_1 | 0) | 0;
  $96($6_1 + 4 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $89($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $102($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $90($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $103($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $91($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $92($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $105($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $93($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[$5_1 >> 2] = Math_fround(HEAPF32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2]);
  return $5_1 | 0;
 }
 
 function $94($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $106($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $95($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $96($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $97($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $97($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $98($4_1 | 0, $3_1 + 8 | 0 | 0, $3_1 + 7 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $98($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $91($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $99($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $99($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $100($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $100($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $101($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $101($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $102($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $103($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $104($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $104($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $105($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $106($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $107($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $109($4_1 | 0, HEAP32[($108($4_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0);
  $110($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $108($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $118(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $109($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $111(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $112(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    $115(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $114($113(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
    $116(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $117(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0);
    HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    continue label$2;
   };
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $110($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $119($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $111($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $120((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $112($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $121(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $113($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0;
 }
 
 function $114($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $77(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $115($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $122(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $116($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $123(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $117($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $124(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $118($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $119($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($129($5_1 | 0) | 0) >> 2] | 0;
  HEAP32[($129($5_1 | 0) | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $131($130($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $120($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $125(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $121($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $122($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $67(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $123($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $124($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $126(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 24) | 0, 4 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $125($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $126($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $127(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $127($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $128(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $128($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1196(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $129($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $132(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $130($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $133((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $131($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $136($134($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($135($5_1 | 0) | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $132($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $133($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $134($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $138(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $135($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $139(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $136($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $137(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $137($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $126(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $138($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $140(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $139($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $141(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $140($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $141($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $142($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $151((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $143($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $152(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $144($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $154($153(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $145($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) - 1 | 0) | 0) {
     break label$2
    }
    $15_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) & ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) - 1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$4
     }
     $22_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     break label$3;
    }
    $22_1 = ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0) % ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0) | 0;
   }
   $15_1 = $22_1;
  }
  return $15_1 | 0;
 }
 
 function $146($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (HEAP32[($155(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $147($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $148($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $156((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $149($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $12_1 = ($158(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $157(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  global$0 = $5_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $150($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $151($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $159(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $152($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $12_1 = $162($160(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, ($160(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) + ($161(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $153($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $175(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $154($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($176(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $179(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $156($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $180(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $157($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $158($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $10_1 = ($181(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  global$0 = $5_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $159($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $160($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $165($164(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $161($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($166($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $167($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $168($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $162($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $14_1 = $163($4_1 + 7 | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) - (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) << 0 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $163($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $42_1 = 0, $82_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = 1540483477;
  HEAP32[($5_1 + 12 | 0) >> 2] = 24;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0) >>> 0 >= 4 >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = $169(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = Math_imul(HEAP32[$5_1 >> 2] | 0, 1540483477);
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) ^ ((HEAP32[$5_1 >> 2] | 0) >>> 24 | 0) | 0;
    HEAP32[$5_1 >> 2] = Math_imul(HEAP32[$5_1 >> 2] | 0, 1540483477);
    HEAP32[($5_1 + 8 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 8 | 0) >> 2] | 0, 1540483477);
    HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) ^ (HEAP32[$5_1 >> 2] | 0) | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) - 4 | 0;
    continue label$2;
   };
  }
  $42_1 = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + -1 | 0;
  label$3 : {
   switch ($42_1 | 0) {
   case 2:
    HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) ^ (((HEAPU8[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0) << 16 | 0) | 0;
   case 1:
    HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) ^ (((HEAPU8[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) & 255 | 0) << 8 | 0) | 0;
   case 0:
    HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) ^ ((HEAPU8[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 8 | 0) >> 2] | 0, 1540483477);
    break;
   default:
    break label$3;
   };
  }
  HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) ^ ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 13 | 0) | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 8 | 0) >> 2] | 0, 1540483477);
  HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) ^ ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 15 | 0) | 0;
  $82_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $82_1 | 0;
 }
 
 function $164($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($166($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $170($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $171($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $165($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $166($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $16_1 = (((HEAPU8[(($172(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $167($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[(($172(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $168($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $10_1 = ((HEAPU8[(($172(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 127 | 0) & 255 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $169($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAPU8[$2_1 >> 0] | 0 | ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $170($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($172(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $171($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $173($172(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $172($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $174(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $173($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $174($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $175($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $177((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $176($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $178(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $177($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $178($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $180($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $181($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $35_1 = 0, $40_1 = 0, $63_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $161(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != ($161(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP8[($4_1 + 31 | 0) >> 0] = 0 & 1 | 0;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $160(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = $160(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    if (!(($166(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$3
    }
    HEAP8[($4_1 + 31 | 0) >> 0] = ($182(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0) == (0 | 0) & 1 | 0;
    break label$1;
   }
   label$4 : {
    label$5 : while (1) {
     if (!(HEAP32[($4_1 + 16 | 0) >> 2] | 0)) {
      break label$4
     }
     $35_1 = 24;
     $40_1 = 24;
     label$6 : {
      if (!((((HEAPU8[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $35_1 | 0) >> $35_1 | 0 | 0) != (((HEAPU8[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 0] | 0) << $40_1 | 0) >> $40_1 | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP8[($4_1 + 31 | 0) >> 0] = 0 & 1 | 0;
      break label$1;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($4_1 + 31 | 0) >> 0] = 1 & 1 | 0;
  }
  $63_1 = (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) & 1 | 0;
  global$0 = $4_1 + 32 | 0;
  return $63_1 | 0;
 }
 
 function $182($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $9_1 = $1049(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $183($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $184($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $186($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $185($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1083(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $186($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $187($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $187($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $188($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $189($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $83_1 = 0, $204_1 = Math_fround(0), $33_1 = 0, $41_1 = 0, $82_1 = 0, $97_1 = 0, $177_1 = 0, $125_1 = 0, $134_1 = 0, $136_1 = 0, $152_1 = 0, $163_1 = 0, $171_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  HEAP32[($6_1 + 48 | 0) >> 2] = $143($142($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = $144($7_1 | 0) | 0;
  HEAP8[($6_1 + 43 | 0) >> 0] = 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($6_1 + 44 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[($6_1 + 32 | 0) >> 2] = $145(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[($146($7_1 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    label$3 : {
     if (!((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
     label$4 : while (1) {
      $33_1 = 0;
      label$5 : {
       if (!((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$5
       }
       $41_1 = 1;
       label$6 : {
        if (($147(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) == (HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0) {
         break label$6
        }
        $41_1 = ($145($147(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) | 0 | 0) == (HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0);
       }
       $33_1 = $41_1;
      }
      label$7 : {
       if (!($33_1 & 1 | 0)) {
        break label$7
       }
       label$8 : {
        if (!(($147(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) == (HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$8
        }
        if (!(($149($148($7_1 | 0) | 0 | 0, $113($112(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
         break label$8
        }
        break label$1;
       }
       HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
       continue label$4;
      }
      break label$4;
     };
    }
   }
   $190($6_1 + 20 | 0 | 0, $7_1 | 0, HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0);
   label$9 : {
    label$10 : {
     if (Math_fround(((HEAP32[($191($7_1 | 0) | 0) >> 2] | 0) + 1 | 0) >>> 0) > Math_fround(Math_fround((HEAP32[($6_1 + 44 | 0) >> 2] | 0) >>> 0) * Math_fround(HEAPF32[($192($7_1 | 0) | 0) >> 2])) & 1 | 0) {
      break label$10
     }
     if (HEAP32[($6_1 + 44 | 0) >> 2] | 0) {
      break label$9
     }
    }
    $82_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $83_1 = 1;
    HEAP32[($6_1 + 16 | 0) >> 2] = $82_1 << $83_1 | 0 | (($193($82_1 | 0) | 0) ^ $83_1 | 0) | 0;
    $204_1 = Math_fround($194(Math_fround(Math_fround(Math_fround(((HEAP32[($191($7_1 | 0) | 0) >> 2] | 0) + $83_1 | 0) >>> 0) / Math_fround(HEAPF32[($192($7_1 | 0) | 0) >> 2])))));
    label$11 : {
     label$12 : {
      if (!($204_1 < Math_fround(4294967296.0) & $204_1 >= Math_fround(0.0) | 0)) {
       break label$12
      }
      $97_1 = ~~$204_1 >>> 0;
      break label$11;
     }
     $97_1 = 0;
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $97_1;
    $196($7_1 | 0, HEAP32[($195($6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0);
    HEAP32[($6_1 + 44 | 0) >> 2] = $144($7_1 | 0) | 0;
    HEAP32[($6_1 + 32 | 0) >> 2] = $145(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) | 0;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($146($7_1 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
   label$13 : {
    label$14 : {
     if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$14
     }
     HEAP32[($6_1 + 8 | 0) >> 2] = $197($108($7_1 + 8 | 0 | 0) | 0 | 0) | 0;
     $125_1 = HEAP32[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
     HEAP32[($198($6_1 + 20 | 0 | 0) | 0) >> 2] = $125_1;
     $134_1 = $197($199($6_1 + 20 | 0 | 0) | 0 | 0) | 0;
     HEAP32[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 2] = $134_1;
     $136_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     HEAP32[($146($7_1 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0) >> 2] = $136_1;
     label$15 : {
      if (!((HEAP32[($198($6_1 + 20 | 0 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$15
      }
      $152_1 = $197($199($6_1 + 20 | 0 | 0) | 0 | 0) | 0;
      HEAP32[($146($7_1 | 0, $145($147(HEAP32[($198($6_1 + 20 | 0 | 0) | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) >> 2] = $152_1;
     }
     break label$13;
    }
    $163_1 = HEAP32[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($198($6_1 + 20 | 0 | 0) | 0) >> 2] = $163_1;
    $171_1 = $199($6_1 + 20 | 0 | 0) | 0;
    HEAP32[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 2] = $171_1;
   }
   HEAP32[($6_1 + 36 | 0) >> 2] = $200($6_1 + 20 | 0 | 0) | 0;
   $177_1 = $191($7_1 | 0) | 0;
   HEAP32[$177_1 >> 2] = (HEAP32[$177_1 >> 2] | 0) + 1 | 0;
   HEAP8[($6_1 + 43 | 0) >> 0] = 1;
   $201($6_1 + 20 | 0 | 0) | 0;
  }
  $150($6_1 + 4 | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  $202($0_1 | 0, $6_1 + 4 | 0 | 0, $6_1 + 43 | 0 | 0) | 0;
  global$0 = $6_1 + 64 | 0;
  return;
 }
 
 function $190($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $14_1 = 0, $25_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $111(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  HEAP8[($6_1 + 15 | 0) >> 0] = 0 & 1 | 0;
  $14_1 = $203(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  $204($6_1 + 4 | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0;
  $205($0_1 | 0, $14_1 | 0, $6_1 + 4 | 0 | 0) | 0;
  $25_1 = $206($0_1 | 0) | 0;
  HEAP32[$6_1 >> 2] = 0;
  $207($25_1 | 0, $6_1 | 0, $6_1 + 24 | 0 | 0) | 0;
  $208(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $114($113($198($0_1 | 0) | 0 | 0) | 0 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
  HEAP8[(($209($0_1 | 0) | 0) + 4 | 0) >> 0] = 1;
  HEAP8[($6_1 + 15 | 0) >> 0] = 1 & 1 | 0;
  label$1 : {
   if ((HEAPU8[($6_1 + 15 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $201($0_1 | 0) | 0;
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $191($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $210((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $192($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $211((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $193($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $10_1 = 0;
  label$1 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 0 > 2 >>> 0 & 1 | 0)) {
    break label$1
   }
   $10_1 = ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) - 1 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0;
  }
  return $10_1 & 1 | 0 | 0;
 }
 
 function $194($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_fround(Math_fround(Math_ceil(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]))));
 }
 
 function $195($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $213(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $196($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $212(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $197($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $121(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $198($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($214(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $199($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($214(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $200($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($215($4_1 | 0) | 0) >> 2] | 0;
  HEAP32[($215($4_1 | 0) | 0) >> 2] = 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $201($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $216($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $202($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP8[($6_1 + 4 | 0) >> 0] = (HEAPU8[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0;
  return $6_1 | 0;
 }
 
 function $203($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $217(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $204($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 7 | 0) >> 0] = $2_1;
  $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP8[($7_1 + 4 | 0) >> 0] = (HEAPU8[($5_1 + 7 | 0) >> 0] | 0) & 1 | 0;
  return $7_1 | 0;
 }
 
 function $205($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $218($6_1 | 0, $5_1 + 8 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $206($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($214(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $207($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $219($7_1 | 0, 0 | 0, HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $208($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $220(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $209($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $221(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $210($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $141(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $211($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $243(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $212($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $78_1 = Math_fround(0), $84_1 = Math_fround(0), $43_1 = 0, $47_1 = 0, $56_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = 2;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) - 1 | 0) | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = $1173(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   }
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $144($5_1 | 0) | 0;
  label$4 : {
   label$5 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$5
    }
    $244($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    break label$4;
   }
   label$6 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$6
    }
    label$7 : {
     label$8 : {
      if (!(($193(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
       break label$8
      }
      $78_1 = Math_fround($194(Math_fround(Math_fround(Math_fround((HEAP32[($191($5_1 | 0) | 0) >> 2] | 0) >>> 0) / Math_fround(HEAPF32[($192($5_1 | 0) | 0) >> 2])))));
      label$9 : {
       label$10 : {
        if (!($78_1 < Math_fround(4294967296.0) & $78_1 >= Math_fround(0.0) | 0)) {
         break label$10
        }
        $43_1 = ~~$78_1 >>> 0;
        break label$9;
       }
       $43_1 = 0;
      }
      $47_1 = $245($43_1 | 0) | 0;
      break label$7;
     }
     $84_1 = Math_fround($194(Math_fround(Math_fround(Math_fround((HEAP32[($191($5_1 | 0) | 0) >> 2] | 0) >>> 0) / Math_fround(HEAPF32[($192($5_1 | 0) | 0) >> 2])))));
     label$11 : {
      label$12 : {
       if (!($84_1 < Math_fround(4294967296.0) & $84_1 >= Math_fround(0.0) | 0)) {
        break label$12
       }
       $56_1 = ~~$84_1 >>> 0;
       break label$11;
      }
      $56_1 = 0;
     }
     $47_1 = $1173($56_1 | 0) | 0;
    }
    HEAP32[$4_1 >> 2] = $47_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($195($4_1 + 8 | 0 | 0, $4_1 | 0) | 0) >> 2] | 0;
    label$13 : {
     if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$13
     }
     $244($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    }
   }
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $213($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($253($4_1 + 15 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $214($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $230(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $215($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $254(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $216($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($215($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($215($5_1 | 0) | 0) >> 2] = $8_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $255($221($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $217($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($222(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $223();
   wasm2js_trap();
  }
  $15_1 = $224(Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 24) | 0, 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $218($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $227($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $228($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $219($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $229($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $220($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $231(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $221($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $242((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $222($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $225(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $223() {
  var $1_1 = 0;
  $1_1 = $1299(4 | 0) | 0;
  $1329($1_1 | 0) | 0;
  fimport$32($1_1 | 0, 114244 | 0, 2 | 0);
  wasm2js_trap();
 }
 
 function $224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $226(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $225($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 178956970 | 0;
 }
 
 function $226($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1192(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $227($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $228($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $23_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  i64toi32_i32$2 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $229($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $230($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $231($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $232($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $232($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $19_1 = 0, $21_1 = 0, $20_1 = 0, i64toi32_i32$1 = 0, $82_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  $234($233(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  $235($5_1 | 0, $4_1 + 3 | 0 | 0, $4_1 + 2 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (($166(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $19_1 = $172(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    $20_1 = $236($5_1 | 0) | 0;
    i64toi32_i32$0 = HEAP32[$19_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($19_1 + 4 | 0) >> 2] | 0;
    $82_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $20_1;
    HEAP32[i64toi32_i32$0 >> 2] = $82_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $21_1 = 8;
    HEAP32[(i64toi32_i32$0 + $21_1 | 0) >> 2] = HEAP32[($19_1 + $21_1 | 0) >> 2] | 0;
    $237($5_1 | 0, $168($5_1 | 0) | 0 | 0);
    break label$1;
   }
   $1246($5_1 | 0, $165($170(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0, $167(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  }
  $31_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $31_1 | 0;
 }
 
 function $233($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $238(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $234($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $235($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $183($6_1 | 0) | 0;
  $239($6_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $236($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $240(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $237($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $238($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $241(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $239($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $240($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $241($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $242($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $243($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $244($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $19_1 = 0, $54_1 = 0, $83_1 = 0, $95_1 = 0, $97_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = $134($246($5_1 | 0) | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 40 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$2
    }
    $16_1 = $247(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $16_1 = 0;
  }
  $248($5_1 | 0, $16_1 | 0);
  $19_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  HEAP32[($135($246($5_1 | 0) | 0 | 0) | 0) >> 2] = $19_1;
  label$3 : {
   if (!((HEAP32[($4_1 + 40 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$3
   }
   HEAP32[($4_1 + 32 | 0) >> 2] = 0;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 40 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$4
     }
     HEAP32[($146($5_1 | 0, HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0) >> 2] = 0;
     HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = $197($108($5_1 + 8 | 0 | 0) | 0 | 0) | 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
   label$6 : {
    if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($4_1 + 20 | 0) >> 2] = $145($147(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0;
    $54_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP32[($146($5_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] = $54_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
    label$7 : {
     label$8 : while (1) {
      if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[($4_1 + 20 | 0) >> 2] = $145($147(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0;
      label$9 : {
       label$10 : {
        if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$10
        }
        HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
        break label$9;
       }
       label$11 : {
        label$12 : {
         if (!((HEAP32[($146($5_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
          break label$12
         }
         $83_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
         HEAP32[($146($5_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] = $83_1;
         HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
         HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
         break label$11;
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
        HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
        $95_1 = HEAP32[(HEAP32[($146($5_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) >> 2] | 0;
        HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = $95_1;
        $97_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
        HEAP32[(HEAP32[($146($5_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) >> 2] = $97_1;
       }
      }
      HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
      continue label$8;
     };
    }
   }
  }
  global$0 = $4_1 + 48 | 0;
  return;
 }
 
 function $245($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 0 < 2 >>> 0 & 1 | 0)) {
     break label$2
    }
    $10_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   $10_1 = 1 << (32 - ($249((HEAP32[($3_1 + 12 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $246($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $130(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $247($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $250(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $248($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($129($5_1 | 0) | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($129($5_1 | 0) | 0) >> 2] = $8_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $131($130($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $249($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return Math_clz32(HEAP32[($3_1 + 12 | 0) >> 2] | 0) | 0;
 }
 
 function $250($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($251(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $223();
   wasm2js_trap();
  }
  $15_1 = $224((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $251($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $252(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $252($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 1073741823 | 0;
 }
 
 function $253($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0 | 0;
 }
 
 function $254($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $255($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAPU8[($5_1 + 4 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   $115(HEAP32[$5_1 >> 2] | 0 | 0, $114($113(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
   $116(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  label$2 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   $117(HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $256($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $257($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $258($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $2_1 + $1_1 | 0;
  return $2_1 | 0;
 }
 
 function $259($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $260($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $3_1 = $849() | 0;
   HEAP32[$3_1 >> 2] = 1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
   label$2 : {
    $4_1 = $557(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
    if (($4_1 | 0) < (0 | 0)) {
     break label$2
    }
    if ($4_1 >>> 0 < (HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$2
    }
    $4_1 = $4_1 + 1 | 0;
    $5_1 = FUNCTION_TABLE[$5_1 | 0](HEAP32[($3_1 + 4 | 0) >> 2] | 0, $4_1) | 0;
    if (!$5_1) {
     break label$2
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    $557(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
   }
   if (($446(1 | 0) | 0) >>> 0 > 2 >>> 0) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $449(1 | 0, 68770 | 0, $2_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return -1 | 0;
 }
 
 function $261() {
  HEAP32[($849() | 0) >> 2] = 0;
 }
 
 function $262($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 68837;
  label$1 : {
   if ($0_1 >>> 0 > 4 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($0_1 << 2 | 0) + 87292 | 0) >> 2] | 0;
  }
  $260($1_1 | 0, 0 | 0) | 0;
  return -1 | 0;
 }
 
 function $263($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    label$3 : while (1) {
     $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     $459($1_1 | 0);
     $1_1 = $2_1;
     if ($1_1) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : {
    $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$4
    }
    label$5 : while (1) {
     $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     $459($1_1 | 0);
     $1_1 = $2_1;
     if ($1_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $833(HEAP32[$0_1 >> 2] | 0 | 0);
   $459($0_1 | 0);
  }
 }
 
 function $264($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $834(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   $3_1 = ($1_1 + $2_1 | 0) + -1 | 0;
   $4_1 = ($3_1 >>> 0) / ($2_1 >>> 0) | 0;
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if ($1_1) {
      break label$3
     }
     $1_1 = $5_1;
     break label$2;
    }
    HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = $5_1;
   }
   $5_1 = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
   $6_1 = $0_1 + 12 | 0;
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    if ($2_1 >>> 0 > $3_1 >>> 0) {
     break label$4
    }
    label$5 : {
     label$6 : while (1) {
      $2_1 = $1_1;
      $1_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$5
      }
      $5_1 = $5_1 + 1 | 0;
      if ($5_1 >>> 0 < $4_1 >>> 0) {
       continue label$6
      }
      break label$6;
     };
    }
    $6_1 = $2_1 + 8 | 0;
   }
   HEAP32[$6_1 >> 2] = 0;
   $835(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   label$7 : while (1) {
    $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $459($1_1 | 0);
    $1_1 = $5_1;
    if ($1_1) {
     continue label$7
    }
    break label$7;
   };
  }
 }
 
 function $265($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $10_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $11_1 = 0, $9_1 = 0, $72_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$3_1 >> 2] = 72390;
    $4_1 = $260(73395 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $834(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if ($6_1) {
      break label$4
     }
     $7_1 = 0;
     break label$3;
    }
    $7_1 = HEAP32[$6_1 >> 2] | 0;
   }
   label$5 : {
    label$6 : {
     if (!$2_1) {
      break label$6
     }
     $8_1 = $0_1 + 4 | 0;
     $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     label$7 : while (1) {
      label$8 : {
       label$9 : {
        $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if (!$4_1) {
         break label$9
        }
        $10_1 = HEAP32[$4_1 >> 2] | 0;
        if ($10_1 >>> 0 < $5_1 >>> 0) {
         break label$8
        }
       }
       label$10 : {
        label$11 : {
         $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
         if (!$4_1) {
          break label$11
         }
         HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
         break label$10;
        }
        $4_1 = $456((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
        if (!$4_1) {
         break label$5
        }
       }
       $10_1 = 0;
       HEAP32[($4_1 + 8 | 0) >> 2] = 0;
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[($4_1 + 4 | 0) >> 2] = 0;
       $11_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       HEAP32[($11_1 ? $11_1 + 8 | 0 : $8_1) >> 2] = $4_1;
       HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
      }
      $72_1 = ($4_1 + $10_1 | 0) + 12 | 0;
      $10_1 = $5_1 - $10_1 | 0;
      $10_1 = $2_1 >>> 0 < $10_1 >>> 0 ? $2_1 : $10_1;
      $535($72_1 | 0, $1_1 | 0, $10_1 | 0) | 0;
      HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + $10_1 | 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + $10_1 | 0;
      $1_1 = $1_1 + $10_1 | 0;
      $2_1 = $2_1 - $10_1 | 0;
      if ($2_1) {
       continue label$7
      }
      break label$7;
     };
    }
    $835(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
    $4_1 = 0;
    break label$1;
   }
   label$12 : {
    label$13 : {
     if ($6_1) {
      break label$13
     }
     $4_1 = HEAP32[$8_1 >> 2] | 0;
     break label$12;
    }
    HEAP32[$6_1 >> 2] = $7_1;
    $4_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = $9_1;
   $835(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   label$14 : {
    if (!$4_1) {
     break label$14
    }
    label$15 : while (1) {
     $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     $459($4_1 | 0);
     $4_1 = $0_1;
     if ($0_1) {
      continue label$15
     }
     break label$15;
    };
   }
   $4_1 = $262(0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $266($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $24_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  $834(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  $3_1 = $1_1;
  label$2 : {
   label$3 : {
    label$4 : {
     if (!$2_1) {
      break label$4
     }
     label$5 : while (1) {
      $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$3
      }
      $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      $24_1 = ($4_1 + $5_1 | 0) + 12 | 0;
      $5_1 = (HEAP32[$4_1 >> 2] | 0) - $5_1 | 0;
      $5_1 = $2_1 >>> 0 < $5_1 >>> 0 ? $2_1 : $5_1;
      $535($3_1 | 0, $24_1 | 0, $5_1 | 0) | 0;
      HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + $5_1 | 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - $5_1 | 0;
      $2_1 = $2_1 - $5_1 | 0;
      label$6 : {
       if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
        break label$6
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
      }
      $3_1 = $3_1 + $5_1 | 0;
      if ($2_1) {
       continue label$5
      }
      break label$5;
     };
    }
    if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
     break label$2
    }
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  }
  $835(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $3_1 - $1_1 | 0 | 0;
 }
 
 function $267($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  $834(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $835(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $268($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = HEAP32[($0_1 + 260 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    FUNCTION_TABLE[$1_1 | 0]($0_1);
   }
   $263(HEAP32[($0_1 + 168 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($0_1 + 176 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($0_1 + 188 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($0_1 + 244 | 0) >> 2] | 0 | 0);
   $459($0_1 | 0);
  }
 }
 
 function $269($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$3_1 >> 2] = 71155;
    $4_1 = $260(73395 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if ($1_1) {
     break label$3
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = 72050;
    $4_1 = $260(73395 | 0, $3_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   $4_1 = 0;
   if (!$2_1) {
    break label$1
   }
   label$4 : {
    if (!(($2_1 | 0) % (HEAP32[($0_1 + 196 | 0) >> 2] | 0 | 0) | 0)) {
     break label$4
    }
    $4_1 = $260(68453 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$5 : {
    if (HEAP32[$0_1 >> 2] | 0) {
     break label$5
    }
    if ((HEAP32[($0_1 + 216 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 204 | 0) >> 2] | 0 | 0)) {
     break label$5
    }
    if (HEAP32[($0_1 + 84 | 0) >> 2] | 0) {
     break label$5
    }
    $4_1 = $265(HEAP32[($0_1 + 168 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    break label$1;
   }
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$6 : while (1) {
    $5_1 = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
    label$7 : {
     $4_1 = HEAP32[($0_1 + 184 | 0) >> 2] | 0;
     if ($4_1) {
      break label$7
     }
     if (($2_1 | 0) < ($5_1 | 0)) {
      break label$7
     }
     $4_1 = $270($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0) | 0;
     break label$1;
    }
    label$8 : {
     if (($4_1 + $2_1 | 0 | 0) >= ($5_1 | 0)) {
      break label$8
     }
     $535((HEAP32[($0_1 + 176 | 0) >> 2] | 0) + $4_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
     HEAP32[($0_1 + 184 | 0) >> 2] = (HEAP32[($0_1 + 184 | 0) >> 2] | 0) + $2_1 | 0;
     $4_1 = 0;
     break label$1;
    }
    $5_1 = $5_1 - $4_1 | 0;
    $535((HEAP32[($0_1 + 176 | 0) >> 2] | 0) + $4_1 | 0 | 0, $1_1 | 0, $5_1 | 0) | 0;
    HEAP32[($0_1 + 184 | 0) >> 2] = 0;
    label$9 : {
     if (($270($0_1 | 0, HEAP32[($0_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 180 | 0) >> 2] | 0 | 0, 0 | 0) | 0 | 0) >= (0 | 0)) {
      break label$9
     }
     $4_1 = -1;
     break label$1;
    }
    $1_1 = $1_1 + $5_1 | 0;
    $4_1 = 0;
    $2_1 = $2_1 - $5_1 | 0;
    if (($2_1 | 0) > (0 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $270($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $4_1 = 0, $10_1 = 0, $11_1 = 0, $9_1 = 0.0;
  $4_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
  HEAP32[($0_1 + 172 | 0) >> 2] = 0;
  $5_1 = $2_1;
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $5_1 = Math_imul(HEAP32[($0_1 + 28 | 0) >> 2] | 0, $5_1);
  }
  $6_1 = HEAP32[($0_1 + 240 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    if ((HEAP32[($0_1 + 216 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 204 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $7_1 = 0;
    break label$2;
   }
   label$4 : {
    label$5 : {
     $8_1 = (HEAPU8[($0_1 + 232 | 0) >> 0] | 0) << 2 | 0;
     $9_1 = +$525(+(+HEAPF64[($0_1 + 224 | 0) >> 3] * +(($5_1 | 0) / ($8_1 | 0) | 0 | 0)));
     if (!(Math_abs($9_1) < 2147483648.0)) {
      break label$5
     }
     $7_1 = ~~$9_1;
     break label$4;
    }
    $7_1 = -2147483648;
   }
   $7_1 = Math_imul($8_1, $7_1);
   $5_1 = $7_1 + $5_1 | 0;
  }
  $6_1 = $6_1 << 2 | 0;
  label$6 : {
   if (!(HEAP32[($0_1 + 84 | 0) >> 2] | 0)) {
    break label$6
   }
   $5_1 = Math_imul(HEAP32[($0_1 + 112 | 0) >> 2] | 0, $5_1);
  }
  $8_1 = HEAP32[($0_1 + 188 | 0) >> 2] | 0;
  label$7 : {
   label$8 : {
    label$9 : {
     $5_1 = $5_1 + $6_1 | 0;
     if ((HEAP32[($0_1 + 192 | 0) >> 2] | 0 | 0) >= ($5_1 | 0)) {
      break label$9
     }
     $8_1 = $458($8_1 | 0, $5_1 + 32 | 0 | 0) | 0;
     if ($8_1) {
      break label$8
     }
     $262(0 | 0) | 0;
     return -1 | 0;
    }
    label$10 : {
     if (!$8_1) {
      break label$10
     }
     $5_1 = $8_1 & 15 | 0;
     $5_1 = $8_1 + ($5_1 ? 16 - $5_1 | 0 : 0) | 0;
     break label$7;
    }
    return -1 | 0;
   }
   HEAP32[($0_1 + 192 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 188 | 0) >> 2] = $8_1;
   $5_1 = $8_1 & 15 | 0;
   $5_1 = $8_1 + ($5_1 ? 16 - $5_1 | 0 : 0) | 0;
  }
  $8_1 = $4_1 ? 0 : $6_1;
  $4_1 = $5_1 + $8_1 | 0;
  $535($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  label$11 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$11
   }
   HEAP8[($0_1 + 24 | 0) >> 0] = $2_1;
   HEAP8[($0_1 + 25 | 0) >> 0] = $2_1 >>> 8 | 0;
   HEAP8[($0_1 + 26 | 0) >> 0] = $2_1 >>> 16 | 0;
   HEAP8[($0_1 + 27 | 0) >> 0] = $2_1 >>> 24 | 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
   $1_1 = HEAPU8[($0_1 + 40 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 41 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($0_1 + 42 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($0_1 + 43 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   if (!$1_1) {
    break label$11
   }
   $10_1 = 0;
   HEAP8[($0_1 + 80 | 0) >> 0] = $10_1;
   HEAP8[($0_1 + 81 | 0) >> 0] = $10_1 >>> 8 | 0;
   HEAP8[($0_1 + 82 | 0) >> 0] = $10_1 >>> 16 | 0;
   HEAP8[($0_1 + 83 | 0) >> 0] = $10_1 >>> 24 | 0;
   FUNCTION_TABLE[$1_1 | 0]($0_1, HEAPU8[($0_1 + 4 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0);
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  }
  label$12 : {
   label$13 : {
    label$14 : {
     if ((HEAP32[($0_1 + 216 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 204 | 0) >> 2] | 0 | 0)) {
      break label$14
     }
     $8_1 = $5_1;
     break label$13;
    }
    label$15 : {
     if (!$8_1) {
      break label$15
     }
     $535($5_1 | 0, HEAP32[($0_1 + 244 | 0) >> 2] | 0 | 0, $8_1 | 0) | 0;
     $2_1 = $2_1 + $8_1 | 0;
    }
    $1_1 = $2_1 - $6_1 | 0;
    $535(HEAP32[($0_1 + 244 | 0) >> 2] | 0 | 0, $5_1 + $1_1 | 0 | 0, $6_1 | 0) | 0;
    $8_1 = $5_1 + $2_1 | 0;
    $6_1 = ($2_1 | 0) <= ($6_1 | 0);
    $2_1 = 0;
    if ($6_1) {
     break label$12
    }
    $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 252 | 0) >> 2] | 0 | 0]($0_1, $5_1, $1_1, $8_1, $7_1) | 0;
   }
   $5_1 = $0_1 + 84 | 0;
   if (!(HEAP32[$5_1 >> 2] | 0)) {
    break label$12
   }
   if (($2_1 | 0) < (1 | 0)) {
    break label$12
   }
   HEAP8[($0_1 + 108 | 0) >> 0] = $2_1;
   HEAP8[($0_1 + 109 | 0) >> 0] = $2_1 >>> 8 | 0;
   HEAP8[($0_1 + 110 | 0) >> 0] = $2_1 >>> 16 | 0;
   HEAP8[($0_1 + 111 | 0) >> 0] = $2_1 >>> 24 | 0;
   HEAP32[($0_1 + 104 | 0) >> 2] = $2_1;
   HEAP32[($0_1 + 100 | 0) >> 2] = $8_1;
   $6_1 = HEAPU8[($0_1 + 124 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 125 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($0_1 + 126 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($0_1 + 127 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   if (!$6_1) {
    break label$12
   }
   $11_1 = 0;
   HEAP8[($0_1 + 164 | 0) >> 0] = $11_1;
   HEAP8[($0_1 + 165 | 0) >> 0] = $11_1 >>> 8 | 0;
   HEAP8[($0_1 + 166 | 0) >> 0] = $11_1 >>> 16 | 0;
   HEAP8[($0_1 + 167 | 0) >> 0] = $11_1 >>> 24 | 0;
   FUNCTION_TABLE[$6_1 | 0]($5_1, HEAPU8[($0_1 + 88 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 89 | 0) >> 0] | 0) << 8 | 0) | 0);
   $2_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
  }
  label$16 : {
   if (!$3_1) {
    break label$16
   }
   $5_1 = HEAP32[$3_1 >> 2] | 0;
   $2_1 = ($2_1 | 0) < ($5_1 | 0) ? $2_1 : $5_1;
   HEAP32[$3_1 >> 2] = $5_1 - $2_1 | 0;
  }
  label$17 : {
   if ($2_1) {
    break label$17
   }
   return 0 | 0;
  }
  return $265(HEAP32[($0_1 + 168 | 0) >> 2] | 0 | 0, $8_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $271($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$3_1 >> 2] = 71155;
    $0_1 = $260(73395 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if ($1_1) {
     break label$3
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = 72050;
    $0_1 = $260(73395 | 0, $3_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($2_1 | 0) >= (1 | 0)) {
     break label$4
    }
    $0_1 = 0;
    break label$1;
   }
   label$5 : {
    if (!(($2_1 | 0) % (HEAP32[($0_1 + 208 | 0) >> 2] | 0 | 0) | 0)) {
     break label$5
    }
    $0_1 = $260(68417 | 0, 0 | 0) | 0;
    break label$1;
   }
   $0_1 = $266(HEAP32[($0_1 + 168 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $272($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $267(HEAP32[($0_1 + 168 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $273($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$1_1 >> 2] = 71155;
    $260(73395 | 0, $1_1 | 0) | 0;
    break label$1;
   }
   $264(HEAP32[($0_1 + 168 | 0) >> 2] | 0 | 0, (HEAP32[($0_1 + 236 | 0) >> 2] | 0) << 1 | 0 | 0);
   label$3 : {
    $2_1 = HEAP32[($0_1 + 256 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$3
    }
    FUNCTION_TABLE[$2_1 | 0]($0_1);
   }
   HEAP32[($0_1 + 184 | 0) >> 2] = 0;
   HEAP32[($0_1 + 172 | 0) >> 2] = 1;
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $274($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($0_1 + 68 | 0) >> 2] = 1;
  HEAP32[($0_1 + 36 | 0) >> 2] = 3;
  HEAP32[($0_1 + 4 | 0) >> 2] = 4;
  HEAP32[($0_1 + 44 | 0) >> 2] = 5;
  HEAP32[($0_1 + 60 | 0) >> 2] = 1;
  HEAP32[($0_1 + 40 | 0) >> 2] = 5;
  $2_1 = 0;
  HEAP8[($1_1 + 15 | 0) >> 0] = 0;
  label$1 : {
   label$2 : {
    $3_1 = fimport$33(118001 | 0, $1_1 + 15 | 0 | 0, 0 | 0) | 0;
    if ($3_1) {
     break label$2
    }
    $260(72734 | 0, 0 | 0) | 0;
    break label$1;
   }
   HEAP8[($1_1 + 14 | 0) >> 0] = 0;
   $2_1 = (fimport$33(118148 | 0, $1_1 + 14 | 0 | 0, 0 | 0) | 0 | 0) != (0 | 0);
  }
  HEAP32[($0_1 + 72 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 64 | 0) >> 2] = $2_1;
  global$0 = $1_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $275($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 105;
  HEAP8[($1_1 + 14 | 0) >> 0] = $2_1;
  HEAP8[($1_1 + 15 | 0) >> 0] = $2_1 >>> 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  fimport$33(122090 | 0, $1_1 + 14 | 0 | 0, $1_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $276($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  HEAP32[($2_1 + 48 | 0) >> 2] = $3_1;
  $8_1 = 105;
  HEAP8[($2_1 + 78 | 0) >> 0] = $8_1;
  HEAP8[($2_1 + 79 | 0) >> 0] = $8_1 >>> 8 | 0;
  label$1 : {
   label$2 : {
    if ((fimport$33(118382 | 0, $2_1 + 78 | 0 | 0, $2_1 + 48 | 0 | 0) | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $4_1 = $260(82997 | 0, 0 | 0) | 0;
    break label$1;
   }
   $5_1 = $0_1 + 4 | 0;
   $4_1 = $313(HEAPU16[($0_1 + 8 | 0) >> 1] | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      $4_1 = $4_1 & 65535 | 0;
      if (!$4_1) {
       break label$4
      }
      if (($4_1 | 0) == (33056 | 0)) {
       break label$3
      }
      $4_1 = $314() | 0;
      continue label$5;
     };
    }
    HEAP32[$2_1 >> 2] = 70710;
    $4_1 = $260(67528 | 0, $2_1 | 0) | 0;
    break label$1;
   }
   HEAP32[($0_1 + 96 | 0) >> 2] = 1;
   HEAP16[($0_1 + 8 | 0) >> 1] = 33056;
   $4_1 = 0;
   HEAP8[($2_1 + 77 | 0) >> 0] = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = fimport$34(118875 | 0, $2_1 + 77 | 0 | 0, 0 | 0) | 0;
   $312($5_1 | 0);
   label$6 : {
    if (!$3_1) {
     break label$6
    }
    HEAP8[($2_1 + 76 | 0) >> 0] = 0;
    $6_1 = 1886415209;
    HEAP8[($2_1 + 72 | 0) >> 0] = $6_1;
    HEAP8[($2_1 + 73 | 0) >> 0] = $6_1 >>> 8 | 0;
    HEAP8[($2_1 + 74 | 0) >> 0] = $6_1 >>> 16 | 0;
    HEAP8[($2_1 + 75 | 0) >> 0] = $6_1 >>> 24 | 0;
    $3_1 = HEAPU8[($0_1 + 10 | 0) >> 0] | 0;
    $5_1 = HEAPU16[($0_1 + 12 | 0) >> 1] | 0;
    HEAP32[($2_1 + 44 | 0) >> 2] = $0_1;
    HEAP32[($2_1 + 40 | 0) >> 2] = 6;
    HEAP32[($2_1 + 36 | 0) >> 2] = $5_1;
    HEAP32[($2_1 + 32 | 0) >> 2] = $3_1;
    fimport$33(118943 | 0, $2_1 + 72 | 0 | 0, $2_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   $4_1 = 0;
   HEAP8[($2_1 + 71 | 0) >> 0] = 0;
   $7_1 = 1886415209;
   HEAP8[($2_1 + 67 | 0) >> 0] = $7_1;
   HEAP8[($2_1 + 68 | 0) >> 0] = $7_1 >>> 8 | 0;
   HEAP8[($2_1 + 69 | 0) >> 0] = $7_1 >>> 16 | 0;
   HEAP8[($2_1 + 70 | 0) >> 0] = $7_1 >>> 24 | 0;
   $3_1 = HEAPU8[($0_1 + 10 | 0) >> 0] | 0;
   $5_1 = HEAPU16[($0_1 + 12 | 0) >> 1] | 0;
   HEAP32[($2_1 + 28 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 24 | 0) >> 2] = 7;
   HEAP32[($2_1 + 20 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
   fimport$33(120595 | 0, $2_1 + 67 | 0 | 0, $2_1 + 16 | 0 | 0) | 0;
  }
  global$0 = $2_1 + 80 | 0;
  return $4_1 | 0;
 }
 
 function $277($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $278($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $4_1 = $0_1 + 60 | 0;
     if (!($259($4_1 | 0) | 0)) {
      break label$3
     }
     if (!($259($0_1 + 64 | 0 | 0) | 0)) {
      break label$2
     }
    }
    $273(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   HEAP8[($1_1 + 15 | 0) >> 0] = 0;
   $7_1 = 26992;
   HEAP8[($1_1 + 13 | 0) >> 0] = $7_1;
   HEAP8[($1_1 + 14 | 0) >> 0] = $7_1 >>> 8 | 0;
   $5_1 = HEAPU8[($0_1 + 10 | 0) >> 0] | 0;
   $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = (($6_1 >>> 2 | 0) >>> 0) / ($5_1 >>> 0) | 0;
   fimport$33(121005 | 0, $1_1 + 13 | 0 | 0, $1_1 | 0) | 0;
   label$4 : {
    $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if ($5_1) {
     break label$4
    }
    FUNCTION_TABLE[$3_1 | 0](HEAP32[($0_1 + 48 | 0) >> 2] | 0, HEAP32[($0_1 + 72 | 0) >> 2] | 0, $2_1);
    break label$1;
   }
   label$5 : {
    if (($269($5_1 | 0, HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break label$5
    }
    $257($4_1 | 0, 0 | 0) | 0;
   }
   if (($272(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0) | 0 | 0) < ($2_1 | 0)) {
    break label$1
   }
   label$6 : while (1) {
    label$7 : {
     if (($271(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0 | 0) == ($2_1 | 0)) {
      break label$7
     }
     $536(HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0, HEAPU8[($0_1 + 35 | 0) >> 0] | 0 | 0, $2_1 | 0) | 0;
    }
    FUNCTION_TABLE[$3_1 | 0](HEAP32[($0_1 + 48 | 0) >> 2] | 0, HEAP32[($0_1 + 72 | 0) >> 2] | 0, $2_1);
    if (($272(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0) | 0 | 0) >= ($2_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $279($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $63_1 = 0, $92_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $4_1 = $0_1 + 60 | 0;
     if (!($259($4_1 | 0) | 0)) {
      break label$3
     }
     if (!($259($0_1 + 64 | 0 | 0) | 0)) {
      break label$2
     }
    }
    label$4 : {
     $2_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$4
     }
     $273($2_1 | 0);
    }
    $536(HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0, HEAPU8[($0_1 + 11 | 0) >> 0] | 0 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    $3_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    $5_1 = HEAPU8[($0_1 + 10 | 0) >> 0] | 0;
    $0_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
    HEAP8[($1_1 + 31 | 0) >> 0] = 0;
    $8_1 = 26992;
    HEAP8[($1_1 + 29 | 0) >> 0] = $8_1;
    HEAP8[($1_1 + 30 | 0) >> 0] = $8_1 >>> 8 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = ($2_1 | 0) / (Math_imul($5_1, ($0_1 >>> 3 | 0) & 31 | 0) | 0) | 0;
    fimport$33(121610 | 0, $1_1 + 29 | 0 | 0, $1_1 | 0) | 0;
    break label$1;
   }
   label$5 : {
    label$6 : {
     if (!(HEAP32[($0_1 + 52 | 0) >> 2] | 0)) {
      break label$6
     }
     label$7 : {
      label$8 : while (1) {
       $63_1 = $272(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0) | 0;
       $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if (($63_1 | 0) >= ($5_1 | 0)) {
        break label$7
       }
       FUNCTION_TABLE[$3_1 | 0](HEAP32[($0_1 + 48 | 0) >> 2] | 0, HEAP32[($0_1 + 72 | 0) >> 2] | 0, $2_1);
       if (($269(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0 | 0) != (-1 | 0)) {
        continue label$8
       }
       break label$8;
      };
      $273(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0);
      $257($4_1 | 0, 0 | 0) | 0;
      $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     }
     $92_1 = $271(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
     $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if (($92_1 | 0) == ($2_1 | 0)) {
      break label$5
     }
     $536(HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0, HEAPU8[($0_1 + 11 | 0) >> 0] | 0 | 0, $2_1 | 0) | 0;
     break label$5;
    }
    FUNCTION_TABLE[$3_1 | 0](HEAP32[($0_1 + 48 | 0) >> 2] | 0, HEAP32[($0_1 + 72 | 0) >> 2] | 0, $2_1);
   }
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   $5_1 = HEAPU8[($0_1 + 10 | 0) >> 0] | 0;
   $0_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   HEAP8[($1_1 + 31 | 0) >> 0] = 0;
   $9_1 = 26992;
   HEAP8[($1_1 + 29 | 0) >> 0] = $9_1;
   HEAP8[($1_1 + 30 | 0) >> 0] = $9_1 >>> 8 | 0;
   HEAP32[($1_1 + 16 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 20 | 0) >> 2] = ($2_1 | 0) / (Math_imul($5_1, ($0_1 >>> 3 | 0) & 31 | 0) | 0) | 0;
   fimport$33(121610 | 0, $1_1 + 29 | 0 | 0, $1_1 + 16 | 0 | 0) | 0;
  }
  global$0 = $1_1 + 32 | 0;
 }
 
 function $280($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 9;
  HEAP32[($0_1 + 32 | 0) >> 2] = 10;
  HEAP32[($0_1 + 28 | 0) >> 2] = 11;
  HEAP32[($0_1 + 24 | 0) >> 2] = 12;
  HEAP32[($0_1 + 20 | 0) >> 2] = 13;
  HEAP32[($0_1 + 16 | 0) >> 2] = 14;
  HEAP32[($0_1 + 4 | 0) >> 2] = 15;
  HEAP32[$0_1 >> 2] = 16;
  HEAP32[($0_1 + 76 | 0) >> 2] = 1;
  HEAP32[($0_1 + 80 | 0) >> 2] = 1;
  HEAP32[($0_1 + 64 | 0) >> 2] = 1;
  return 1 | 0;
 }
 
 function $281($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $503($2_1 | 0) | 0;
   $1_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
  }
  $459(HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
  $459(HEAP32[($0_1 + 96 | 0) >> 2] | 0 | 0);
 }
 
 function $282($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $283($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
  $841(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[$3_1 >> 2] | 0;
    if ($4_1) {
     break label$2
    }
    $4_1 = $2_1;
    break label$1;
   }
   $4_1 = $502($4_1 | 0, $1_1 | 0, 1 | 0, $2_1 | 0) | 0;
   $1_1 = $1_1 + $4_1 | 0;
   $4_1 = $2_1 - $4_1 | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $503(HEAP32[$3_1 >> 2] | 0 | 0) | 0;
   HEAP32[$3_1 >> 2] = 0;
  }
  $536($1_1 | 0, HEAPU8[($0_1 + 11 | 0) >> 0] | 0 | 0, $4_1 | 0) | 0;
  return $2_1 | 0;
 }
 
 function $284($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[((HEAP32[($0_1 + 96 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $285($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   if (($505(HEAP32[$1_1 >> 2] | 0 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0) == (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $294($0_1 | 0);
  }
 }
 
 function $286($0_1) {
  $0_1 = $0_1 | 0;
  $841(HEAP32[((HEAP32[($0_1 + 96 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $287($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    if (!(HEAP32[($0_1 + 100 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   $1_1 = $378(($3_1 ? 76308 : 76923) | 0) | 0;
   $1_1 = $1_1 ? $1_1 : $3_1 ? 66174 : 66161;
  }
  $4_1 = $378(74551 | 0) | 0;
  $5_1 = $456(12 | 0) | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = $5_1;
  label$3 : {
   label$4 : {
    if ($5_1) {
     break label$4
    }
    $0_1 = $262(0 | 0) | 0;
    break label$3;
   }
   $536($5_1 | 0, 0 | 0, 12 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!$4_1) {
      break label$6
     }
     $5_1 = $549($4_1 | 0) | 0;
     break label$5;
    }
    $5_1 = (Math_imul(HEAPU16[($0_1 + 12 | 0) >> 1] | 0, 1e3) | 0) / (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   }
   HEAP32[((HEAP32[($0_1 + 96 | 0) >> 2] | 0) + 4 | 0) >> 2] = $5_1;
   $5_1 = $494($1_1 | 0, ($3_1 ? 74381 : 74378) | 0) | 0;
   HEAP32[(HEAP32[($0_1 + 96 | 0) >> 2] | 0) >> 2] = $5_1;
   label$7 : {
    if ($5_1) {
     break label$7
    }
    $0_1 = -1;
    break label$3;
   }
   $5_1 = 70963;
   label$8 : {
    if ($3_1) {
     break label$8
    }
    $3_1 = $456(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[((HEAP32[($0_1 + 96 | 0) >> 2] | 0) + 8 | 0) >> 2] = $3_1;
    label$9 : {
     if ($3_1) {
      break label$9
     }
     $0_1 = $262(0 | 0) | 0;
     break label$3;
    }
    $536($3_1 | 0, HEAPU8[($0_1 + 11 | 0) >> 0] | 0 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    $5_1 = 70483;
   }
   $0_1 = 0;
   $450(4 | 0, 83351 | 0, 0 | 0);
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$2_1 >> 2] = $5_1;
   $450(4 | 0, 83251 | 0, $2_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $288() {
  $292(0 | 0, 73044 | 0, 0 | 0, 1 | 0);
  $292(1 | 0, 73138 | 0, 0 | 0, 2 | 0);
 }
 
 function $289($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = 1;
  HEAP32[($0_1 + 28 | 0) >> 2] = 18;
  HEAP32[($0_1 + 4 | 0) >> 2] = 19;
  HEAP32[($0_1 + 64 | 0) >> 2] = 1;
  HEAP32[($0_1 + 68 | 0) >> 2] = 1;
  return 1 | 0;
 }
 
 function $290($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $841((Math_imul(HEAPU16[($0_1 + 12 | 0) >> 1] | 0, 1e3) | 0) / (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  $536($1_1 | 0, HEAPU8[($0_1 + 11 | 0) >> 0] | 0 | 0, $2_1 | 0) | 0;
  return $2_1 | 0;
 }
 
 function $291($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = 1;
  return 0 | 0;
 }
 
 function $292($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $3_1 = $293($1_1 | 0, $2_1 | 0, $3_1 | 0, 126120 | 0, 126112 | 0) | 0;
    break label$1;
   }
   $3_1 = $293($1_1 | 0, $2_1 | 0, $3_1 | 0, 126116 | 0, 126108 | 0) | 0;
  }
  label$3 : {
   if (($3_1 | 0) == (-1 | 0)) {
    break label$3
   }
   if (($321(4352 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$3
   }
   $536($4_1 + 8 | 0 | 0, 0 | 0, 56 | 0) | 0;
   HEAP8[($4_1 + 20 | 0) >> 0] = $0_1;
   HEAP32[($4_1 + 16 | 0) >> 2] = $3_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = 4352;
   $327($4_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $4_1 + 64 | 0;
 }
 
 function $293($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    $6_1 = $456(44 | 0) | 0;
    if ($6_1) {
     break label$2
    }
    $7_1 = $262(0 | 0) | 0;
    break label$1;
   }
   $7_1 = $543($0_1 | 0) | 0;
   HEAP32[($6_1 + 8 | 0) >> 2] = $7_1;
   label$3 : {
    if ($7_1) {
     break label$3
    }
    $459($6_1 | 0);
    $7_1 = $262(0 | 0) | 0;
    break label$1;
   }
   HEAP32[($6_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[($6_1 + 36 | 0) >> 2] = 0;
   $7_1 = $6_1 + 12 | 0;
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     $535($7_1 | 0, $1_1 | 0, 24 | 0) | 0;
     break label$4;
    }
    $536($7_1 | 0, 0 | 0, 24 | 0) | 0;
   }
   HEAP32[$6_1 >> 2] = $2_1;
   $834(HEAP32[(0 + 126096 | 0) >> 2] | 0 | 0) | 0;
   label$6 : {
    $7_1 = HEAP32[$3_1 >> 2] | 0;
    if (!$7_1) {
     break label$6
    }
    label$7 : {
     label$8 : while (1) {
      if (!($552($0_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
       break label$7
      }
      $7_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
      if ($7_1) {
       continue label$8
      }
      break label$6;
     };
    }
    $7_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
    $1_1 = $7_1 + 1 | 0;
    if (!$1_1) {
     break label$6
    }
    label$9 : {
     $8_1 = ($539($0_1 | 0) | 0) + 16 | 0;
     $2_1 = $456($8_1 | 0) | 0;
     if ($2_1) {
      break label$9
     }
     $835(HEAP32[(0 + 126096 | 0) >> 2] | 0 | 0) | 0;
     $459(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
     $459($6_1 | 0);
     $7_1 = $262(0 | 0) | 0;
     break label$1;
    }
    HEAP32[$5_1 >> 2] = $0_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = $7_1 + 2 | 0;
    $556($2_1 | 0, $8_1 | 0, 82689 | 0, $5_1 | 0) | 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 36 | 0) >> 2] = $1_1;
   }
   HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
   HEAP32[$3_1 >> 2] = $6_1;
   $7_1 = HEAP32[$4_1 >> 2] | 0;
   HEAP32[$4_1 >> 2] = $7_1 + 1 | 0;
   $835(HEAP32[(0 + 126096 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $294($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = $0_1 + 60 | 0;
   if (!($259($2_1 | 0) | 0)) {
    break label$1
   }
   if ($259($0_1 + 56 | 0 | 0) | 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[(0 + 126052 | 0) >> 2] | 0 | 0]($0_1);
   $257($2_1 | 0, 0 | 0) | 0;
   FUNCTION_TABLE[HEAP32[(0 + 126056 | 0) >> 2] | 0 | 0]($0_1);
   if (($321(4353 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $536($1_1 + 8 | 0 | 0, 0 | 0, 56 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = 4353;
   HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
   HEAP8[($1_1 + 20 | 0) >> 0] = (HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0);
   $327($1_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $1_1 + 64 | 0;
 }
 
 function $295($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $4_1 = 0, $1_1 = 0, $2_1 = 0, $5_1 = 0, $74_1 = 0, $79_1 = 0, $94_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!(HEAP32[(0 + 126004 | 0) >> 2] | 0)) {
    break label$1
   }
   $296();
  }
  $536(126128 | 0, 0 | 0, 64 | 0) | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          if ($0_1) {
           break label$9
          }
          $0_1 = $381(75671 | 0) | 0;
          if ($0_1) {
           break label$9
          }
          $0_1 = 0;
          $2_1 = 1;
          break label$8;
         }
         $2_1 = 0;
         if (!(HEAPU8[$0_1 >> 0] | 0)) {
          break label$8
         }
         $3_1 = $0_1;
         $4_1 = 0;
         label$10 : {
          label$11 : while (1) {
           if (!(HEAPU8[$3_1 >> 0] | 0)) {
            break label$10
           }
           if ($4_1) {
            break label$10
           }
           label$12 : {
            label$13 : {
             $5_1 = $544($3_1 | 0, 44 | 0) | 0;
             if (!$5_1) {
              break label$13
             }
             $6_1 = $5_1 - $3_1 | 0;
             break label$12;
            }
            $6_1 = $539($3_1 | 0) | 0;
           }
           label$14 : {
            label$15 : {
             label$16 : {
              if (($6_1 | 0) != ($539(HEAP32[(0 + 114312 | 0) >> 2] | 0 | 0) | 0 | 0)) {
               break label$16
              }
              if ($546(HEAP32[(0 + 114312 | 0) >> 2] | 0 | 0, $3_1 | 0, $6_1 | 0) | 0) {
               break label$16
              }
              $3_1 = 114312;
              break label$15;
             }
             label$17 : {
              if (($6_1 | 0) != ($539(HEAP32[(0 + 114328 | 0) >> 2] | 0 | 0) | 0 | 0)) {
               break label$17
              }
              if ($546(HEAP32[(0 + 114328 | 0) >> 2] | 0 | 0, $3_1 | 0, $6_1 | 0) | 0) {
               break label$17
              }
              $3_1 = 114328;
              break label$15;
             }
             $4_1 = 0;
             if (($6_1 | 0) != ($539(HEAP32[(0 + 114344 | 0) >> 2] | 0 | 0) | 0 | 0)) {
              break label$14
             }
             $4_1 = 0;
             if ($546(HEAP32[(0 + 114344 | 0) >> 2] | 0 | 0, $3_1 | 0, $6_1 | 0) | 0) {
              break label$14
             }
             $3_1 = 114344;
            }
            $536(126004 | 0, 0 | 0, 120 | 0) | 0;
            HEAP32[(0 + 126004 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
            HEAP32[(0 + 126008 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
            $2_1 = 1;
            $4_1 = FUNCTION_TABLE[HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0](126012) | 0;
           }
           $3_1 = $5_1 + 1 | 0;
           if ($5_1) {
            continue label$11
           }
           break label$11;
          };
         }
         if ($4_1) {
          break label$3
         }
         if (!$2_1) {
          break label$7
         }
         break label$4;
        }
        label$18 : {
         $3_1 = HEAP32[(114312 + 12 | 0) >> 2] | 0;
         if ($3_1) {
          break label$18
         }
         $536(126004 | 0, 0 | 0, 120 | 0) | 0;
         i64toi32_i32$2 = 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 114312 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 114316 | 0) >> 2] | 0;
         $74_1 = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         HEAP32[(i64toi32_i32$0 + 126004 | 0) >> 2] = $74_1;
         HEAP32[(i64toi32_i32$0 + 126008 | 0) >> 2] = i64toi32_i32$1;
         if (FUNCTION_TABLE[HEAP32[(114312 + 8 | 0) >> 2] | 0 | 0](126012) | 0) {
          break label$3
         }
        }
        label$19 : {
         if (HEAP32[(114328 + 12 | 0) >> 2] | 0) {
          break label$19
         }
         $536(126004 | 0, 0 | 0, 120 | 0) | 0;
         i64toi32_i32$2 = 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 114328 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 114332 | 0) >> 2] | 0;
         $79_1 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         HEAP32[(i64toi32_i32$1 + 126004 | 0) >> 2] = $79_1;
         HEAP32[(i64toi32_i32$1 + 126008 | 0) >> 2] = i64toi32_i32$0;
         if (FUNCTION_TABLE[HEAP32[(114328 + 8 | 0) >> 2] | 0 | 0](126012) | 0) {
          break label$3
         }
         if (HEAP32[(114344 + 12 | 0) >> 2] | 0) {
          break label$4
         }
         break label$5;
        }
        if (!(HEAP32[(114344 + 12 | 0) >> 2] | 0)) {
         break label$5
        }
        if (!$3_1) {
         break label$4
        }
        if ($2_1) {
         break label$6
        }
       }
       HEAP32[$1_1 >> 2] = $0_1;
       $260(72778 | 0, $1_1 | 0) | 0;
       break label$4;
      }
      $260(73071 | 0, 0 | 0) | 0;
      break label$4;
     }
     $536(126004 | 0, 0 | 0, 120 | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 114344 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 114348 | 0) >> 2] | 0;
     $94_1 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$0 + 126004 | 0) >> 2] = $94_1;
     HEAP32[(i64toi32_i32$0 + 126008 | 0) >> 2] = i64toi32_i32$1;
     if (FUNCTION_TABLE[HEAP32[(114344 + 8 | 0) >> 2] | 0 | 0](126012) | 0) {
      break label$3
     }
    }
    $536(126004 | 0, 0 | 0, 120 | 0) | 0;
    $3_1 = -1;
    break label$2;
   }
   HEAP32[(0 + 126096 | 0) >> 2] = $832() | 0;
   label$20 : {
    $3_1 = HEAP32[(0 + 126012 | 0) >> 2] | 0;
    if ($3_1) {
     break label$20
    }
    $3_1 = 21;
    HEAP32[(0 + 126012 | 0) >> 2] = 21;
   }
   label$21 : {
    if (HEAP32[(0 + 126016 | 0) >> 2] | 0) {
     break label$21
    }
    HEAP32[(0 + 126016 | 0) >> 2] = 22;
   }
   label$22 : {
    if (HEAP32[(0 + 126020 | 0) >> 2] | 0) {
     break label$22
    }
    HEAP32[(0 + 126020 | 0) >> 2] = 23;
   }
   label$23 : {
    if (HEAP32[(0 + 126024 | 0) >> 2] | 0) {
     break label$23
    }
    HEAP32[(0 + 126024 | 0) >> 2] = 24;
   }
   label$24 : {
    if (HEAP32[(0 + 126028 | 0) >> 2] | 0) {
     break label$24
    }
    HEAP32[(0 + 126028 | 0) >> 2] = 25;
   }
   label$25 : {
    if (HEAP32[(0 + 126032 | 0) >> 2] | 0) {
     break label$25
    }
    HEAP32[(0 + 126032 | 0) >> 2] = 26;
   }
   label$26 : {
    if (HEAP32[(0 + 126036 | 0) >> 2] | 0) {
     break label$26
    }
    HEAP32[(0 + 126036 | 0) >> 2] = 27;
   }
   label$27 : {
    if (HEAP32[(0 + 126040 | 0) >> 2] | 0) {
     break label$27
    }
    HEAP32[(0 + 126040 | 0) >> 2] = 28;
   }
   label$28 : {
    if (HEAP32[(0 + 126044 | 0) >> 2] | 0) {
     break label$28
    }
    HEAP32[(0 + 126044 | 0) >> 2] = 29;
   }
   label$29 : {
    if (HEAP32[(0 + 126048 | 0) >> 2] | 0) {
     break label$29
    }
    HEAP32[(0 + 126048 | 0) >> 2] = 30;
   }
   label$30 : {
    if (HEAP32[(0 + 126052 | 0) >> 2] | 0) {
     break label$30
    }
    HEAP32[(0 + 126052 | 0) >> 2] = 31;
   }
   label$31 : {
    if (HEAP32[(0 + 126056 | 0) >> 2] | 0) {
     break label$31
    }
    HEAP32[(0 + 126056 | 0) >> 2] = 32;
   }
   label$32 : {
    if (HEAP32[(0 + 126060 | 0) >> 2] | 0) {
     break label$32
    }
    HEAP32[(0 + 126060 | 0) >> 2] = 33;
   }
   label$33 : {
    if (HEAP32[(0 + 126064 | 0) >> 2] | 0) {
     break label$33
    }
    HEAP32[(0 + 126064 | 0) >> 2] = 34;
   }
   FUNCTION_TABLE[$3_1 | 0]();
   $3_1 = 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $296() {
  var $0_1 = 0, $2_1 = 0, $3_1 = 0, $1_1 = 0;
  label$1 : {
   if (!(HEAP32[(0 + 126004 | 0) >> 2] | 0)) {
    break label$1
   }
   $311(HEAP32[(0 + 126128 | 0) >> 2] | 0 | 0);
   $311(HEAP32[(0 + 126132 | 0) >> 2] | 0 | 0);
   $311(HEAP32[(0 + 126136 | 0) >> 2] | 0 | 0);
   $311(HEAP32[(0 + 126140 | 0) >> 2] | 0 | 0);
   $311(HEAP32[(0 + 126144 | 0) >> 2] | 0 | 0);
   $311(HEAP32[(0 + 126148 | 0) >> 2] | 0 | 0);
   $311(HEAP32[(0 + 126152 | 0) >> 2] | 0 | 0);
   $311(HEAP32[(0 + 126156 | 0) >> 2] | 0 | 0);
   $311(HEAP32[(0 + 126160 | 0) >> 2] | 0 | 0);
   $311(HEAP32[(0 + 126164 | 0) >> 2] | 0 | 0);
   $311(HEAP32[(0 + 126168 | 0) >> 2] | 0 | 0);
   $311(HEAP32[(0 + 126172 | 0) >> 2] | 0 | 0);
   $311(HEAP32[(0 + 126176 | 0) >> 2] | 0 | 0);
   $311(HEAP32[(0 + 126180 | 0) >> 2] | 0 | 0);
   $311(HEAP32[(0 + 126184 | 0) >> 2] | 0 | 0);
   $311(HEAP32[(0 + 126188 | 0) >> 2] | 0 | 0);
   label$2 : {
    $0_1 = HEAP32[(0 + 126116 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : while (1) {
     $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
     label$4 : {
      $2_1 = HEAP32[$0_1 >> 2] | 0;
      if (!$2_1) {
       break label$4
      }
      FUNCTION_TABLE[HEAP32[(0 + 126060 | 0) >> 2] | 0 | 0]($2_1);
     }
     label$5 : {
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (($3_1 | 0) == ($2_1 | 0)) {
       break label$5
      }
      $459($3_1 | 0);
      $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     }
     $459($2_1 | 0);
     $459($0_1 | 0);
     $0_1 = $1_1;
     if ($0_1) {
      continue label$3
     }
     break label$3;
    };
   }
   HEAP32[(0 + 126108 | 0) >> 2] = 0;
   HEAP32[(0 + 126116 | 0) >> 2] = 0;
   label$6 : {
    $0_1 = HEAP32[(0 + 126120 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$6
    }
    label$7 : while (1) {
     $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
     label$8 : {
      $2_1 = HEAP32[$0_1 >> 2] | 0;
      if (!$2_1) {
       break label$8
      }
      FUNCTION_TABLE[HEAP32[(0 + 126060 | 0) >> 2] | 0 | 0]($2_1);
     }
     label$9 : {
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (($3_1 | 0) == ($2_1 | 0)) {
       break label$9
      }
      $459($3_1 | 0);
      $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     }
     $459($2_1 | 0);
     $459($0_1 | 0);
     $0_1 = $1_1;
     if ($0_1) {
      continue label$7
     }
     break label$7;
    };
   }
   HEAP32[(0 + 126112 | 0) >> 2] = 0;
   HEAP32[(0 + 126120 | 0) >> 2] = 0;
   FUNCTION_TABLE[HEAP32[(0 + 126064 | 0) >> 2] | 0 | 0]();
   $833(HEAP32[(0 + 126096 | 0) >> 2] | 0 | 0);
   $536(126004 | 0, 0 | 0, 120 | 0) | 0;
   $536(126128 | 0, 0 | 0, 64 | 0) | 0;
  }
 }
 
 function $297() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 64 | 0;
  global$0 = $0_1;
  label$1 : {
   $1_1 = $293(73044 | 0, 0 | 0, 1 | 0, 126116 | 0, 126108 | 0) | 0;
   if (($1_1 | 0) == (-1 | 0)) {
    break label$1
   }
   if (($321(4352 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $536($0_1 + 8 | 0 | 0, 0 | 0, 56 | 0) | 0;
   HEAP8[($0_1 + 20 | 0) >> 0] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = 4352;
   $327($0_1 + 8 | 0 | 0) | 0;
  }
  label$2 : {
   if (!(HEAP32[(0 + 126076 | 0) >> 2] | 0)) {
    break label$2
   }
   $1_1 = $293(73138 | 0, 0 | 0, 2 | 0, 126120 | 0, 126112 | 0) | 0;
   if (($1_1 | 0) == (-1 | 0)) {
    break label$2
   }
   if (($321(4352 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$2
   }
   $536($0_1 + 8 | 0 | 0, 0 | 0, 56 | 0) | 0;
   HEAP8[($0_1 + 20 | 0) >> 0] = 1;
   HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = 4352;
   $327($0_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $0_1 + 64 | 0;
 }
 
 function $298($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $262(4 | 0) | 0 | 0;
 }
 
 function $299($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $300($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $301($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $302($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $303($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $304($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return -1 | 0;
 }
 
 function $305($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $306($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $307($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($0_1 + 84 | 0) >> 2] | 0)) {
     break label$2
    }
    if (($837() | 0 | 0) == (HEAP32[($0_1 + 88 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   $834(HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) | 0;
  }
 }
 
 function $308($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($0_1 + 84 | 0) >> 2] | 0)) {
     break label$2
    }
    if (($837() | 0 | 0) == (HEAP32[($0_1 + 88 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   $835(HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) | 0;
  }
 }
 
 function $309($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $310() {
  
 }
 
 function $311($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[(0 + 126052 | 0) >> 2] | 0 | 0]($0_1);
   $257($0_1 + 64 | 0 | 0, 1 | 0) | 0;
   $257($0_1 + 56 | 0 | 0, 1 | 0) | 0;
   $257($0_1 + 60 | 0 | 0, 0 | 0) | 0;
   FUNCTION_TABLE[HEAP32[(0 + 126056 | 0) >> 2] | 0 | 0]($0_1);
   label$2 : {
    $1_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    $850($1_1 | 0, 0 | 0);
   }
   label$3 : {
    $1_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$3
    }
    $833($1_1 | 0);
   }
   $459(HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0);
   $268(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0);
   label$4 : {
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$1_1) {
     break label$4
    }
    $1_1 = ($1_1 << 2 | 0) + 126124 | 0;
    if ((HEAP32[$1_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$4
    }
    HEAP32[$1_1 >> 2] = 0;
   }
   label$5 : {
    if (!(HEAP32[($0_1 + 96 | 0) >> 2] | 0)) {
     break label$5
    }
    FUNCTION_TABLE[HEAP32[(0 + 126048 | 0) >> 2] | 0 | 0]($0_1);
   }
   $263(HEAP32[($0_1 + 92 | 0) >> 2] | 0 | 0);
   $459($0_1 | 0);
  }
 }
 
 function $312($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = 128;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
     switch ($2_1 + -8 | 0 | 0) {
     case 0:
     case 8:
      break label$1;
     case 1:
     case 2:
     case 3:
     case 4:
     case 5:
     case 6:
     case 7:
      break label$2;
     default:
      break label$3;
     };
    }
    if (($2_1 | 0) == (4112 | 0)) {
     break label$1
    }
   }
   $1_1 = 0;
  }
  HEAP8[($0_1 + 7 | 0) >> 0] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = Math_imul(Math_imul(HEAPU8[($0_1 + 6 | 0) >> 0] | 0, ($2_1 >>> 3 | 0) & 31 | 0), HEAPU16[($0_1 + 8 | 0) >> 1] | 0);
 }
 
 function $313($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               if (($0_1 | 0) > (33055 | 0)) {
                break label$13
               }
               label$14 : {
                switch ($0_1 + -32776 | 0 | 0) {
                case 8:
                 break label$11;
                case 0:
                 break label$12;
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                 break label$2;
                case 24:
                 break label$7;
                default:
                 break label$14;
                };
               }
               $1_1 = 0;
               switch ($0_1 + -8 | 0 | 0) {
               case 1:
               case 2:
               case 3:
               case 4:
               case 5:
               case 6:
               case 7:
                break label$2;
               case 0:
                break label$3;
               case 8:
                break label$9;
               default:
                break label$8;
               };
              }
              label$15 : {
               switch ($0_1 + -36880 | 0 | 0) {
               case 0:
                break label$10;
               case 1:
               case 2:
               case 3:
               case 4:
               case 5:
               case 6:
               case 7:
               case 8:
               case 9:
               case 10:
               case 11:
               case 12:
               case 13:
               case 14:
               case 15:
                break label$2;
               case 16:
                break label$6;
               default:
                break label$15;
               };
              }
              if (($0_1 | 0) == (33056 | 0)) {
               break label$5
              }
              if (($0_1 | 0) == (37152 | 0)) {
               break label$4
              }
              break label$2;
             }
             $1_1 = 1;
             break label$3;
            }
            $1_1 = 2;
            break label$3;
           }
           $1_1 = 3;
           break label$3;
          }
          $1_1 = 4;
          break label$3;
         }
         if (($0_1 | 0) != (4112 | 0)) {
          break label$2
         }
         $1_1 = 5;
         break label$3;
        }
        $1_1 = 6;
        break label$3;
       }
       $1_1 = 7;
       break label$3;
      }
      $1_1 = 8;
      break label$3;
     }
     $1_1 = 9;
    }
    HEAP32[(0 + 126196 | 0) >> 2] = 1;
    HEAP32[(0 + 126192 | 0) >> 2] = $1_1;
    $0_1 = HEAPU16[(Math_imul($1_1, 20) + 87312 | 0) >> 1] | 0;
    break label$1;
   }
   $0_1 = 0;
   HEAP32[(0 + 126192 | 0) >> 2] = 10;
   HEAP32[(0 + 126196 | 0) >> 2] = 0;
  }
  return $0_1 & 65535 | 0 | 0;
 }
 
 function $314() {
  var $2_1 = 0, $0_1 = 0, $1_1 = 0;
  $0_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 126192 | 0) >> 2] | 0;
   if (($1_1 | 0) == (10 | 0)) {
    break label$1
   }
   $2_1 = HEAP32[(0 + 126196 | 0) >> 2] | 0;
   if (($2_1 | 0) == (10 | 0)) {
    break label$1
   }
   HEAP32[(0 + 126196 | 0) >> 2] = $2_1 + 1 | 0;
   $0_1 = HEAPU16[((Math_imul($1_1, 20) + ($2_1 << 1 | 0) | 0) + 87312 | 0) >> 1] | 0;
  }
  return $0_1 & 65535 | 0 | 0;
 }
 
 function $315($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $445();
  $261();
  $839();
  $1_1 = 0;
  label$1 : {
   label$2 : {
    $0_1 = ($0_1 >>> 4 | 0) & 512 | 0 | $0_1 | 0;
    $0_1 = $0_1 & 560 | 0 ? $0_1 | 16384 | 0 : $0_1;
    if (!($0_1 & 16384 | 0)) {
     break label$2
    }
    $1_1 = 0;
    label$3 : {
     $2_1 = HEAPU8[(0 + 126222 | 0) >> 0] | 0;
     if ($2_1) {
      break label$3
     }
     if (($336() | 0 | 0) < (0 | 0)) {
      break label$1
     }
     $2_1 = HEAPU8[(0 + 126222 | 0) >> 0] | 0;
    }
    HEAP8[(0 + 126222 | 0) >> 0] = $2_1 + 1 | 0;
    $1_1 = 16384;
   }
   label$4 : {
    if (!($0_1 & 1 | 0)) {
     break label$4
    }
    label$5 : {
     $2_1 = HEAPU8[(0 + 126208 | 0) >> 0] | 0;
     if ($2_1) {
      break label$5
     }
     if (($851() | 0 | 0) < (0 | 0)) {
      break label$1
     }
     $2_1 = HEAPU8[(0 + 126208 | 0) >> 0] | 0;
    }
    HEAP8[(0 + 126208 | 0) >> 0] = $2_1 + 1 | 0;
    $1_1 = $1_1 | 1 | 0;
   }
   label$6 : {
    if (!($0_1 & 32 | 0)) {
     break label$6
    }
    label$7 : {
     $2_1 = HEAPU8[(0 + 126213 | 0) >> 0] | 0;
     if ($2_1) {
      break label$7
     }
     if (($922(0 | 0) | 0 | 0) < (0 | 0)) {
      break label$1
     }
     $2_1 = HEAPU8[(0 + 126213 | 0) >> 0] | 0;
    }
    HEAP8[(0 + 126213 | 0) >> 0] = $2_1 + 1 | 0;
    $1_1 = $1_1 | 32 | 0;
   }
   label$8 : {
    if (!($0_1 & 16 | 0)) {
     break label$8
    }
    label$9 : {
     $2_1 = HEAPU8[(0 + 126212 | 0) >> 0] | 0;
     if ($2_1) {
      break label$9
     }
     if (($295(0 | 0) | 0 | 0) < (0 | 0)) {
      break label$1
     }
     $2_1 = HEAPU8[(0 + 126212 | 0) >> 0] | 0;
    }
    HEAP8[(0 + 126212 | 0) >> 0] = $2_1 + 1 | 0;
    $1_1 = $1_1 | 16 | 0;
   }
   label$10 : {
    if (!($0_1 & 512 | 0)) {
     break label$10
    }
    label$11 : {
     $2_1 = HEAPU8[(0 + 126217 | 0) >> 0] | 0;
     if ($2_1) {
      break label$11
     }
     if (($391() | 0 | 0) < (0 | 0)) {
      break label$1
     }
     $2_1 = HEAPU8[(0 + 126217 | 0) >> 0] | 0;
    }
    HEAP8[(0 + 126217 | 0) >> 0] = $2_1 + 1 | 0;
    $1_1 = $1_1 | 512 | 0;
   }
   label$12 : {
    if (!($0_1 & 8192 | 0)) {
     break label$12
    }
    label$13 : {
     $2_1 = HEAPU8[(0 + 126221 | 0) >> 0] | 0;
     if ($2_1) {
      break label$13
     }
     if (($354() | 0 | 0) < (0 | 0)) {
      break label$1
     }
     $2_1 = HEAPU8[(0 + 126221 | 0) >> 0] | 0;
    }
    HEAP8[(0 + 126221 | 0) >> 0] = $2_1 + 1 | 0;
    $1_1 = $1_1 | 8192 | 0;
   }
   label$14 : {
    if (!($0_1 & 4096 | 0)) {
     break label$14
    }
    $260(67106 | 0, 0 | 0) | 0;
    break label$1;
   }
   $2_1 = 0;
   label$15 : {
    if (!($0_1 & 32768 | 0)) {
     break label$15
    }
    $2_1 = 0;
    label$16 : {
     $0_1 = HEAPU8[(0 + 126223 | 0) >> 0] | 0;
     if ($0_1) {
      break label$16
     }
     if (($517() | 0 | 0) < (0 | 0)) {
      break label$1
     }
     $0_1 = HEAPU8[(0 + 126223 | 0) >> 0] | 0;
    }
    HEAP8[(0 + 126223 | 0) >> 0] = $0_1 + 1 | 0;
   }
   return $2_1 | 0;
  }
  $316($1_1 | 0);
  return -1 | 0;
 }
 
 function $316($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!($0_1 & 32768 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      $1_1 = HEAPU8[(0 + 126223 | 0) >> 0] | 0;
      switch ($1_1 | 0) {
      case 0:
       break label$1;
      case 1:
       break label$3;
      default:
       break label$4;
      };
     }
     if (!(HEAPU8[(0 + 126240 | 0) >> 0] | 0)) {
      break label$2
     }
    }
    $520();
    $1_1 = HEAPU8[(0 + 126223 | 0) >> 0] | 0;
    if (!$1_1) {
     break label$1
    }
   }
   HEAP8[(0 + 126223 | 0) >> 0] = $1_1 + -1 | 0;
  }
  label$5 : {
   if (!($0_1 & 8192 | 0)) {
    break label$5
   }
   $0_1 = $0_1 | 512 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      $1_1 = HEAPU8[(0 + 126221 | 0) >> 0] | 0;
      switch ($1_1 | 0) {
      case 0:
       break label$5;
      case 1:
       break label$7;
      default:
       break label$8;
      };
     }
     if (!(HEAPU8[(0 + 126240 | 0) >> 0] | 0)) {
      break label$6
     }
    }
    $366();
    $1_1 = HEAPU8[(0 + 126221 | 0) >> 0] | 0;
    if (!$1_1) {
     break label$5
    }
   }
   HEAP8[(0 + 126221 | 0) >> 0] = $1_1 + -1 | 0;
  }
  label$9 : {
   if (!($0_1 & 512 | 0)) {
    break label$9
   }
   $0_1 = $0_1 | 16384 | 0;
   label$10 : {
    label$11 : {
     label$12 : {
      $1_1 = HEAPU8[(0 + 126217 | 0) >> 0] | 0;
      switch ($1_1 | 0) {
      case 1:
       break label$11;
      case 0:
       break label$9;
      default:
       break label$12;
      };
     }
     if (!(HEAPU8[(0 + 126240 | 0) >> 0] | 0)) {
      break label$10
     }
    }
    $393();
    $1_1 = HEAPU8[(0 + 126217 | 0) >> 0] | 0;
    if (!$1_1) {
     break label$9
    }
   }
   HEAP8[(0 + 126217 | 0) >> 0] = $1_1 + -1 | 0;
  }
  label$13 : {
   if (!($0_1 & 16 | 0)) {
    break label$13
   }
   $0_1 = $0_1 | 16384 | 0;
   label$14 : {
    label$15 : {
     label$16 : {
      $1_1 = HEAPU8[(0 + 126212 | 0) >> 0] | 0;
      switch ($1_1 | 0) {
      case 0:
       break label$13;
      case 1:
       break label$15;
      default:
       break label$16;
      };
     }
     if (!(HEAPU8[(0 + 126240 | 0) >> 0] | 0)) {
      break label$14
     }
    }
    $296();
    $1_1 = HEAPU8[(0 + 126212 | 0) >> 0] | 0;
    if (!$1_1) {
     break label$13
    }
   }
   HEAP8[(0 + 126212 | 0) >> 0] = $1_1 + -1 | 0;
  }
  label$17 : {
   if (!($0_1 & 32 | 0)) {
    break label$17
   }
   $0_1 = $0_1 | 16384 | 0;
   label$18 : {
    label$19 : {
     label$20 : {
      $1_1 = HEAPU8[(0 + 126213 | 0) >> 0] | 0;
      switch ($1_1 | 0) {
      case 0:
       break label$17;
      case 1:
       break label$19;
      default:
       break label$20;
      };
     }
     if (!(HEAPU8[(0 + 126240 | 0) >> 0] | 0)) {
      break label$18
     }
    }
    $923();
    $1_1 = HEAPU8[(0 + 126213 | 0) >> 0] | 0;
    if (!$1_1) {
     break label$17
    }
   }
   HEAP8[(0 + 126213 | 0) >> 0] = $1_1 + -1 | 0;
  }
  label$21 : {
   if (!($0_1 & 1 | 0)) {
    break label$21
   }
   label$22 : {
    label$23 : {
     label$24 : {
      $1_1 = HEAPU8[(0 + 126208 | 0) >> 0] | 0;
      switch ($1_1 | 0) {
      case 0:
       break label$21;
      case 1:
       break label$23;
      default:
       break label$24;
      };
     }
     if (!(HEAPU8[(0 + 126240 | 0) >> 0] | 0)) {
      break label$22
     }
    }
    $852();
    $1_1 = HEAPU8[(0 + 126208 | 0) >> 0] | 0;
    if (!$1_1) {
     break label$21
    }
   }
   HEAP8[(0 + 126208 | 0) >> 0] = $1_1 + -1 | 0;
  }
  label$25 : {
   if (!($0_1 & 16384 | 0)) {
    break label$25
   }
   label$26 : {
    label$27 : {
     label$28 : {
      $0_1 = HEAPU8[(0 + 126222 | 0) >> 0] | 0;
      switch ($0_1 | 0) {
      case 0:
       break label$25;
      case 1:
       break label$27;
      default:
       break label$28;
      };
     }
     if (!(HEAPU8[(0 + 126240 | 0) >> 0] | 0)) {
      break label$26
     }
    }
    $341();
    $0_1 = HEAPU8[(0 + 126222 | 0) >> 0] | 0;
    if (!$0_1) {
     break label$25
    }
   }
   HEAP8[(0 + 126222 | 0) >> 0] = $0_1 + -1 | 0;
  }
 }
 
 function $317($0_1) {
  $0_1 = $0_1 | 0;
  return $315($0_1 | 0) | 0 | 0;
 }
 
 function $318($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ((__wasm_popcnt_i32($0_1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   return (HEAPU8[(($0_1 ? Math_clz32($0_1) ^ 31 | 0 : -1) + 126208 | 0) >> 0] | 0 ? $0_1 : 0) | 0;
  }
  $0_1 = $0_1 ? $0_1 : 62001;
  $1_1 = Math_clz32($0_1);
  $2_1 = 32 - $1_1 | 0;
  $3_1 = $2_1 & 1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 | 0) != (31 | 0)) {
     break label$3
    }
    $4_1 = 0;
    $1_1 = 0;
    break label$2;
   }
   $5_1 = $2_1 & 62 | 0;
   $4_1 = 0;
   $1_1 = 0;
   $2_1 = 0;
   label$4 : while (1) {
    label$5 : {
     if (!($0_1 & 1 | 0)) {
      break label$5
     }
     if (!(HEAPU8[($1_1 + 126208 | 0) >> 0] | 0)) {
      break label$5
     }
     $4_1 = $4_1 | (1 << $1_1 | 0) | 0;
    }
    label$6 : {
     if (!($0_1 & 2 | 0)) {
      break label$6
     }
     if (!(HEAPU8[($1_1 + 126209 | 0) >> 0] | 0)) {
      break label$6
     }
     $4_1 = $4_1 | (2 << $1_1 | 0) | 0;
    }
    $0_1 = $0_1 >>> 2 | 0;
    $1_1 = $1_1 + 2 | 0;
    $2_1 = $2_1 + 2 | 0;
    if (($2_1 | 0) != ($5_1 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  label$7 : {
   if (!$3_1) {
    break label$7
   }
   if (!($0_1 & 1 | 0)) {
    break label$7
   }
   if (!(HEAPU8[($1_1 + 126208 | 0) >> 0] | 0)) {
    break label$7
   }
   $4_1 = $4_1 | (1 << $1_1 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $319() {
  return 70721 | 0;
 }
 
 function $320() {
  var $1_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  $1_1 = $381(75638 | 0) | 0;
  $834(HEAP32[(0 + 126244 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(0 + 126248 | 0) >> 2] = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   if (!($549($1_1 | 0) | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = HEAP32[(0 + 126256 | 0) >> 2] | 0;
   $447(83204 | 0, $0_1 | 0);
  }
  label$2 : {
   $1_1 = HEAP32[(0 + 126260 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   label$3 : while (1) {
    $2_1 = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
    $459($1_1 | 0);
    $1_1 = $2_1;
    if ($1_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   $1_1 = HEAP32[(0 + 126268 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$4
   }
   label$5 : while (1) {
    $2_1 = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
    $459($1_1 | 0);
    $1_1 = $2_1;
    if ($1_1) {
     continue label$5
    }
    break label$5;
   };
  }
  label$6 : {
   $1_1 = HEAP32[(0 + 126272 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$6
   }
   label$7 : while (1) {
    $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    $459($1_1 | 0);
    $1_1 = $2_1;
    if ($1_1) {
     continue label$7
    }
    break label$7;
   };
  }
  label$8 : {
   $1_1 = HEAP32[(0 + 126276 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$8
   }
   label$9 : while (1) {
    $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    $459($1_1 | 0);
    $1_1 = $2_1;
    if ($1_1) {
     continue label$9
    }
    break label$9;
   };
  }
  $257(126252 | 0, 0 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 126272 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 126276 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 126264 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 126268 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 126256 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 126260 | 0) >> 2] = i64toi32_i32$0;
  $257(126280 | 0, 0 | 0) | 0;
  $1_1 = 0;
  label$10 : while (1) {
   $2_1 = ($1_1 << 2 | 0) + 126288 | 0;
   $459(HEAP32[$2_1 >> 2] | 0 | 0);
   HEAP32[$2_1 >> 2] = 0;
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (256 | 0)) {
    continue label$10
   }
   break label$10;
  };
  label$11 : {
   $1_1 = HEAP32[(0 + 127312 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$11
   }
   $459($1_1 | 0);
   HEAP32[(0 + 127316 | 0) >> 2] = 0;
   HEAP32[(0 + 127312 | 0) >> 2] = 0;
  }
  $536(127320 | 0, 0 | 0, 12 | 0) | 0;
  $835(HEAP32[(0 + 126244 | 0) >> 2] | 0 | 0) | 0;
  label$12 : {
   $1_1 = HEAP32[(0 + 126244 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$12
   }
   $833($1_1 | 0);
   HEAP32[(0 + 126244 | 0) >> 2] = 0;
  }
  global$0 = $0_1 + 16 | 0;
 }
 
 function $321($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = (($0_1 >>> 6 | 0) & 1020 | 0) + 126288 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    $4_1 = 0;
    if (((HEAP32[($3_1 + (($0_1 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> $0_1 | 0) & 1 | 0) {
     break label$1
    }
   }
   $4_1 = 1;
  }
  label$3 : {
   $5_1 = $1_1 >>> 0 > 1 >>> 0;
   if ($5_1) {
    break label$3
   }
   if (($1_1 | 0) == ($4_1 | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if ($1_1) {
      break label$5
     }
     label$6 : {
      if ($3_1) {
       break label$6
      }
      $3_1 = $457(1 | 0, 32 | 0) | 0;
      HEAP32[$2_1 >> 2] = $3_1;
      if (!$3_1) {
       break label$4
      }
     }
     $1_1 = $3_1 + (($0_1 >>> 3 | 0) & 28 | 0) | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | (1 << $0_1 | 0) | 0;
     $322($0_1 | 0, $0_1 | 0);
     break label$4;
    }
    $1_1 = $3_1 + (($0_1 >>> 3 | 0) & 28 | 0) | 0;
    HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $0_1 | 0) | 0) | 0;
   }
   label$7 : {
    label$8 : {
     if (!($383(75471 | 0, 1 | 0) | 0)) {
      break label$8
     }
     $1_1 = 0;
     if (!(HEAP32[(0 + 126312 | 0) >> 2] | 0)) {
      break label$7
     }
     if ($417(-1 | 0) | 0) {
      break label$7
     }
    }
    $1_1 = 1;
   }
   HEAP8[(0 + 127344 | 0) >> 0] = $1_1;
   HEAP8[(0 + 127348 | 0) >> 0] = !($383(75386 | 0, 1 | 0) | 0) | (HEAP32[(0 + 126360 | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
  }
  label$9 : {
   if ($5_1) {
    break label$9
   }
   if (($0_1 & -2 | 0 | 0) != (4096 | 0)) {
    break label$9
   }
   $940();
  }
  return $4_1 | 0;
 }
 
 function $322($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $834(HEAP32[(0 + 126244 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!(HEAP32[(0 + 126248 | 0) >> 2] | 0)) {
    break label$1
   }
   $2_1 = HEAP32[(0 + 126260 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = $2_1;
    $2_1 = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
    label$3 : {
     $4_1 = HEAP32[$3_1 >> 2] | 0;
     if ($0_1 >>> 0 > $4_1 >>> 0) {
      break label$3
     }
     if ($4_1 >>> 0 > $1_1 >>> 0) {
      break label$3
     }
     label$4 : {
      $4_1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$4
      }
      HEAP32[($4_1 + 72 | 0) >> 2] = $2_1;
     }
     label$5 : {
      if (!$2_1) {
       break label$5
      }
      HEAP32[($2_1 + 68 | 0) >> 2] = $4_1;
     }
     label$6 : {
      if (($3_1 | 0) != (HEAP32[(0 + 126260 | 0) >> 2] | 0 | 0)) {
       break label$6
      }
      HEAP32[(0 + 126260 | 0) >> 2] = $2_1;
     }
     label$7 : {
      if (($3_1 | 0) != (HEAP32[(0 + 126264 | 0) >> 2] | 0 | 0)) {
       break label$7
      }
      HEAP32[(0 + 126264 | 0) >> 2] = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
     }
     label$8 : {
      if ((HEAP32[$3_1 >> 2] | 0 | 0) != (32512 | 0)) {
       break label$8
      }
      $258(126280 | 0, -1 | 0) | 0;
     }
     HEAP32[($3_1 + 72 | 0) >> 2] = HEAP32[(0 + 126268 | 0) >> 2] | 0;
     HEAP32[(0 + 126268 | 0) >> 2] = $3_1;
     $258(126252 | 0, -1 | 0) | 0;
    }
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $835(HEAP32[(0 + 126244 | 0) >> 2] | 0 | 0) | 0;
 }
 
 function $323($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $324($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $324($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $13_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $14_1 = 0, $12_1 = 0, $17_1 = 0, $17$hi = 0, $18_1 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $8_1 = 0, $7_1 = 0, $22_1 = Math_fround(0), $18$hi = 0, $9_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $11_1 = 0, $15_1 = 0, $10_1 = 0, $263_1 = 0, $360_1 = 0, $19_1 = 0, $19$hi = 0, $397_1 = 0, $637_1 = 0, $648_1 = 0, $720_1 = 0, $731_1 = 0, $742_1 = 0, $913_1 = 0, $967_1 = 0, $1023_1 = 0, $1286_1 = 0, $1302_1 = 0, $1398 = 0, $1403 = 0, $1408 = 0, $1413 = 0, $1418 = 0, $1423 = 0, $1428 = 0, $1440 = 0, $16_1 = 0, $1520 = 0, $1525 = 0, $1530 = 0, $1535 = 0, $1540 = 0, $1545 = 0, $1550 = 0, $1564 = 0;
  $6_1 = global$0 - 1648 | 0;
  global$0 = $6_1;
  $834(HEAP32[(0 + 126244 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[(0 + 126248 | 0) >> 2] | 0) {
     break label$2
    }
    label$3 : {
     if (($2_1 | 0) != (2 | 0)) {
      break label$3
     }
     $260(70572 | 0, 0 | 0) | 0;
    }
    $835(HEAP32[(0 + 126244 | 0) >> 2] | 0 | 0) | 0;
    $7_1 = -1;
    break label$1;
   }
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $8_1 = 0;
     label$6 : {
      if (($1_1 | 0) >= (1 | 0)) {
       break label$6
      }
      $7_1 = 0;
      break label$4;
     }
     $9_1 = ($6_1 + 1344 | 0) + 20 | 0;
     $4_1 = ($6_1 + 240 | 0) + 24 | 0;
     $5_1 = ($6_1 + 336 | 0) + 40 | 0;
     $10_1 = ($6_1 + 336 | 0) + 32 | 0;
     $11_1 = ($6_1 + 800 | 0) + 48 | 0;
     $7_1 = 0;
     label$7 : while (1) {
      label$8 : {
       label$9 : {
        $12_1 = $259(126252 | 0) | 0;
        if (($12_1 | 0) < (65535 | 0)) {
         break label$9
        }
        HEAP32[$6_1 >> 2] = $12_1;
        $260(81398 | 0, $6_1 | 0) | 0;
        $12_1 = 0;
        break label$8;
       }
       label$10 : {
        label$11 : {
         $12_1 = HEAP32[(0 + 126268 | 0) >> 2] | 0;
         if ($12_1) {
          break label$11
         }
         $12_1 = $456(80 | 0) | 0;
         if ($12_1) {
          break label$10
         }
         $12_1 = 0;
         break label$8;
        }
        HEAP32[(0 + 126268 | 0) >> 2] = HEAP32[($12_1 + 72 | 0) >> 2] | 0;
       }
       $13_1 = $0_1 + Math_imul($8_1, 56) | 0;
       label$12 : {
        $3_1 = HEAP32[(0 + 127340 | 0) >> 2] | 0;
        if (($3_1 | 0) < (1 | 0)) {
         break label$12
        }
        label$13 : {
         label$14 : {
          label$15 : {
           if (($3_1 | 0) != (1 | 0)) {
            break label$15
           }
           label$16 : {
            $14_1 = HEAP32[$13_1 >> 2] | 0;
            if (($14_1 | 0) > (1793 | 0)) {
             break label$16
            }
            label$17 : {
             switch ($14_1 + -1623 | 0 | 0) {
             case 0:
             case 2:
              break label$12;
             case 1:
              break label$14;
             default:
              break label$17;
             };
            }
            if (($14_1 | 0) != (1024 | 0)) {
             break label$14
            }
            break label$12;
           }
           if (($14_1 | 0) == (1794 | 0)) {
            break label$12
           }
           if (($14_1 | 0) != (4608 | 0)) {
            break label$14
           }
           break label$12;
          }
          $14_1 = HEAP32[$13_1 >> 2] | 0;
          if (($3_1 | 0) != (2 | 0)) {
           break label$13
          }
         }
         if (($14_1 | 0) == (513 | 0)) {
          break label$12
         }
        }
        HEAP8[($6_1 + 1456 | 0) >> 0] = 0;
        HEAP8[($6_1 + 1584 | 0) >> 0] = 0;
        label$18 : {
         if (($14_1 & -32768 | 0 | 0) != (32768 | 0)) {
          break label$18
         }
         $540($6_1 + 1584 | 0 | 0, 75067 | 0, 64 | 0) | 0;
         label$19 : {
          label$20 : {
           $14_1 = HEAP32[$13_1 >> 2] | 0;
           if ($14_1 >>> 0 < 32769 >>> 0) {
            break label$20
           }
           HEAP32[($6_1 + 1376 | 0) >> 2] = $14_1 + -32768 | 0;
           $556($6_1 + 1392 | 0 | 0, 16 | 0, 66847 | 0, $6_1 + 1376 | 0 | 0) | 0;
           break label$19;
          }
          HEAP8[($6_1 + 1392 | 0) >> 0] = 0;
         }
         i64toi32_i32$2 = $13_1;
         i64toi32_i32$0 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
         $17_1 = i64toi32_i32$0;
         $17$hi = i64toi32_i32$1;
         i64toi32_i32$2 = $13_1;
         i64toi32_i32$1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($13_1 + 16 | 0) >> 2] | 0;
         $18_1 = i64toi32_i32$1;
         $18$hi = i64toi32_i32$0;
         HEAP32[$9_1 >> 2] = HEAP32[($13_1 + 20 | 0) >> 2] | 0;
         i64toi32_i32$1 = $6_1;
         HEAP32[($6_1 + 1356 | 0) >> 2] = $18_1;
         HEAP32[($6_1 + 1360 | 0) >> 2] = i64toi32_i32$0;
         i64toi32_i32$0 = $17$hi;
         i64toi32_i32$1 = $6_1;
         HEAP32[($6_1 + 1348 | 0) >> 2] = $17_1;
         HEAP32[($6_1 + 1352 | 0) >> 2] = i64toi32_i32$0;
         HEAP32[($6_1 + 1344 | 0) >> 2] = $6_1 + 1392 | 0;
         $556($6_1 + 1456 | 0 | 0, 128 | 0, 81755 | 0, $6_1 + 1344 | 0 | 0) | 0;
         $14_1 = HEAP32[$13_1 >> 2] | 0;
        }
        label$21 : {
         label$22 : {
          label$23 : {
           label$24 : {
            label$25 : {
             label$26 : {
              label$27 : {
               label$28 : {
                label$29 : {
                 label$30 : {
                  label$31 : {
                   label$32 : {
                    label$33 : {
                     label$34 : {
                      label$35 : {
                       label$36 : {
                        label$37 : {
                         label$38 : {
                          label$39 : {
                           label$40 : {
                            label$41 : {
                             label$42 : {
                              label$43 : {
                               label$44 : {
                                label$45 : {
                                 label$46 : {
                                  label$47 : {
                                   label$48 : {
                                    label$49 : {
                                     label$50 : {
                                      label$51 : {
                                       label$52 : {
                                        label$53 : {
                                         label$54 : {
                                          label$55 : {
                                           label$56 : {
                                            label$57 : {
                                             label$58 : {
                                              label$59 : {
                                               label$60 : {
                                                label$61 : {
                                                 label$62 : {
                                                  label$63 : {
                                                   label$64 : {
                                                    label$65 : {
                                                     label$66 : {
                                                      label$67 : {
                                                       label$68 : {
                                                        label$69 : {
                                                         label$70 : {
                                                          label$71 : {
                                                           label$72 : {
                                                            label$73 : {
                                                             label$74 : {
                                                              label$75 : {
                                                               label$76 : {
                                                                label$77 : {
                                                                 label$78 : {
                                                                  label$79 : {
                                                                   if (($14_1 | 0) > (1535 | 0)) {
                                                                    break label$79
                                                                   }
                                                                   label$80 : {
                                                                    if (($14_1 | 0) > (511 | 0)) {
                                                                     break label$80
                                                                    }
                                                                    switch ($14_1 + -256 | 0 | 0) {
                                                                    case 8:
                                                                    case 9:
                                                                    case 10:
                                                                    case 11:
                                                                    case 12:
                                                                    case 13:
                                                                    case 14:
                                                                    case 15:
                                                                    case 16:
                                                                    case 17:
                                                                    case 18:
                                                                    case 19:
                                                                    case 20:
                                                                    case 21:
                                                                    case 22:
                                                                    case 23:
                                                                    case 24:
                                                                    case 25:
                                                                    case 26:
                                                                    case 27:
                                                                    case 28:
                                                                    case 29:
                                                                    case 30:
                                                                    case 31:
                                                                    case 32:
                                                                    case 33:
                                                                    case 34:
                                                                    case 35:
                                                                    case 36:
                                                                    case 37:
                                                                    case 38:
                                                                    case 39:
                                                                    case 40:
                                                                    case 41:
                                                                    case 42:
                                                                    case 43:
                                                                    case 44:
                                                                    case 45:
                                                                    case 46:
                                                                    case 47:
                                                                    case 48:
                                                                    case 49:
                                                                    case 50:
                                                                    case 51:
                                                                    case 52:
                                                                    case 53:
                                                                    case 54:
                                                                    case 55:
                                                                    case 56:
                                                                    case 57:
                                                                    case 58:
                                                                    case 59:
                                                                    case 60:
                                                                    case 61:
                                                                    case 62:
                                                                    case 63:
                                                                    case 64:
                                                                    case 65:
                                                                    case 66:
                                                                    case 67:
                                                                    case 68:
                                                                    case 69:
                                                                    case 70:
                                                                    case 71:
                                                                    case 72:
                                                                    case 73:
                                                                    case 74:
                                                                    case 75:
                                                                    case 76:
                                                                    case 77:
                                                                    case 78:
                                                                    case 79:
                                                                     break label$24;
                                                                    case 80:
                                                                     break label$66;
                                                                    case 7:
                                                                     break label$71;
                                                                    case 6:
                                                                     break label$72;
                                                                    case 5:
                                                                     break label$73;
                                                                    case 4:
                                                                     break label$74;
                                                                    case 3:
                                                                     break label$75;
                                                                    case 2:
                                                                     break label$76;
                                                                    case 1:
                                                                     break label$77;
                                                                    case 0:
                                                                     break label$78;
                                                                    default:
                                                                     break label$25;
                                                                    };
                                                                   }
                                                                   label$81 : {
                                                                    switch ($14_1 + -768 | 0 | 0) {
                                                                    case 3:
                                                                     break label$60;
                                                                    case 2:
                                                                     break label$61;
                                                                    case 1:
                                                                     break label$62;
                                                                    case 0:
                                                                     break label$63;
                                                                    case 4:
                                                                     break label$70;
                                                                    default:
                                                                     break label$81;
                                                                    };
                                                                   }
                                                                   label$82 : {
                                                                    switch ($14_1 + -1024 | 0 | 0) {
                                                                    case 3:
                                                                     break label$56;
                                                                    case 2:
                                                                     break label$57;
                                                                    case 1:
                                                                     break label$58;
                                                                    case 0:
                                                                     break label$59;
                                                                    default:
                                                                     break label$82;
                                                                    };
                                                                   }
                                                                   switch ($14_1 + -512 | 0 | 0) {
                                                                   case 1:
                                                                    break label$64;
                                                                   case 0:
                                                                    break label$65;
                                                                   default:
                                                                    break label$24;
                                                                   };
                                                                  }
                                                                  label$83 : {
                                                                   if (($14_1 | 0) > (2047 | 0)) {
                                                                    break label$83
                                                                   }
                                                                   label$84 : {
                                                                    switch ($14_1 + -1536 | 0 | 0) {
                                                                    case 7:
                                                                    case 8:
                                                                    case 9:
                                                                    case 10:
                                                                    case 11:
                                                                    case 12:
                                                                    case 13:
                                                                    case 14:
                                                                    case 15:
                                                                    case 16:
                                                                    case 17:
                                                                    case 18:
                                                                    case 19:
                                                                    case 20:
                                                                    case 21:
                                                                    case 22:
                                                                    case 23:
                                                                    case 24:
                                                                    case 25:
                                                                    case 26:
                                                                    case 27:
                                                                    case 28:
                                                                    case 29:
                                                                    case 30:
                                                                    case 31:
                                                                    case 32:
                                                                    case 33:
                                                                    case 34:
                                                                    case 35:
                                                                    case 36:
                                                                    case 37:
                                                                    case 38:
                                                                    case 39:
                                                                    case 40:
                                                                    case 41:
                                                                    case 42:
                                                                    case 43:
                                                                    case 44:
                                                                    case 45:
                                                                    case 46:
                                                                    case 47:
                                                                    case 48:
                                                                    case 49:
                                                                    case 50:
                                                                    case 51:
                                                                    case 52:
                                                                    case 53:
                                                                    case 54:
                                                                    case 55:
                                                                    case 56:
                                                                    case 57:
                                                                    case 58:
                                                                    case 59:
                                                                    case 60:
                                                                    case 61:
                                                                    case 62:
                                                                    case 63:
                                                                    case 64:
                                                                    case 65:
                                                                    case 66:
                                                                    case 67:
                                                                    case 68:
                                                                    case 69:
                                                                    case 70:
                                                                    case 71:
                                                                    case 72:
                                                                    case 73:
                                                                    case 74:
                                                                    case 75:
                                                                    case 76:
                                                                    case 77:
                                                                    case 78:
                                                                    case 79:
                                                                     break label$24;
                                                                    case 89:
                                                                     break label$39;
                                                                    case 87:
                                                                     break label$40;
                                                                    case 88:
                                                                     break label$41;
                                                                    case 86:
                                                                     break label$42;
                                                                    case 85:
                                                                     break label$43;
                                                                    case 84:
                                                                     break label$44;
                                                                    case 83:
                                                                     break label$45;
                                                                    case 82:
                                                                     break label$46;
                                                                    case 81:
                                                                     break label$47;
                                                                    case 80:
                                                                     break label$48;
                                                                    case 6:
                                                                     break label$49;
                                                                    case 5:
                                                                     break label$50;
                                                                    case 4:
                                                                     break label$51;
                                                                    case 3:
                                                                     break label$52;
                                                                    case 2:
                                                                     break label$53;
                                                                    case 1:
                                                                     break label$54;
                                                                    case 0:
                                                                     break label$55;
                                                                    default:
                                                                     break label$84;
                                                                    };
                                                                   }
                                                                   switch ($14_1 + -1792 | 0 | 0) {
                                                                   case 2:
                                                                    break label$36;
                                                                   case 1:
                                                                    break label$37;
                                                                   case 0:
                                                                    break label$38;
                                                                   default:
                                                                    break label$24;
                                                                   };
                                                                  }
                                                                  label$85 : {
                                                                   if (($14_1 | 0) > (4351 | 0)) {
                                                                    break label$85
                                                                   }
                                                                   label$86 : {
                                                                    switch ($14_1 + -4096 | 0 | 0) {
                                                                    case 3:
                                                                     break label$29;
                                                                    case 2:
                                                                     break label$30;
                                                                    case 1:
                                                                     break label$31;
                                                                    case 0:
                                                                     break label$32;
                                                                    default:
                                                                     break label$86;
                                                                    };
                                                                   }
                                                                   switch ($14_1 + -2048 | 0 | 0) {
                                                                   case 2:
                                                                    break label$33;
                                                                   case 1:
                                                                    break label$34;
                                                                   case 0:
                                                                    break label$35;
                                                                   default:
                                                                    break label$69;
                                                                   };
                                                                  }
                                                                  label$87 : {
                                                                   if (($14_1 | 0) > (8191 | 0)) {
                                                                    break label$87
                                                                   }
                                                                   switch ($14_1 + -4352 | 0 | 0) {
                                                                   case 1:
                                                                    break label$27;
                                                                   case 0:
                                                                    break label$28;
                                                                   default:
                                                                    break label$26;
                                                                   };
                                                                  }
                                                                  label$88 : {
                                                                   switch ($14_1 + -8192 | 0 | 0) {
                                                                   case 1:
                                                                    break label$67;
                                                                   case 0:
                                                                    break label$68;
                                                                   default:
                                                                    break label$88;
                                                                   };
                                                                  }
                                                                  if (($14_1 | 0) != (32512 | 0)) {
                                                                   break label$24
                                                                  }
                                                                  break label$22;
                                                                 }
                                                                 $540($6_1 + 1584 | 0 | 0, 75128 | 0, 64 | 0) | 0;
                                                                 HEAP32[($6_1 + 48 | 0) >> 2] = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                                                 $556($6_1 + 1456 | 0 | 0, 128 | 0, 81226 | 0, $6_1 + 48 | 0 | 0) | 0;
                                                                 break label$22;
                                                                }
                                                                $540($6_1 + 1584 | 0 | 0, 76508 | 0, 64 | 0) | 0;
                                                                break label$22;
                                                               }
                                                               $540($6_1 + 1584 | 0 | 0, 74460 | 0, 64 | 0) | 0;
                                                               break label$22;
                                                              }
                                                              $540($6_1 + 1584 | 0 | 0, 77231 | 0, 64 | 0) | 0;
                                                              break label$22;
                                                             }
                                                             $540($6_1 + 1584 | 0 | 0, 77259 | 0, 64 | 0) | 0;
                                                             break label$22;
                                                            }
                                                            $540($6_1 + 1584 | 0 | 0, 77286 | 0, 64 | 0) | 0;
                                                            break label$22;
                                                           }
                                                           $540($6_1 + 1584 | 0 | 0, 77314 | 0, 64 | 0) | 0;
                                                           break label$22;
                                                          }
                                                          $540($6_1 + 1584 | 0 | 0, 77856 | 0, 64 | 0) | 0;
                                                          break label$22;
                                                         }
                                                         $540($6_1 + 1584 | 0 | 0, 77838 | 0, 64 | 0) | 0;
                                                         break label$22;
                                                        }
                                                        if (($14_1 | 0) != (2304 | 0)) {
                                                         break label$24
                                                        }
                                                        $540($6_1 + 1584 | 0 | 0, 76691 | 0, 64 | 0) | 0;
                                                        break label$22;
                                                       }
                                                       $540($6_1 + 1584 | 0 | 0, 75137 | 0, 64 | 0) | 0;
                                                       break label$22;
                                                      }
                                                      $540($6_1 + 1584 | 0 | 0, 75162 | 0, 64 | 0) | 0;
                                                      break label$22;
                                                     }
                                                     $540($6_1 + 1584 | 0 | 0, 75019 | 0, 64 | 0) | 0;
                                                     $14_1 = 82742;
                                                     label$89 : {
                                                      $3_1 = HEAPU8[($13_1 + 12 | 0) >> 0] | 0;
                                                      if ($3_1 >>> 0 > 4 >>> 0) {
                                                       break label$89
                                                      }
                                                      $14_1 = HEAP32[(($3_1 << 2 | 0) + 87512 | 0) >> 2] | 0;
                                                     }
                                                     $540($6_1 + 1392 | 0 | 0, $14_1 | 0, 64 | 0) | 0;
                                                     i64toi32_i32$2 = $13_1;
                                                     i64toi32_i32$0 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                                     i64toi32_i32$1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                                     $17_1 = i64toi32_i32$0;
                                                     $17$hi = i64toi32_i32$1;
                                                     HEAP32[($6_1 + 76 | 0) >> 2] = HEAP32[($13_1 + 16 | 0) >> 2] | 0;
                                                     i64toi32_i32$0 = $6_1;
                                                     HEAP32[($6_1 + 64 | 0) >> 2] = $17_1;
                                                     HEAP32[($6_1 + 68 | 0) >> 2] = i64toi32_i32$1;
                                                     HEAP32[($6_1 + 72 | 0) >> 2] = $6_1 + 1392 | 0;
                                                     $556($6_1 + 1456 | 0 | 0, 128 | 0, 82644 | 0, $6_1 + 64 | 0 | 0) | 0;
                                                     break label$22;
                                                    }
                                                    $540($6_1 + 1584 | 0 | 0, 75036 | 0, 64 | 0) | 0;
                                                    $14_1 = 82742;
                                                    label$90 : {
                                                     $3_1 = HEAPU8[($13_1 + 12 | 0) >> 0] | 0;
                                                     if ($3_1 >>> 0 > 18 >>> 0) {
                                                      break label$90
                                                     }
                                                     $14_1 = HEAP32[(($3_1 << 2 | 0) + 87532 | 0) >> 2] | 0;
                                                    }
                                                    $540($6_1 + 1392 | 0 | 0, $14_1 | 0, 64 | 0) | 0;
                                                    i64toi32_i32$2 = $13_1;
                                                    i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                                    i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                                    $17_1 = i64toi32_i32$1;
                                                    $17$hi = i64toi32_i32$0;
                                                    i64toi32_i32$2 = $13_1;
                                                    i64toi32_i32$0 = HEAP32[($13_1 + 16 | 0) >> 2] | 0;
                                                    i64toi32_i32$1 = HEAP32[($13_1 + 20 | 0) >> 2] | 0;
                                                    $263_1 = i64toi32_i32$0;
                                                    i64toi32_i32$0 = $6_1;
                                                    HEAP32[($6_1 + 92 | 0) >> 2] = $263_1;
                                                    HEAP32[($6_1 + 96 | 0) >> 2] = i64toi32_i32$1;
                                                    i64toi32_i32$1 = $17$hi;
                                                    i64toi32_i32$0 = $6_1;
                                                    HEAP32[($6_1 + 80 | 0) >> 2] = $17_1;
                                                    HEAP32[($6_1 + 84 | 0) >> 2] = i64toi32_i32$1;
                                                    HEAP32[($6_1 + 88 | 0) >> 2] = $6_1 + 1392 | 0;
                                                    $556($6_1 + 1456 | 0 | 0, 128 | 0, 82589 | 0, $6_1 + 80 | 0 | 0) | 0;
                                                    break label$22;
                                                   }
                                                   $540($6_1 + 1584 | 0 | 0, 75081 | 0, 64 | 0) | 0;
                                                   HEAP32[($6_1 + 112 | 0) >> 2] = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                                   $556($6_1 + 1456 | 0 | 0, 128 | 0, 81226 | 0, $6_1 + 112 | 0 | 0) | 0;
                                                   break label$22;
                                                  }
                                                  $540($6_1 + 1584 | 0 | 0, 75972 | 0, 64 | 0) | 0;
                                                  $14_1 = HEAPU8[($13_1 + 12 | 0) >> 0] | 0;
                                                  $3_1 = HEAPU8[($13_1 + 13 | 0) >> 0] | 0;
                                                  i64toi32_i32$2 = $13_1;
                                                  i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                                  i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                                  $17_1 = i64toi32_i32$1;
                                                  $17$hi = i64toi32_i32$0;
                                                  i64toi32_i32$2 = $13_1;
                                                  i64toi32_i32$0 = HEAP32[($13_1 + 16 | 0) >> 2] | 0;
                                                  i64toi32_i32$1 = HEAP32[($13_1 + 20 | 0) >> 2] | 0;
                                                  $18_1 = i64toi32_i32$0;
                                                  $18$hi = i64toi32_i32$1;
                                                  HEAP32[(($6_1 + 128 | 0) + 24 | 0) >> 2] = HEAPU16[($13_1 + 24 | 0) >> 1] | 0;
                                                  i64toi32_i32$0 = ($6_1 + 128 | 0) + 16 | 0;
                                                  HEAP32[i64toi32_i32$0 >> 2] = $18_1;
                                                  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                                                  i64toi32_i32$1 = $17$hi;
                                                  i64toi32_i32$0 = $6_1;
                                                  HEAP32[($6_1 + 128 | 0) >> 2] = $17_1;
                                                  HEAP32[($6_1 + 132 | 0) >> 2] = i64toi32_i32$1;
                                                  HEAP32[($6_1 + 140 | 0) >> 2] = $3_1 ? 72276 : 72606;
                                                  HEAP32[($6_1 + 136 | 0) >> 2] = ($14_1 | 0) == (1 | 0) ? 73702 : 73710;
                                                  $556($6_1 + 1456 | 0 | 0, 128 | 0, 81283 | 0, $6_1 + 128 | 0 | 0) | 0;
                                                  break label$22;
                                                 }
                                                 $540($6_1 + 1584 | 0 | 0, 75771 | 0, 64 | 0) | 0;
                                                 $14_1 = HEAPU8[($13_1 + 12 | 0) >> 0] | 0;
                                                 $3_1 = HEAPU8[($13_1 + 13 | 0) >> 0] | 0;
                                                 i64toi32_i32$2 = $13_1;
                                                 i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                                 i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                                 $17_1 = i64toi32_i32$1;
                                                 $17$hi = i64toi32_i32$0;
                                                 i64toi32_i32$2 = $13_1;
                                                 i64toi32_i32$0 = HEAP32[($13_1 + 16 | 0) >> 2] | 0;
                                                 i64toi32_i32$1 = HEAP32[($13_1 + 20 | 0) >> 2] | 0;
                                                 $18_1 = i64toi32_i32$0;
                                                 $18$hi = i64toi32_i32$1;
                                                 HEAP32[(($6_1 + 160 | 0) + 24 | 0) >> 2] = HEAPU16[($13_1 + 24 | 0) >> 1] | 0;
                                                 i64toi32_i32$0 = ($6_1 + 160 | 0) + 16 | 0;
                                                 HEAP32[i64toi32_i32$0 >> 2] = $18_1;
                                                 HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                                                 i64toi32_i32$1 = $17$hi;
                                                 i64toi32_i32$0 = $6_1;
                                                 HEAP32[($6_1 + 160 | 0) >> 2] = $17_1;
                                                 HEAP32[($6_1 + 164 | 0) >> 2] = i64toi32_i32$1;
                                                 HEAP32[($6_1 + 172 | 0) >> 2] = $3_1 ? 72276 : 72606;
                                                 HEAP32[($6_1 + 168 | 0) >> 2] = ($14_1 | 0) == (1 | 0) ? 73702 : 73710;
                                                 $556($6_1 + 1456 | 0 | 0, 128 | 0, 81283 | 0, $6_1 + 160 | 0 | 0) | 0;
                                                 break label$22;
                                                }
                                                $540($6_1 + 1584 | 0 | 0, 76492 | 0, 64 | 0) | 0;
                                                i64toi32_i32$2 = $13_1;
                                                i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                                i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                                $17_1 = i64toi32_i32$1;
                                                $17$hi = i64toi32_i32$0;
                                                i64toi32_i32$2 = $13_1;
                                                i64toi32_i32$0 = HEAP32[($13_1 + 44 | 0) >> 2] | 0;
                                                i64toi32_i32$1 = HEAP32[($13_1 + 48 | 0) >> 2] | 0;
                                                $360_1 = i64toi32_i32$0;
                                                i64toi32_i32$0 = $6_1;
                                                HEAP32[($6_1 + 204 | 0) >> 2] = $360_1;
                                                HEAP32[($6_1 + 208 | 0) >> 2] = i64toi32_i32$1;
                                                i64toi32_i32$1 = $17$hi;
                                                i64toi32_i32$0 = $6_1;
                                                HEAP32[($6_1 + 192 | 0) >> 2] = $17_1;
                                                HEAP32[($6_1 + 196 | 0) >> 2] = i64toi32_i32$1;
                                                HEAP32[($6_1 + 200 | 0) >> 2] = $13_1 + 12 | 0;
                                                $556($6_1 + 1456 | 0 | 0, 128 | 0, 82465 | 0, $6_1 + 192 | 0 | 0) | 0;
                                                break label$22;
                                               }
                                               $540($6_1 + 1584 | 0 | 0, 74895 | 0, 64 | 0) | 0;
                                               i64toi32_i32$2 = $13_1;
                                               i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                               i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                               $17_1 = i64toi32_i32$1;
                                               $17$hi = i64toi32_i32$0;
                                               HEAP32[($6_1 + 232 | 0) >> 2] = $13_1 + 12 | 0;
                                               i64toi32_i32$1 = $6_1;
                                               HEAP32[($6_1 + 224 | 0) >> 2] = $17_1;
                                               HEAP32[($6_1 + 228 | 0) >> 2] = i64toi32_i32$0;
                                               $556($6_1 + 1456 | 0 | 0, 128 | 0, 82784 | 0, $6_1 + 224 | 0 | 0) | 0;
                                               break label$22;
                                              }
                                              $540($6_1 + 1584 | 0 | 0, 76220 | 0, 64 | 0) | 0;
                                              i64toi32_i32$2 = $13_1;
                                              i64toi32_i32$0 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                              i64toi32_i32$1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                              $17_1 = i64toi32_i32$0;
                                              $17$hi = i64toi32_i32$1;
                                              i64toi32_i32$2 = $13_1;
                                              i64toi32_i32$1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                                              i64toi32_i32$0 = HEAP32[($13_1 + 16 | 0) >> 2] | 0;
                                              $18_1 = i64toi32_i32$1;
                                              $18$hi = i64toi32_i32$0;
                                              i64toi32_i32$2 = $13_1;
                                              i64toi32_i32$0 = HEAP32[($13_1 + 20 | 0) >> 2] | 0;
                                              i64toi32_i32$1 = HEAP32[($13_1 + 24 | 0) >> 2] | 0;
                                              $19_1 = i64toi32_i32$0;
                                              $19$hi = i64toi32_i32$1;
                                              i64toi32_i32$2 = $13_1;
                                              i64toi32_i32$1 = HEAP32[($13_1 + 28 | 0) >> 2] | 0;
                                              i64toi32_i32$0 = HEAP32[($13_1 + 32 | 0) >> 2] | 0;
                                              $397_1 = i64toi32_i32$1;
                                              i64toi32_i32$1 = $4_1;
                                              HEAP32[i64toi32_i32$1 >> 2] = $397_1;
                                              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                              i64toi32_i32$0 = $19$hi;
                                              i64toi32_i32$1 = ($6_1 + 240 | 0) + 16 | 0;
                                              HEAP32[i64toi32_i32$1 >> 2] = $19_1;
                                              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                              i64toi32_i32$0 = $18$hi;
                                              i64toi32_i32$1 = $6_1;
                                              HEAP32[($6_1 + 248 | 0) >> 2] = $18_1;
                                              HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
                                              i64toi32_i32$0 = $17$hi;
                                              i64toi32_i32$1 = $6_1;
                                              HEAP32[($6_1 + 240 | 0) >> 2] = $17_1;
                                              HEAP32[($6_1 + 244 | 0) >> 2] = i64toi32_i32$0;
                                              $556($6_1 + 1456 | 0 | 0, 128 | 0, 82393 | 0, $6_1 + 240 | 0 | 0) | 0;
                                              break label$22;
                                             }
                                             $540($6_1 + 1584 | 0 | 0, 76042 | 0, 64 | 0) | 0;
                                             $14_1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                                             i64toi32_i32$2 = $13_1;
                                             i64toi32_i32$0 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                             i64toi32_i32$1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                             $17_1 = i64toi32_i32$0;
                                             $17$hi = i64toi32_i32$1;
                                             $3_1 = HEAPU8[($13_1 + 16 | 0) >> 0] | 0;
                                             $15_1 = HEAPU8[($13_1 + 17 | 0) >> 0] | 0;
                                             i64toi32_i32$2 = $13_1;
                                             i64toi32_i32$1 = HEAP32[($13_1 + 20 | 0) >> 2] | 0;
                                             i64toi32_i32$0 = HEAP32[($13_1 + 24 | 0) >> 2] | 0;
                                             $18_1 = i64toi32_i32$1;
                                             $18$hi = i64toi32_i32$0;
                                             HEAP32[(($6_1 + 272 | 0) + 20 | 0) >> 2] = HEAPU8[($13_1 + 18 | 0) >> 0] | 0;
                                             i64toi32_i32$1 = ($6_1 + 272 | 0) + 24 | 0;
                                             HEAP32[i64toi32_i32$1 >> 2] = $18_1;
                                             HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                             HEAP32[(($6_1 + 272 | 0) + 16 | 0) >> 2] = ($15_1 | 0) == (1 | 0) ? 73702 : 73710;
                                             HEAP32[($6_1 + 284 | 0) >> 2] = $3_1;
                                             i64toi32_i32$0 = $17$hi;
                                             i64toi32_i32$1 = $6_1;
                                             HEAP32[($6_1 + 272 | 0) >> 2] = $17_1;
                                             HEAP32[($6_1 + 276 | 0) >> 2] = i64toi32_i32$0;
                                             HEAP32[($6_1 + 280 | 0) >> 2] = $14_1;
                                             $556($6_1 + 1456 | 0 | 0, 128 | 0, 82268 | 0, $6_1 + 272 | 0 | 0) | 0;
                                             break label$22;
                                            }
                                            $540($6_1 + 1584 | 0 | 0, 75833 | 0, 64 | 0) | 0;
                                            $14_1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                                            i64toi32_i32$2 = $13_1;
                                            i64toi32_i32$0 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                            i64toi32_i32$1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                            $17_1 = i64toi32_i32$0;
                                            $17$hi = i64toi32_i32$1;
                                            $3_1 = HEAPU8[($13_1 + 16 | 0) >> 0] | 0;
                                            $15_1 = HEAPU8[($13_1 + 17 | 0) >> 0] | 0;
                                            i64toi32_i32$2 = $13_1;
                                            i64toi32_i32$1 = HEAP32[($13_1 + 20 | 0) >> 2] | 0;
                                            i64toi32_i32$0 = HEAP32[($13_1 + 24 | 0) >> 2] | 0;
                                            $18_1 = i64toi32_i32$1;
                                            $18$hi = i64toi32_i32$0;
                                            HEAP32[(($6_1 + 304 | 0) + 20 | 0) >> 2] = HEAPU8[($13_1 + 18 | 0) >> 0] | 0;
                                            i64toi32_i32$1 = ($6_1 + 304 | 0) + 24 | 0;
                                            HEAP32[i64toi32_i32$1 >> 2] = $18_1;
                                            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                            HEAP32[(($6_1 + 304 | 0) + 16 | 0) >> 2] = ($15_1 | 0) == (1 | 0) ? 73702 : 73710;
                                            HEAP32[($6_1 + 316 | 0) >> 2] = $3_1;
                                            i64toi32_i32$0 = $17$hi;
                                            i64toi32_i32$1 = $6_1;
                                            HEAP32[($6_1 + 304 | 0) >> 2] = $17_1;
                                            HEAP32[($6_1 + 308 | 0) >> 2] = i64toi32_i32$0;
                                            HEAP32[($6_1 + 312 | 0) >> 2] = $14_1;
                                            $556($6_1 + 1456 | 0 | 0, 128 | 0, 82268 | 0, $6_1 + 304 | 0 | 0) | 0;
                                            break label$22;
                                           }
                                           $540($6_1 + 1584 | 0 | 0, 76443 | 0, 64 | 0) | 0;
                                           i64toi32_i32$2 = $13_1;
                                           i64toi32_i32$0 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                           i64toi32_i32$1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                           $17_1 = i64toi32_i32$0;
                                           $17$hi = i64toi32_i32$1;
                                           i64toi32_i32$2 = $13_1;
                                           i64toi32_i32$1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                                           i64toi32_i32$0 = HEAP32[($13_1 + 16 | 0) >> 2] | 0;
                                           $18_1 = i64toi32_i32$1;
                                           $18$hi = i64toi32_i32$0;
                                           $20_1 = Math_fround(HEAPF32[($13_1 + 28 | 0) >> 2]);
                                           $21_1 = Math_fround(HEAPF32[($13_1 + 32 | 0) >> 2]);
                                           $14_1 = HEAP32[($13_1 + 24 | 0) >> 2] | 0;
                                           HEAP32[(($6_1 + 336 | 0) + 16 | 0) >> 2] = HEAP32[($13_1 + 20 | 0) >> 2] | 0;
                                           HEAP32[$5_1 >> 2] = $14_1 ? 73755 : 71235;
                                           HEAPF64[$10_1 >> 3] = +$21_1;
                                           HEAPF64[(($6_1 + 336 | 0) + 24 | 0) >> 3] = +$20_1;
                                           i64toi32_i32$1 = $6_1;
                                           HEAP32[($6_1 + 344 | 0) >> 2] = $18_1;
                                           HEAP32[($6_1 + 348 | 0) >> 2] = i64toi32_i32$0;
                                           i64toi32_i32$0 = $17$hi;
                                           i64toi32_i32$1 = $6_1;
                                           HEAP32[($6_1 + 336 | 0) >> 2] = $17_1;
                                           HEAP32[($6_1 + 340 | 0) >> 2] = i64toi32_i32$0;
                                           $556($6_1 + 1456 | 0 | 0, 128 | 0, 81430 | 0, $6_1 + 336 | 0 | 0) | 0;
                                           break label$22;
                                          }
                                          $540($6_1 + 1584 | 0 | 0, 76142 | 0, 64 | 0) | 0;
                                          i64toi32_i32$2 = $13_1;
                                          i64toi32_i32$0 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                          i64toi32_i32$1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                          $17_1 = i64toi32_i32$0;
                                          $17$hi = i64toi32_i32$1;
                                          $14_1 = HEAPU8[($13_1 + 12 | 0) >> 0] | 0;
                                          HEAP32[($6_1 + 396 | 0) >> 2] = HEAP16[($13_1 + 16 | 0) >> 1] | 0;
                                          HEAP32[($6_1 + 392 | 0) >> 2] = $14_1;
                                          i64toi32_i32$0 = $6_1;
                                          HEAP32[($6_1 + 384 | 0) >> 2] = $17_1;
                                          HEAP32[($6_1 + 388 | 0) >> 2] = i64toi32_i32$1;
                                          $556($6_1 + 1456 | 0 | 0, 128 | 0, 82547 | 0, $6_1 + 384 | 0 | 0) | 0;
                                          break label$22;
                                         }
                                         $540($6_1 + 1584 | 0 | 0, 76202 | 0, 64 | 0) | 0;
                                         i64toi32_i32$2 = $13_1;
                                         i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                         i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                         $17_1 = i64toi32_i32$1;
                                         $17$hi = i64toi32_i32$0;
                                         $14_1 = HEAPU8[($13_1 + 12 | 0) >> 0] | 0;
                                         $3_1 = HEAP16[($13_1 + 16 | 0) >> 1] | 0;
                                         HEAP32[(($6_1 + 400 | 0) + 16 | 0) >> 2] = HEAP16[($13_1 + 18 | 0) >> 1] | 0;
                                         HEAP32[($6_1 + 412 | 0) >> 2] = $3_1;
                                         HEAP32[($6_1 + 408 | 0) >> 2] = $14_1;
                                         i64toi32_i32$1 = $6_1;
                                         HEAP32[($6_1 + 400 | 0) >> 2] = $17_1;
                                         HEAP32[($6_1 + 404 | 0) >> 2] = i64toi32_i32$0;
                                         $556($6_1 + 1456 | 0 | 0, 128 | 0, 82344 | 0, $6_1 + 400 | 0 | 0) | 0;
                                         break label$22;
                                        }
                                        $540($6_1 + 1584 | 0 | 0, 76125 | 0, 64 | 0) | 0;
                                        i64toi32_i32$2 = $13_1;
                                        i64toi32_i32$0 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                        i64toi32_i32$1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                        $17_1 = i64toi32_i32$0;
                                        $17$hi = i64toi32_i32$1;
                                        $14_1 = HEAPU8[($13_1 + 12 | 0) >> 0] | 0;
                                        HEAP32[($6_1 + 444 | 0) >> 2] = HEAPU8[($13_1 + 13 | 0) >> 0] | 0;
                                        HEAP32[($6_1 + 440 | 0) >> 2] = $14_1;
                                        i64toi32_i32$0 = $6_1;
                                        HEAP32[($6_1 + 432 | 0) >> 2] = $17_1;
                                        HEAP32[($6_1 + 436 | 0) >> 2] = i64toi32_i32$1;
                                        $556($6_1 + 1456 | 0 | 0, 128 | 0, 81242 | 0, $6_1 + 432 | 0 | 0) | 0;
                                        break label$22;
                                       }
                                       $540($6_1 + 1584 | 0 | 0, 75999 | 0, 64 | 0) | 0;
                                       $14_1 = HEAPU8[($13_1 + 13 | 0) >> 0] | 0;
                                       i64toi32_i32$2 = $13_1;
                                       i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                       i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                       $17_1 = i64toi32_i32$1;
                                       $17$hi = i64toi32_i32$0;
                                       HEAP32[($6_1 + 456 | 0) >> 2] = HEAPU8[($13_1 + 12 | 0) >> 0] | 0;
                                       i64toi32_i32$1 = $6_1;
                                       HEAP32[($6_1 + 448 | 0) >> 2] = $17_1;
                                       HEAP32[($6_1 + 452 | 0) >> 2] = i64toi32_i32$0;
                                       HEAP32[($6_1 + 460 | 0) >> 2] = ($14_1 | 0) == (1 | 0) ? 73702 : 73710;
                                       $556($6_1 + 1456 | 0 | 0, 128 | 0, 81514 | 0, $6_1 + 448 | 0 | 0) | 0;
                                       break label$22;
                                      }
                                      $540($6_1 + 1584 | 0 | 0, 75794 | 0, 64 | 0) | 0;
                                      $14_1 = HEAPU8[($13_1 + 13 | 0) >> 0] | 0;
                                      i64toi32_i32$2 = $13_1;
                                      i64toi32_i32$0 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                      $17_1 = i64toi32_i32$0;
                                      $17$hi = i64toi32_i32$1;
                                      HEAP32[($6_1 + 472 | 0) >> 2] = HEAPU8[($13_1 + 12 | 0) >> 0] | 0;
                                      i64toi32_i32$0 = $6_1;
                                      HEAP32[($6_1 + 464 | 0) >> 2] = $17_1;
                                      HEAP32[($6_1 + 468 | 0) >> 2] = i64toi32_i32$1;
                                      HEAP32[($6_1 + 476 | 0) >> 2] = ($14_1 | 0) == (1 | 0) ? 73702 : 73710;
                                      $556($6_1 + 1456 | 0 | 0, 128 | 0, 81514 | 0, $6_1 + 464 | 0 | 0) | 0;
                                      break label$22;
                                     }
                                     $540($6_1 + 1584 | 0 | 0, 77874 | 0, 64 | 0) | 0;
                                     i64toi32_i32$2 = $13_1;
                                     i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                     i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                     $637_1 = i64toi32_i32$1;
                                     i64toi32_i32$1 = $6_1;
                                     HEAP32[($6_1 + 480 | 0) >> 2] = $637_1;
                                     HEAP32[($6_1 + 484 | 0) >> 2] = i64toi32_i32$0;
                                     $556($6_1 + 1456 | 0 | 0, 128 | 0, 82522 | 0, $6_1 + 480 | 0 | 0) | 0;
                                     break label$22;
                                    }
                                    $540($6_1 + 1584 | 0 | 0, 77482 | 0, 64 | 0) | 0;
                                    i64toi32_i32$2 = $13_1;
                                    i64toi32_i32$0 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                    i64toi32_i32$1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                    $648_1 = i64toi32_i32$0;
                                    i64toi32_i32$0 = $6_1;
                                    HEAP32[($6_1 + 496 | 0) >> 2] = $648_1;
                                    HEAP32[($6_1 + 500 | 0) >> 2] = i64toi32_i32$1;
                                    $556($6_1 + 1456 | 0 | 0, 128 | 0, 82522 | 0, $6_1 + 496 | 0 | 0) | 0;
                                    break label$22;
                                   }
                                   $540($6_1 + 1584 | 0 | 0, 76160 | 0, 64 | 0) | 0;
                                   i64toi32_i32$2 = $13_1;
                                   i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                   i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                   $17_1 = i64toi32_i32$1;
                                   $17$hi = i64toi32_i32$0;
                                   $14_1 = HEAPU8[($13_1 + 12 | 0) >> 0] | 0;
                                   HEAP32[($6_1 + 524 | 0) >> 2] = HEAP16[($13_1 + 16 | 0) >> 1] | 0;
                                   HEAP32[($6_1 + 520 | 0) >> 2] = $14_1;
                                   i64toi32_i32$1 = $6_1;
                                   HEAP32[($6_1 + 512 | 0) >> 2] = $17_1;
                                   HEAP32[($6_1 + 516 | 0) >> 2] = i64toi32_i32$0;
                                   $556($6_1 + 1456 | 0 | 0, 128 | 0, 82547 | 0, $6_1 + 512 | 0 | 0) | 0;
                                   break label$22;
                                  }
                                  $540($6_1 + 1584 | 0 | 0, 76017 | 0, 64 | 0) | 0;
                                  $14_1 = HEAPU8[($13_1 + 13 | 0) >> 0] | 0;
                                  i64toi32_i32$2 = $13_1;
                                  i64toi32_i32$0 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                  i64toi32_i32$1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                  $17_1 = i64toi32_i32$0;
                                  $17$hi = i64toi32_i32$1;
                                  HEAP32[($6_1 + 536 | 0) >> 2] = HEAPU8[($13_1 + 12 | 0) >> 0] | 0;
                                  i64toi32_i32$0 = $6_1;
                                  HEAP32[($6_1 + 528 | 0) >> 2] = $17_1;
                                  HEAP32[($6_1 + 532 | 0) >> 2] = i64toi32_i32$1;
                                  HEAP32[($6_1 + 540 | 0) >> 2] = ($14_1 | 0) == (1 | 0) ? 73702 : 73710;
                                  $556($6_1 + 1456 | 0 | 0, 128 | 0, 81514 | 0, $6_1 + 528 | 0 | 0) | 0;
                                  break label$22;
                                 }
                                 $540($6_1 + 1584 | 0 | 0, 75810 | 0, 64 | 0) | 0;
                                 $14_1 = HEAPU8[($13_1 + 13 | 0) >> 0] | 0;
                                 i64toi32_i32$2 = $13_1;
                                 i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                 i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                 $17_1 = i64toi32_i32$1;
                                 $17$hi = i64toi32_i32$0;
                                 HEAP32[($6_1 + 552 | 0) >> 2] = HEAPU8[($13_1 + 12 | 0) >> 0] | 0;
                                 i64toi32_i32$1 = $6_1;
                                 HEAP32[($6_1 + 544 | 0) >> 2] = $17_1;
                                 HEAP32[($6_1 + 548 | 0) >> 2] = i64toi32_i32$0;
                                 HEAP32[($6_1 + 556 | 0) >> 2] = ($14_1 | 0) == (1 | 0) ? 73702 : 73710;
                                 $556($6_1 + 1456 | 0 | 0, 128 | 0, 81514 | 0, $6_1 + 544 | 0 | 0) | 0;
                                 break label$22;
                                }
                                $540($6_1 + 1584 | 0 | 0, 77893 | 0, 64 | 0) | 0;
                                i64toi32_i32$2 = $13_1;
                                i64toi32_i32$0 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                                i64toi32_i32$1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                                $720_1 = i64toi32_i32$0;
                                i64toi32_i32$0 = $6_1;
                                HEAP32[($6_1 + 560 | 0) >> 2] = $720_1;
                                HEAP32[($6_1 + 564 | 0) >> 2] = i64toi32_i32$1;
                                $556($6_1 + 1456 | 0 | 0, 128 | 0, 82522 | 0, $6_1 + 560 | 0 | 0) | 0;
                                break label$22;
                               }
                               $540($6_1 + 1584 | 0 | 0, 77503 | 0, 64 | 0) | 0;
                               i64toi32_i32$2 = $13_1;
                               i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                               i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                               $731_1 = i64toi32_i32$1;
                               i64toi32_i32$1 = $6_1;
                               HEAP32[($6_1 + 576 | 0) >> 2] = $731_1;
                               HEAP32[($6_1 + 580 | 0) >> 2] = i64toi32_i32$0;
                               $556($6_1 + 1456 | 0 | 0, 128 | 0, 82522 | 0, $6_1 + 576 | 0 | 0) | 0;
                               break label$22;
                              }
                              $540($6_1 + 1584 | 0 | 0, 77660 | 0, 64 | 0) | 0;
                              i64toi32_i32$2 = $13_1;
                              i64toi32_i32$0 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                              i64toi32_i32$1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                              $742_1 = i64toi32_i32$0;
                              i64toi32_i32$0 = $6_1;
                              HEAP32[($6_1 + 592 | 0) >> 2] = $742_1;
                              HEAP32[($6_1 + 596 | 0) >> 2] = i64toi32_i32$1;
                              $556($6_1 + 1456 | 0 | 0, 128 | 0, 82522 | 0, $6_1 + 592 | 0 | 0) | 0;
                              break label$22;
                             }
                             $540($6_1 + 1584 | 0 | 0, 76062 | 0, 64 | 0) | 0;
                             i64toi32_i32$2 = $13_1;
                             i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                             i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                             $17_1 = i64toi32_i32$1;
                             $17$hi = i64toi32_i32$0;
                             i64toi32_i32$2 = $13_1;
                             i64toi32_i32$0 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                             i64toi32_i32$1 = HEAP32[($13_1 + 16 | 0) >> 2] | 0;
                             $18_1 = i64toi32_i32$0;
                             $18$hi = i64toi32_i32$1;
                             $20_1 = Math_fround(HEAPF32[($13_1 + 20 | 0) >> 2]);
                             $21_1 = Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]);
                             HEAPF64[(($6_1 + 608 | 0) + 32 | 0) >> 3] = +Math_fround(HEAPF32[($13_1 + 28 | 0) >> 2]);
                             HEAPF64[(($6_1 + 608 | 0) + 24 | 0) >> 3] = +$21_1;
                             HEAPF64[(($6_1 + 608 | 0) + 16 | 0) >> 3] = +$20_1;
                             i64toi32_i32$0 = $6_1;
                             HEAP32[($6_1 + 616 | 0) >> 2] = $18_1;
                             HEAP32[($6_1 + 620 | 0) >> 2] = i64toi32_i32$1;
                             i64toi32_i32$1 = $17$hi;
                             i64toi32_i32$0 = $6_1;
                             HEAP32[($6_1 + 608 | 0) >> 2] = $17_1;
                             HEAP32[($6_1 + 612 | 0) >> 2] = i64toi32_i32$1;
                             $556($6_1 + 1456 | 0 | 0, 128 | 0, 81972 | 0, $6_1 + 608 | 0 | 0) | 0;
                             break label$22;
                            }
                            $540($6_1 + 1584 | 0 | 0, 75851 | 0, 64 | 0) | 0;
                            i64toi32_i32$2 = $13_1;
                            i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                            i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                            $17_1 = i64toi32_i32$1;
                            $17$hi = i64toi32_i32$0;
                            i64toi32_i32$2 = $13_1;
                            i64toi32_i32$0 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                            i64toi32_i32$1 = HEAP32[($13_1 + 16 | 0) >> 2] | 0;
                            $18_1 = i64toi32_i32$0;
                            $18$hi = i64toi32_i32$1;
                            $20_1 = Math_fround(HEAPF32[($13_1 + 20 | 0) >> 2]);
                            $21_1 = Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]);
                            HEAPF64[(($6_1 + 656 | 0) + 32 | 0) >> 3] = +Math_fround(HEAPF32[($13_1 + 28 | 0) >> 2]);
                            HEAPF64[(($6_1 + 656 | 0) + 24 | 0) >> 3] = +$21_1;
                            HEAPF64[(($6_1 + 656 | 0) + 16 | 0) >> 3] = +$20_1;
                            i64toi32_i32$0 = $6_1;
                            HEAP32[($6_1 + 664 | 0) >> 2] = $18_1;
                            HEAP32[($6_1 + 668 | 0) >> 2] = i64toi32_i32$1;
                            i64toi32_i32$1 = $17$hi;
                            i64toi32_i32$0 = $6_1;
                            HEAP32[($6_1 + 656 | 0) >> 2] = $17_1;
                            HEAP32[($6_1 + 660 | 0) >> 2] = i64toi32_i32$1;
                            $556($6_1 + 1456 | 0 | 0, 128 | 0, 81972 | 0, $6_1 + 656 | 0 | 0) | 0;
                            break label$22;
                           }
                           $540($6_1 + 1584 | 0 | 0, 76236 | 0, 64 | 0) | 0;
                           i64toi32_i32$2 = $13_1;
                           i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                           i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                           $17_1 = i64toi32_i32$1;
                           $17$hi = i64toi32_i32$0;
                           i64toi32_i32$2 = $13_1;
                           i64toi32_i32$0 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                           i64toi32_i32$1 = HEAP32[($13_1 + 16 | 0) >> 2] | 0;
                           $18_1 = i64toi32_i32$0;
                           $18$hi = i64toi32_i32$1;
                           $20_1 = Math_fround(HEAPF32[($13_1 + 20 | 0) >> 2]);
                           $21_1 = Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]);
                           HEAPF64[(($6_1 + 704 | 0) + 32 | 0) >> 3] = +Math_fround(HEAPF32[($13_1 + 28 | 0) >> 2]);
                           HEAPF64[(($6_1 + 704 | 0) + 24 | 0) >> 3] = +$21_1;
                           HEAPF64[(($6_1 + 704 | 0) + 16 | 0) >> 3] = +$20_1;
                           i64toi32_i32$0 = $6_1;
                           HEAP32[($6_1 + 712 | 0) >> 2] = $18_1;
                           HEAP32[($6_1 + 716 | 0) >> 2] = i64toi32_i32$1;
                           i64toi32_i32$1 = $17$hi;
                           i64toi32_i32$0 = $6_1;
                           HEAP32[($6_1 + 704 | 0) >> 2] = $17_1;
                           HEAP32[($6_1 + 708 | 0) >> 2] = i64toi32_i32$1;
                           $556($6_1 + 1456 | 0 | 0, 128 | 0, 81972 | 0, $6_1 + 704 | 0 | 0) | 0;
                           break label$22;
                          }
                          $540($6_1 + 1584 | 0 | 0, 76664 | 0, 64 | 0) | 0;
                          i64toi32_i32$2 = $13_1;
                          i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                          i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                          $17_1 = i64toi32_i32$1;
                          $17$hi = i64toi32_i32$0;
                          $14_1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                          $20_1 = Math_fround(HEAPF32[($13_1 + 16 | 0) >> 2]);
                          $21_1 = Math_fround(HEAPF32[($13_1 + 20 | 0) >> 2]);
                          HEAPF64[(($6_1 + 752 | 0) + 32 | 0) >> 3] = +Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]);
                          HEAPF64[(($6_1 + 752 | 0) + 24 | 0) >> 3] = +$21_1;
                          HEAPF64[(($6_1 + 752 | 0) + 16 | 0) >> 3] = +$20_1;
                          HEAP32[($6_1 + 760 | 0) >> 2] = $14_1;
                          i64toi32_i32$1 = $6_1;
                          HEAP32[($6_1 + 752 | 0) >> 2] = $17_1;
                          HEAP32[($6_1 + 756 | 0) >> 2] = i64toi32_i32$0;
                          $556($6_1 + 1456 | 0 | 0, 128 | 0, 82132 | 0, $6_1 + 752 | 0 | 0) | 0;
                          break label$22;
                         }
                         $540($6_1 + 1584 | 0 | 0, 75984 | 0, 64 | 0) | 0;
                         $14_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                         i64toi32_i32$2 = $13_1;
                         i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                         i64toi32_i32$1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                         $17_1 = i64toi32_i32$0;
                         $17$hi = i64toi32_i32$1;
                         $20_1 = Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]);
                         $21_1 = Math_fround(HEAPF32[($13_1 + 28 | 0) >> 2]);
                         $22_1 = Math_fround(HEAPF32[($13_1 + 32 | 0) >> 2]);
                         $23_1 = Math_fround(HEAPF32[($13_1 + 36 | 0) >> 2]);
                         $24_1 = Math_fround(HEAPF32[($13_1 + 40 | 0) >> 2]);
                         i64toi32_i32$2 = $13_1;
                         i64toi32_i32$1 = HEAP32[($13_1 + 16 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($13_1 + 20 | 0) >> 2] | 0;
                         $913_1 = i64toi32_i32$1;
                         i64toi32_i32$1 = ($6_1 + 800 | 0) + 16 | 0;
                         HEAP32[i64toi32_i32$1 >> 2] = $913_1;
                         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                         HEAPF64[(($6_1 + 800 | 0) + 56 | 0) >> 3] = +$24_1;
                         HEAPF64[$11_1 >> 3] = +$23_1;
                         HEAPF64[(($6_1 + 800 | 0) + 40 | 0) >> 3] = +$22_1;
                         HEAPF64[(($6_1 + 800 | 0) + 32 | 0) >> 3] = +$21_1;
                         HEAPF64[(($6_1 + 800 | 0) + 24 | 0) >> 3] = +$20_1;
                         i64toi32_i32$0 = $17$hi;
                         i64toi32_i32$1 = $6_1;
                         HEAP32[($6_1 + 808 | 0) >> 2] = $17_1;
                         HEAP32[($6_1 + 812 | 0) >> 2] = i64toi32_i32$0;
                         HEAP32[($6_1 + 800 | 0) >> 2] = $14_1;
                         $556($6_1 + 1456 | 0 | 0, 128 | 0, 81895 | 0, $6_1 + 800 | 0 | 0) | 0;
                         break label$22;
                        }
                        $540($6_1 + 1584 | 0 | 0, 75781 | 0, 64 | 0) | 0;
                        $14_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                        i64toi32_i32$2 = $13_1;
                        i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                        i64toi32_i32$1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                        $17_1 = i64toi32_i32$0;
                        $17$hi = i64toi32_i32$1;
                        $20_1 = Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]);
                        $21_1 = Math_fround(HEAPF32[($13_1 + 28 | 0) >> 2]);
                        $22_1 = Math_fround(HEAPF32[($13_1 + 32 | 0) >> 2]);
                        $23_1 = Math_fround(HEAPF32[($13_1 + 36 | 0) >> 2]);
                        $24_1 = Math_fround(HEAPF32[($13_1 + 40 | 0) >> 2]);
                        i64toi32_i32$2 = $13_1;
                        i64toi32_i32$1 = HEAP32[($13_1 + 16 | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[($13_1 + 20 | 0) >> 2] | 0;
                        $967_1 = i64toi32_i32$1;
                        i64toi32_i32$1 = ($6_1 + 864 | 0) + 16 | 0;
                        HEAP32[i64toi32_i32$1 >> 2] = $967_1;
                        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                        HEAPF64[(($6_1 + 864 | 0) + 56 | 0) >> 3] = +$24_1;
                        HEAPF64[(($6_1 + 864 | 0) + 48 | 0) >> 3] = +$23_1;
                        HEAPF64[(($6_1 + 864 | 0) + 40 | 0) >> 3] = +$22_1;
                        HEAPF64[(($6_1 + 864 | 0) + 32 | 0) >> 3] = +$21_1;
                        HEAPF64[(($6_1 + 864 | 0) + 24 | 0) >> 3] = +$20_1;
                        i64toi32_i32$0 = $17$hi;
                        i64toi32_i32$1 = $6_1;
                        HEAP32[($6_1 + 872 | 0) >> 2] = $17_1;
                        HEAP32[($6_1 + 876 | 0) >> 2] = i64toi32_i32$0;
                        HEAP32[($6_1 + 864 | 0) >> 2] = $14_1;
                        $556($6_1 + 1456 | 0 | 0, 128 | 0, 81895 | 0, $6_1 + 864 | 0 | 0) | 0;
                        break label$22;
                       }
                       $540($6_1 + 1584 | 0 | 0, 76185 | 0, 64 | 0) | 0;
                       $14_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                       i64toi32_i32$2 = $13_1;
                       i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                       i64toi32_i32$1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                       $17_1 = i64toi32_i32$0;
                       $17$hi = i64toi32_i32$1;
                       $20_1 = Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]);
                       $21_1 = Math_fround(HEAPF32[($13_1 + 28 | 0) >> 2]);
                       $22_1 = Math_fround(HEAPF32[($13_1 + 32 | 0) >> 2]);
                       $23_1 = Math_fround(HEAPF32[($13_1 + 36 | 0) >> 2]);
                       $24_1 = Math_fround(HEAPF32[($13_1 + 40 | 0) >> 2]);
                       i64toi32_i32$2 = $13_1;
                       i64toi32_i32$1 = HEAP32[($13_1 + 16 | 0) >> 2] | 0;
                       i64toi32_i32$0 = HEAP32[($13_1 + 20 | 0) >> 2] | 0;
                       $1023_1 = i64toi32_i32$1;
                       i64toi32_i32$1 = ($6_1 + 928 | 0) + 16 | 0;
                       HEAP32[i64toi32_i32$1 >> 2] = $1023_1;
                       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                       HEAPF64[(($6_1 + 928 | 0) + 56 | 0) >> 3] = +$24_1;
                       HEAPF64[(($6_1 + 928 | 0) + 48 | 0) >> 3] = +$23_1;
                       HEAPF64[(($6_1 + 928 | 0) + 40 | 0) >> 3] = +$22_1;
                       HEAPF64[(($6_1 + 928 | 0) + 32 | 0) >> 3] = +$21_1;
                       HEAPF64[(($6_1 + 928 | 0) + 24 | 0) >> 3] = +$20_1;
                       i64toi32_i32$0 = $17$hi;
                       i64toi32_i32$1 = $6_1;
                       HEAP32[($6_1 + 936 | 0) >> 2] = $17_1;
                       HEAP32[($6_1 + 940 | 0) >> 2] = i64toi32_i32$0;
                       HEAP32[($6_1 + 928 | 0) >> 2] = $14_1;
                       $556($6_1 + 1456 | 0 | 0, 128 | 0, 81895 | 0, $6_1 + 928 | 0 | 0) | 0;
                       break label$22;
                      }
                      $540($6_1 + 1584 | 0 | 0, 76771 | 0, 64 | 0) | 0;
                      $14_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                      i64toi32_i32$2 = $13_1;
                      i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                      $17_1 = i64toi32_i32$0;
                      $17$hi = i64toi32_i32$1;
                      $20_1 = Math_fround(HEAPF32[($13_1 + 28 | 0) >> 2]);
                      $21_1 = Math_fround(HEAPF32[($13_1 + 32 | 0) >> 2]);
                      $22_1 = Math_fround(HEAPF32[($13_1 + 36 | 0) >> 2]);
                      i64toi32_i32$2 = $13_1;
                      i64toi32_i32$1 = HEAP32[($13_1 + 16 | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[($13_1 + 20 | 0) >> 2] | 0;
                      $18_1 = i64toi32_i32$1;
                      $18$hi = i64toi32_i32$0;
                      HEAP32[(($6_1 + 992 | 0) + 24 | 0) >> 2] = HEAP32[($13_1 + 24 | 0) >> 2] | 0;
                      i64toi32_i32$1 = ($6_1 + 992 | 0) + 16 | 0;
                      HEAP32[i64toi32_i32$1 >> 2] = $18_1;
                      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                      HEAPF64[(($6_1 + 992 | 0) + 48 | 0) >> 3] = +$22_1;
                      HEAPF64[(($6_1 + 992 | 0) + 40 | 0) >> 3] = +$21_1;
                      HEAPF64[(($6_1 + 992 | 0) + 32 | 0) >> 3] = +$20_1;
                      i64toi32_i32$0 = $17$hi;
                      i64toi32_i32$1 = $6_1;
                      HEAP32[($6_1 + 1e3 | 0) >> 2] = $17_1;
                      HEAP32[($6_1 + 1004 | 0) >> 2] = i64toi32_i32$0;
                      HEAP32[($6_1 + 992 | 0) >> 2] = $14_1;
                      $556($6_1 + 1456 | 0 | 0, 128 | 0, 81818 | 0, $6_1 + 992 | 0 | 0) | 0;
                      break label$22;
                     }
                     $540($6_1 + 1584 | 0 | 0, 77169 | 0, 64 | 0) | 0;
                     $14_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                     i64toi32_i32$2 = $13_1;
                     i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                     i64toi32_i32$1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                     $17_1 = i64toi32_i32$0;
                     $17$hi = i64toi32_i32$1;
                     $20_1 = Math_fround(HEAPF32[($13_1 + 28 | 0) >> 2]);
                     $21_1 = Math_fround(HEAPF32[($13_1 + 32 | 0) >> 2]);
                     $22_1 = Math_fround(HEAPF32[($13_1 + 36 | 0) >> 2]);
                     i64toi32_i32$2 = $13_1;
                     i64toi32_i32$1 = HEAP32[($13_1 + 16 | 0) >> 2] | 0;
                     i64toi32_i32$0 = HEAP32[($13_1 + 20 | 0) >> 2] | 0;
                     $18_1 = i64toi32_i32$1;
                     $18$hi = i64toi32_i32$0;
                     HEAP32[(($6_1 + 1056 | 0) + 24 | 0) >> 2] = HEAP32[($13_1 + 24 | 0) >> 2] | 0;
                     i64toi32_i32$1 = ($6_1 + 1056 | 0) + 16 | 0;
                     HEAP32[i64toi32_i32$1 >> 2] = $18_1;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     HEAPF64[(($6_1 + 1056 | 0) + 48 | 0) >> 3] = +$22_1;
                     HEAPF64[(($6_1 + 1056 | 0) + 40 | 0) >> 3] = +$21_1;
                     HEAPF64[(($6_1 + 1056 | 0) + 32 | 0) >> 3] = +$20_1;
                     i64toi32_i32$0 = $17$hi;
                     i64toi32_i32$1 = $6_1;
                     HEAP32[($6_1 + 1064 | 0) >> 2] = $17_1;
                     HEAP32[($6_1 + 1068 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[($6_1 + 1056 | 0) >> 2] = $14_1;
                     $556($6_1 + 1456 | 0 | 0, 128 | 0, 81818 | 0, $6_1 + 1056 | 0 | 0) | 0;
                     break label$22;
                    }
                    $540($6_1 + 1584 | 0 | 0, 76789 | 0, 64 | 0) | 0;
                    $14_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                    i64toi32_i32$2 = $13_1;
                    i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                    $17_1 = i64toi32_i32$0;
                    $17$hi = i64toi32_i32$1;
                    $20_1 = Math_fround(HEAPF32[($13_1 + 16 | 0) >> 2]);
                    $21_1 = Math_fround(HEAPF32[($13_1 + 20 | 0) >> 2]);
                    $22_1 = Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]);
                    $23_1 = Math_fround(HEAPF32[($13_1 + 28 | 0) >> 2]);
                    HEAP32[(($6_1 + 1120 | 0) + 48 | 0) >> 2] = HEAPU16[($13_1 + 32 | 0) >> 1] | 0;
                    HEAPF64[(($6_1 + 1120 | 0) + 40 | 0) >> 3] = +$23_1;
                    HEAPF64[(($6_1 + 1120 | 0) + 32 | 0) >> 3] = +$22_1;
                    HEAPF64[(($6_1 + 1120 | 0) + 24 | 0) >> 3] = +$21_1;
                    HEAPF64[(($6_1 + 1120 | 0) + 16 | 0) >> 3] = +$20_1;
                    i64toi32_i32$0 = $6_1;
                    HEAP32[($6_1 + 1128 | 0) >> 2] = $17_1;
                    HEAP32[($6_1 + 1132 | 0) >> 2] = i64toi32_i32$1;
                    HEAP32[($6_1 + 1120 | 0) >> 2] = $14_1;
                    $556($6_1 + 1456 | 0 | 0, 128 | 0, 81154 | 0, $6_1 + 1120 | 0 | 0) | 0;
                    break label$22;
                   }
                   $540($6_1 + 1584 | 0 | 0, 76910 | 0, 64 | 0) | 0;
                   $14_1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                   $3_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                   HEAP32[($6_1 + 1192 | 0) >> 2] = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                   HEAP32[($6_1 + 1188 | 0) >> 2] = $3_1;
                   HEAP32[($6_1 + 1184 | 0) >> 2] = $14_1;
                   $556($6_1 + 1456 | 0 | 0, 128 | 0, 81360 | 0, $6_1 + 1184 | 0 | 0) | 0;
                   break label$22;
                  }
                  $540($6_1 + 1584 | 0 | 0, 74839 | 0, 64 | 0) | 0;
                  $14_1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                  $3_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                  HEAP32[($6_1 + 1208 | 0) >> 2] = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                  HEAP32[($6_1 + 1204 | 0) >> 2] = $3_1;
                  HEAP32[($6_1 + 1200 | 0) >> 2] = $14_1;
                  $556($6_1 + 1456 | 0 | 0, 128 | 0, 81360 | 0, $6_1 + 1200 | 0 | 0) | 0;
                  break label$22;
                 }
                 $540($6_1 + 1584 | 0 | 0, 76294 | 0, 64 | 0) | 0;
                 $14_1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                 $3_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                 HEAP32[($6_1 + 1224 | 0) >> 2] = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                 HEAP32[($6_1 + 1220 | 0) >> 2] = $3_1;
                 HEAP32[($6_1 + 1216 | 0) >> 2] = $14_1;
                 $556($6_1 + 1456 | 0 | 0, 128 | 0, 81360 | 0, $6_1 + 1216 | 0 | 0) | 0;
                 break label$22;
                }
                $540($6_1 + 1584 | 0 | 0, 76630 | 0, 64 | 0) | 0;
                $14_1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
                $3_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                HEAP32[($6_1 + 1240 | 0) >> 2] = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                HEAP32[($6_1 + 1236 | 0) >> 2] = $3_1;
                HEAP32[($6_1 + 1232 | 0) >> 2] = $14_1;
                $556($6_1 + 1456 | 0 | 0, 128 | 0, 81360 | 0, $6_1 + 1232 | 0 | 0) | 0;
                break label$22;
               }
               $540($6_1 + 1584 | 0 | 0, 77919 | 0, 64 | 0) | 0;
               $14_1 = HEAPU8[($13_1 + 12 | 0) >> 0] | 0;
               i64toi32_i32$2 = $13_1;
               i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
               i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
               $1286_1 = i64toi32_i32$1;
               i64toi32_i32$1 = $6_1;
               HEAP32[($6_1 + 1248 | 0) >> 2] = $1286_1;
               HEAP32[($6_1 + 1252 | 0) >> 2] = i64toi32_i32$0;
               HEAP32[($6_1 + 1256 | 0) >> 2] = $14_1 ? 72276 : 72606;
               $556($6_1 + 1456 | 0 | 0, 128 | 0, 81558 | 0, $6_1 + 1248 | 0 | 0) | 0;
               break label$22;
              }
              $540($6_1 + 1584 | 0 | 0, 77531 | 0, 64 | 0) | 0;
              $14_1 = HEAPU8[($13_1 + 12 | 0) >> 0] | 0;
              i64toi32_i32$2 = $13_1;
              i64toi32_i32$0 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
              $1302_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $6_1;
              HEAP32[($6_1 + 1264 | 0) >> 2] = $1302_1;
              HEAP32[($6_1 + 1268 | 0) >> 2] = i64toi32_i32$1;
              HEAP32[($6_1 + 1272 | 0) >> 2] = $14_1 ? 72276 : 72606;
              $556($6_1 + 1456 | 0 | 0, 128 | 0, 81558 | 0, $6_1 + 1264 | 0 | 0) | 0;
              break label$22;
             }
             if (($14_1 | 0) != (4608 | 0)) {
              break label$24
             }
             $540($6_1 + 1584 | 0 | 0, 76647 | 0, 64 | 0) | 0;
             $20_1 = Math_fround(HEAPF32[($13_1 + 12 | 0) >> 2]);
             i64toi32_i32$2 = $13_1;
             i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
             i64toi32_i32$0 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
             $17_1 = i64toi32_i32$1;
             $17$hi = i64toi32_i32$0;
             $21_1 = Math_fround(HEAPF32[($13_1 + 16 | 0) >> 2]);
             $22_1 = Math_fround(HEAPF32[($13_1 + 20 | 0) >> 2]);
             $23_1 = Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]);
             $24_1 = Math_fround(HEAPF32[($13_1 + 28 | 0) >> 2]);
             HEAPF64[(($6_1 + 1280 | 0) + 48 | 0) >> 3] = +Math_fround(HEAPF32[($13_1 + 32 | 0) >> 2]);
             HEAPF64[(($6_1 + 1280 | 0) + 40 | 0) >> 3] = +$24_1;
             HEAPF64[(($6_1 + 1280 | 0) + 32 | 0) >> 3] = +$23_1;
             HEAPF64[(($6_1 + 1280 | 0) + 24 | 0) >> 3] = +$22_1;
             HEAPF64[(($6_1 + 1280 | 0) + 16 | 0) >> 3] = +$21_1;
             i64toi32_i32$1 = $6_1;
             HEAP32[($6_1 + 1280 | 0) >> 2] = $17_1;
             HEAP32[($6_1 + 1284 | 0) >> 2] = i64toi32_i32$0;
             HEAPF64[($6_1 + 1288 | 0) >> 3] = +$20_1;
             $556($6_1 + 1456 | 0 | 0, 128 | 0, 82041 | 0, $6_1 + 1280 | 0 | 0) | 0;
             break label$22;
            }
            if (!$14_1) {
             break label$23
            }
           }
           if (HEAPU8[($6_1 + 1584 | 0) >> 0] | 0) {
            break label$21
           }
           $540($6_1 + 1584 | 0 | 0, 75942 | 0, 64 | 0) | 0;
           HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[$13_1 >> 2] | 0;
           $556($6_1 + 1456 | 0 | 0, 128 | 0, 82764 | 0, $6_1 + 32 | 0 | 0) | 0;
           break label$22;
          }
          $540($6_1 + 1584 | 0 | 0, 75052 | 0, 64 | 0) | 0;
          $540($6_1 + 1456 | 0 | 0, 82890 | 0, 128 | 0) | 0;
         }
         if (!(HEAPU8[($6_1 + 1584 | 0) >> 0] | 0)) {
          break label$12
         }
        }
        HEAP32[($6_1 + 20 | 0) >> 2] = $6_1 + 1456 | 0;
        HEAP32[($6_1 + 16 | 0) >> 2] = $6_1 + 1584 | 0;
        $447(68522 | 0, $6_1 + 16 | 0 | 0);
       }
       i64toi32_i32$2 = $13_1;
       i64toi32_i32$0 = HEAP32[$13_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
       $1398 = i64toi32_i32$0;
       i64toi32_i32$0 = $12_1;
       HEAP32[i64toi32_i32$0 >> 2] = $1398;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $13_1 + 48 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1403 = i64toi32_i32$1;
       i64toi32_i32$1 = $12_1 + 48 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $1403;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $13_1 + 40 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1408 = i64toi32_i32$0;
       i64toi32_i32$0 = $12_1 + 40 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $1408;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $13_1 + 32 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1413 = i64toi32_i32$1;
       i64toi32_i32$1 = $12_1 + 32 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $1413;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $13_1 + 24 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1418 = i64toi32_i32$0;
       i64toi32_i32$0 = $12_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $1418;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $13_1 + 16 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1423 = i64toi32_i32$1;
       i64toi32_i32$1 = $12_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $1423;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $13_1 + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1428 = i64toi32_i32$0;
       i64toi32_i32$0 = $12_1 + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $1428;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       label$91 : {
        label$92 : {
         $14_1 = HEAP32[$13_1 >> 2] | 0;
         if (($14_1 | 0) == (513 | 0)) {
          break label$92
         }
         if (($14_1 | 0) != (32512 | 0)) {
          break label$91
         }
         $258(126280 | 0, 1 | 0) | 0;
         break label$91;
        }
        $13_1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
        i64toi32_i32$2 = $13_1;
        i64toi32_i32$1 = HEAP32[$13_1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
        $1440 = i64toi32_i32$1;
        i64toi32_i32$1 = $12_1;
        HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = $1440;
        HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
        HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$1 + 56 | 0;
       }
       label$93 : {
        label$94 : {
         $13_1 = HEAP32[(0 + 126264 | 0) >> 2] | 0;
         if (!$13_1) {
          break label$94
         }
         HEAP32[($13_1 + 72 | 0) >> 2] = $12_1;
         break label$93;
        }
        HEAP32[(0 + 126260 | 0) >> 2] = $12_1;
       }
       HEAP32[(0 + 126264 | 0) >> 2] = $12_1;
       HEAP32[($12_1 + 72 | 0) >> 2] = 0;
       HEAP32[($12_1 + 68 | 0) >> 2] = $13_1;
       $12_1 = 1;
       $13_1 = $258(126252 | 0, 1 | 0) | 0;
       if (($13_1 | 0) < (HEAP32[(0 + 126256 | 0) >> 2] | 0 | 0)) {
        break label$8
       }
       $12_1 = 1;
       HEAP32[(0 + 126256 | 0) >> 2] = $13_1 + 1 | 0;
      }
      $7_1 = $12_1 + $7_1 | 0;
      $8_1 = $8_1 + 1 | 0;
      if (($8_1 | 0) != ($1_1 | 0)) {
       continue label$7
      }
      break label$4;
     };
    }
    label$95 : {
     if (($2_1 | 0) != (2 | 0)) {
      break label$95
     }
     label$96 : {
      $12_1 = HEAP32[(0 + 126272 | 0) >> 2] | 0;
      if (!$12_1) {
       break label$96
      }
      $7_1 = HEAP32[(0 + 126276 | 0) >> 2] | 0;
      label$97 : while (1) {
       $13_1 = $12_1;
       $12_1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
       HEAP32[($13_1 + 12 | 0) >> 2] = $7_1;
       $7_1 = $13_1;
       if ($12_1) {
        continue label$97
       }
       break label$97;
      };
      HEAP32[(0 + 126276 | 0) >> 2] = $13_1;
     }
     HEAP32[(0 + 126272 | 0) >> 2] = 0;
    }
    $7_1 = 0;
    $13_1 = HEAP32[(0 + 126260 | 0) >> 2] | 0;
    if (!$13_1) {
     break label$4
    }
    $10_1 = ($2_1 | 0) != (2 | 0);
    $16_1 = !$0_1 | $10_1 | 0;
    $7_1 = 0;
    $11_1 = 0;
    label$98 : while (1) {
     $12_1 = $13_1;
     label$99 : {
      if (!$0_1) {
       break label$99
      }
      if (($7_1 | 0) >= ($1_1 | 0)) {
       break label$4
      }
     }
     $13_1 = HEAP32[($12_1 + 72 | 0) >> 2] | 0;
     label$100 : {
      $14_1 = HEAP32[$12_1 >> 2] | 0;
      if ($3_1 >>> 0 > $14_1 >>> 0) {
       break label$100
      }
      if ($14_1 >>> 0 > $4_1 >>> 0) {
       break label$100
      }
      label$101 : {
       if (!$0_1) {
        break label$101
       }
       $8_1 = $0_1 + Math_imul($7_1, 56) | 0;
       i64toi32_i32$2 = $12_1;
       i64toi32_i32$0 = HEAP32[$12_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
       $1520 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[i64toi32_i32$0 >> 2] = $1520;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $12_1 + 48 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1525 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 48 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $1525;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $12_1 + 40 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1530 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 40 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $1530;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $12_1 + 32 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1535 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 32 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $1535;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $12_1 + 24 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1540 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $1540;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $12_1 + 16 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1545 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $1545;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $12_1 + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1550 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $1550;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       label$102 : {
        if ((HEAP32[$12_1 >> 2] | 0 | 0) != (513 | 0)) {
         break label$102
        }
        label$103 : {
         label$104 : {
          $9_1 = HEAP32[(0 + 126276 | 0) >> 2] | 0;
          if (!$9_1) {
           break label$104
          }
          HEAP32[(0 + 126276 | 0) >> 2] = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
          break label$103;
         }
         $9_1 = $456(16 | 0) | 0;
        }
        $15_1 = HEAP32[($12_1 + 8 | 0) >> 2] | 0;
        i64toi32_i32$2 = $15_1;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $1564 = i64toi32_i32$1;
        i64toi32_i32$1 = $9_1;
        HEAP32[i64toi32_i32$1 >> 2] = $1564;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
        HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = HEAP32[(0 + 126272 | 0) >> 2] | 0;
        HEAP32[(0 + 126272 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[($8_1 + 8 | 0) >> 2] = i64toi32_i32$1;
       }
       if ($10_1) {
        break label$101
       }
       $8_1 = HEAP32[($12_1 + 72 | 0) >> 2] | 0;
       label$105 : {
        $9_1 = HEAP32[($12_1 + 68 | 0) >> 2] | 0;
        if (!$9_1) {
         break label$105
        }
        HEAP32[($9_1 + 72 | 0) >> 2] = $8_1;
       }
       label$106 : {
        if (!$8_1) {
         break label$106
        }
        HEAP32[($8_1 + 68 | 0) >> 2] = $9_1;
       }
       label$107 : {
        if (($12_1 | 0) != (HEAP32[(0 + 126260 | 0) >> 2] | 0 | 0)) {
         break label$107
        }
        HEAP32[(0 + 126260 | 0) >> 2] = $8_1;
       }
       label$108 : {
        if (($12_1 | 0) != (HEAP32[(0 + 126264 | 0) >> 2] | 0 | 0)) {
         break label$108
        }
        HEAP32[(0 + 126264 | 0) >> 2] = HEAP32[($12_1 + 68 | 0) >> 2] | 0;
       }
       label$109 : {
        if ((HEAP32[$12_1 >> 2] | 0 | 0) != (32512 | 0)) {
         break label$109
        }
        $258(126280 | 0, -1 | 0) | 0;
       }
       HEAP32[($12_1 + 72 | 0) >> 2] = HEAP32[(0 + 126268 | 0) >> 2] | 0;
       HEAP32[(0 + 126268 | 0) >> 2] = $12_1;
       $258(126252 | 0, -1 | 0) | 0;
      }
      label$110 : {
       if (($14_1 | 0) != (32512 | 0)) {
        break label$110
       }
       if (!$5_1) {
        break label$100
       }
       $11_1 = $11_1 + $16_1 | 0;
       if (($259(126280 | 0) | 0 | 0) > ($11_1 | 0)) {
        break label$100
       }
      }
      $7_1 = $7_1 + 1 | 0;
     }
     if ($13_1) {
      continue label$98
     }
     break label$98;
    };
   }
   $835(HEAP32[(0 + 126244 | 0) >> 2] | 0 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   if (($7_1 | 0) < (1 | 0)) {
    break label$1
   }
   $12_1 = $927() | 0;
   if (!$12_1) {
    break label$1
   }
   if (!(HEAP32[($12_1 + 284 | 0) >> 2] | 0)) {
    break label$1
   }
   $834(HEAP32[($12_1 + 388 | 0) >> 2] | 0 | 0) | 0;
   label$111 : {
    $13_1 = HEAP32[($12_1 + 384 | 0) >> 2] | 0;
    if (!$13_1) {
     break label$111
    }
    FUNCTION_TABLE[HEAP32[($12_1 + 284 | 0) >> 2] | 0 | 0]($12_1, $13_1);
    HEAP32[($12_1 + 384 | 0) >> 2] = 0;
   }
   $835(HEAP32[($12_1 + 388 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $6_1 + 1648 | 0;
  return $7_1 | 0;
 }
 
 function $325($0_1) {
  $0_1 = $0_1 | 0;
  $322($0_1 | 0, $0_1 | 0);
 }
 
 function $326($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  $2_1 = $927() | 0;
  $442();
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($2_1 + 288 | 0) >> 2] | 0 | 0]($2_1);
  }
  label$2 : {
   if (HEAPU8[(0 + 127344 | 0) >> 0] | 0) {
    break label$2
   }
   $416();
  }
  label$3 : {
   if (HEAPU8[(0 + 127348 | 0) >> 0] | 0) {
    break label$3
   }
   $521();
  }
  $490();
  label$4 : {
   if (!$0_1) {
    break label$4
   }
   label$5 : {
    $2_1 = HEAP32[(0 + 126796 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$5
    }
    if ((HEAPU8[$2_1 >> 0] | 0) & 1 | 0) {
     break label$4
    }
   }
   label$6 : {
    if (($259(126280 | 0) | 0 | 0) < (1 | 0)) {
     break label$6
    }
    $324($1_1 + 8 | 0 | 0, 1 | 0, 2 | 0, 32512 | 0, 32512 | 0, 1 | 0) | 0;
   }
   $536($1_1 + 8 | 0 | 0, 0 | 0, 56 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = 32512;
   $327($1_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $1_1 + 64 | 0;
 }
 
 function $327($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $2_1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $853() | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[(0 + 127320 | 0) >> 2] | 0) {
     break label$2
    }
    if ((HEAP32[(0 + 127316 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$1
    }
   }
   $834(0 | 0) | 0;
   label$3 : {
    $1_1 = HEAP32[(0 + 127320 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$3
    }
    if (FUNCTION_TABLE[$1_1 | 0](HEAP32[(0 + 127324 | 0) >> 2] | 0, $0_1) | 0) {
     break label$3
    }
    $835(0 | 0) | 0;
    return 0 | 0;
   }
   label$4 : {
    $1_1 = HEAP32[(0 + 127316 | 0) >> 2] | 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$4
    }
    HEAP8[(0 + 127332 | 0) >> 0] = 1;
    $2_1 = $1_1 & 1 | 0;
    $3_1 = HEAP32[(0 + 127312 | 0) >> 2] | 0;
    label$5 : {
     label$6 : {
      if (($1_1 | 0) != (1 | 0)) {
       break label$6
      }
      $1_1 = 0;
      break label$5;
     }
     $4_1 = $1_1 & -2 | 0;
     $1_1 = 0;
     $5_1 = 0;
     label$7 : while (1) {
      label$8 : {
       $6_1 = $3_1 + Math_imul($1_1, 12) | 0;
       if (HEAP32[($6_1 + 8 | 0) >> 2] | 0) {
        break label$8
       }
       FUNCTION_TABLE[HEAP32[$6_1 >> 2] | 0 | 0](HEAP32[($6_1 + 4 | 0) >> 2] | 0, $0_1) | 0;
       $3_1 = HEAP32[(0 + 127312 | 0) >> 2] | 0;
      }
      label$9 : {
       $6_1 = $3_1 + Math_imul($1_1 | 1 | 0, 12) | 0;
       if (HEAP32[($6_1 + 8 | 0) >> 2] | 0) {
        break label$9
       }
       FUNCTION_TABLE[HEAP32[$6_1 >> 2] | 0 | 0](HEAP32[($6_1 + 4 | 0) >> 2] | 0, $0_1) | 0;
       $3_1 = HEAP32[(0 + 127312 | 0) >> 2] | 0;
      }
      $1_1 = $1_1 + 2 | 0;
      $5_1 = $5_1 + 2 | 0;
      if (($5_1 | 0) != ($4_1 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    label$10 : {
     if (!$2_1) {
      break label$10
     }
     $1_1 = $3_1 + Math_imul($1_1, 12) | 0;
     if (HEAP32[($1_1 + 8 | 0) >> 2] | 0) {
      break label$10
     }
     FUNCTION_TABLE[HEAP32[$1_1 >> 2] | 0 | 0](HEAP32[($1_1 + 4 | 0) >> 2] | 0, $0_1) | 0;
     $3_1 = HEAP32[(0 + 127312 | 0) >> 2] | 0;
    }
    HEAP8[(0 + 127332 | 0) >> 0] = 0;
    if (!(HEAPU8[(0 + 127336 | 0) >> 0] | 0)) {
     break label$4
    }
    label$11 : {
     $1_1 = HEAP32[(0 + 127316 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$11
     }
     label$12 : while (1) {
      $5_1 = $1_1;
      $1_1 = $1_1 + -1 | 0;
      label$13 : {
       $4_1 = Math_imul($5_1, 12) + $3_1 | 0;
       if (!(HEAP32[($4_1 + -4 | 0) >> 2] | 0)) {
        break label$13
       }
       $6_1 = HEAP32[(0 + 127316 | 0) >> 2] | 0;
       HEAP32[(0 + 127316 | 0) >> 2] = $6_1 + -1 | 0;
       if (($6_1 | 0) <= ($5_1 | 0)) {
        break label$13
       }
       $537($3_1 + Math_imul($1_1, 12) | 0 | 0, $4_1 | 0, Math_imul($6_1 - $5_1 | 0, 12) | 0) | 0;
       $3_1 = HEAP32[(0 + 127312 | 0) >> 2] | 0;
      }
      if ($1_1) {
       continue label$12
      }
      break label$12;
     };
    }
    HEAP8[(0 + 127336 | 0) >> 0] = 0;
   }
   $835(0 | 0) | 0;
  }
  label$14 : {
   if (($324($0_1 | 0, 1 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0) | 0 | 0) >= (1 | 0)) {
    break label$14
   }
   return -1 | 0;
  }
  $373($0_1 | 0);
  return 1 | 0;
 }
 
 function $328($0_1) {
  $0_1 = $0_1 | 0;
  return $329($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $329($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  $3_1 = !$1_1;
  $4_1 = $927() | 0;
  label$1 : {
   if ($259(126280 | 0) | 0) {
    break label$1
   }
   $326(1 | 0);
  }
  $5_1 = 0;
  label$2 : {
   $3_1 = $324($0_1 | 0, 1 | 0, 2 | 0, 0 | 0, 65535 | 0, $3_1 | 0) | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     label$5 : {
      if ($1_1) {
       break label$5
      }
      label$6 : {
       if (!$0_1) {
        break label$6
       }
       if ((HEAP32[$0_1 >> 2] | 0 | 0) == (32512 | 0)) {
        break label$2
       }
       break label$3;
      }
      if (!($324($2_1 + 8 | 0 | 0, 1 | 0, 1 | 0, 0 | 0, 65535 | 0, 1 | 0) | 0)) {
       break label$3
      }
      if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != (32512 | 0)) {
       break label$3
      }
      $324($2_1 + 8 | 0 | 0, 1 | 0, 2 | 0, 32512 | 0, 32512 | 0, 1 | 0) | 0;
      break label$4;
     }
     $5_1 = 1;
     if ($3_1) {
      break label$2
     }
     label$7 : {
      label$8 : {
       if (($1_1 | 0) >= (1 | 0)) {
        break label$8
       }
       $6_1 = 0;
       $3_1 = 0;
       break label$7;
      }
      $3_1 = $853() | 0;
      $6_1 = $3_1 + $1_1 | 0;
     }
     label$9 : {
      if (!$4_1) {
       break label$9
      }
      if (!(HEAP32[($4_1 + 280 | 0) >> 2] | 0)) {
       break label$9
      }
      if (!(HEAP32[($4_1 + 284 | 0) >> 2] | 0)) {
       break label$9
      }
      label$10 : {
       if (!($318(512 | 0) | 0)) {
        break label$10
       }
       if ((HEAPU8[(0 + 127344 | 0) >> 0] | 0) & 1 | 0) {
        break label$10
       }
       if (($395() | 0 | 0) > (0 | 0)) {
        break label$9
       }
      }
      label$11 : {
       if (!($318(32768 | 0) | 0)) {
        break label$11
       }
       if ((HEAPU8[(0 + 127348 | 0) >> 0] | 0) & 1 | 0) {
        break label$11
       }
       if (($518() | 0 | 0) > (0 | 0)) {
        break label$9
       }
      }
      $5_1 = HEAP32[($4_1 + 400 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$9
      }
      label$12 : {
       label$13 : while (1) {
        if (!(HEAP32[($5_1 + 124 | 0) >> 2] | 0)) {
         break label$12
        }
        $5_1 = HEAP32[($5_1 + 172 | 0) >> 2] | 0;
        if ($5_1) {
         continue label$13
        }
        break label$9;
       };
      }
      $5_1 = $330($4_1 | 0, $5_1 | 0, $0_1 | 0, $3_1 | 0, $1_1 | 0) | 0;
      if (($5_1 | 0) > (-1 | 0)) {
       break label$2
      }
     }
     $5_1 = 1;
     label$14 : while (1) {
      $326(1 | 0);
      label$15 : {
       $3_1 = $324($0_1 | 0, 1 | 0, 2 | 0, 0 | 0, 65535 | 0, 0 | 0) | 0;
       if (!$3_1) {
        break label$15
       }
       if (($3_1 | 0) != (-1 | 0)) {
        break label$2
       }
       break label$4;
      }
      label$16 : {
       if (($1_1 | 0) < (1 | 0)) {
        break label$16
       }
       if (($6_1 - ($853() | 0) | 0 | 0) < (1 | 0)) {
        break label$4
       }
      }
      $841(1 | 0);
      continue label$14;
     };
    }
    $5_1 = 0;
    break label$2;
   }
   $5_1 = ($3_1 | 0) != (0 | 0);
  }
  global$0 = $2_1 + 64 | 0;
  return $5_1 | 0;
 }
 
 function $330($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $7_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    if (!($318(512 | 0) | 0)) {
     break label$2
    }
    $5_1 = 1;
    if (!((HEAPU8[(0 + 127344 | 0) >> 0] | 0) & 1 | 0)) {
     break label$1
    }
   }
   $5_1 = ($318(32768 | 0) | 0 | 0) != (0 | 0) & ((HEAPU8[(0 + 127348 | 0) >> 0] | 0) ^ 1 | 0) | 0;
  }
  $6_1 = $4_1;
  label$3 : {
   label$4 : while (1) {
    $326(1 | 0);
    $834(HEAP32[($0_1 + 388 | 0) >> 2] | 0 | 0) | 0;
    label$5 : {
     $7_1 = $324($2_1 | 0, 1 | 0, 2 | 0, 0 | 0, 65535 | 0, 0 | 0) | 0;
     if (!$7_1) {
      break label$5
     }
     HEAP32[($0_1 + 384 | 0) >> 2] = 0;
     $835(HEAP32[($0_1 + 388 | 0) >> 2] | 0 | 0) | 0;
     return ($7_1 ^ -1 | 0) >>> 31 | 0 | 0;
    }
    HEAP32[($0_1 + 384 | 0) >> 2] = $1_1;
    $835(HEAP32[($0_1 + 388 | 0) >> 2] | 0 | 0) | 0;
    label$6 : {
     if (($4_1 | 0) < (1 | 0)) {
      break label$6
     }
     $6_1 = ($853() | 0) - $3_1 | 0;
     if ($4_1 >>> 0 <= $6_1 >>> 0) {
      break label$3
     }
     $6_1 = $4_1 - $6_1 | 0;
    }
    $6_1 = $5_1 ? (($6_1 | 0) > (-1 | 0) ? (($6_1 | 0) < (3e3 | 0) ? $6_1 : 3e3) : 3e3) : $6_1;
    $7_1 = FUNCTION_TABLE[HEAP32[($0_1 + 280 | 0) >> 2] | 0 | 0]($0_1, $6_1) | 0;
    HEAP32[($0_1 + 384 | 0) >> 2] = 0;
    if ((($7_1 | 0) < (1 | 0) | 0) == ($5_1 & (!$7_1 & ($6_1 | 0) == (3e3 | 0) | 0) | 0 | 0)) {
     continue label$4
    }
    break label$4;
   };
   return $7_1 | 0;
  }
  HEAP32[($0_1 + 384 | 0) >> 2] = 0;
  return 0 | 0;
 }
 
 function $331($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $834(0 | 0) | 0;
  label$1 : {
   $2_1 = $458(HEAP32[(0 + 127312 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[(0 + 127316 | 0) >> 2] | 0, 12) + 12 | 0 | 0) | 0;
   if (!$2_1) {
    break label$1
   }
   HEAP32[(0 + 127312 | 0) >> 2] = $2_1;
   $3_1 = HEAP32[(0 + 127316 | 0) >> 2] | 0;
   $2_1 = $2_1 + Math_imul($3_1, 12) | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$2_1 >> 2] = $0_1;
   HEAP32[(0 + 127316 | 0) >> 2] = $3_1 + 1 | 0;
  }
  $835(0 | 0) | 0;
 }
 
 function $332($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  $834(0 | 0) | 0;
  label$1 : {
   $2_1 = HEAP32[(0 + 127316 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = HEAP32[(0 + 127312 | 0) >> 2] | 0;
   $4_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $5_1 = $3_1 + Math_imul($4_1, 12) | 0;
     if ((HEAP32[$5_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
      break label$3
     }
     if ((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if (!(HEAPU8[(0 + 127332 | 0) >> 0] | 0)) {
       break label$4
      }
      HEAP32[($5_1 + 8 | 0) >> 2] = 1;
      HEAP8[(0 + 127336 | 0) >> 0] = 1;
      $835(0 | 0) | 0;
      return;
     }
     $0_1 = $2_1 + -1 | 0;
     HEAP32[(0 + 127316 | 0) >> 2] = $0_1;
     if (($0_1 | 0) <= ($4_1 | 0)) {
      break label$1
     }
     $537($5_1 | 0, $5_1 + 12 | 0 | 0, Math_imul($0_1 - $4_1 | 0, 12) | 0) | 0;
     $835(0 | 0) | 0;
     return;
    }
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $835(0 | 0) | 0;
 }
 
 function $333($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $834(HEAP32[(0 + 126244 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   $2_1 = HEAP32[(0 + 126260 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = HEAP32[($2_1 + 72 | 0) >> 2] | 0;
    label$3 : {
     if (FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1) | 0) {
      break label$3
     }
     $4_1 = HEAP32[($2_1 + 72 | 0) >> 2] | 0;
     label$4 : {
      $5_1 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$4
      }
      HEAP32[($5_1 + 72 | 0) >> 2] = $4_1;
     }
     label$5 : {
      if (!$4_1) {
       break label$5
      }
      HEAP32[($4_1 + 68 | 0) >> 2] = $5_1;
     }
     label$6 : {
      if (($2_1 | 0) != (HEAP32[(0 + 126260 | 0) >> 2] | 0 | 0)) {
       break label$6
      }
      HEAP32[(0 + 126260 | 0) >> 2] = $4_1;
     }
     label$7 : {
      if (($2_1 | 0) != (HEAP32[(0 + 126264 | 0) >> 2] | 0 | 0)) {
       break label$7
      }
      HEAP32[(0 + 126264 | 0) >> 2] = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
     }
     label$8 : {
      if ((HEAP32[$2_1 >> 2] | 0 | 0) != (32512 | 0)) {
       break label$8
      }
      $258(126280 | 0, -1 | 0) | 0;
     }
     HEAP32[($2_1 + 72 | 0) >> 2] = HEAP32[(0 + 126268 | 0) >> 2] | 0;
     HEAP32[(0 + 126268 | 0) >> 2] = $2_1;
     $258(126252 | 0, -1 | 0) | 0;
    }
    $2_1 = $3_1;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $835(HEAP32[(0 + 126244 | 0) >> 2] | 0 | 0) | 0;
 }
 
 function $334($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[((($0_1 >>> 6 | 0) & 1020 | 0) + 126288 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    $3_1 = 0;
    if (((HEAP32[($2_1 + (($0_1 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> $0_1 | 0) & 1 | 0) {
     break label$1
    }
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   $3_1 = ($327($1_1 + 8 | 0 | 0) | 0 | 0) > (0 | 0);
  }
  global$0 = $1_1 + 64 | 0;
  return $3_1 | 0;
 }
 
 function $335() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = global$0 - 64 | 0;
  global$0 = $0_1;
  $1_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[(0 + 126300 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    if ((HEAPU8[$2_1 >> 0] | 0) & 16 | 0) {
     break label$1
    }
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = 772;
   $1_1 = ($327($0_1 + 8 | 0 | 0) | 0 | 0) > (0 | 0);
  }
  global$0 = $0_1 + 64 | 0;
  return $1_1 | 0;
 }
 
 function $336() {
  $384(75471 | 0, 35 | 0, 0 | 0);
  $384(75386 | 0, 36 | 0, 0 | 0);
  $384(76528 | 0, 37 | 0, 0 | 0);
  $384(76425 | 0, 38 | 0, 0 | 0);
  $321(771 | 0, 0 | 0) | 0;
  $321(770 | 0, 0 | 0) | 0;
  $321(513 | 0, 0 | 0) | 0;
  HEAP32[(0 + 126248 | 0) >> 2] = 1;
  $835(HEAP32[(0 + 126244 | 0) >> 2] | 0 | 0) | 0;
  $487() | 0;
  return 0 | 0;
 }
 
 function $337($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : {
    if (!($382($3_1 | 0, 1 | 0) | 0)) {
     break label$2
    }
    $3_1 = 0;
    if (!(HEAP32[(0 + 126312 | 0) >> 2] | 0)) {
     break label$1
    }
    if ($417(-1 | 0) | 0) {
     break label$1
    }
   }
   $3_1 = 1;
  }
  HEAP8[(0 + 127344 | 0) >> 0] = $3_1;
 }
 
 function $338($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP8[(0 + 127348 | 0) >> 0] = !($382($3_1 | 0, 1 | 0) | 0) | (HEAP32[(0 + 126360 | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $339($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = 0;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $4_1 = 0;
   if (!(HEAPU8[$3_1 >> 0] | 0)) {
    break label$1
   }
   $4_1 = 0;
   if (($549($3_1 | 0) | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = 3;
   if (($549($3_1 | 0) | 0 | 0) > (3 | 0)) {
    break label$1
   }
   $4_1 = $549($3_1 | 0) | 0;
  }
  HEAP32[(0 + 127340 | 0) >> 2] = $4_1;
 }
 
 function $340($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $321(32512 | 0, ($382($3_1 | 0, 1 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
 }
 
 function $341() {
  $489();
  $320();
  $385(76425 | 0, 38 | 0, 0 | 0);
  $385(76528 | 0, 37 | 0, 0 | 0);
  $385(75471 | 0, 35 | 0, 0 | 0);
  $385(75386 | 0, 36 | 0, 0 | 0);
 }
 
 function $342($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = -1;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      $2_1 = HEAPU8[$0_1 >> 0] | 0;
      switch ($2_1 + -43 | 0 | 0) {
      case 1:
       break label$2;
      case 0:
      case 2:
       break label$3;
      default:
       break label$4;
      };
     }
     if ($2_1) {
      break label$2
     }
     break label$1;
    }
    $0_1 = $0_1 + 1 | 0;
   }
   label$5 : {
    if ($554($0_1 | 0, 65856 | 0) | 0) {
     break label$5
    }
    return 0 | 0;
   }
   label$6 : {
    if ($554($0_1 | 0, 65561 | 0) | 0) {
     break label$6
    }
    return 1 | 0;
   }
   label$7 : {
    if ($554($0_1 | 0, 65849 | 0) | 0) {
     break label$7
    }
    return 2 | 0;
   }
   label$8 : {
    if ($554($0_1 | 0, 65554 | 0) | 0) {
     break label$8
    }
    return 3 | 0;
   }
   label$9 : {
    if ($554($0_1 | 0, 70085 | 0) | 0) {
     break label$9
    }
    return 4 | 0;
   }
   $1_1 = $554($0_1 | 0, 70072 | 0) | 0 ? -1 : 5;
  }
  return $1_1 | 0;
 }
 
 function $343($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $8_1 = 0, $4_1 = 0, $6_1 = 0, $2_1 = 0, $7_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  $3_1 = $319() | 0;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $4_1 = $260(68304 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    $5_1 = $501($0_1 | 0) | 0;
    $6_1 = $456($5_1 + 1 | 0 | 0) | 0;
    if ($6_1) {
     break label$3
    }
    label$4 : {
     if (!$1_1) {
      break label$4
     }
     $503($0_1 | 0) | 0;
    }
    $4_1 = $260(65567 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$5 : {
    if (($502($0_1 | 0, $6_1 | 0, $5_1 | 0, 1 | 0) | 0 | 0) == (1 | 0)) {
     break label$5
    }
    label$6 : {
     if (!$1_1) {
      break label$6
     }
     $503($0_1 | 0) | 0;
    }
    $459($6_1 | 0);
    $4_1 = $260(78160 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$7 : {
    if (!$1_1) {
     break label$7
    }
    $503($0_1 | 0) | 0;
   }
   $4_1 = 0;
   $7_1 = $6_1 + $5_1 | 0;
   HEAP8[$7_1 >> 0] = 0;
   label$8 : {
    if (($5_1 | 0) < (1 | 0)) {
     break label$8
    }
    $0_1 = $6_1;
    label$9 : while (1) {
     $1_1 = $7_1;
     label$10 : {
      $5_1 = $544($0_1 | 0, 10 | 0) | 0;
      if (!$5_1) {
       break label$10
      }
      HEAP8[$5_1 >> 0] = 0;
      $1_1 = $5_1;
     }
     label$11 : {
      $5_1 = $545($0_1 | 0, 78218 | 0) | 0;
      if (!$5_1) {
       break label$11
      }
      $5_1 = $5_1 + ($539(78218 | 0) | 0) | 0;
      $8_1 = $544($5_1 | 0, 44 | 0) | 0;
      if (!$8_1) {
       break label$11
      }
      $8_1 = $8_1 - $5_1 | 0;
      if (($8_1 + 2 | 0) >>> 0 > 63 >>> 0) {
       break label$11
      }
      $8_1 = $8_1 + 1 | 0;
      $540($2_1 | 0, $5_1 | 0, $8_1 | 0) | 0;
      if ($546($2_1 | 0, $3_1 | 0, $8_1 | 0) | 0) {
       break label$11
      }
      $388();
      $4_1 = $4_1 + (($344($0_1 | 0, 1 | 0) | 0 | 0) > (0 | 0)) | 0;
      $389();
     }
     $0_1 = $1_1 + 1 | 0;
     if ($0_1 >>> 0 < $7_1 >>> 0) {
      continue label$9
     }
     break label$9;
    };
   }
   $459($6_1 | 0);
  }
  global$0 = $2_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $344($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $4_1 = 0, $115_1 = 0, $118_1 = 0;
  $2_1 = global$0 - 192 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 188 | 0) >> 2] = 0;
  $390();
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = 71879;
    $3_1 = $260(73395 | 0, $2_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    $3_1 = $545($0_1 | 0, 78212 | 0) | 0;
    if (!$3_1) {
     break label$3
    }
    $3_1 = $3_1 + ($539(78212 | 0) | 0) | 0;
    $4_1 = HEAPU8[$3_1 >> 0] | 0;
    $5_1 = $3_1 + (($4_1 | 0) == (33 | 0)) | 0;
    $6_1 = 0;
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : while (1) {
        $3_1 = HEAPU8[$5_1 >> 0] | 0;
        if (!$3_1) {
         break label$6
        }
        if (($3_1 | 0) == (44 | 0)) {
         break label$6
        }
        if (($3_1 | 0) == (58 | 0)) {
         break label$5
        }
        if ($6_1 >>> 0 > 126 >>> 0) {
         break label$5
        }
        HEAP8[(($2_1 + 48 | 0) + $6_1 | 0) >> 0] = $3_1;
        $6_1 = $6_1 + 1 | 0;
        $5_1 = $5_1 + 1 | 0;
        continue label$7;
       };
      }
      $7_1 = 0;
      HEAP8[(($2_1 + 48 | 0) + $6_1 | 0) >> 0] = 0;
      break label$4;
     }
     $7_1 = 0;
     HEAP8[(($2_1 + 48 | 0) + $6_1 | 0) >> 0] = 0;
     if (($3_1 | 0) != (58 | 0)) {
      break label$4
     }
     if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (61 | 0)) {
      break label$4
     }
     $7_1 = $549($5_1 + 2 | 0 | 0) | 0;
    }
    $3_1 = $383($2_1 + 48 | 0 | 0, $7_1 | 0) | 0;
    if (($4_1 | 0) == (33 | 0) ? !$3_1 : $3_1) {
     break label$3
    }
    $3_1 = 0;
    break label$1;
   }
   label$8 : {
    label$9 : {
     $3_1 = $544($0_1 | 0, 44 | 0) | 0;
     if (!$3_1) {
      break label$9
     }
     $5_1 = 1;
     $6_1 = $3_1 - $0_1 | 0;
     $3_1 = $456($6_1 + 1 | 0 | 0) | 0;
     if ($3_1) {
      break label$8
     }
     $262(0 | 0) | 0;
    }
    HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
    $3_1 = $260(68634 | 0, $2_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   $535($3_1 | 0, $0_1 | 0, $6_1 | 0) | 0;
   HEAP8[($3_1 + $6_1 | 0) >> 0] = 0;
   label$10 : {
    $6_1 = $554($3_1 | 0, 67320 | 0) | 0;
    if (!$6_1) {
     break label$10
    }
    $5_1 = ($554($3_1 | 0, 66990 | 0) | 0 | 0) != (0 | 0);
   }
   $434($2_1 + 48 | 0 | 0, $3_1 | 0);
   $459($3_1 | 0);
   i64toi32_i32$2 = ($2_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $115_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($2_1 + 32 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $115_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAPU8[($2_1 + 48 | 0) >> 0] | 0 | ((HEAPU8[($2_1 + 49 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2_1 + 50 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2_1 + 51 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[($2_1 + 52 | 0) >> 0] | 0 | ((HEAPU8[($2_1 + 53 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2_1 + 54 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2_1 + 55 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $118_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = $118_1;
   HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   label$11 : {
    $0_1 = $345($2_1 + 32 | 0 | 0, $0_1 | 0, $2_1 + 188 | 0 | 0, $1_1 | 0) | 0;
    if ($0_1) {
     break label$11
    }
    $3_1 = -1;
    break label$1;
   }
   label$12 : {
    if (!(HEAP32[($2_1 + 188 | 0) >> 2] | 0)) {
     break label$12
    }
    $3_1 = 0;
    break label$1;
   }
   label$13 : {
    if ($6_1) {
     break label$13
    }
    HEAP32[(0 + 127404 | 0) >> 2] = $0_1;
    $3_1 = 1;
    break label$1;
   }
   $3_1 = 1;
   if ($5_1) {
    break label$1
   }
   HEAP32[(0 + 127408 | 0) >> 2] = $0_1;
  }
  global$0 = $2_1 + 192 | 0;
  return $3_1 | 0;
 }
 
 function $345($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $7_1 = 0, $24_1 = 0, $25_1 = 0, $6_1 = 0, $65_1 = 0, $68_1 = 0, $125_1 = 0, $128_1 = 0, $133_1 = 0, $136_1 = 0, $152_1 = 0, $155_1 = 0, $164_1 = 0, $167_1 = 0, $236_1 = 0, $241_1 = 0;
  $4_1 = global$0 - 208 | 0;
  global$0 = $4_1;
  $390();
  label$1 : {
   label$2 : {
    label$3 : {
     $5_1 = $544($1_1 | 0, 44 | 0) | 0;
     if (!$5_1) {
      break label$3
     }
     $6_1 = $5_1 + 1 | 0;
     $7_1 = $544($6_1 | 0, 44 | 0) | 0;
     if (!$7_1) {
      break label$3
     }
     $8_1 = $7_1 - $5_1 | 0;
     $7_1 = $456($8_1 | 0) | 0;
     if ($7_1) {
      break label$2
     }
     $262(0 | 0) | 0;
    }
    HEAP32[$4_1 >> 2] = $1_1;
    $260(68606 | 0, $4_1 | 0) | 0;
    $5_1 = 0;
    break label$1;
   }
   $535($7_1 | 0, $6_1 | 0, $8_1 | 0) | 0;
   $5_1 = 0;
   HEAP8[(($7_1 + $8_1 | 0) + -1 | 0) >> 0] = 0;
   label$4 : {
    label$5 : {
     $8_1 = $544($1_1 | 0, 44 | 0) | 0;
     if (!$8_1) {
      break label$5
     }
     $8_1 = $544($8_1 + 1 | 0 | 0, 44 | 0) | 0;
     if (!$8_1) {
      break label$5
     }
     $8_1 = $543($8_1 + 1 | 0 | 0) | 0;
     if ($8_1) {
      break label$4
     }
    }
    $459($7_1 | 0);
    HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
    $260(68662 | 0, $4_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$2 = $0_1 + 8 | 0;
   i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $65_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($4_1 + 88 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $65_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $68_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1;
   HEAP32[($4_1 + 88 | 0) >> 2] = $68_1;
   HEAP32[($4_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $418($4_1 + 88 | 0 | 0, 0 | 0, 0 | 0, 0 | 0, $4_1 + 110 | 0 | 0);
   label$6 : {
    label$7 : {
     if (!(HEAPU16[($4_1 + 110 | 0) >> 1] | 0)) {
      break label$7
     }
     label$8 : {
      label$9 : {
       $5_1 = $545($8_1 | 0, 78228 | 0) | 0;
       if ($5_1) {
        break label$9
       }
       $5_1 = 87288;
       break label$8;
      }
      $1_1 = $544($5_1 | 0, 44 | 0) | 0;
      HEAP8[$5_1 >> 0] = 0;
      $5_1 = $1_1 ? $1_1 + 1 | 0 : 87288;
     }
     HEAP32[($4_1 + 64 | 0) >> 2] = $8_1;
     HEAP32[($4_1 + 68 | 0) >> 2] = 78228;
     HEAP32[($4_1 + 72 | 0) >> 2] = HEAPU16[($4_1 + 110 | 0) >> 1] | 0;
     HEAP32[($4_1 + 76 | 0) >> 2] = $5_1;
     if (($558($4_1 + 136 | 0 | 0, 68538 | 0, $4_1 + 64 | 0 | 0) | 0 | 0) < (0 | 0)) {
      break label$6
     }
     $459($8_1 | 0);
     $8_1 = HEAP32[($4_1 + 136 | 0) >> 2] | 0;
     break label$6;
    }
    $5_1 = $545($8_1 | 0, 78228 | 0) | 0;
    if (!$5_1) {
     break label$6
    }
    $5_1 = $551($5_1 + 4 | 0 | 0, 0 | 0, 16 | 0) | 0;
    HEAP16[($4_1 + 110 | 0) >> 1] = $5_1;
    $5_1 = $5_1 & 65535 | 0;
    if (!$5_1) {
     break label$6
    }
    $423($0_1 | 0, $5_1 | 0);
   }
   $1_1 = ($4_1 + 112 | 0) + 8 | 0;
   $5_1 = $0_1 + 8 | 0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $125_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[i64toi32_i32$0 >> 2] = $125_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $128_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1;
   HEAP32[($4_1 + 112 | 0) >> 2] = $128_1;
   HEAP32[($4_1 + 116 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $133_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($4_1 + 48 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $133_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $136_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1;
   HEAP32[($4_1 + 48 | 0) >> 2] = $136_1;
   HEAP32[($4_1 + 52 | 0) >> 2] = i64toi32_i32$0;
   $418($4_1 + 48 | 0 | 0, $4_1 + 134 | 0 | 0, $4_1 + 132 | 0 | 0, 0 | 0, $4_1 + 130 | 0 | 0);
   label$10 : {
    label$11 : {
     label$12 : {
      label$13 : {
       if (!(HEAPU16[($4_1 + 130 | 0) >> 1] | 0)) {
        break label$13
       }
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $152_1 = i64toi32_i32$0;
       i64toi32_i32$0 = ($4_1 + 32 | 0) + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $152_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
       $155_1 = i64toi32_i32$1;
       i64toi32_i32$1 = i64toi32_i32$2;
       HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] = $155_1;
       HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] = i64toi32_i32$0;
       $5_1 = $347(i64toi32_i32$2 + 32 | 0 | 0, 1 | 0, 1 | 0) | 0;
       if ($5_1) {
        break label$12
       }
      }
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $164_1 = i64toi32_i32$0;
      i64toi32_i32$0 = ($4_1 + 192 | 0) + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $164_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
      $167_1 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$2;
      HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] = $167_1;
      HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] = i64toi32_i32$0;
      $390();
      $423(i64toi32_i32$2 + 192 | 0 | 0, 0 | 0);
      label$14 : {
       $5_1 = HEAP32[(0 + 127352 | 0) >> 2] | 0;
       if (!$5_1) {
        break label$14
       }
       label$15 : while (1) {
        label$16 : {
         if (!($538($5_1 | 0, 127356 | 0, 16 | 0) | 0)) {
          break label$16
         }
         $535($4_1 + 136 | 0 | 0, $5_1 | 0, 16 | 0) | 0;
         if (!($538($4_1 + 192 | 0 | 0, $4_1 + 136 | 0 | 0, 16 | 0) | 0)) {
          break label$12
         }
        }
        $5_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
        if ($5_1) {
         continue label$15
        }
        break label$15;
       };
      }
      $5_1 = $456(32 | 0) | 0;
      if ($5_1) {
       break label$11
      }
      $459($7_1 | 0);
      $459($8_1 | 0);
      $5_1 = 0;
      $262(0 | 0) | 0;
      break label$1;
     }
     label$17 : {
      if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 > $3_1 >>> 0) {
       break label$17
      }
      $459(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0);
      HEAP32[($5_1 + 16 | 0) >> 2] = $7_1;
      $459(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
      HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
      HEAP32[($5_1 + 20 | 0) >> 2] = $8_1;
      $390();
      $0_1 = 1;
      $1_1 = HEAP32[(0 + 127400 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$10
      }
      label$18 : while (1) {
       label$19 : {
        if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
         break label$19
        }
        $363($1_1 | 0, $5_1 | 0);
        HEAP32[($4_1 + 136 | 0) >> 2] = 1621;
        HEAP32[($4_1 + 144 | 0) >> 2] = HEAP32[((HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        $327($4_1 + 136 | 0 | 0) | 0;
       }
       $1_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
       if ($1_1) {
        continue label$18
       }
       break label$10;
      };
     }
     $459($7_1 | 0);
     $459($8_1 | 0);
     $0_1 = 1;
     break label$10;
    }
    label$20 : {
     if (!(HEAPU16[($4_1 + 110 | 0) >> 1] | 0)) {
      break label$20
     }
     $423($0_1 | 0, 0 | 0);
    }
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $236_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    $24_1 = $236_1;
    HEAP8[$5_1 >> 0] = $24_1;
    HEAP8[($5_1 + 1 | 0) >> 0] = $24_1 >>> 8 | 0;
    HEAP8[($5_1 + 2 | 0) >> 0] = $24_1 >>> 16 | 0;
    HEAP8[($5_1 + 3 | 0) >> 0] = $24_1 >>> 24 | 0;
    HEAP8[($5_1 + 4 | 0) >> 0] = i64toi32_i32$1;
    HEAP8[($5_1 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
    HEAP8[($5_1 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
    HEAP8[($5_1 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $241_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1 + 8 | 0;
    $25_1 = $241_1;
    HEAP8[i64toi32_i32$1 >> 0] = $25_1;
    HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $25_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $25_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $25_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
    HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
    $0_1 = 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = $8_1;
    HEAP32[($5_1 + 16 | 0) >> 2] = $7_1;
    HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
    label$21 : {
     $1_1 = HEAP32[(0 + 127352 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$21
     }
     label$22 : while (1) {
      $0_1 = $1_1;
      $1_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      if ($1_1) {
       continue label$22
      }
      break label$22;
     };
     HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
     $0_1 = 0;
     break label$10;
    }
    HEAP32[(0 + 127352 | 0) >> 2] = $5_1;
   }
   HEAP32[$2_1 >> 2] = $0_1;
  }
  global$0 = $4_1 + 208 | 0;
  return $5_1 | 0;
 }
 
 function $346($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $3_1 = 0, $14_1 = 0, $17_1 = 0, $33_1 = 0, $36_1 = 0, $45_1 = 0, $48_1 = 0, $86_1 = 0, $89_1 = 0, $99_1 = 0, $102_1 = 0, $113_1 = 0, $116_1 = 0, $126_1 = 0, $129_1 = 0, $137_1 = 0, $140_1 = 0, $214_1 = 0, $217_1 = 0, $253_1 = 0, $256_1 = 0, $268_1 = 0, $271_1 = 0, $281_1 = 0, $284_1 = 0, $294_1 = 0, $297_1 = 0, $306_1 = 0, $309_1 = 0, $316_1 = 0, $319_1 = 0;
  $2_1 = global$0 - 1280 | 0;
  global$0 = $2_1;
  $3_1 = $0_1 + 8 | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $14_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2_1 + 192 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $14_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 192 | 0) >> 2] = $17_1;
  HEAP32[($2_1 + 196 | 0) >> 2] = i64toi32_i32$0;
  $418($2_1 + 192 | 0 | 0, $2_1 + 214 | 0 | 0, $2_1 + 212 | 0 | 0, 0 | 0, $2_1 + 210 | 0 | 0);
  label$1 : {
   label$2 : {
    if (!(HEAPU16[($2_1 + 210 | 0) >> 1] | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $33_1 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2_1 + 176 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $33_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $36_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[($2_1 + 176 | 0) >> 2] = $36_1;
    HEAP32[($2_1 + 180 | 0) >> 2] = i64toi32_i32$0;
    $4_1 = $347($2_1 + 176 | 0 | 0, 1 | 0, 1 | 0) | 0;
    if ($4_1) {
     break label$1
    }
   }
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $45_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($2_1 + 216 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $45_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $48_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 216 | 0) >> 2] = $48_1;
   HEAP32[($2_1 + 220 | 0) >> 2] = i64toi32_i32$0;
   $390();
   $423($2_1 + 216 | 0 | 0, 0 | 0);
   label$3 : {
    $4_1 = HEAP32[(0 + 127352 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$3
    }
    label$4 : while (1) {
     label$5 : {
      if (!($538($4_1 | 0, 127356 | 0, 16 | 0) | 0)) {
       break label$5
      }
      $535($2_1 + 240 | 0 | 0, $4_1 | 0, 16 | 0) | 0;
      if (!($538($2_1 + 216 | 0 | 0, $2_1 + 240 | 0 | 0, 16 | 0) | 0)) {
       break label$1
      }
     }
     $4_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
     if ($4_1) {
      continue label$4
     }
     break label$4;
    };
   }
   $4_1 = 0;
   if ($1_1) {
    break label$1
   }
   label$6 : {
    if (!(HEAPU16[($2_1 + 214 | 0) >> 1] | 0)) {
     break label$6
    }
    if (!((HEAPU16[($2_1 + 212 | 0) >> 1] | 0) & 65535 | 0)) {
     break label$6
    }
    label$7 : {
     if (!(HEAPU16[($2_1 + 210 | 0) >> 1] | 0)) {
      break label$7
     }
     i64toi32_i32$2 = $0_1 + 8 | 0;
     i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $86_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($2_1 + 160 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $86_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $89_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 160 | 0) >> 2] = $89_1;
     HEAP32[($2_1 + 164 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = $347($2_1 + 160 | 0 | 0, 1 | 0, 0 | 0) | 0;
     if ($4_1) {
      break label$1
     }
    }
    i64toi32_i32$2 = $0_1 + 8 | 0;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $99_1 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2_1 + 144 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $99_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $102_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[($2_1 + 144 | 0) >> 2] = $102_1;
    HEAP32[($2_1 + 148 | 0) >> 2] = i64toi32_i32$0;
    $4_1 = $347($2_1 + 144 | 0 | 0, 0 | 0, 0 | 0) | 0;
    if ($4_1) {
     break label$1
    }
   }
   $4_1 = $0_1 + 8 | 0;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $113_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($2_1 + 128 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $113_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $116_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 128 | 0) >> 2] = $116_1;
   HEAP32[($2_1 + 132 | 0) >> 2] = i64toi32_i32$0;
   label$8 : {
    if (!($431($2_1 + 128 | 0 | 0) | 0)) {
     break label$8
    }
    $3_1 = ($2_1 + 216 | 0) + 8 | 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $126_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[i64toi32_i32$0 >> 2] = $126_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $129_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[($2_1 + 216 | 0) >> 2] = $129_1;
    HEAP32[($2_1 + 220 | 0) >> 2] = i64toi32_i32$0;
    $540($2_1 + 240 | 0 | 0, 81146 | 0, 1024 | 0) | 0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $137_1 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2_1 + 112 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $137_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 216 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 220 | 0) >> 2] | 0;
    $140_1 = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$2;
    HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] = $140_1;
    HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] = i64toi32_i32$0;
    $418(i64toi32_i32$2 + 112 | 0 | 0, i64toi32_i32$2 + 238 | 0 | 0, i64toi32_i32$2 + 236 | 0 | 0, 0 | 0, 0 | 0);
    $4_1 = 80299;
    $0_1 = HEAPU16[(i64toi32_i32$2 + 236 | 0) >> 1] | 0;
    label$9 : {
     label$10 : {
      label$11 : {
       $3_1 = HEAPU16[(i64toi32_i32$2 + 238 | 0) >> 1] | 0;
       if (($3_1 | 0) != (1406 | 0)) {
        break label$11
       }
       if (($0_1 & 65535 | 0 | 0) == (823 | 0)) {
        break label$10
       }
      }
      label$12 : {
       if (($3_1 | 0) != (121 | 0)) {
        break label$12
       }
       if (($0_1 & 65535 | 0 | 0) == (6214 | 0)) {
        break label$10
       }
      }
      label$13 : {
       if (($3_1 | 0) != (1406 | 0)) {
        break label$13
       }
       $4_1 = 79122;
       label$14 : {
        label$15 : {
         label$16 : {
          label$17 : {
           label$18 : {
            label$19 : {
             label$20 : {
              label$21 : {
               $0_1 = HEAPU8[($2_1 + 231 | 0) >> 0] | 0;
               switch ($0_1 + -1 | 0 | 0) {
               case 6:
               case 8:
               case 9:
                break label$10;
               case 2:
               case 3:
               case 4:
               case 5:
                break label$13;
               case 0:
               case 1:
                break label$14;
               case 12:
                break label$17;
               case 11:
                break label$18;
               case 10:
                break label$19;
               case 7:
                break label$20;
               default:
                break label$21;
               };
              }
              switch ($0_1 + -128 | 0 | 0) {
              case 1:
               break label$15;
              case 0:
               break label$16;
              default:
               break label$13;
              };
             }
             $4_1 = 81058;
             break label$10;
            }
            $4_1 = 80544;
            break label$10;
           }
           $4_1 = 79856;
           break label$10;
          }
          $4_1 = 79740;
          break label$10;
         }
         $4_1 = 80454;
         break label$10;
        }
        $4_1 = 80919;
        break label$10;
       }
       $0_1 = $383(75433 | 0, 0 | 0) | 0;
       $4_1 = HEAPU8[($2_1 + 231 | 0) >> 0] | 0;
       label$22 : {
        if (!$0_1) {
         break label$22
        }
        $4_1 = ($4_1 & 255 | 0 | 0) == (1 | 0) ? 78489 : 78814;
        break label$10;
       }
       $4_1 = ($4_1 & 255 | 0 | 0) == (1 | 0) ? 78637 : 78945;
       break label$10;
      }
      $542($2_1 + 240 | 0 | 0, 80699 | 0, 1024 | 0) | 0;
      $4_1 = 80041;
      if ($426(HEAPU16[($2_1 + 238 | 0) >> 1] | 0 | 0, HEAPU16[($2_1 + 236 | 0) >> 1] | 0 | 0) | 0) {
       break label$10
      }
      label$23 : {
       if (!($425(HEAPU16[($2_1 + 238 | 0) >> 1] | 0 | 0, HEAPU16[($2_1 + 236 | 0) >> 1] | 0 | 0) | 0)) {
        break label$23
       }
       $4_1 = 78765;
       break label$10;
      }
      label$24 : {
       if (!($429(HEAPU16[($2_1 + 238 | 0) >> 1] | 0 | 0, HEAPU16[($2_1 + 236 | 0) >> 1] | 0 | 0) | 0)) {
        break label$24
       }
       $4_1 = 79715;
       break label$10;
      }
      label$25 : {
       if (!($428(HEAPU16[($2_1 + 238 | 0) >> 1] | 0 | 0, HEAPU16[($2_1 + 236 | 0) >> 1] | 0 | 0) | 0)) {
        break label$25
       }
       $4_1 = 78430;
       break label$10;
      }
      i64toi32_i32$2 = ($2_1 + 216 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $214_1 = i64toi32_i32$0;
      i64toi32_i32$0 = ($2_1 + 96 | 0) + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $214_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 216 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 220 | 0) >> 2] | 0;
      $217_1 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$2;
      HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] = $217_1;
      HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] = i64toi32_i32$0;
      $4_1 = 79701;
      label$26 : {
       switch (($424(i64toi32_i32$2 + 96 | 0 | 0, 0 | 0) | 0) + -4 | 0 | 0) {
       case 3:
        $542($2_1 + 240 | 0 | 0, 79241 | 0, 1024 | 0) | 0;
        if (!($427(HEAPU16[($2_1 + 238 | 0) >> 1] | 0 | 0, HEAPU16[($2_1 + 236 | 0) >> 1] | 0 | 0) | 0)) {
         break label$9
        }
        $4_1 = 79073;
        break label$10;
       case 1:
       case 4:
       case 5:
        $4_1 = 80041;
        break label$10;
       case 6:
        $542($2_1 + 240 | 0 | 0, 80041 | 0, 1024 | 0) | 0;
        if ((HEAPU16[($2_1 + 236 | 0) >> 1] | 0 | 0) != (29200 | 0)) {
         break label$9
        }
        $4_1 = 79227;
        break label$10;
       case 0:
        break label$10;
       default:
        break label$26;
       };
      }
      $4_1 = 80041;
      if (HEAPU16[($2_1 + 238 | 0) >> 1] | 0 | ((HEAPU16[($2_1 + 236 | 0) >> 1] | 0) & 65535 | 0) | 0) {
       break label$9
      }
     }
     $542($2_1 + 240 | 0 | 0, $4_1 | 0, 1024 | 0) | 0;
    }
    i64toi32_i32$2 = ($2_1 + 216 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $253_1 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2_1 + 80 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $253_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 216 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 220 | 0) >> 2] | 0;
    $256_1 = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$2;
    HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] = $256_1;
    HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] = i64toi32_i32$0;
    $4_1 = $345(i64toi32_i32$2 + 80 | 0 | 0, i64toi32_i32$2 + 240 | 0 | 0, i64toi32_i32$2 + 1276 | 0 | 0, 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $268_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($2_1 + 64 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $268_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $271_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 64 | 0) >> 2] = $271_1;
   HEAP32[($2_1 + 68 | 0) >> 2] = i64toi32_i32$0;
   label$30 : {
    if (!($432($2_1 + 64 | 0 | 0) | 0)) {
     break label$30
    }
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $281_1 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2_1 + 48 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $281_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $284_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[($2_1 + 48 | 0) >> 2] = $284_1;
    HEAP32[($2_1 + 52 | 0) >> 2] = i64toi32_i32$0;
    $4_1 = $348($2_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   $4_1 = $0_1 + 8 | 0;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $294_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($2_1 + 32 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $294_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $297_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = $297_1;
   HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   label$31 : {
    if (!($430($2_1 + 32 | 0 | 0) | 0)) {
     break label$31
    }
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $306_1 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2_1 + 16 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $306_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $309_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[($2_1 + 16 | 0) >> 2] = $309_1;
    HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    $4_1 = $349($2_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $316_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $316_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $319_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[$2_1 >> 2] = $319_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $415($2_1 | 0) | 0;
   $4_1 = 0;
  }
  global$0 = $2_1 + 1280 | 0;
  return $4_1 | 0;
 }
 
 function $347($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, $3_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $18_1 = 0, $21_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  HEAP16[($3_1 + 46 | 0) >> 1] = 0;
  $390();
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   i64toi32_i32$2 = $0_1 + 8 | 0;
   i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $18_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($3_1 + 8 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $18_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $21_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $21_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$0;
   $418($3_1 + 8 | 0 | 0, 0 | 0, 0 | 0, 0 | 0, $3_1 + 46 | 0 | 0);
  }
  $423($0_1 | 0, 0 | 0);
  label$2 : {
   if ($2_1) {
    break label$2
   }
   $422($0_1 | 0, 0 | 0);
  }
  $4_1 = 0;
  label$3 : {
   $5_1 = HEAP32[(0 + 127352 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$3
   }
   label$4 : while (1) {
    label$5 : {
     if (!($538($5_1 | 0, 127356 | 0, 16 | 0) | 0)) {
      break label$5
     }
     $535($3_1 + 30 | 0 | 0, $5_1 | 0, 16 | 0) | 0;
     label$6 : {
      if ($2_1) {
       break label$6
      }
      $422($3_1 + 30 | 0 | 0, 0 | 0);
     }
     if ($538($0_1 | 0, $3_1 + 30 | 0 | 0, 16 | 0) | 0) {
      break label$5
     }
     $4_1 = 0;
     label$7 : {
      if (!$1_1) {
       break label$7
      }
      $6_1 = $545(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, 78228 | 0) | 0;
      if (!$6_1) {
       break label$7
      }
      $4_1 = $551($6_1 + 4 | 0 | 0, 0 | 0, 16 | 0) | 0;
     }
     if ((HEAPU16[($3_1 + 46 | 0) >> 1] | 0 | 0) != ($4_1 & 65535 | 0 | 0)) {
      break label$5
     }
     $4_1 = $5_1;
     break label$3;
    }
    $5_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    if ($5_1) {
     continue label$4
    }
    break label$4;
   };
   $4_1 = 0;
  }
  global$0 = $3_1 + 48 | 0;
  return $4_1 | 0;
 }
 
 function $348($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $18_1 = 0;
  $1_1 = global$0 - 1056 | 0;
  global$0 = $1_1;
  $540($1_1 + 16 | 0 | 0, 81146 | 0, 1024 | 0) | 0;
  $542($1_1 + 16 | 0 | 0, 79477 | 0, 1024 | 0) | 0;
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $15_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $18_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[$1_1 >> 2] = $18_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $0_1 = $345($1_1 | 0, $1_1 + 16 | 0 | 0, $1_1 + 1052 | 0 | 0, 0 | 0) | 0;
  global$0 = $1_1 + 1056 | 0;
  return $0_1 | 0;
 }
 
 function $349($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $19_1 = 0, $22_1 = 0;
  $1_1 = global$0 - 1056 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   if ((HEAPU8[($0_1 + 15 | 0) >> 0] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $540($1_1 + 16 | 0 | 0, 81146 | 0, 1024 | 0) | 0;
   $542($1_1 + 16 | 0 | 0, 79265 | 0, 1024 | 0) | 0;
   i64toi32_i32$2 = $0_1 + 8 | 0;
   i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $19_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $19_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $22_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1;
   HEAP32[$1_1 >> 2] = $22_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $2_1 = $345($1_1 | 0, $1_1 + 16 | 0 | 0, $1_1 + 1052 | 0 | 0, 0 | 0) | 0;
  }
  global$0 = $1_1 + 1056 | 0;
  return $2_1 | 0;
 }
 
 function $350() {
  var $1_1 = 0, $2_1 = 0, $0_1 = 0, $3_1 = 0;
  $0_1 = global$0 - 1024 | 0;
  global$0 = $0_1;
  $390();
  $344(80052 | 0, 0 | 0) | 0;
  $344(80690 | 0, 0 | 0) | 0;
  label$1 : {
   $1_1 = $381(76880 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   if (!(HEAPU8[$1_1 >> 0] | 0)) {
    break label$1
   }
   if (($540($0_1 | 0, $1_1 | 0, 1024 | 0) | 0) >>> 0 > 1023 >>> 0) {
    break label$1
   }
   $343($494($0_1 | 0, 74381 | 0) | 0 | 0, 1 | 0) | 0;
  }
  label$2 : {
   $1_1 = $381(76561 | 0) | 0;
   if (!$1_1) {
    break label$2
   }
   if (!(HEAPU8[$1_1 >> 0] | 0)) {
    break label$2
   }
   $2_1 = $539($1_1 | 0) | 0;
   $3_1 = $456($2_1 + 1 | 0 | 0) | 0;
   $535($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + $2_1 | 0) >> 0] = 0;
   $2_1 = $3_1;
   label$3 : {
    $1_1 = $544($2_1 | 0, 10 | 0) | 0;
    if (!$1_1) {
     break label$3
    }
    label$4 : while (1) {
     HEAP8[$1_1 >> 0] = 0;
     $344($2_1 | 0, 2 | 0) | 0;
     $2_1 = $1_1 + 1 | 0;
     $1_1 = $544($2_1 | 0, 10 | 0) | 0;
     if ($1_1) {
      continue label$4
     }
     break label$4;
    };
   }
   $344($2_1 | 0, 2 | 0) | 0;
   $459($3_1 | 0);
  }
  $384(75604 | 0, 39 | 0, 0 | 0);
  $384(74978 | 0, 40 | 0, 0 | 0);
  global$0 = $0_1 + 1024 | 0;
  return 0 | 0;
 }
 
 function $351($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $353($3_1 | 0, 127388 | 0);
 }
 
 function $352($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $353($3_1 | 0, 127376 | 0);
 }
 
 function $353($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  HEAP32[$1_1 >> 2] = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (64 | 0)) {
     break label$2
    }
    $3_1 = $504($0_1 + 1 | 0 | 0, 0 | 0) | 0;
    $0_1 = $3_1;
    if (!$0_1) {
     break label$1
    }
   }
   $0_1 = $545($0_1 | 0, 65902 | 0) | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
   label$3 : {
    if (!$0_1) {
     break label$3
    }
    label$4 : while (1) {
     $4_1 = $551($0_1 | 0, $2_1 + 12 | 0 | 0, 0 | 0) | 0;
     $0_1 = $545(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, 65902 | 0) | 0;
     HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
     if (!$0_1) {
      break label$3
     }
     $5_1 = $551($0_1 | 0, $2_1 + 12 | 0 | 0, 0 | 0) | 0;
     $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     label$5 : {
      $0_1 = HEAP32[$1_1 >> 2] | 0;
      if (($0_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      $0_1 = $0_1 + 16 | 0;
      $6_1 = $458($6_1 | 0, $0_1 << 2 | 0 | 0) | 0;
      if (!$6_1) {
       break label$3
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
      $0_1 = HEAP32[$1_1 >> 2] | 0;
     }
     HEAP32[$1_1 >> 2] = $0_1 + 1 | 0;
     HEAP32[($6_1 + ($0_1 << 2 | 0) | 0) >> 2] = $5_1 & 65535 | 0 | ($4_1 << 16 | 0) | 0;
     $0_1 = $545(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, 65902 | 0) | 0;
     HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
     if ($0_1) {
      continue label$4
     }
     break label$4;
    };
   }
   if (!$3_1) {
    break label$1
   }
   $459($3_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $354() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = global$0 - 64 | 0;
  global$0 = $0_1;
  $331(41 | 0, 0 | 0);
  label$1 : {
   if (($395() | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $1_1 = 0;
   label$2 : while (1) {
    $388();
    $2_1 = $356($1_1 | 0) | 0;
    $389();
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = 1619;
     $327($0_1 + 8 | 0 | 0) | 0;
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) < ($395() | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $0_1 + 64 | 0;
  return 0 | 0;
 }
 
 function $355($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $7_1 = 0, $11_1 = 0, $12_1 = Math_fround(0);
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    switch ((HEAP32[$1_1 >> 2] | 0) + -1536 | 0 | 0) {
    case 0:
     $390();
     $3_1 = HEAP32[(0 + 127400 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$1
     }
     $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     label$7 : while (1) {
      label$8 : {
       if ((HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
        break label$8
       }
       $5_1 = HEAP16[($1_1 + 16 | 0) >> 1] | 0;
       $6_1 = HEAPU8[($1_1 + 12 | 0) >> 0] | 0;
       $390();
       $7_1 = HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0;
       label$9 : {
        label$10 : {
         $8_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
         if (($8_1 | 0) < (1 | 0)) {
          break label$10
         }
         $9_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
         $4_1 = 0;
         label$11 : while (1) {
          label$12 : {
           $1_1 = $9_1 + ($4_1 << 5 | 0) | 0;
           if ((HEAP32[$1_1 >> 2] | 0 | 0) != (2 | 0)) {
            break label$12
           }
           if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
            break label$12
           }
           label$13 : {
            $10_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
            $11_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
            if (($10_1 | 0) >= ($11_1 | 0)) {
             break label$13
            }
            if (($10_1 | 0) > ($5_1 | 0)) {
             break label$12
            }
            if (($11_1 | 0) < ($5_1 | 0)) {
             break label$12
            }
            break label$9;
           }
           if (($10_1 | 0) < ($5_1 | 0)) {
            break label$12
           }
           if (($11_1 | 0) <= ($5_1 | 0)) {
            break label$9
           }
          }
          $4_1 = $4_1 + 1 | 0;
          if (($4_1 | 0) != ($8_1 | 0)) {
           continue label$11
          }
          break label$11;
         };
        }
        $1_1 = 0;
       }
       label$14 : {
        label$15 : {
         label$16 : {
          if (!$7_1) {
           break label$16
          }
          label$17 : {
           if (!$1_1) {
            break label$17
           }
           $8_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
           if (($8_1 | 0) != (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
            break label$17
           }
           if ((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
            break label$15
           }
          }
          $357($3_1 | 0, $7_1 | 0);
         }
         if (!$1_1) {
          break label$14
         }
         $8_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
        }
        $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        label$18 : {
         if (($8_1 | 0) != (2 | 0)) {
          break label$18
         }
         $8_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
         $9_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
         label$19 : {
          label$20 : {
           $10_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
           if (($4_1 | 0) != ($10_1 | 0)) {
            break label$20
           }
           if (($9_1 | 0) == ($8_1 | 0)) {
            break label$19
           }
          }
          label$21 : {
           label$22 : {
            $12_1 = Math_fround(Math_fround(Math_fround($5_1 - $4_1 | 0 | 0) / Math_fround($9_1 - $4_1 | 0 | 0)) * Math_fround($8_1 - $10_1 | 0 | 0));
            if (!(Math_fround(Math_abs($12_1)) < Math_fround(2147483648.0))) {
             break label$22
            }
            $4_1 = ~~$12_1;
            break label$21;
           }
           $4_1 = -2147483648;
          }
          $5_1 = $10_1 + $4_1 | 0;
         }
         $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
         $390();
         if (($321(1616 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
          break label$14
         }
         HEAP32[($2_1 + 8 | 0) >> 2] = 1616;
         $8_1 = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
         HEAP16[($2_1 + 24 | 0) >> 1] = $5_1;
         HEAP8[($2_1 + 20 | 0) >> 0] = $4_1;
         HEAP32[($2_1 + 16 | 0) >> 2] = $8_1;
         $327($2_1 + 8 | 0 | 0) | 0;
         break label$14;
        }
        $8_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        $9_1 = (($8_1 - $4_1 | 0 | 0) / (2 | 0) | 0) + $4_1 | 0;
        $358($3_1 | 0, HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0, (($8_1 | 0) < ($4_1 | 0) ? ($9_1 | 0) >= ($5_1 | 0) : ($9_1 | 0) <= ($5_1 | 0)) | 0);
       }
       HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] = $1_1;
       break label$1;
      }
      $3_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
      if ($3_1) {
       continue label$7
      }
      break label$1;
     };
    case 3:
    case 4:
     $390();
     $3_1 = HEAP32[(0 + 127400 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$1
     }
     $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     label$23 : while (1) {
      label$24 : {
       if ((HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
        break label$24
       }
       $5_1 = HEAPU8[($1_1 + 13 | 0) >> 0] | 0;
       $6_1 = HEAPU8[($1_1 + 12 | 0) >> 0] | 0;
       $390();
       $8_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
       if (($8_1 | 0) < (1 | 0)) {
        break label$1
       }
       $9_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
       $4_1 = 0;
       label$25 : while (1) {
        label$26 : {
         $1_1 = $9_1 + ($4_1 << 5 | 0) | 0;
         if ((HEAP32[$1_1 >> 2] | 0 | 0) != (1 | 0)) {
          break label$26
         }
         if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
          break label$26
         }
         label$27 : {
          if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != (2 | 0)) {
           break label$27
          }
          $4_1 = HEAP32[($1_1 + ($5_1 & 255 | 0 ? 28 : 24) | 0) >> 2] | 0;
          $1_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
          $390();
          if (($321(1616 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
           break label$1
          }
          HEAP32[($2_1 + 8 | 0) >> 2] = 1616;
          $3_1 = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
          HEAP16[($2_1 + 24 | 0) >> 1] = $4_1;
          HEAP8[($2_1 + 20 | 0) >> 0] = $1_1;
          HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
          $327($2_1 + 8 | 0 | 0) | 0;
          break label$1;
         }
         $358($3_1 | 0, HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0, $5_1 & 255 | 0 | 0);
         break label$1;
        }
        $4_1 = $4_1 + 1 | 0;
        if (($4_1 | 0) != ($8_1 | 0)) {
         continue label$25
        }
        break label$1;
       };
      }
      $3_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
      if ($3_1) {
       continue label$23
      }
      break label$1;
     };
    case 2:
     $390();
     $3_1 = HEAP32[(0 + 127400 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$1
     }
     $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     label$28 : while (1) {
      label$29 : {
       if ((HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
        break label$29
       }
       $6_1 = HEAPU8[($1_1 + 13 | 0) >> 0] | 0;
       $8_1 = HEAPU8[($1_1 + 12 | 0) >> 0] | 0;
       $390();
       $4_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
       label$30 : {
        if ((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) < (1 | 0)) {
         break label$30
        }
        $5_1 = (HEAPU8[($4_1 + $8_1 | 0) >> 0] | 0) ^ $6_1 | 0;
        $4_1 = 0;
        label$31 : while (1) {
         label$32 : {
          $1_1 = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + ($4_1 << 5 | 0) | 0;
          if ((HEAP32[$1_1 >> 2] | 0 | 0) != (3 | 0)) {
           break label$32
          }
          if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($8_1 | 0)) {
           break label$32
          }
          $9_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
          if (!($9_1 & $5_1 | 0)) {
           break label$32
          }
          label$33 : {
           if (!($9_1 & $6_1 | 0)) {
            break label$33
           }
           $9_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
           label$34 : {
            if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != (2 | 0)) {
             break label$34
            }
            $1_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
            $390();
            if (($321(1616 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
             break label$32
            }
            HEAP32[($2_1 + 8 | 0) >> 2] = 1616;
            $10_1 = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
            HEAP16[($2_1 + 24 | 0) >> 1] = $1_1;
            HEAP8[($2_1 + 20 | 0) >> 0] = $9_1;
            HEAP32[($2_1 + 16 | 0) >> 2] = $10_1;
            $327($2_1 + 8 | 0 | 0) | 0;
            break label$32;
           }
           $390();
           if (($9_1 | 0) == (-1 | 0)) {
            break label$32
           }
           HEAP32[($2_1 + 8 | 0) >> 2] = 1617;
           label$35 : {
            if (($9_1 | 0) != (5 | 0)) {
             break label$35
            }
            HEAP32[($3_1 + 36 | 0) >> 2] = $853() | 0;
            if (HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 128 | 0) >> 2] | 0) {
             break label$32
            }
           }
           if (($321(1617 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
            break label$32
           }
           $1_1 = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
           HEAP8[($2_1 + 21 | 0) >> 0] = 1;
           HEAP8[($2_1 + 20 | 0) >> 0] = $9_1;
           HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
           $327($2_1 + 8 | 0 | 0) | 0;
           break label$32;
          }
          $357($3_1 | 0, $1_1 | 0);
         }
         $4_1 = $4_1 + 1 | 0;
         if (($4_1 | 0) < (HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0)) {
          continue label$31
         }
         break label$31;
        };
        $4_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
       }
       HEAP8[($4_1 + $8_1 | 0) >> 0] = $6_1;
       break label$1;
      }
      $3_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
      if ($3_1) {
       continue label$28
      }
      break label$1;
     };
    case 5:
     $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     $388();
     $3_1 = $356($3_1 | 0) | 0;
     $389();
     if (!$3_1) {
      break label$1
     }
     HEAP32[($2_1 + 8 | 0) >> 2] = 1619;
     HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     $327($2_1 + 8 | 0 | 0) | 0;
     break label$1;
    case 6:
     break label$2;
    default:
     break label$1;
    };
   }
   $390();
   label$36 : {
    $3_1 = HEAP32[(0 + 127400 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$36
    }
    $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    label$37 : while (1) {
     label$38 : {
      if ((HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
       break label$38
      }
      $4_1 = 0;
      label$39 : while (1) {
       label$40 : {
        if (!($359($3_1 | 0, $4_1 | 0) | 0)) {
         break label$40
        }
        $390();
        HEAP32[($2_1 + 8 | 0) >> 2] = 1618;
        label$41 : {
         if (($4_1 | 0) != (5 | 0)) {
          break label$41
         }
         $8_1 = $853() | 0;
         $9_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
         label$42 : {
          if ((((HEAP32[($3_1 + 36 | 0) >> 2] | 0) - $8_1 | 0) + 250 | 0 | 0) < (1 | 0)) {
           break label$42
          }
          HEAP32[($9_1 + 128 | 0) >> 2] = 1;
          break label$40;
         }
         HEAP32[($9_1 + 128 | 0) >> 2] = 0;
        }
        if (($321(1618 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
         break label$40
        }
        $8_1 = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        HEAP8[($2_1 + 21 | 0) >> 0] = 0;
        HEAP8[($2_1 + 20 | 0) >> 0] = $4_1;
        HEAP32[($2_1 + 16 | 0) >> 2] = $8_1;
        $327($2_1 + 8 | 0 | 0) | 0;
       }
       $4_1 = $4_1 + 1 | 0;
       if (($4_1 | 0) != (21 | 0)) {
        continue label$39
       }
       break label$39;
      };
      label$43 : {
       if (!($360($3_1 | 0, 0 | 0) | 0)) {
        break label$43
       }
       $390();
       if (($321(1616 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
        break label$43
       }
       HEAP32[($2_1 + 8 | 0) >> 2] = 1616;
       $4_1 = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       HEAP16[($2_1 + 24 | 0) >> 1] = 0;
       HEAP8[($2_1 + 20 | 0) >> 0] = 0;
       HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
       $327($2_1 + 8 | 0 | 0) | 0;
      }
      label$44 : {
       if (!($360($3_1 | 0, 1 | 0) | 0)) {
        break label$44
       }
       $390();
       if (($321(1616 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
        break label$44
       }
       HEAP32[($2_1 + 8 | 0) >> 2] = 1616;
       $4_1 = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       HEAP16[($2_1 + 24 | 0) >> 1] = 0;
       HEAP8[($2_1 + 20 | 0) >> 0] = 1;
       HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
       $327($2_1 + 8 | 0 | 0) | 0;
      }
      label$45 : {
       if (!($360($3_1 | 0, 2 | 0) | 0)) {
        break label$45
       }
       $390();
       if (($321(1616 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
        break label$45
       }
       HEAP32[($2_1 + 8 | 0) >> 2] = 1616;
       $4_1 = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       HEAP16[($2_1 + 24 | 0) >> 1] = 0;
       HEAP8[($2_1 + 20 | 0) >> 0] = 2;
       HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
       $327($2_1 + 8 | 0 | 0) | 0;
      }
      label$46 : {
       if (!($360($3_1 | 0, 3 | 0) | 0)) {
        break label$46
       }
       $390();
       if (($321(1616 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
        break label$46
       }
       HEAP32[($2_1 + 8 | 0) >> 2] = 1616;
       $4_1 = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       HEAP16[($2_1 + 24 | 0) >> 1] = 0;
       HEAP8[($2_1 + 20 | 0) >> 0] = 3;
       HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
       $327($2_1 + 8 | 0 | 0) | 0;
      }
      label$47 : {
       if (!($360($3_1 | 0, 4 | 0) | 0)) {
        break label$47
       }
       $390();
       if (($321(1616 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
        break label$47
       }
       HEAP32[($2_1 + 8 | 0) >> 2] = 1616;
       $4_1 = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       HEAP16[($2_1 + 24 | 0) >> 1] = 0;
       HEAP8[($2_1 + 20 | 0) >> 0] = 4;
       HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
       $327($2_1 + 8 | 0 | 0) | 0;
      }
      if (!($360($3_1 | 0, 5 | 0) | 0)) {
       break label$36
      }
      $390();
      if (($321(1616 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
       break label$36
      }
      HEAP32[($2_1 + 8 | 0) >> 2] = 1616;
      $3_1 = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      HEAP16[($2_1 + 24 | 0) >> 1] = 0;
      HEAP8[($2_1 + 20 | 0) >> 0] = 5;
      HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
      $327($2_1 + 8 | 0 | 0) | 0;
      break label$36;
     }
     $3_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
     if ($3_1) {
      continue label$37
     }
     break label$37;
    };
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = 1620;
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $327($2_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $2_1 + 64 | 0;
  return 1 | 0;
 }
 
 function $356($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0, $29_1 = 0, $32_1 = 0, $37_1 = 0, $40_1 = 0, $63_1 = 0, $66_1 = 0, $197_1 = 0, $200_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = global$0 - 1472 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  $390();
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) < (0 | 0)) {
      break label$3
     }
     if (($0_1 | 0) < ($395() | 0 | 0)) {
      break label$2
     }
    }
    HEAP32[$1_1 >> 2] = $395() | 0;
    $260(72810 | 0, $1_1 | 0) | 0;
    break label$1;
   }
   $3_1 = $396($0_1 | 0) | 0;
   $433($1_1 + 272 | 0 | 0, $0_1 | 0);
   $2_1 = ($1_1 + 304 | 0) + 8 | 0;
   i64toi32_i32$2 = ($1_1 + 272 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $29_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[i64toi32_i32$0 >> 2] = $29_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAPU8[($1_1 + 272 | 0) >> 0] | 0 | ((HEAPU8[($1_1 + 273 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1_1 + 274 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1_1 + 275 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[($1_1 + 276 | 0) >> 0] | 0 | ((HEAPU8[($1_1 + 277 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1_1 + 278 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1_1 + 279 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $32_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1;
   HEAP32[($1_1 + 304 | 0) >> 2] = $32_1;
   HEAP32[($1_1 + 308 | 0) >> 2] = i64toi32_i32$0;
   $390();
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $37_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($1_1 + 48 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $37_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[($1_1 + 304 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 308 | 0) >> 2] | 0;
   $40_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1;
   HEAP32[($1_1 + 48 | 0) >> 2] = $40_1;
   HEAP32[($1_1 + 52 | 0) >> 2] = i64toi32_i32$0;
   $4_1 = 0;
   $2_1 = $346($1_1 + 48 | 0 | 0, 0 | 0) | 0;
   $2_1 = (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = HEAP32[(0 + 127404 | 0) >> 2] | 0, wasm2js_i32$2 = $2_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   if ($2_1) {
    break label$1
   }
   $536($1_1 + 64 | 0 | 0, 0 | 0, 208 | 0) | 0;
   label$4 : {
    if (!($401($0_1 | 0, $1_1 + 64 | 0 | 0) | 0)) {
     break label$4
    }
    i64toi32_i32$2 = ($1_1 + 272 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $63_1 = i64toi32_i32$0;
    i64toi32_i32$0 = ($1_1 + 288 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $63_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = HEAPU8[($1_1 + 272 | 0) >> 0] | 0 | ((HEAPU8[($1_1 + 273 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1_1 + 274 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1_1 + 275 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[($1_1 + 276 | 0) >> 0] | 0 | ((HEAPU8[($1_1 + 277 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1_1 + 278 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1_1 + 279 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $66_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 288 | 0) >> 2] = $66_1;
    HEAP32[($1_1 + 292 | 0) >> 2] = i64toi32_i32$0;
    $540($1_1 + 1328 | 0 | 0, $3_1 | 0, 128 | 0) | 0;
    $0_1 = $1_1 + 1328 | 0;
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       $2_1 = HEAPU8[$0_1 >> 0] | 0;
       if (($2_1 | 0) == (44 | 0)) {
        break label$7
       }
       if ($2_1) {
        break label$6
       }
       HEAP32[($1_1 + 32 | 0) >> 2] = $1_1 + 1328 | 0;
       $556($1_1 + 304 | 0 | 0, 1024 | 0, 78421 | 0, $1_1 + 32 | 0 | 0) | 0;
       $362($1_1 + 304 | 0 | 0, 74439 | 0, $1_1 + 64 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 74400 | 0, ($1_1 + 64 | 0) + 8 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 65908 | 0, $1_1 + 80 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 65847 | 0, $1_1 + 88 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 71517 | 0, $1_1 + 96 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 73005 | 0, $1_1 + 104 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 67157 | 0, $1_1 + 112 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 71305 | 0, $1_1 + 120 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 71294 | 0, $1_1 + 128 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 70231 | 0, $1_1 + 136 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 70217 | 0, $1_1 + 144 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 70339 | 0, $1_1 + 152 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 70565 | 0, $1_1 + 160 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 67358 | 0, $1_1 + 168 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 67333 | 0, $1_1 + 176 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 78277 | 0, $1_1 + 184 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 78269 | 0, $1_1 + 192 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 78261 | 0, $1_1 + 200 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 78249 | 0, $1_1 + 208 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 78237 | 0, $1_1 + 216 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 65856 | 0, $1_1 + 224 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 65561 | 0, $1_1 + 232 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 65849 | 0, $1_1 + 240 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 65554 | 0, $1_1 + 248 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 70085 | 0, $1_1 + 256 | 0 | 0);
       $362($1_1 + 304 | 0 | 0, 70072 | 0, $1_1 + 264 | 0 | 0);
       i64toi32_i32$2 = ($1_1 + 288 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $197_1 = i64toi32_i32$0;
       i64toi32_i32$0 = ($1_1 + 16 | 0) + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $197_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$1 = HEAP32[($1_1 + 288 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($1_1 + 292 | 0) >> 2] | 0;
       $200_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $1_1;
       HEAP32[($1_1 + 16 | 0) >> 2] = $200_1;
       HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       $4_1 = $345($1_1 + 16 | 0 | 0, $1_1 + 304 | 0 | 0, $1_1 + 1468 | 0 | 0, 0 | 0) | 0;
       break label$4;
      }
      HEAP8[$0_1 >> 0] = 32;
     }
     $0_1 = $0_1 + 1 | 0;
     continue label$5;
    };
   }
   $2_1 = $4_1;
  }
  global$0 = $1_1 + 1472 | 0;
  return $2_1 | 0;
 }
 
 function $357($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    $390();
    if (($321(1616 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
     break label$1
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = 1616;
    $1_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP16[($2_1 + 24 | 0) >> 1] = 0;
    HEAP8[($2_1 + 20 | 0) >> 0] = $3_1;
    HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
    $327($2_1 + 8 | 0 | 0) | 0;
    break label$1;
   }
   $390();
   if (($3_1 | 0) == (-1 | 0)) {
    break label$1
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = 1618;
   label$3 : {
    if (($3_1 | 0) != (5 | 0)) {
     break label$3
    }
    $1_1 = $853() | 0;
    $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    label$4 : {
     if ((((HEAP32[($0_1 + 36 | 0) >> 2] | 0) - $1_1 | 0) + 250 | 0 | 0) < (1 | 0)) {
      break label$4
     }
     HEAP32[($4_1 + 128 | 0) >> 2] = 1;
     break label$1;
    }
    HEAP32[($4_1 + 128 | 0) >> 2] = 0;
   }
   if (($321(1618 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP8[($2_1 + 21 | 0) >> 0] = 0;
   HEAP8[($2_1 + 20 | 0) >> 0] = $3_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
   $327($2_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $2_1 + 64 | 0;
 }
 
 function $358($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $390();
  label$1 : {
   if (($1_1 | 0) == (-1 | 0)) {
    break label$1
   }
   $4_1 = 1617;
   label$2 : {
    switch ($2_1 | 0) {
    case 0:
     $4_1 = 1618;
     break;
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
   label$4 : {
    if (($1_1 | 0) != (5 | 0)) {
     break label$4
    }
    $5_1 = $853() | 0;
    label$5 : {
     if (($2_1 | 0) != (1 | 0)) {
      break label$5
     }
     HEAP32[($0_1 + 36 | 0) >> 2] = $5_1;
     if (!(HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 128 | 0) >> 2] | 0)) {
      break label$4
     }
     break label$1;
    }
    $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    label$6 : {
     if ((((HEAP32[($0_1 + 36 | 0) >> 2] | 0) - $5_1 | 0) + 250 | 0 | 0) < (1 | 0)) {
      break label$6
     }
     HEAP32[($6_1 + 128 | 0) >> 2] = 1;
     break label$1;
    }
    HEAP32[($6_1 + 128 | 0) >> 2] = 0;
   }
   if (($321($4_1 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $4_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP8[($3_1 + 21 | 0) >> 0] = $2_1;
   HEAP8[($3_1 + 20 | 0) >> 0] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
   $327($3_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $3_1 + 64 | 0;
 }
 
 function $359($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $388();
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != (127372 | 0)) {
      break label$3
     }
     if (!($400(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0)) {
      break label$3
     }
     if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$2
     }
     $3_1 = 0;
     label$4 : while (1) {
      label$5 : {
       $4_1 = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + ($3_1 << 5 | 0) | 0;
       if ((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (1 | 0)) {
        break label$5
       }
       if ((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$5
       }
       label$6 : {
        switch ((HEAP32[$4_1 >> 2] | 0) + -1 | 0 | 0) {
        case 1:
         $5_1 = $402(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
         label$9 : {
          $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
          $4_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
          if (($6_1 | 0) <= ($4_1 | 0)) {
           break label$9
          }
          if (($4_1 | 0) > ($5_1 | 0)) {
           break label$5
          }
          if (($6_1 | 0) < ($5_1 | 0)) {
           break label$5
          }
          $0_1 = ((($6_1 - $4_1 | 0 | 0) / (2 | 0) | 0) + $4_1 | 0 | 0) <= ($5_1 | 0);
          break label$1;
         }
         if (($4_1 | 0) < ($5_1 | 0)) {
          break label$5
         }
         if (($6_1 | 0) > ($5_1 | 0)) {
          break label$5
         }
         $0_1 = ((($6_1 - $4_1 | 0 | 0) / (2 | 0) | 0) + $4_1 | 0 | 0) >= ($5_1 | 0);
         break label$1;
        case 0:
         $0_1 = $404(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
         break label$1;
        case 2:
         break label$6;
        default:
         break label$5;
        };
       }
       $0_1 = (($403(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0) != (0 | 0);
       break label$1;
      }
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) < (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
       continue label$4
      }
      break label$2;
     };
    }
    HEAP32[$2_1 >> 2] = 69037;
    $260(73395 | 0, $2_1 | 0) | 0;
   }
   $0_1 = 0;
  }
  $389();
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $360($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $3_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $2_1 = 0, $4_1 = 0, $9_1 = 0, $10_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $388();
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != (127372 | 0)) {
      break label$3
     }
     if (!($400(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0)) {
      break label$3
     }
     $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (($3_1 | 0) < (1 | 0)) {
      break label$2
     }
     $4_1 = 0;
     label$4 : while (1) {
      label$5 : {
       $5_1 = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + ($4_1 << 5 | 0) | 0;
       if ((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) != (2 | 0)) {
        break label$5
       }
       if ((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$5
       }
       $3_1 = 0;
       label$6 : {
        label$7 : {
         label$8 : {
          switch ((HEAP32[$5_1 >> 2] | 0) + -1 | 0 | 0) {
          case 1:
           $6_1 = $402(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
           label$11 : {
            label$12 : {
             $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
             $8_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
             if (($7_1 | 0) <= ($8_1 | 0)) {
              break label$12
             }
             if (($6_1 | 0) < ($8_1 | 0)) {
              break label$6
             }
             if (($7_1 | 0) >= ($6_1 | 0)) {
              break label$11
             }
             break label$6;
            }
            if (($6_1 | 0) > ($8_1 | 0)) {
             break label$6
            }
            if (($7_1 | 0) > ($6_1 | 0)) {
             break label$6
            }
           }
           $3_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
           label$13 : {
            $9_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
            if (($8_1 | 0) != ($9_1 | 0)) {
             break label$13
            }
            if (($7_1 | 0) != ($3_1 | 0)) {
             break label$13
            }
            $3_1 = $6_1;
            break label$6;
           }
           label$14 : {
            $10_1 = Math_fround(Math_fround(Math_fround($6_1 - $8_1 | 0 | 0) / Math_fround($7_1 - $8_1 | 0 | 0)) * Math_fround($3_1 - $9_1 | 0 | 0));
            if (!(Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0))) {
             break label$14
            }
            $3_1 = $9_1 + ~~$10_1 | 0;
            break label$6;
           }
           $3_1 = $9_1 + -2147483648 | 0;
           break label$6;
          case 0:
           $3_1 = $404(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
           if (($3_1 | 0) == (1 | 0)) {
            break label$7
           }
           break label$6;
          case 2:
           break label$8;
          default:
           break label$6;
          };
         }
         if (!(($403(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) & (HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0)) {
          break label$6
         }
        }
        $3_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       }
       label$15 : {
        label$16 : {
         $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
         $5_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
         if (($6_1 | 0) >= ($5_1 | 0)) {
          break label$16
         }
         $5_1 = ($3_1 | 0) >= ($6_1 | 0) & ($3_1 | 0) <= ($5_1 | 0) | 0;
         break label$15;
        }
        $5_1 = ($3_1 | 0) <= ($6_1 | 0) & ($3_1 | 0) >= ($5_1 | 0) | 0;
       }
       label$17 : {
        if (!$3_1) {
         break label$17
        }
        if ($5_1) {
         break label$1
        }
       }
       $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      }
      $4_1 = $4_1 + 1 | 0;
      if (($4_1 | 0) < ($3_1 | 0)) {
       continue label$4
      }
      break label$2;
     };
    }
    HEAP32[$2_1 >> 2] = 69037;
    $260(73395 | 0, $2_1 | 0) | 0;
   }
   $3_1 = 0;
  }
  $389();
  global$0 = $2_1 + 16 | 0;
  return $3_1 << 16 >> 16 | 0;
 }
 
 function $361($0_1) {
  $0_1 = $0_1 | 0;
  $388();
  $0_1 = $356($0_1 | 0) | 0;
  $389();
  return ($0_1 | 0) != (0 | 0) | 0;
 }
 
 function $362($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!(HEAP32[$2_1 >> 2] | 0)) {
    break label$1
   }
   $542($0_1 | 0, $1_1 | 0, 1024 | 0) | 0;
   $542($0_1 | 0, 78231 | 0, 1024 | 0) | 0;
   label$2 : {
    label$3 : {
     switch ((HEAP32[$2_1 >> 2] | 0) + -1 | 0 | 0) {
     case 0:
      HEAP32[$3_1 >> 2] = HEAPU8[($2_1 + 4 | 0) >> 0] | 0;
      $556($3_1 + 48 | 0 | 0, 16 | 0, 71613 | 0, $3_1 | 0) | 0;
      break label$2;
     case 1:
      HEAP32[($3_1 + 16 | 0) >> 2] = HEAPU8[($2_1 + 4 | 0) >> 0] | 0;
      $556($3_1 + 48 | 0 | 0, 16 | 0, 71617 | 0, $3_1 + 16 | 0 | 0) | 0;
      break label$2;
     case 2:
      break label$3;
     default:
      break label$2;
     };
    }
    $2_1 = HEAPU8[($2_1 + 4 | 0) >> 0] | 0;
    HEAP32[($3_1 + 36 | 0) >> 2] = $2_1 & 15 | 0;
    HEAP32[($3_1 + 32 | 0) >> 2] = $2_1 >>> 4 | 0;
    $556($3_1 + 48 | 0 | 0, 16 | 0, 71621 | 0, $3_1 + 32 | 0 | 0) | 0;
   }
   $542($0_1 | 0, $3_1 + 48 | 0 | 0, 1024 | 0) | 0;
   $542($0_1 | 0, 81152 | 0, 1024 | 0) | 0;
  }
  global$0 = $3_1 + 64 | 0;
 }
 
 function $363($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0, $140_1 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  $390();
  $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  $4_1 = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
  label$1 : {
   $3_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$1
   }
   $536($5_1 | 0, 0 | 0, $3_1 << 2 | 0 | 0) | 0;
  }
  $1_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
  $536($2_1 + 64 | 0 | 0, 0 | 0, 20 | 0) | 0;
  $536($2_1 + 32 | 0 | 0, 0 | 0, 20 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!$1_1) {
     break label$3
    }
    $6_1 = 1;
    label$4 : while (1) {
     $5_1 = 0;
     $3_1 = 0;
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          $7_1 = HEAPU8[$1_1 >> 0] | 0;
          switch ($7_1 + -32 | 0 | 0) {
          case 26:
           break label$5;
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
           break label$6;
          case 0:
           break label$8;
          case 12:
           break label$9;
          default:
           break label$7;
          };
         }
         $364($0_1 | 0, $2_1 + 64 | 0 | 0, $2_1 + 32 | 0 | 0);
         $3_1 = 0;
         $536($2_1 + 64 | 0 | 0, 0 | 0, 20 | 0) | 0;
         $536($2_1 + 32 | 0 | 0, 0 | 0, 20 | 0) | 0;
         $5_1 = 1;
         break label$5;
        }
        $5_1 = $6_1;
        $3_1 = $4_1;
        break label$5;
       }
       if (!$7_1) {
        break label$3
       }
      }
      label$10 : {
       if (!$6_1) {
        break label$10
       }
       label$11 : {
        if ($4_1 >>> 0 < 20 >>> 0) {
         break label$11
        }
        HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 64 | 0;
        $260(68747 | 0, $2_1 + 16 | 0 | 0) | 0;
        break label$2;
       }
       HEAP8[(($2_1 + 64 | 0) + $4_1 | 0) >> 0] = $7_1;
       $5_1 = 1;
       $3_1 = $4_1 + 1 | 0;
       break label$5;
      }
      label$12 : {
       if ($4_1 >>> 0 < 20 >>> 0) {
        break label$12
       }
       HEAP32[$2_1 >> 2] = $2_1 + 32 | 0;
       $260(68712 | 0, $2_1 | 0) | 0;
       break label$2;
      }
      HEAP8[(($2_1 + 32 | 0) + $4_1 | 0) >> 0] = $7_1;
      $3_1 = $4_1 + 1 | 0;
     }
     $1_1 = $1_1 + 1 | 0;
     $4_1 = $3_1;
     $6_1 = $5_1;
     continue label$4;
    };
   }
   if (!(HEAPU8[($2_1 + 64 | 0) >> 0] | 0 | ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) & 255 | 0) | 0)) {
    break label$2
   }
   $364($0_1 | 0, $2_1 + 64 | 0 | 0, $2_1 + 32 | 0 | 0);
  }
  label$13 : {
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if (($5_1 | 0) < (1 | 0)) {
    break label$13
   }
   $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $1_1 = 0;
   label$14 : while (1) {
    label$15 : {
     $3_1 = $4_1 + ($1_1 << 5 | 0) | 0;
     if ((HEAP32[$3_1 >> 2] | 0 | 0) != (2 | 0)) {
      break label$15
     }
     if ((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) != (2 | 0)) {
      break label$15
     }
     if (((HEAP32[($3_1 + 20 | 0) >> 2] | 0) & -2 | 0 | 0) != (4 | 0)) {
      break label$15
     }
     $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($6_1 | 0) >= (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0)) {
      break label$15
     }
     $7_1 = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
     $140_1 = $7_1 + Math_imul($6_1, 24) | 0;
     $6_1 = HEAPU16[($3_1 + 8 | 0) >> 1] | 0;
     HEAP16[($140_1 + 4 | 0) >> 1] = $6_1;
     HEAP16[(($7_1 + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 24) | 0) + 2 | 0) >> 1] = $6_1;
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($5_1 | 0)) {
     continue label$14
    }
    break label$14;
   };
  }
  global$0 = $2_1 + 96 | 0;
 }
 
 function $364($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $3_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $390();
  $4_1 = 0;
  $5_1 = 0;
  label$1 : {
   label$2 : {
    $6_1 = HEAPU8[$1_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $1_1 = $1_1 + 1 | 0;
   $5_1 = $6_1;
  }
  $6_1 = $342($1_1 | 0) | 0;
  $7_1 = -1;
  label$3 : {
   if (!(HEAPU8[$1_1 >> 0] | 0)) {
    break label$3
   }
   label$4 : while (1) {
    label$5 : {
     if ($554($1_1 | 0, HEAP32[(($4_1 << 2 | 0) + 87616 | 0) >> 2] | 0 | 0) | 0) {
      break label$5
     }
     $7_1 = $4_1;
     break label$3;
    }
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != (21 | 0)) {
     continue label$4
    }
    break label$4;
   };
   $7_1 = -1;
  }
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      if (($6_1 | 0) == (-1 | 0)) {
       break label$9
      }
      $7_1 = 32767;
      $8_1 = 0;
      $9_1 = 2;
      if (($6_1 & -2 | 0 | 0) == (4 | 0)) {
       break label$7
      }
      label$10 : {
       switch ($5_1 + -43 | 0 | 0) {
       case 0:
        break label$7;
       case 2:
        break label$8;
       default:
        break label$10;
       };
      }
      $8_1 = -32768;
      break label$7;
     }
     label$11 : {
      if (($7_1 | 0) == (-1 | 0)) {
       break label$11
      }
      $9_1 = 1;
      $6_1 = $7_1;
      break label$7;
     }
     HEAP32[$3_1 >> 2] = $1_1;
     $260(68550 | 0, $3_1 | 0) | 0;
     break label$6;
    }
    $7_1 = -32768;
   }
   $1_1 = 0;
   label$12 : {
    label$13 : {
     $4_1 = HEAPU8[$2_1 >> 0] | 0;
     switch ($4_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$13;
     default:
      break label$12;
     };
    }
    $2_1 = $2_1 + 1 | 0;
    $1_1 = $4_1;
   }
   $5_1 = $539($2_1 | 0) | 0;
   label$14 : {
    label$15 : {
     $4_1 = HEAPU8[$2_1 >> 0] | 0;
     if (($4_1 | 0) != (97 | 0)) {
      break label$15
     }
     $10_1 = HEAPU8[(($5_1 + $2_1 | 0) + -1 | 0) >> 0] | 0;
     label$16 : {
      if (!($533(HEAPU8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
       break label$16
      }
      $5_1 = 0;
      $4_1 = 32767;
      $11_1 = $549($2_1 + 1 | 0 | 0) | 0;
      label$17 : {
       label$18 : {
        switch ($1_1 + -43 | 0 | 0) {
        case 2:
         $4_1 = -32768;
         break label$17;
        case 0:
         break label$17;
        default:
         break label$18;
        };
       }
       $5_1 = -32768;
      }
      $2_1 = ($10_1 & 255 | 0 | 0) == (126 | 0);
      $1_1 = $2_1 ? $4_1 : $5_1;
      $2_1 = $2_1 ? $5_1 : $4_1;
      $5_1 = 2;
      break label$14;
     }
     $4_1 = HEAPU8[$2_1 >> 0] | 0;
    }
    label$20 : {
     label$21 : {
      if (($4_1 & 255 | 0 | 0) != (98 | 0)) {
       break label$21
      }
      if ($533(HEAPU8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
       break label$20
      }
      $4_1 = HEAPU8[$2_1 >> 0] | 0;
     }
     label$22 : {
      if (($4_1 & 255 | 0 | 0) != (104 | 0)) {
       break label$22
      }
      if (!($533(HEAPU8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
       break label$22
      }
      if ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0 | 0) != (46 | 0)) {
       break label$22
      }
      if (!($533(HEAPU8[($2_1 + 3 | 0) >> 0] | 0 | 0) | 0)) {
       break label$22
      }
      $5_1 = 3;
      $11_1 = $549($2_1 + 1 | 0 | 0) | 0;
      $1_1 = $549($2_1 + 3 | 0 | 0) | 0;
      break label$14;
     }
     HEAP32[($3_1 + 16 | 0) >> 2] = $2_1;
     $260(68680 | 0, $3_1 + 16 | 0 | 0) | 0;
     break label$6;
    }
    $5_1 = 1;
    $11_1 = $549($2_1 + 1 | 0 | 0) | 0;
   }
   $4_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = $4_1;
   $4_1 = $458(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $4_1 << 5 | 0 | 0) | 0;
   HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
   label$23 : {
    if ($4_1) {
     break label$23
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $262(0 | 0) | 0;
    break label$6;
   }
   $4_1 = $4_1 + ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) << 5 | 0) | 0;
   HEAP32[($4_1 + -4 | 0) >> 2] = $7_1;
   HEAP32[($4_1 + -8 | 0) >> 2] = $8_1;
   HEAP32[($4_1 + -12 | 0) >> 2] = $6_1;
   HEAP32[($4_1 + -16 | 0) >> 2] = $9_1;
   HEAP32[($4_1 + -20 | 0) >> 2] = $2_1;
   HEAP32[($4_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($4_1 + -28 | 0) >> 2] = $11_1;
   HEAP32[($4_1 + -32 | 0) >> 2] = $5_1;
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $365($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $388();
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   if ((HEAP32[$0_1 >> 2] | 0 | 0) != (127372 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + -1 | 0;
   if (($1_1 | 0) > (1 | 0)) {
    break label$1
   }
   $394(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
   $2_1 = 0;
   label$2 : {
    $1_1 = HEAP32[(0 + 127400 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if (($0_1 | 0) != ($1_1 | 0)) {
       break label$4
      }
      $3_1 = $1_1;
      break label$3;
     }
     label$5 : while (1) {
      $3_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$2
      }
      $2_1 = $1_1;
      $1_1 = $3_1;
      if (($0_1 | 0) != ($1_1 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    label$6 : {
     if (!$2_1) {
      break label$6
     }
     HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
     break label$2;
    }
    HEAP32[(0 + 127400 | 0) >> 2] = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
   $459(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
   $459($0_1 | 0);
  }
  $389();
 }
 
 function $366() {
  var $0_1 = 0;
  $388();
  label$1 : {
   $0_1 = HEAP32[(0 + 127400 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    HEAP32[($0_1 + 8 | 0) >> 2] = 1;
    $365($0_1 | 0);
    $0_1 = HEAP32[(0 + 127400 | 0) >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $389();
 }
 
 function $367() {
  var $0_1 = 0;
  $390();
  label$1 : {
   label$2 : while (1) {
    $0_1 = HEAP32[(0 + 127352 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$1
    }
    HEAP32[(0 + 127352 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    $459(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
    $459(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0);
    $459($0_1 | 0);
    continue label$2;
   };
  }
  $332(41 | 0, 0 | 0);
  $385(75604 | 0, 39 | 0, 0 | 0);
  $385(74978 | 0, 40 | 0, 0 | 0);
  label$3 : {
   $0_1 = HEAP32[(0 + 127384 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$3
   }
   $459($0_1 | 0);
   $536(127376 | 0, 0 | 0, 12 | 0) | 0;
  }
  label$4 : {
   $0_1 = HEAP32[(0 + 127396 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$4
   }
   $459($0_1 | 0);
   $536(127388 | 0, 0 | 0, 12 | 0) | 0;
  }
 }
 
 function $368($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  $390();
  label$1 : {
   $2_1 = HEAP32[(0 + 127400 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
      break label$3
     }
     $390();
     HEAP32[($1_1 + 8 | 0) >> 2] = 1618;
     $0_1 = $853() | 0;
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     label$4 : {
      if ((((HEAP32[($2_1 + 36 | 0) >> 2] | 0) - $0_1 | 0) + 250 | 0 | 0) < (1 | 0)) {
       break label$4
      }
      HEAP32[($3_1 + 128 | 0) >> 2] = 1;
      break label$1;
     }
     HEAP32[($3_1 + 128 | 0) >> 2] = 0;
     if (($321(1618 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
      break label$1
     }
     $2_1 = HEAP32[((HEAP32[($2_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     HEAP16[($1_1 + 20 | 0) >> 1] = 5;
     HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
     $327($1_1 + 8 | 0 | 0) | 0;
     break label$1;
    }
    $2_1 = HEAP32[($2_1 + 40 | 0) >> 2] | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $1_1 + 64 | 0;
 }
 
 function $369() {
  $459(HEAP32[(0 + 127420 | 0) >> 2] | 0 | 0);
  HEAP32[(0 + 127420 | 0) >> 2] = 0;
 }
 
 function $370($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $9_1 = Math_fround(0), $3_1 = 0, $7_1 = 0, $8_1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $2_1 = 0;
    label$3 : {
     label$4 : {
      $3_1 = HEAP32[(0 + 127416 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$4
      }
      label$5 : {
       if (($3_1 | 0) > (0 | 0)) {
        break label$5
       }
       return -1 | 0;
      }
      break label$3;
     }
     return $260(73719 | 0, 0 | 0) | 0 | 0;
    }
    label$6 : while (1) {
     label$7 : {
      label$8 : {
       $0_1 = (HEAP32[(0 + 127420 | 0) >> 2] | 0) + Math_imul($2_1, 8232) | 0;
       $4_1 = HEAP32[($0_1 + 8220 | 0) >> 2] | 0;
       $5_1 = Math_imul($4_1, 516);
       $3_1 = $458(HEAP32[($0_1 + 8224 | 0) >> 2] | 0 | 0, $5_1 + 516 | 0 | 0) | 0;
       if ($3_1) {
        break label$8
       }
       $4_1 = $262(0 | 0) | 0;
       break label$7;
      }
      HEAP32[($0_1 + 8224 | 0) >> 2] = $3_1;
      $6_1 = $3_1 + $5_1 | 0;
      $535($6_1 | 0, $1_1 | 0, 512 | 0) | 0;
      $7_1 = 5381;
      $5_1 = 0;
      label$9 : while (1) {
       label$10 : {
        label$11 : {
         $3_1 = $6_1 + ($5_1 << 3 | 0) | 0;
         $9_1 = Math_fround(HEAPF32[$3_1 >> 2]);
         if (!($9_1 < Math_fround(4294967296.0) & $9_1 >= Math_fround(0.0) | 0)) {
          break label$11
         }
         $8_1 = ~~$9_1 >>> 0;
         break label$10;
        }
        $8_1 = 0;
       }
       $7_1 = Math_imul(Math_imul($7_1, 33) + $8_1 | 0, 33);
       label$12 : {
        label$13 : {
         $9_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
         if (!($9_1 < Math_fround(4294967296.0) & $9_1 >= Math_fround(0.0) | 0)) {
          break label$13
         }
         $8_1 = ~~$9_1 >>> 0;
         break label$12;
        }
        $8_1 = 0;
       }
       $7_1 = Math_imul($7_1 + $8_1 | 0, 33);
       label$14 : {
        label$15 : {
         $9_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
         if (!($9_1 < Math_fround(4294967296.0) & $9_1 >= Math_fround(0.0) | 0)) {
          break label$15
         }
         $8_1 = ~~$9_1 >>> 0;
         break label$14;
        }
        $8_1 = 0;
       }
       $7_1 = Math_imul($7_1 + $8_1 | 0, 33);
       label$16 : {
        label$17 : {
         $9_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
         if (!($9_1 < Math_fround(4294967296.0) & $9_1 >= Math_fround(0.0) | 0)) {
          break label$17
         }
         $3_1 = ~~$9_1 >>> 0;
         break label$16;
        }
        $3_1 = 0;
       }
       $7_1 = $7_1 + $3_1 | 0;
       $5_1 = $5_1 + 2 | 0;
       if (($5_1 | 0) != (64 | 0)) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[($6_1 + 512 | 0) >> 2] = $7_1;
      HEAP32[($0_1 + 8220 | 0) >> 2] = (HEAP32[($0_1 + 8220 | 0) >> 2] | 0) + 1 | 0;
     }
     label$18 : {
      if (($4_1 | 0) < (0 | 0)) {
       break label$18
      }
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) >= (HEAP32[(0 + 127416 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      continue label$6;
     }
     break label$6;
    };
    return -1 | 0;
   }
   label$19 : {
    $4_1 = HEAP32[($0_1 + 8220 | 0) >> 2] | 0;
    $5_1 = Math_imul($4_1, 516);
    $3_1 = $458(HEAP32[($0_1 + 8224 | 0) >> 2] | 0 | 0, $5_1 + 516 | 0 | 0) | 0;
    if ($3_1) {
     break label$19
    }
    return $262(0 | 0) | 0 | 0;
   }
   HEAP32[($0_1 + 8224 | 0) >> 2] = $3_1;
   $6_1 = $3_1 + $5_1 | 0;
   $535($6_1 | 0, $1_1 | 0, 512 | 0) | 0;
   $7_1 = 5381;
   $5_1 = 0;
   label$20 : while (1) {
    label$21 : {
     label$22 : {
      $3_1 = $6_1 + ($5_1 << 3 | 0) | 0;
      $9_1 = Math_fround(HEAPF32[$3_1 >> 2]);
      if (!($9_1 < Math_fround(4294967296.0) & $9_1 >= Math_fround(0.0) | 0)) {
       break label$22
      }
      $8_1 = ~~$9_1 >>> 0;
      break label$21;
     }
     $8_1 = 0;
    }
    $7_1 = Math_imul(Math_imul($7_1, 33) + $8_1 | 0, 33);
    label$23 : {
     label$24 : {
      $9_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
      if (!($9_1 < Math_fround(4294967296.0) & $9_1 >= Math_fround(0.0) | 0)) {
       break label$24
      }
      $8_1 = ~~$9_1 >>> 0;
      break label$23;
     }
     $8_1 = 0;
    }
    $7_1 = Math_imul($7_1 + $8_1 | 0, 33);
    label$25 : {
     label$26 : {
      $9_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
      if (!($9_1 < Math_fround(4294967296.0) & $9_1 >= Math_fround(0.0) | 0)) {
       break label$26
      }
      $8_1 = ~~$9_1 >>> 0;
      break label$25;
     }
     $8_1 = 0;
    }
    $7_1 = Math_imul($7_1 + $8_1 | 0, 33);
    label$27 : {
     label$28 : {
      $9_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
      if (!($9_1 < Math_fround(4294967296.0) & $9_1 >= Math_fround(0.0) | 0)) {
       break label$28
      }
      $3_1 = ~~$9_1 >>> 0;
      break label$27;
     }
     $3_1 = 0;
    }
    $7_1 = $7_1 + $3_1 | 0;
    $5_1 = $5_1 + 2 | 0;
    if (($5_1 | 0) != (64 | 0)) {
     continue label$20
    }
    break label$20;
   };
   HEAP32[($6_1 + 512 | 0) >> 2] = $7_1;
   HEAP32[($0_1 + 8220 | 0) >> 2] = (HEAP32[($0_1 + 8220 | 0) >> 2] | 0) + 1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $371($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   $1_1 = $458(HEAP32[(0 + 127420 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[(0 + 127416 | 0) >> 2] | 0, 8232) + 8232 | 0 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   return $262(0 | 0) | 0 | 0;
  }
  HEAP32[(0 + 127420 | 0) >> 2] = $1_1;
  $536($1_1 + Math_imul(HEAP32[(0 + 127416 | 0) >> 2] | 0, 8232) | 0 | 0, 0 | 0, 8232 | 0) | 0;
  $1_1 = HEAP32[(0 + 127416 | 0) >> 2] | 0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$1 = (HEAP32[(0 + 127420 | 0) >> 2] | 0) + Math_imul($1_1, 8232) | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $0_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(0 + 127416 | 0) >> 2] = $1_1 + 1 | 0;
  return 0 | 0;
 }
 
 function $372($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $13$hi = 0;
  $1_1 = 0;
  label$1 : {
   $2_1 = HEAP32[(0 + 127416 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $1_1 = 0;
   $3_1 = HEAP32[(0 + 127420 | 0) >> 2] | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $3_1 + Math_imul($1_1, 8232) | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $13$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $13$hi;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    if ((i64toi32_i32$2 | 0) == ($0_1 | 0) & (i64toi32_i32$1 | 0) == ($0$hi | 0) | 0) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   return -1 | 0;
  }
  label$3 : {
   if (($1_1 | 0) != ($2_1 | 0)) {
    break label$3
   }
   return -1 | 0;
  }
  $2_1 = 0;
  $3_1 = Math_imul($1_1, 8232);
  $459(HEAP32[(((HEAP32[(0 + 127420 | 0) >> 2] | 0) + $3_1 | 0) + 8224 | 0) >> 2] | 0 | 0);
  $536((HEAP32[(0 + 127420 | 0) >> 2] | 0) + $3_1 | 0 | 0, 0 | 0, 8232 | 0) | 0;
  $4_1 = (HEAP32[(0 + 127416 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[(0 + 127416 | 0) >> 2] = $4_1;
  label$4 : {
   if (($1_1 | 0) == ($4_1 | 0)) {
    break label$4
   }
   $2_1 = 0;
   $1_1 = HEAP32[(0 + 127420 | 0) >> 2] | 0;
   $535($1_1 + $3_1 | 0 | 0, $1_1 + Math_imul($4_1, 8232) | 0 | 0, 8232 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $373($0_1) {
  $0_1 = $0_1 | 0;
  var $6_1 = 0, $3_1 = 0, $17_1 = Math_fround(0), $1_1 = 0, $16_1 = Math_fround(0), $18_1 = Math_fround(0), i64toi32_i32$2 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $14_1 = Math_fround(0), $5_1 = 0, $15_1 = Math_fround(0), $20_1 = 0.0, i64toi32_i32$3 = 0, $19_1 = Math_fround(0), $2_1 = 0, i64toi32_i32$1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $9$hi = 0, $13_1 = Math_fround(0), $21_1 = 0.0, $9_1 = 0, $7_1 = 0, $41$hi = 0, $8_1 = 0, $271_1 = Math_fround(0), $388_1 = 0, $10_1 = 0, $10$hi = 0;
  $1_1 = global$0 - 576 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (($2_1 + -1792 | 0) >>> 0 > 2 >>> 0) {
    break label$1
   }
   $3_1 = 0;
   $4_1 = HEAP32[(0 + 127416 | 0) >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   $9_1 = i64toi32_i32$0;
   $9$hi = i64toi32_i32$1;
   $5_1 = HEAP32[(0 + 127420 | 0) >> 2] | 0;
   label$2 : {
    label$3 : while (1) {
     $6_1 = $5_1 + Math_imul($3_1, 8232) | 0;
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$1 = HEAP32[$6_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     $41$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $41$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$3 = $9_1;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
      break label$2
     }
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$1
     }
     continue label$3;
    };
   }
   $11_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       switch ($2_1 + -1792 | 0 | 0) {
       case 1:
        HEAP16[($6_1 + 8216 | 0) >> 1] = (HEAPU16[($6_1 + 8216 | 0) >> 1] | 0) + -1 | 0;
        label$10 : {
         if (!(HEAP32[($6_1 + 8228 | 0) >> 2] | 0)) {
          break label$10
         }
         HEAP32[($6_1 + 8228 | 0) >> 2] = 0;
         $374($6_1 + 16 | 0 | 0, $1_1 + 64 | 0 | 0, 1 | 0);
         if (!(HEAPU8[(0 + 127412 | 0) >> 0] | 0)) {
          break label$6
         }
         $7_1 = $370(0 | 0, $1_1 + 64 | 0 | 0) | 0;
         $0_1 = HEAP32[(0 + 127416 | 0) >> 2] | 0;
         if (($0_1 | 0) < (1 | 0)) {
          break label$5
         }
         $2_1 = $0_1 & 7 | 0;
         $5_1 = 0;
         $4_1 = HEAP32[(0 + 127420 | 0) >> 2] | 0;
         $3_1 = 0;
         label$11 : {
          if ($0_1 >>> 0 < 8 >>> 0) {
           break label$11
          }
          $8_1 = $0_1 & 2147483640 | 0;
          $3_1 = 0;
          $0_1 = 0;
          label$12 : while (1) {
           HEAP32[(($4_1 + Math_imul($3_1, 8232) | 0) + 8228 | 0) >> 2] = 0;
           HEAP32[(($4_1 + Math_imul($3_1 | 1 | 0, 8232) | 0) + 8228 | 0) >> 2] = 0;
           HEAP32[(($4_1 + Math_imul($3_1 | 2 | 0, 8232) | 0) + 8228 | 0) >> 2] = 0;
           HEAP32[(($4_1 + Math_imul($3_1 | 3 | 0, 8232) | 0) + 8228 | 0) >> 2] = 0;
           HEAP32[(($4_1 + Math_imul($3_1 | 4 | 0, 8232) | 0) + 8228 | 0) >> 2] = 0;
           HEAP32[(($4_1 + Math_imul($3_1 | 5 | 0, 8232) | 0) + 8228 | 0) >> 2] = 0;
           HEAP32[(($4_1 + Math_imul($3_1 | 6 | 0, 8232) | 0) + 8228 | 0) >> 2] = 0;
           HEAP32[(($4_1 + Math_imul($3_1 | 7 | 0, 8232) | 0) + 8228 | 0) >> 2] = 0;
           $3_1 = $3_1 + 8 | 0;
           $0_1 = $0_1 + 8 | 0;
           if (($0_1 | 0) != ($8_1 | 0)) {
            continue label$12
           }
           break label$12;
          };
         }
         if (!$2_1) {
          break label$5
         }
         label$13 : while (1) {
          HEAP32[(($4_1 + Math_imul($3_1, 8232) | 0) + 8228 | 0) >> 2] = 0;
          $3_1 = $3_1 + 1 | 0;
          $5_1 = $5_1 + 1 | 0;
          if (($5_1 | 0) != ($2_1 | 0)) {
           continue label$13
          }
          break label$5;
         };
        }
        $4_1 = 0;
        $536($1_1 + 64 | 0 | 0, 0 | 0, 512 | 0) | 0;
        $374($6_1 + 16 | 0 | 0, $1_1 + 64 | 0 | 0, 0 | 0);
        if ((HEAP32[($6_1 + 8220 | 0) >> 2] | 0 | 0) <= (0 | 0)) {
         break label$4
        }
        $13_1 = Math_fround(1.0e4);
        $5_1 = -1;
        label$14 : while (1) {
         $14_1 = Math_fround(.185407355427742);
         $15_1 = Math_fround(-.185407355427742);
         $3_1 = (HEAP32[($6_1 + 8224 | 0) >> 2] | 0) + Math_imul($4_1, 516) | 0;
         $16_1 = Math_fround($375($1_1 + 64 | 0 | 0, $3_1 | 0, Math_fround(Math_fround(-.185407355427742))));
         $17_1 = Math_fround($375($1_1 + 64 | 0 | 0, $3_1 | 0, Math_fround(Math_fround(.185407355427742))));
         label$15 : {
          label$16 : {
           if (+$527(+(-1.5707963267948966)) > .03490658503988659) {
            break label$16
           }
           $18_1 = $16_1;
           break label$15;
          }
          $20_1 = .7853981633974483;
          $21_1 = -.7853981633974483;
          label$17 : while (1) {
           label$18 : {
            label$19 : {
             if (!($16_1 < $17_1)) {
              break label$19
             }
             $20_1 = +$14_1;
             $19_1 = Math_fround($21_1 * .618033989 + $20_1 * .38196601100000005);
             $18_1 = Math_fround($375($1_1 + 64 | 0 | 0, $3_1 | 0, Math_fround($19_1)));
             $14_1 = $15_1;
             $17_1 = $16_1;
             break label$18;
            }
            $19_1 = $14_1;
            $18_1 = $17_1;
            $21_1 = +$15_1;
            $17_1 = Math_fround($21_1 * .38196601100000005 + $20_1 * .618033989);
            $14_1 = $17_1;
            $17_1 = Math_fround($375($1_1 + 64 | 0 | 0, $3_1 | 0, Math_fround($17_1)));
           }
           $16_1 = $18_1;
           $15_1 = $19_1;
           if (+$527(+($21_1 - $20_1)) > .03490658503988659) {
            continue label$17
           }
           break label$17;
          };
         }
         $17_1 = $18_1 < $17_1 ? $18_1 : $17_1;
         $3_1 = $17_1 < $13_1;
         $13_1 = $3_1 ? $17_1 : $13_1;
         $5_1 = $3_1 ? $4_1 : $5_1;
         $4_1 = $4_1 + 1 | 0;
         if (($4_1 | 0) < (HEAP32[($6_1 + 8220 | 0) >> 2] | 0 | 0)) {
          continue label$14
         }
         break label$14;
        };
        if (($5_1 | 0) < (0 | 0)) {
         break label$4
        }
        i64toi32_i32$3 = (HEAP32[($6_1 + 8224 | 0) >> 2] | 0) + Math_imul($5_1, 516) | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 512 | 0) >> 2] | 0;
        i64toi32_i32$0 = 0;
        $376($6_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 | 0, Math_fround($13_1));
        break label$4;
       case 2:
        $17_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
        $16_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
        label$20 : {
         $3_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
         if (($3_1 | 0) > (1023 | 0)) {
          break label$20
         }
         $3_1 = $6_1 + ($3_1 << 3 | 0) | 0;
         $18_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
         HEAPF32[($3_1 + 24 | 0) >> 2] = $18_1;
         $14_1 = Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]);
         HEAPF32[($3_1 + 28 | 0) >> 2] = $14_1;
         $18_1 = Math_fround($18_1 - Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]));
         $271_1 = Math_fround($18_1 * $18_1);
         $18_1 = Math_fround($14_1 - Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]));
         $20_1 = +$530(+(+Math_fround($271_1 + Math_fround($18_1 * $18_1))));
         HEAPF32[($6_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]) + Math_fround($20_1));
         HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 1 | 0;
        }
        $14_1 = Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]);
        $3_1 = HEAPU16[($6_1 + 8216 | 0) >> 1] | 0;
        $18_1 = Math_fround($3_1 >>> 0);
        HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround($14_1 + Math_fround($17_1 / $18_1));
        $15_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
        HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround($15_1 + Math_fround($16_1 / $18_1));
        if ($3_1 >>> 0 < 2 >>> 0) {
         break label$1
        }
        $16_1 = Math_fround(Math_fround($12_1 - $16_1) - $15_1);
        $18_1 = Math_fround(Math_fround($11_1 - $17_1) - $14_1);
        $20_1 = +$530(+(+Math_fround(Math_fround($16_1 * $16_1) + Math_fround($18_1 * $18_1))));
        $17_1 = Math_fround($11_1 - Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]));
        $14_1 = Math_fround($20_1);
        $19_1 = Math_fround($16_1 / $14_1);
        $16_1 = Math_fround($12_1 - Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]));
        $15_1 = Math_fround(+$530(+(+Math_fround(Math_fround($16_1 * $16_1) + Math_fround($17_1 * $17_1)))));
        $17_1 = Math_fround($17_1 / $15_1);
        $18_1 = Math_fround($18_1 / $14_1);
        $16_1 = Math_fround($16_1 / $15_1);
        $20_1 = +$524(+(+Math_fround(Math_fround($19_1 * $17_1) - Math_fround($18_1 * $16_1))), +(+Math_fround(Math_fround($19_1 * $16_1) + Math_fround($18_1 * $17_1))));
        if (($321(2050 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
         break label$1
        }
        HEAP32[($1_1 + 64 | 0) >> 2] = 2050;
        i64toi32_i32$3 = $6_1;
        i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
        $388_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $1_1;
        HEAP32[($1_1 + 72 | 0) >> 2] = $388_1;
        HEAP32[($1_1 + 76 | 0) >> 2] = i64toi32_i32$2;
        HEAPF32[($1_1 + 88 | 0) >> 2] = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
        $17_1 = Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]);
        $3_1 = $14_1 == Math_fround(0.0);
        HEAPF32[($1_1 + 84 | 0) >> 2] = $3_1 ? Math_fround(0.0) : Math_fround($15_1 - $14_1);
        HEAPF32[($1_1 + 80 | 0) >> 2] = $3_1 ? Math_fround(0.0) : Math_fround($20_1);
        HEAPF32[($1_1 + 92 | 0) >> 2] = $17_1;
        HEAP16[($1_1 + 96 | 0) >> 1] = HEAPU16[($6_1 + 8216 | 0) >> 1] | 0;
        $327($1_1 + 64 | 0 | 0) | 0;
        break label$1;
       case 0:
        break label$7;
       default:
        break label$1;
       };
      }
      HEAPF32[($6_1 + 28 | 0) >> 2] = $11_1;
      HEAPF32[($6_1 + 24 | 0) >> 2] = $12_1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = 1;
      HEAP32[($6_1 + 16 | 0) >> 2] = 0;
      HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$2;
      $3_1 = (HEAPU16[($6_1 + 8216 | 0) >> 1] | 0) + 1 | 0;
      HEAP16[($6_1 + 8216 | 0) >> 1] = $3_1;
      $3_1 = $3_1 & 65535 | 0;
      $17_1 = Math_fround($3_1 + -1 | 0 | 0);
      $16_1 = Math_fround($3_1 >>> 0);
      HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]) * $17_1) + $12_1) / $16_1);
      HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) * $17_1) + $11_1) / $16_1);
      break label$1;
     }
     $7_1 = $370($6_1 | 0, $1_1 + 64 | 0 | 0) | 0;
    }
    label$21 : {
     if (($7_1 | 0) < (0 | 0)) {
      break label$21
     }
     i64toi32_i32$3 = (HEAP32[($6_1 + 8224 | 0) >> 2] | 0) + Math_imul($7_1, 516) | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 512 | 0) >> 2] | 0;
     i64toi32_i32$0 = 0;
     $9_1 = i64toi32_i32$2;
     $9$hi = i64toi32_i32$0;
     if (($321(2049 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
      break label$4
     }
     HEAP32[($1_1 + 8 | 0) >> 2] = 2049;
     i64toi32_i32$3 = $6_1;
     i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$0 = $1_1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $9_1;
     HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$0 = $1_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $10_1;
     HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$2;
     $327($1_1 + 8 | 0 | 0) | 0;
     break label$4;
    }
    i64toi32_i32$2 = -1;
    $377($6_1 | 0, -1 | 0, i64toi32_i32$2 | 0);
   }
   $3_1 = HEAPU16[($6_1 + 8216 | 0) >> 1] | 0;
   if (!$3_1) {
    break label$1
   }
   $17_1 = Math_fround(($3_1 + 1 | 0) >>> 0);
   $16_1 = Math_fround($3_1 >>> 0);
   HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]) * $17_1) - $12_1) / $16_1);
   HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) * $17_1) - $11_1) / $16_1);
  }
  global$0 = $1_1 + 576 | 0;
 }
 
 function $374($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $10_1 = Math_fround(0), $5_1 = 0, $11_1 = Math_fround(0), $15_1 = Math_fround(0), $14_1 = Math_fround(0), $16_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $7_1 = 0, $3_1 = 0, $6_1 = 0, $9_1 = 0, $18_1 = 0.0, $17_1 = Math_fround(0), i64toi32_i32$2 = 0, $21_1 = 0.0, $22_1 = 0.0, $51_1 = Math_fround(0), $8_1 = 0, $93_1 = Math_fround(0), i64toi32_i32$1 = 0, $19_1 = 0.0, $20_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $10_1 = Math_fround(HEAPF32[$0_1 >> 2]);
      if (!($10_1 <= Math_fround(0.0))) {
       break label$4
      }
      label$5 : {
       if (($4_1 | 0) >= (2 | 0)) {
        break label$5
       }
       $5_1 = 0;
       break label$3;
      }
      $6_1 = $0_1 + 8 | 0;
      $5_1 = 1;
      label$6 : while (1) {
       $4_1 = $6_1 + ($5_1 << 3 | 0) | 0;
       $7_1 = $4_1 + -8 | 0;
       $11_1 = Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) - Math_fround(HEAPF32[$7_1 >> 2]));
       $51_1 = Math_fround($11_1 * $11_1);
       $11_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]));
       $10_1 = Math_fround($10_1 + Math_fround(+$530(+(+Math_fround($51_1 + Math_fround($11_1 * $11_1))))));
       $5_1 = $5_1 + 1 | 0;
       $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) < ($4_1 | 0)) {
        continue label$6
       }
       break label$6;
      };
     }
     label$7 : {
      if (($4_1 | 0) >= (2 | 0)) {
       break label$7
      }
      $5_1 = 0;
      break label$3;
     }
     $8_1 = $0_1 + 8 | 0;
     $12_1 = Math_fround(0.0);
     $5_1 = 0;
     $9_1 = 1;
     $11_1 = Math_fround($10_1 / Math_fround(63.0));
     $10_1 = $11_1;
     $13_1 = Math_fround(0.0);
     label$8 : while (1) {
      label$9 : {
       $4_1 = $8_1 + ($9_1 << 3 | 0) | 0;
       $7_1 = $4_1 + -8 | 0;
       $14_1 = Math_fround(Math_fround(HEAPF32[$7_1 >> 2]) - Math_fround(HEAPF32[$4_1 >> 2]));
       $93_1 = Math_fround($14_1 * $14_1);
       $14_1 = Math_fround(Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
       $14_1 = Math_fround(+$530(+(+Math_fround($93_1 + Math_fround($14_1 * $14_1)))));
       $15_1 = Math_fround($10_1 + $14_1);
       if (!($15_1 > $11_1)) {
        break label$9
       }
       label$10 : while (1) {
        $6_1 = $1_1 + ($5_1 << 3 | 0) | 0;
        $15_1 = Math_fround(Math_fround($11_1 - $10_1) / $14_1);
        $16_1 = Math_fround(HEAPF32[$7_1 >> 2]);
        $16_1 = Math_fround(Math_fround($15_1 * Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) - $16_1)) + $16_1);
        HEAPF32[$6_1 >> 2] = $16_1;
        $17_1 = Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]);
        $15_1 = Math_fround(Math_fround($15_1 * Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) - $17_1)) + $17_1);
        HEAPF32[($6_1 + 4 | 0) >> 2] = $15_1;
        $13_1 = Math_fround($13_1 + $16_1);
        $12_1 = Math_fround($12_1 + $15_1);
        $5_1 = $5_1 + 1 | 0;
        $10_1 = Math_fround($10_1 - $11_1);
        $15_1 = Math_fround($10_1 + $14_1);
        if ($15_1 > $11_1) {
         continue label$10
        }
        break label$10;
       };
      }
      $10_1 = $15_1;
      $9_1 = $9_1 + 1 | 0;
      $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($9_1 | 0) < ($4_1 | 0)) {
       continue label$8
      }
      break label$8;
     };
     if (($5_1 | 0) > (62 | 0)) {
      break label$2
     }
    }
    if (!$2_1) {
     break label$1
    }
    HEAP32[$3_1 >> 2] = $5_1;
    $260(71628 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$2 = ($4_1 << 3 | 0) + $0_1 | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   HEAP32[($1_1 + 504 | 0) >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
   HEAP32[($1_1 + 508 | 0) >> 2] = i64toi32_i32$1;
   $15_1 = Math_fround($12_1 * Math_fround(.015625));
   $16_1 = Math_fround($13_1 * Math_fround(.015625));
   $18_1 = +Math_fround(+$524(+(+Math_fround($15_1 - Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]))), +(+Math_fround($16_1 - Math_fround(HEAPF32[$1_1 >> 2])))));
   $19_1 = +$15_1;
   $20_1 = +$16_1;
   $4_1 = 0;
   $11_1 = $16_1;
   $14_1 = $11_1;
   $12_1 = $15_1;
   $13_1 = $15_1;
   label$11 : while (1) {
    $5_1 = $1_1 + ($4_1 << 3 | 0) | 0;
    $10_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
    $21_1 = +Math_fround(Math_fround(HEAPF32[$5_1 >> 2]) - $16_1);
    $22_1 = +Math_fround($10_1 - $15_1);
    HEAPF32[$5_1 >> 2] = Math_fround($21_1 * +$526(+$18_1) - +$529(+$18_1) * $22_1 + $20_1);
    $10_1 = Math_fround($21_1 * +$529(+$18_1) + +$526(+$18_1) * $22_1 + $19_1);
    HEAPF32[($5_1 + 4 | 0) >> 2] = $10_1;
    $12_1 = $12_1 < $10_1 ? $10_1 : $12_1;
    $13_1 = $13_1 > $10_1 ? $10_1 : $13_1;
    $10_1 = Math_fround(HEAPF32[$5_1 >> 2]);
    $14_1 = $10_1 > $14_1 ? $10_1 : $14_1;
    $11_1 = $10_1 < $11_1 ? $10_1 : $11_1;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != (64 | 0)) {
     continue label$11
    }
    break label$11;
   };
   $10_1 = Math_fround($12_1 - $13_1);
   $11_1 = Math_fround($14_1 - $11_1);
   $4_1 = 0;
   label$12 : while (1) {
    $5_1 = $1_1 + ($4_1 << 3 | 0) | 0;
    HEAPF32[$5_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$5_1 >> 2]) - $16_1) * Math_fround(256.0)) / $11_1);
    HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]) - $15_1) * Math_fround(256.0)) / $10_1);
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != (64 | 0)) {
     continue label$12
    }
    break label$12;
   };
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $375($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $10_1 = 0, $11_1 = Math_fround(0), $3_1 = 0.0, $8_1 = 0, $9_1 = 0, $4_1 = 0.0, $12_1 = Math_fround(0), $5_1 = 0.0, $13_1 = Math_fround(0), $6_1 = 0.0, $14_1 = Math_fround(0), $7_1 = 0.0, $57_1 = Math_fround(0);
  $3_1 = +$2_1;
  $2_1 = Math_fround(0.0);
  $8_1 = 0;
  label$1 : while (1) {
   $9_1 = $8_1 << 3 | 0;
   $10_1 = $0_1 + $9_1 | 0;
   $11_1 = Math_fround(HEAPF32[$10_1 >> 2]);
   $4_1 = +$526(+$3_1);
   $12_1 = Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]);
   $5_1 = +$529(+$3_1);
   $13_1 = Math_fround(HEAPF32[$10_1 >> 2]);
   $6_1 = +$529(+$3_1);
   $14_1 = Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]);
   $7_1 = +$526(+$3_1);
   $10_1 = $1_1 + $9_1 | 0;
   $11_1 = Math_fround(Math_fround($4_1 * +$11_1 - $5_1 * +$12_1) - Math_fround(HEAPF32[$10_1 >> 2]));
   $57_1 = Math_fround($11_1 * $11_1);
   $11_1 = Math_fround(Math_fround($6_1 * +$13_1 + $7_1 * +$14_1) - Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]));
   $2_1 = Math_fround($2_1 + Math_fround(+$530(+(+Math_fround($57_1 + Math_fround($11_1 * $11_1))))));
   $8_1 = $8_1 + 1 | 0;
   if (($8_1 | 0) != (64 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return Math_fround(Math_fround($2_1 * Math_fround(.015625)));
 }
 
 function $376($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = Math_fround($2_1);
  var $3_1 = 0, i64toi32_i32$1 = 0, $4_1 = Math_fround(0);
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($321(2048 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = 2048;
   i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
   HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$1;
   HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
   $4_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
   HEAPF32[($3_1 + 36 | 0) >> 2] = $2_1;
   i64toi32_i32$1 = $1$hi;
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = i64toi32_i32$1;
   HEAPF32[($3_1 + 44 | 0) >> 2] = $4_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = (HEAPU16[($0_1 + 8216 | 0) >> 1] | 0) + 1 | 0;
   $327($3_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $3_1 + 64 | 0;
 }
 
 function $377($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $3$hi = 0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  label$1 : {
   if (($321(2049 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = 2049;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 28 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$1;
   $327($2_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $2_1 + 64 | 0;
 }
 
 function $378($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    break label$1
   }
   $1_1 = $1036($0_1 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $379($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $4_1 = $378($0_1 | 0) | 0;
   label$2 : {
    if ($2_1 >>> 0 > 1 >>> 0) {
     break label$2
    }
    if ($4_1) {
     break label$1
    }
   }
   $3_1 = 0;
   label$3 : {
    label$4 : {
     $4_1 = HEAP32[(0 + 127424 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$4
     }
     label$5 : while (1) {
      label$6 : {
       if ($552($0_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0) {
        break label$6
       }
       $3_1 = 0;
       if ($2_1 >>> 0 < (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0) {
        break label$1
       }
       label$7 : {
        $3_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$7
        }
        label$8 : {
         if (!$1_1) {
          break label$8
         }
         if (!$3_1) {
          break label$8
         }
         if (!($552($3_1 | 0, $1_1 | 0) | 0)) {
          break label$7
         }
        }
        label$9 : {
         $3_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
         if (!$3_1) {
          break label$9
         }
         label$10 : while (1) {
          $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
          FUNCTION_TABLE[HEAP32[$3_1 >> 2] | 0 | 0](HEAP32[($3_1 + 4 | 0) >> 2] | 0, $0_1, HEAP32[($4_1 + 4 | 0) >> 2] | 0, $1_1);
          $3_1 = $5_1;
          if ($3_1) {
           continue label$10
          }
          break label$10;
         };
        }
        $459(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
        label$11 : {
         label$12 : {
          if ($1_1) {
           break label$12
          }
          $0_1 = 0;
          break label$11;
         }
         $0_1 = $543($1_1 | 0) | 0;
        }
        HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
       }
       HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
       break label$3;
      }
      $4_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      if ($4_1) {
       continue label$5
      }
      break label$5;
     };
    }
    $4_1 = $456(20 | 0) | 0;
    if (!$4_1) {
     break label$1
    }
    HEAP32[$4_1 >> 2] = $543($0_1 | 0) | 0;
    $0_1 = 0;
    label$13 : {
     if (!$1_1) {
      break label$13
     }
     $0_1 = $543($1_1 | 0) | 0;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(0 + 127424 | 0) >> 2] | 0;
    HEAP32[(0 + 127424 | 0) >> 2] = $4_1;
   }
   $3_1 = 1;
  }
  return $3_1 | 0;
 }
 
 function $380($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $379($0_1 | 0, $1_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $381($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $378($0_1 | 0) | 0;
  label$1 : {
   $2_1 = HEAP32[(0 + 127424 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ($552($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != (2 | 0)) {
       break label$1
      }
     }
     return HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0;
    }
    $2_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $382($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $2_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    if (($2_1 | 0) == (48 | 0)) {
     break label$2
    }
    $1_1 = 1;
    if ($554($0_1 | 0, 72606 | 0) | 0) {
     break label$1
    }
   }
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $383($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = $378($0_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[(0 + 127424 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     label$4 : while (1) {
      label$5 : {
       if ($552($0_1 | 0, HEAP32[$3_1 >> 2] | 0 | 0) | 0) {
        break label$5
       }
       label$6 : {
        if (!$2_1) {
         break label$6
        }
        if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (2 | 0)) {
         break label$2
        }
       }
       $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       break label$3;
      }
      $3_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
      if ($3_1) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$2_1) {
     break label$1
    }
   }
   $3_1 = HEAPU8[$2_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   label$7 : {
    if (($3_1 | 0) == (48 | 0)) {
     break label$7
    }
    $1_1 = 1;
    if ($554($2_1 | 0, 72606 | 0) | 0) {
     break label$1
    }
   }
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $384($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if (HEAPU8[$0_1 >> 0] | 0) {
      break label$2
     }
    }
    HEAP32[$3_1 >> 2] = 72684;
    $260(73395 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if ($1_1) {
     break label$4
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = 71513;
    $260(73395 | 0, $3_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   label$5 : {
    $4_1 = HEAP32[(0 + 127424 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$5
    }
    label$6 : while (1) {
     label$7 : {
      if ($552($0_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0) {
       break label$7
      }
      $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$5
      }
      $6_1 = $4_1 + 12 | 0;
      $7_1 = 0;
      label$8 : while (1) {
       label$9 : {
        $4_1 = $5_1;
        if (($1_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
         break label$9
        }
        if (($2_1 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0)) {
         break label$9
        }
        HEAP32[($7_1 ? $7_1 + 8 | 0 : $6_1) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
        $459($4_1 | 0);
        break label$5;
       }
       $7_1 = $4_1;
       $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       if ($5_1) {
        continue label$8
       }
       break label$5;
      };
     }
     $4_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     if ($4_1) {
      continue label$6
     }
     break label$6;
    };
   }
   label$10 : {
    $5_1 = $456(12 | 0) | 0;
    if ($5_1) {
     break label$10
    }
    $262(0 | 0) | 0;
    break label$1;
   }
   HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
   HEAP32[$5_1 >> 2] = $1_1;
   label$11 : {
    label$12 : {
     label$13 : {
      $4_1 = HEAP32[(0 + 127424 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$13
      }
      label$14 : while (1) {
       if (!($552($0_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0)) {
        break label$12
       }
       $4_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$14
       }
       break label$14;
      };
     }
     label$15 : {
      $4_1 = $456(20 | 0) | 0;
      if ($4_1) {
       break label$15
      }
      $262(0 | 0) | 0;
      $459($5_1 | 0);
      break label$1;
     }
     $7_1 = $543($0_1 | 0) | 0;
     HEAP32[$4_1 >> 2] = $7_1;
     label$16 : {
      if ($7_1) {
       break label$16
      }
      $459($5_1 | 0);
      $459($4_1 | 0);
      $262(0 | 0) | 0;
      break label$1;
     }
     $7_1 = 0;
     HEAP32[($4_1 + 12 | 0) >> 2] = 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(0 + 127424 | 0) >> 2] | 0;
     HEAP32[(0 + 127424 | 0) >> 2] = $4_1;
     break label$11;
    }
    $7_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = $7_1;
   HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
   $5_1 = $378($0_1 | 0) | 0;
   label$17 : {
    $4_1 = HEAP32[(0 + 127424 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$17
    }
    label$18 : while (1) {
     label$19 : {
      if ($552($0_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0) {
       break label$19
      }
      label$20 : {
       if (!$5_1) {
        break label$20
       }
       if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (2 | 0)) {
        break label$17
       }
      }
      $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      break label$17;
     }
     $4_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     if ($4_1) {
      continue label$18
     }
     break label$18;
    };
   }
   FUNCTION_TABLE[$1_1 | 0]($2_1, $0_1, $5_1, $5_1);
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $385($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = HEAP32[(0 + 127424 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ($552($0_1 | 0, HEAP32[$3_1 >> 2] | 0 | 0) | 0) {
      break label$3
     }
     $0_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$1
     }
     $4_1 = $3_1 + 12 | 0;
     $5_1 = 0;
     label$4 : while (1) {
      label$5 : {
       $3_1 = $0_1;
       if (($1_1 | 0) != (HEAP32[$3_1 >> 2] | 0 | 0)) {
        break label$5
       }
       if (($2_1 | 0) != (HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       HEAP32[($5_1 ? $5_1 + 8 | 0 : $4_1) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       $459($3_1 | 0);
       return;
      }
      $5_1 = $3_1;
      $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      if ($0_1) {
       continue label$4
      }
      break label$1;
     };
    }
    $3_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $386($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = 0;
   label$2 : while (1) {
    $4_1 = (HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0) ^ $0_1 | 0;
    $5_1 = 0 - ($4_1 & 1 | 0) | 0;
    $6_1 = ($5_1 & -24575 | 0) ^ ($4_1 >>> 1 | 0) | 0;
    $7_1 = $6_1 ^ ($4_1 >>> 2 | 0) | 0;
    $8_1 = $7_1 ^ ($4_1 >>> 3 | 0) | 0;
    $9_1 = $8_1 ^ ($4_1 >>> 4 | 0) | 0;
    $10_1 = $9_1 ^ ($4_1 >>> 5 | 0) | 0;
    $5_1 = ((0 - (($10_1 ^ ($4_1 >>> 6 | 0) | 0) & 1 | 0) | 0) & -24575 | 0) ^ (((((((0 - ($7_1 & 1 | 0) | 0) & 40960 | 0) ^ (((0 - ($6_1 & 1 | 0) | 0) & 40960 | 0) >>> 1 | 0 | (($5_1 & 40960 | 0) >>> 2 | 0) | 0) | 0) >>> 4 | 0) ^ (((0 - ($8_1 & 1 | 0) | 0) & 40960 | 0) >>> 3 | 0) | 0) ^ (((0 - ($9_1 & 1 | 0) | 0) & 40960 | 0) >>> 2 | 0) | 0) ^ (((0 - ($10_1 & 1 | 0) | 0) & 40960 | 0) >>> 1 | 0) | 0) | 0;
    $0_1 = ((($5_1 & 65408 | 0) >>> 1 | 0) ^ (($0_1 & 65280 | 0) >>> 8 | 0) | 0) ^ (($5_1 & 1 | 0 | 0) == (($4_1 & 128 | 0) >>> 7 | 0 | 0) ? 0 : -24575) | 0;
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 & 65535 | 0 | 0;
 }
 
 function $387($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $6_1 = 0, $7_1 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $2_1 = 0;
  $3_1 = $539($1_1 | 0) | 0;
  $536($0_1 | 0, 0 | 0, 16 | 0) | 0;
  label$1 : {
   $4_1 = $3_1 & -2 | 0;
   if (!$4_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$2 : while (1) {
    label$3 : {
     $5_1 = $1_1 + $2_1 | 0;
     $6_1 = HEAPU8[$5_1 >> 0] | 0;
     $7_1 = $6_1 + -48 | 0;
     if (($7_1 & 255 | 0) >>> 0 < 10 >>> 0) {
      break label$3
     }
     label$4 : {
      if ((($6_1 + -65 | 0) & 255 | 0) >>> 0 > 5 >>> 0) {
       break label$4
      }
      $7_1 = $6_1 + -55 | 0;
      break label$3;
     }
     $7_1 = (($6_1 + -97 | 0) & 255 | 0) >>> 0 < 6 >>> 0 ? $6_1 + -87 | 0 : 0;
    }
    $8_1 = $7_1 << 4 | 0;
    label$5 : {
     $6_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
     $7_1 = $6_1 + -48 | 0;
     if (($7_1 & 255 | 0) >>> 0 < 10 >>> 0) {
      break label$5
     }
     label$6 : {
      if ((($6_1 + -65 | 0) & 255 | 0) >>> 0 > 5 >>> 0) {
       break label$6
      }
      $7_1 = $6_1 + -55 | 0;
      break label$5;
     }
     $7_1 = (($6_1 + -97 | 0) & 255 | 0) >>> 0 < 6 >>> 0 ? $6_1 + -87 | 0 : 0;
    }
    HEAP8[$3_1 >> 0] = $7_1 + $8_1 | 0;
    $2_1 = $2_1 + 2 | 0;
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$1
    }
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 - $0_1 | 0 | 0) < (16 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $388() {
  $258(127436 | 0, 1 | 0) | 0;
  $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
  $258(127436 | 0, -1 | 0) | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function $389() {
  var $1_1 = 0, $0_1 = 0;
  $0_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = $0_1;
  $1_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
  label$1 : {
   if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
    break label$1
   }
   if ($0_1) {
    break label$1
   }
   if ($259(127436 | 0) | 0) {
    break label$1
   }
   HEAP32[(0 + 127440 | 0) >> 2] = 0;
   $835($1_1 | 0) | 0;
   $833($1_1 | 0);
   return;
  }
  $835($1_1 | 0) | 0;
 }
 
 function $390() {
  
 }
 
 function $391() {
  var $2_1 = 0, $1_1 = 0, $0_1 = 0;
  label$1 : {
   if (HEAP32[(0 + 127440 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 127440 | 0) >> 2] = $832() | 0;
  }
  label$2 : {
   if (($315(16384 | 0) | 0 | 0) >= (0 | 0)) {
    break label$2
   }
   return -1 | 0;
  }
  $258(127436 | 0, 1 | 0) | 0;
  $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
  $258(127436 | 0, -1 | 0) | 0;
  HEAP8[(0 + 127428 | 0) >> 0] = 1;
  HEAP32[(0 + 127444 | 0) >> 2] = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + 1 | 0;
  $350() | 0;
  $384(75289 | 0, 42 | 0, 0 | 0);
  $0_1 = FUNCTION_TABLE[HEAP32[(0 + 117540 | 0) >> 2] | 0 | 0]() | 0;
  $1_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = $1_1;
  $2_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
     break label$4
    }
    if ($1_1) {
     break label$4
    }
    if ($259(127436 | 0) | 0) {
     break label$4
    }
    HEAP32[(0 + 127440 | 0) >> 2] = 0;
    $835($2_1 | 0) | 0;
    $833($2_1 | 0);
    break label$3;
   }
   $835($2_1 | 0) | 0;
  }
  label$5 : {
   if (($0_1 | 0) <= (-1 | 0)) {
    break label$5
   }
   return 0 | 0;
  }
  $393();
  return -1 | 0;
 }
 
 function $392($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP8[(0 + 127464 | 0) >> 0] = ($382($3_1 | 0, 0 | 0) | 0 | 0) != (0 | 0);
 }
 
 function $393() {
  var $0_1 = 0, $1_1 = 0;
  $258(127436 | 0, 1 | 0) | 0;
  $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
  $258(127436 | 0, -1 | 0) | 0;
  HEAP8[(0 + 127432 | 0) >> 0] = 1;
  HEAP32[(0 + 127444 | 0) >> 2] = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   label$2 : while (1) {
    $0_1 = HEAP32[(0 + 127448 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$1
    }
    HEAP32[($0_1 + 144 | 0) >> 2] = 1;
    $394($0_1 | 0);
    continue label$2;
   };
  }
  FUNCTION_TABLE[HEAP32[(117540 + 72 | 0) >> 2] | 0 | 0]();
  label$3 : {
   $0_1 = HEAP32[(0 + 127456 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$3
   }
   $459($0_1 | 0);
   HEAP32[(0 + 127460 | 0) >> 2] = 0;
   HEAP32[(0 + 127456 | 0) >> 2] = 0;
  }
  $316(16384 | 0);
  $385(75289 | 0, 42 | 0, 0 | 0);
  $367();
  $1_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = $1_1;
  HEAP8[(0 + 127428 | 0) >> 0] = 0;
  HEAP8[(0 + 127432 | 0) >> 0] = 0;
  $0_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
  label$4 : {
   if ($1_1) {
    break label$4
   }
   if ($259(127436 | 0) | 0) {
    break label$4
   }
   HEAP32[(0 + 127440 | 0) >> 2] = 0;
   $835($0_1 | 0) | 0;
   $833($0_1 | 0);
   return;
  }
  $835($0_1 | 0) | 0;
 }
 
 function $394($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $258(127436 | 0, 1 | 0) | 0;
  $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
  $258(127436 | 0, -1 | 0) | 0;
  $2_1 = HEAP32[(0 + 127444 | 0) >> 2] | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = $2_1 + 1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == (127452 | 0)) {
      break label$2
     }
    }
    HEAP32[$1_1 >> 2] = 71285;
    $260(73395 | 0, $1_1 | 0) | 0;
    $2_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[(0 + 127444 | 0) >> 2] = $2_1;
    $0_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
    label$4 : {
     if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
      break label$4
     }
     if ($2_1) {
      break label$4
     }
     if ($259(127436 | 0) | 0) {
      break label$4
     }
     HEAP32[(0 + 127440 | 0) >> 2] = 0;
     $835($0_1 | 0) | 0;
     $833($0_1 | 0);
     break label$1;
    }
    $835($0_1 | 0) | 0;
    break label$1;
   }
   $3_1 = HEAP32[($0_1 + 144 | 0) >> 2] | 0;
   HEAP32[($0_1 + 144 | 0) >> 2] = $3_1 + -1 | 0;
   label$5 : {
    if (($3_1 | 0) < (2 | 0)) {
     break label$5
    }
    HEAP32[(0 + 127444 | 0) >> 2] = $2_1;
    $0_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
    label$6 : {
     if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
      break label$6
     }
     if ($2_1) {
      break label$6
     }
     if ($259(127436 | 0) | 0) {
      break label$6
     }
     HEAP32[(0 + 127440 | 0) >> 2] = 0;
     $835($0_1 | 0) | 0;
     $833($0_1 | 0);
     break label$1;
    }
    $835($0_1 | 0) | 0;
    break label$1;
   }
   label$7 : {
    if (!(HEAP32[($0_1 + 96 | 0) >> 2] | 0)) {
     break label$7
    }
    $398($0_1 | 0, 0 | 0, 0 | 0, 0 | 0) | 0;
   }
   label$8 : {
    if (!(HEAP32[($0_1 + 108 | 0) >> 2] | 0)) {
     break label$8
    }
    $399($0_1 | 0, 0 | 0, 0 | 0, 0 | 0) | 0;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 136 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0]($0_1);
   $4_1 = 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[($0_1 + 140 | 0) >> 2] = 0;
   label$9 : {
    $2_1 = HEAP32[(0 + 127448 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$9
    }
    label$10 : {
     label$11 : {
      if (($0_1 | 0) != ($2_1 | 0)) {
       break label$11
      }
      $3_1 = $2_1;
      break label$10;
     }
     label$12 : while (1) {
      $3_1 = HEAP32[($2_1 + 148 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$9
      }
      $4_1 = $2_1;
      $2_1 = $3_1;
      if (($0_1 | 0) != ($2_1 | 0)) {
       continue label$12
      }
      break label$12;
     };
    }
    label$13 : {
     if (!$4_1) {
      break label$13
     }
     HEAP32[($4_1 + 148 | 0) >> 2] = HEAP32[($3_1 + 148 | 0) >> 2] | 0;
     break label$9;
    }
    HEAP32[(0 + 127448 | 0) >> 2] = HEAP32[($0_1 + 148 | 0) >> 2] | 0;
   }
   $459(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0);
   label$14 : {
    if ((HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$14
    }
    $2_1 = 0;
    label$15 : while (1) {
     $459(HEAP32[(((HEAP32[($0_1 + 76 | 0) >> 2] | 0) + ($2_1 << 3 | 0) | 0) + 4 | 0) >> 2] | 0 | 0);
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) < (HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0)) {
      continue label$15
     }
     break label$15;
    };
   }
   $459(HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($0_1 + 88 | 0) >> 2] | 0 | 0);
   $459($0_1 | 0);
   $2_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 127444 | 0) >> 2] = $2_1;
   $0_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
   label$16 : {
    if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
     break label$16
    }
    if ($2_1) {
     break label$16
    }
    if ($259(127436 | 0) | 0) {
     break label$16
    }
    HEAP32[(0 + 127440 | 0) >> 2] = 0;
    $835($0_1 | 0) | 0;
    $833($0_1 | 0);
    break label$1;
   }
   $835($0_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $395() {
  var $2_1 = 0, $0_1 = 0, $1_1 = 0;
  $258(127436 | 0, 1 | 0) | 0;
  $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
  $258(127436 | 0, -1 | 0) | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + 1 | 0;
  $0_1 = FUNCTION_TABLE[HEAP32[(117540 + 4 | 0) >> 2] | 0 | 0]() | 0;
  $1_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = $1_1;
  $2_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
  label$1 : {
   if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
    break label$1
   }
   if ($1_1) {
    break label$1
   }
   if ($259(127436 | 0) | 0) {
    break label$1
   }
   HEAP32[(0 + 127440 | 0) >> 2] = 0;
   $835($2_1 | 0) | 0;
   $833($2_1 | 0);
   return $0_1 | 0;
  }
  $835($2_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $396($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $258(127436 | 0, 1 | 0) | 0;
  $2_1 = 0;
  $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
  $258(127436 | 0, -1 | 0) | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + 1 | 0;
  $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) < (0 | 0)) {
      break label$3
     }
     $3_1 = FUNCTION_TABLE[HEAP32[(117540 + 4 | 0) >> 2] | 0 | 0]() | 0;
     if (($0_1 | 0) < ($3_1 | 0)) {
      break label$2
     }
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $260(72810 | 0, $1_1 | 0) | 0;
    break label$1;
   }
   $2_1 = FUNCTION_TABLE[HEAP32[(117540 + 12 | 0) >> 2] | 0 | 0]($0_1) | 0;
  }
  $3_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = $3_1;
  $0_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
     break label$5
    }
    if ($3_1) {
     break label$5
    }
    if ($259(127436 | 0) | 0) {
     break label$5
    }
    HEAP32[(0 + 127440 | 0) >> 2] = 0;
    $835($0_1 | 0) | 0;
    $833($0_1 | 0);
    break label$4;
   }
   $835($0_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $397($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $258(127436 | 0, 1 | 0) | 0;
  $2_1 = 0;
  $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
  $3_1 = -1;
  $258(127436 | 0, -1 | 0) | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) < (0 | 0)) {
      break label$3
     }
     $2_1 = FUNCTION_TABLE[HEAP32[(117540 + 4 | 0) >> 2] | 0 | 0]() | 0;
     if (($0_1 | 0) < ($2_1 | 0)) {
      break label$2
     }
    }
    HEAP32[$1_1 >> 2] = $2_1;
    $260(72810 | 0, $1_1 | 0) | 0;
    break label$1;
   }
   $3_1 = FUNCTION_TABLE[HEAP32[(117540 + 32 | 0) >> 2] | 0 | 0]($0_1) | 0;
  }
  $2_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = $2_1;
  $0_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
     break label$5
    }
    if ($2_1) {
     break label$5
    }
    if ($259(127436 | 0) | 0) {
     break label$5
    }
    HEAP32[(0 + 127440 | 0) >> 2] = 0;
    $835($0_1 | 0) | 0;
    $833($0_1 | 0);
    break label$4;
   }
   $835($0_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $398($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $258(127436 | 0, 1 | 0) | 0;
  $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
  $258(127436 | 0, -1 | 0) | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == (127452 | 0)) {
      break label$2
     }
    }
    HEAP32[$4_1 >> 2] = 71285;
    $260(73395 | 0, $4_1 | 0) | 0;
    $5_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[(0 + 127444 | 0) >> 2] = $5_1;
    $0_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
    label$4 : {
     if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
      break label$4
     }
     if ($5_1) {
      break label$4
     }
     if ($259(127436 | 0) | 0) {
      break label$4
     }
     HEAP32[(0 + 127440 | 0) >> 2] = 0;
     $835($0_1 | 0) | 0;
     $833($0_1 | 0);
     $5_1 = -1;
     break label$1;
    }
    $835($0_1 | 0) | 0;
    $5_1 = -1;
    break label$1;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      if (($1_1 | 0) != (HEAPU16[($0_1 + 92 | 0) >> 1] | 0 | 0)) {
       break label$7
      }
      if (($2_1 | 0) == (HEAPU16[($0_1 + 94 | 0) >> 1] | 0 | 0)) {
       break label$6
      }
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 136 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0;
     $6_1 = ($853() | 0) + 2e3 | 0;
     HEAP32[($0_1 + 100 | 0) >> 2] = $6_1 >>> 0 > 1 >>> 0 ? $6_1 : 1;
     if ($5_1) {
      break label$5
     }
    }
    HEAP16[($0_1 + 94 | 0) >> 1] = $2_1;
    HEAP16[($0_1 + 92 | 0) >> 1] = $1_1;
    label$8 : {
     label$9 : {
      if (!($2_1 | $1_1 | 0)) {
       break label$9
      }
      if (!$3_1) {
       break label$9
      }
      $5_1 = ($853() | 0) + ($3_1 >>> 0 < 65535 >>> 0 ? $3_1 : 65535) | 0;
      HEAP32[($0_1 + 96 | 0) >> 2] = $5_1 >>> 0 > 1 >>> 0 ? $5_1 : 1;
      break label$8;
     }
     HEAP32[($0_1 + 96 | 0) >> 2] = 0;
     HEAP32[($0_1 + 100 | 0) >> 2] = 0;
    }
    $5_1 = 0;
   }
   $1_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 127444 | 0) >> 2] = $1_1;
   $0_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
   label$10 : {
    if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
     break label$10
    }
    if ($1_1) {
     break label$10
    }
    if ($259(127436 | 0) | 0) {
     break label$10
    }
    HEAP32[(0 + 127440 | 0) >> 2] = 0;
    $835($0_1 | 0) | 0;
    $833($0_1 | 0);
    break label$1;
   }
   $835($0_1 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $399($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $258(127436 | 0, 1 | 0) | 0;
  $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
  $258(127436 | 0, -1 | 0) | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == (127452 | 0)) {
      break label$2
     }
    }
    HEAP32[$4_1 >> 2] = 71285;
    $260(73395 | 0, $4_1 | 0) | 0;
    $5_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[(0 + 127444 | 0) >> 2] = $5_1;
    $0_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
    label$4 : {
     if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
      break label$4
     }
     if ($5_1) {
      break label$4
     }
     if ($259(127436 | 0) | 0) {
      break label$4
     }
     HEAP32[(0 + 127440 | 0) >> 2] = 0;
     $835($0_1 | 0) | 0;
     $833($0_1 | 0);
     $5_1 = -1;
     break label$1;
    }
    $835($0_1 | 0) | 0;
    $5_1 = -1;
    break label$1;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      if (($1_1 | 0) != (HEAPU16[($0_1 + 104 | 0) >> 1] | 0 | 0)) {
       break label$7
      }
      if (($2_1 | 0) == (HEAPU16[($0_1 + 106 | 0) >> 1] | 0 | 0)) {
       break label$6
      }
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 136 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0;
     if ($5_1) {
      break label$5
     }
    }
    HEAP16[($0_1 + 106 | 0) >> 1] = $2_1;
    HEAP16[($0_1 + 104 | 0) >> 1] = $1_1;
    label$8 : {
     if (!($2_1 | $1_1 | 0)) {
      break label$8
     }
     if (!$3_1) {
      break label$8
     }
     $5_1 = ($853() | 0) + ($3_1 >>> 0 < 65535 >>> 0 ? $3_1 : 65535) | 0;
     HEAP32[($0_1 + 108 | 0) >> 2] = $5_1 >>> 0 > 1 >>> 0 ? $5_1 : 1;
     $5_1 = 0;
     break label$5;
    }
    $5_1 = 0;
    HEAP32[($0_1 + 108 | 0) >> 2] = 0;
   }
   $1_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 127444 | 0) >> 2] = $1_1;
   $0_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
   label$9 : {
    if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
     break label$9
    }
    if ($1_1) {
     break label$9
    }
    if ($259(127436 | 0) | 0) {
     break label$9
    }
    HEAP32[(0 + 127440 | 0) >> 2] = 0;
    $835($0_1 | 0) | 0;
    $833($0_1 | 0);
    break label$1;
   }
   $835($0_1 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $400($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return (HEAP32[$0_1 >> 2] | 0 | 0) == (127452 | 0) | 0;
 }
 
 function $401($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $258(127436 | 0, 1 | 0) | 0;
  $3_1 = 0;
  $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
  $258(127436 | 0, -1 | 0) | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + 1 | 0;
  $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) < (0 | 0)) {
      break label$3
     }
     $4_1 = FUNCTION_TABLE[HEAP32[(117540 + 4 | 0) >> 2] | 0 | 0]() | 0;
     if (($0_1 | 0) < ($4_1 | 0)) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = $4_1;
    $260(72810 | 0, $2_1 | 0) | 0;
    break label$1;
   }
   $3_1 = FUNCTION_TABLE[HEAP32[(117540 + 76 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0;
  }
  $4_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = $4_1;
  $0_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
     break label$5
    }
    if ($4_1) {
     break label$5
    }
    if ($259(127436 | 0) | 0) {
     break label$5
    }
    HEAP32[(0 + 127440 | 0) >> 2] = 0;
    $835($0_1 | 0) | 0;
    $833($0_1 | 0);
    break label$4;
   }
   $835($0_1 | 0) | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $402($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $258(127436 | 0, 1 | 0) | 0;
  $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
  $258(127436 | 0, -1 | 0) | 0;
  $3_1 = HEAP32[(0 + 127444 | 0) >> 2] | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = $3_1 + 1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == (127452 | 0)) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 71285;
    $260(73395 | 0, $2_1 | 0) | 0;
    $0_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[(0 + 127444 | 0) >> 2] = $0_1;
    $3_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
    label$4 : {
     if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
      break label$4
     }
     if ($0_1) {
      break label$4
     }
     if ($259(127436 | 0) | 0) {
      break label$4
     }
     $0_1 = 0;
     HEAP32[(0 + 127440 | 0) >> 2] = 0;
     $835($3_1 | 0) | 0;
     $833($3_1 | 0);
     break label$1;
    }
    $835($3_1 | 0) | 0;
    $0_1 = 0;
    break label$1;
   }
   label$5 : {
    label$6 : {
     $4_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
     if (($1_1 | 0) >= ($4_1 | 0)) {
      break label$6
     }
     $0_1 = HEAPU16[(((HEAP32[($0_1 + 44 | 0) >> 2] | 0) + Math_imul($1_1, 24) | 0) + 2 | 0) >> 1] | 0;
     break label$5;
    }
    HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
    $260(68360 | 0, $2_1 + 16 | 0 | 0) | 0;
    $0_1 = 0;
    $3_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
   }
   HEAP32[(0 + 127444 | 0) >> 2] = $3_1;
   $1_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
   label$7 : {
    if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
     break label$7
    }
    if ($3_1) {
     break label$7
    }
    if ($259(127436 | 0) | 0) {
     break label$7
    }
    HEAP32[(0 + 127440 | 0) >> 2] = 0;
    $835($1_1 | 0) | 0;
    $833($1_1 | 0);
    break label$1;
   }
   $835($1_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 << 16 >> 16 | 0;
 }
 
 function $403($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $258(127436 | 0, 1 | 0) | 0;
  $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
  $258(127436 | 0, -1 | 0) | 0;
  $3_1 = HEAP32[(0 + 127444 | 0) >> 2] | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = $3_1 + 1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == (127452 | 0)) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 71285;
    $260(73395 | 0, $2_1 | 0) | 0;
    $0_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[(0 + 127444 | 0) >> 2] = $0_1;
    $3_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
    label$4 : {
     if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
      break label$4
     }
     if ($0_1) {
      break label$4
     }
     if ($259(127436 | 0) | 0) {
      break label$4
     }
     $0_1 = 0;
     HEAP32[(0 + 127440 | 0) >> 2] = 0;
     $835($3_1 | 0) | 0;
     $833($3_1 | 0);
     break label$1;
    }
    $835($3_1 | 0) | 0;
    $0_1 = 0;
    break label$1;
   }
   label$5 : {
    label$6 : {
     $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     if (($1_1 | 0) >= ($4_1 | 0)) {
      break label$6
     }
     $0_1 = HEAPU8[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + $1_1 | 0) >> 0] | 0;
     break label$5;
    }
    HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
    $260(68041 | 0, $2_1 + 16 | 0 | 0) | 0;
    $0_1 = 0;
    $3_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
   }
   HEAP32[(0 + 127444 | 0) >> 2] = $3_1;
   $1_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
   label$7 : {
    if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
     break label$7
    }
    if ($3_1) {
     break label$7
    }
    if ($259(127436 | 0) | 0) {
     break label$7
    }
    HEAP32[(0 + 127440 | 0) >> 2] = 0;
    $835($1_1 | 0) | 0;
    $833($1_1 | 0);
    break label$1;
   }
   $835($1_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 & 255 | 0 | 0;
 }
 
 function $404($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $258(127436 | 0, 1 | 0) | 0;
  $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
  $258(127436 | 0, -1 | 0) | 0;
  $3_1 = HEAP32[(0 + 127444 | 0) >> 2] | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = $3_1 + 1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == (127452 | 0)) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 71285;
    $260(73395 | 0, $2_1 | 0) | 0;
    $0_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[(0 + 127444 | 0) >> 2] = $0_1;
    $3_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
    label$4 : {
     if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
      break label$4
     }
     if ($0_1) {
      break label$4
     }
     if ($259(127436 | 0) | 0) {
      break label$4
     }
     $0_1 = 0;
     HEAP32[(0 + 127440 | 0) >> 2] = 0;
     $835($3_1 | 0) | 0;
     $833($3_1 | 0);
     break label$1;
    }
    $835($3_1 | 0) | 0;
    $0_1 = 0;
    break label$1;
   }
   label$5 : {
    label$6 : {
     $4_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
     if (($1_1 | 0) >= ($4_1 | 0)) {
      break label$6
     }
     $0_1 = HEAPU8[((HEAP32[($0_1 + 68 | 0) >> 2] | 0) + $1_1 | 0) >> 0] | 0;
     break label$5;
    }
    HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
    $260(68318 | 0, $2_1 + 16 | 0 | 0) | 0;
    $0_1 = 0;
    $3_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
   }
   HEAP32[(0 + 127444 | 0) >> 2] = $3_1;
   $1_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
   label$7 : {
    if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
     break label$7
    }
    if ($3_1) {
     break label$7
    }
    if ($259(127436 | 0) | 0) {
     break label$7
    }
    HEAP32[(0 + 127440 | 0) >> 2] = 0;
    $835($1_1 | 0) | 0;
    $833($1_1 | 0);
    break label$1;
   }
   $835($1_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 & 255 | 0 | 0;
 }
 
 function $405($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $6_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0, $7_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[(0 + 127460 | 0) >> 2] | 0;
  label$1 : while (1) {
   $4_1 = -1;
   label$2 : {
    $5_1 = ($0_1 | 0) < (0 | 0);
    if ($5_1) {
     break label$2
    }
    $4_1 = -1;
    if (($0_1 | 0) >= ($3_1 | 0)) {
     break label$2
    }
    $4_1 = HEAP32[((HEAP32[(0 + 127456 | 0) >> 2] | 0) + ($0_1 << 2 | 0) | 0) >> 2] | 0;
   }
   label$3 : {
    label$4 : {
     label$5 : {
      if (($0_1 | 0) < ($3_1 | 0)) {
       break label$5
      }
      label$6 : {
       $3_1 = $0_1 + 1 | 0;
       $6_1 = $458(HEAP32[(0 + 127456 | 0) >> 2] | 0 | 0, $3_1 << 2 | 0 | 0) | 0;
       if ($6_1) {
        break label$6
       }
       $262(0 | 0) | 0;
       break label$3;
      }
      HEAP32[(0 + 127456 | 0) >> 2] = $6_1;
      $7_1 = HEAP32[(0 + 127460 | 0) >> 2] | 0;
      $536($6_1 + ($7_1 << 2 | 0) | 0 | 0, 255 | 0, (($0_1 - $7_1 | 0) << 2 | 0) + 4 | 0 | 0) | 0;
      HEAP32[(0 + 127460 | 0) >> 2] = $3_1;
      break label$4;
     }
     if ($5_1) {
      break label$4
     }
     if ((HEAP32[((HEAP32[(0 + 127456 | 0) >> 2] | 0) + ($0_1 << 2 | 0) | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
    }
    $6_1 = 0;
    label$7 : {
     label$8 : {
      if (($3_1 | 0) < (1 | 0)) {
       break label$8
      }
      $7_1 = HEAP32[(0 + 127456 | 0) >> 2] | 0;
      label$9 : while (1) {
       if (($1_1 | 0) == (HEAP32[($7_1 + ($6_1 << 2 | 0) | 0) >> 2] | 0 | 0)) {
        break label$8
       }
       $6_1 = $6_1 + 1 | 0;
       if (($6_1 | 0) != ($3_1 | 0)) {
        continue label$9
       }
       break label$7;
      };
     }
     $6_1 = ($6_1 | 0) == ($3_1 | 0) ? -1 : $6_1;
     if (($6_1 | 0) < (0 | 0)) {
      break label$7
     }
     HEAP32[((HEAP32[(0 + 127456 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] = -1;
    }
    label$10 : {
     if ($5_1) {
      break label$10
     }
     HEAP32[((HEAP32[(0 + 127456 | 0) >> 2] | 0) + ($0_1 << 2 | 0) | 0) >> 2] = $1_1;
    }
    $6_1 = 0;
    label$11 : {
     label$12 : {
      label$13 : {
       $3_1 = $406($1_1 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break label$13
       }
       $6_1 = FUNCTION_TABLE[HEAP32[(117540 + 4 | 0) >> 2] | 0 | 0]() | 0;
       if (($3_1 | 0) < ($6_1 | 0)) {
        break label$12
       }
      }
      HEAP32[$2_1 >> 2] = $6_1;
      $260(72810 | 0, $2_1 | 0) | 0;
      break label$11;
     }
     FUNCTION_TABLE[HEAP32[(117540 + 24 | 0) >> 2] | 0 | 0]($3_1, $0_1);
    }
    if (($4_1 | 0) < (0 | 0)) {
     break label$3
    }
    $0_1 = 0;
    $1_1 = $4_1;
    $3_1 = HEAP32[(0 + 127460 | 0) >> 2] | 0;
    if (($3_1 | 0) < (1 | 0)) {
     continue label$1
    }
    $0_1 = 0;
    $6_1 = HEAP32[(0 + 127456 | 0) >> 2] | 0;
    label$14 : while (1) {
     label$15 : {
      if ((HEAP32[($6_1 + ($0_1 << 2 | 0) | 0) >> 2] | 0 | 0) != (-1 | 0)) {
       break label$15
      }
      $1_1 = $4_1;
      continue label$1;
     }
     $0_1 = $0_1 + 1 | 0;
     if (($0_1 | 0) != ($3_1 | 0)) {
      continue label$14
     }
     break label$14;
    };
    $0_1 = $3_1;
    $1_1 = $4_1;
    continue label$1;
   }
   break label$1;
  };
  global$0 = $2_1 + 16 | 0;
 }
 
 function $406($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $258(127436 | 0, 1 | 0) | 0;
  $1_1 = 0;
  $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
  $258(127436 | 0, -1 | 0) | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + 1 | 0;
  $2_1 = -1;
  label$1 : {
   $3_1 = $395() | 0;
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if (($397($1_1 | 0) | 0 | 0) != ($0_1 | 0)) {
      break label$3
     }
     $2_1 = $1_1;
     break label$1;
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $2_1 = -1;
  }
  $0_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = $0_1;
  $1_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
  label$4 : {
   if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
    break label$4
   }
   if ($0_1) {
    break label$4
   }
   if ($259(127436 | 0) | 0) {
    break label$4
   }
   HEAP32[(0 + 127440 | 0) >> 2] = 0;
   $835($1_1 | 0) | 0;
   $833($1_1 | 0);
   return $2_1 | 0;
  }
  $835($1_1 | 0) | 0;
  return $2_1 | 0;
 }
 
 function $407($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = $406($0_1 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   if (HEAPU8[(0 + 127432 | 0) >> 0] | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $3_1 = FUNCTION_TABLE[HEAP32[(117540 + 4 | 0) >> 2] | 0 | 0]() | 0;
       if (($2_1 | 0) < ($3_1 | 0)) {
        break label$5
       }
       HEAP32[$1_1 >> 2] = $3_1;
       $260(72810 | 0, $1_1 | 0) | 0;
       break label$4;
      }
      $3_1 = FUNCTION_TABLE[HEAP32[(117540 + 20 | 0) >> 2] | 0 | 0]($2_1) | 0;
      if (($3_1 | 0) > (-1 | 0)) {
       break label$3
      }
     }
     if (!($361($2_1 | 0) | 0)) {
      break label$2
     }
     $3_1 = 0;
     $4_1 = HEAP32[(0 + 127460 | 0) >> 2] | 0;
     if (($4_1 | 0) < (1 | 0)) {
      break label$3
     }
     $3_1 = 0;
     $5_1 = HEAP32[(0 + 127456 | 0) >> 2] | 0;
     label$6 : {
      label$7 : while (1) {
       if ((HEAP32[($5_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0 | 0) == (-1 | 0)) {
        break label$6
       }
       $3_1 = $3_1 + 1 | 0;
       if (($3_1 | 0) != ($4_1 | 0)) {
        continue label$7
       }
       break label$7;
      };
      $3_1 = $4_1;
     }
     if (($3_1 | 0) < (0 | 0)) {
      break label$2
     }
    }
    $405($3_1 | 0, $0_1 | 0);
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = 1541;
   if (($321(1541 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   $327($1_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $1_1 + 64 | 0;
 }
 
 function $408($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   if (($1_1 | 0) < (1 | 0)) {
    break label$1
   }
   $2_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $3_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + Math_imul($2_1, 24) | 0;
     if (!(HEAP32[($3_1 + 8 | 0) >> 2] | 0)) {
      break label$3
     }
     $409($0_1 | 0, $2_1 & 255 | 0 | 0, HEAP16[($3_1 + 4 | 0) >> 1] | 0 | 0) | 0;
     $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
    }
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) < ($1_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $2_1 = 0;
  label$4 : {
   if ((HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) <= (0 | 0)) {
    break label$4
   }
   label$5 : while (1) {
    $410($0_1 | 0, $2_1 & 255 | 0 | 0, 0 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) < (HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0)) {
     continue label$5
    }
    break label$5;
   };
  }
  $2_1 = 0;
  label$6 : {
   if ((HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) <= (0 | 0)) {
    break label$6
   }
   label$7 : while (1) {
    $411($0_1 | 0, $2_1 & 255 | 0 | 0, 0 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) < (HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0)) {
     continue label$7
    }
    break label$7;
   };
  }
  label$8 : {
   $4_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$8
   }
   $1_1 = 0;
   label$9 : while (1) {
    $2_1 = 0;
    label$10 : {
     $3_1 = (HEAP32[($0_1 + 76 | 0) >> 2] | 0) + ($1_1 << 3 | 0) | 0;
     if ((HEAP32[$3_1 >> 2] | 0 | 0) < (1 | 0)) {
      break label$10
     }
     label$11 : while (1) {
      $412($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0))) | 0;
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) < (HEAP32[$3_1 >> 2] | 0 | 0)) {
       continue label$11
      }
      break label$11;
     };
     $4_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) < ($4_1 | 0)) {
     continue label$9
    }
    break label$9;
   };
  }
 }
 
 function $409($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0) <= ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      $5_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + Math_imul($1_1, 24) | 0;
      if (!(HEAP32[($5_1 + 8 | 0) >> 2] | 0)) {
       break label$4
      }
      if (HEAP32[($5_1 + 12 | 0) >> 2] | 0) {
       break label$3
      }
      if ((((HEAPU16[$5_1 >> 1] | 0) + -32767 | 0) & 65535 | 0) >>> 0 > 2 >>> 0) {
       break label$3
      }
      if (($532($2_1 | 0) | 0 | 0) > (8190 | 0)) {
       break label$3
      }
     }
     $6_1 = $5_1 + 8 | 0;
     HEAP16[($5_1 + 4 | 0) >> 1] = $2_1;
     HEAP16[($5_1 + 2 | 0) >> 1] = $2_1;
     HEAP16[$5_1 >> 1] = $2_1;
     $7_1 = $2_1;
     break label$2;
    }
    $6_1 = $5_1 + 12 | 0;
    $7_1 = HEAPU16[($5_1 + 2 | 0) >> 1] | 0;
    if (($2_1 & 65535 | 0 | 0) != ($7_1 | 0)) {
     break label$2
    }
    if (!(HEAP32[($5_1 + 20 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   HEAP32[$6_1 >> 2] = 1;
   label$5 : {
    if (HEAP32[($5_1 + 16 | 0) >> 2] | 0) {
     break label$5
    }
    label$6 : {
     if (($532($2_1 - ($7_1 << 16 >> 16) | 0 | 0) | 0 | 0) > (409 | 0)) {
      break label$6
     }
     if ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0 | 0) != (118 | 0)) {
      break label$1
     }
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = 1;
    HEAP32[($5_1 + 20 | 0) >> 2] = 1;
    $409($0_1 | 0, $1_1 | 0, HEAP16[$5_1 >> 1] | 0 | 0) | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = 0;
   }
   label$7 : {
    if (HEAPU8[(0 + 127464 | 0) >> 0] | 0) {
     break label$7
    }
    if (!($953() | 0)) {
     break label$7
    }
    if ($439() | 0) {
     break label$7
    }
    $4_1 = 0;
    if (HEAP32[($5_1 + 20 | 0) >> 2] | 0) {
     break label$1
    }
    label$8 : {
     $6_1 = HEAP16[($5_1 + 4 | 0) >> 1] | 0;
     if (($2_1 | 0) <= ($6_1 | 0)) {
      break label$8
     }
     if (($2_1 | 0) >= (HEAP16[($5_1 + 2 | 0) >> 1] | 0 | 0)) {
      break label$1
     }
    }
    if (($2_1 | 0) >= ($6_1 | 0)) {
     break label$7
    }
    if (($2_1 | 0) <= (HEAP16[($5_1 + 2 | 0) >> 1] | 0 | 0)) {
     break label$1
    }
   }
   HEAP16[($5_1 + 2 | 0) >> 1] = $2_1;
   $4_1 = 0;
   if (($321(1536 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = 1536;
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP16[($3_1 + 24 | 0) >> 1] = $2_1;
   HEAP8[($3_1 + 20 | 0) >> 0] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $5_1;
   $4_1 = ($327($3_1 + 8 | 0 | 0) | 0 | 0) == (1 | 0);
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $410($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 1539;
  $5_1 = 0;
  label$1 : {
   label$2 : {
    switch ($2_1 | 0) {
    case 0:
     $4_1 = 1540;
     break;
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
   if ((HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) <= ($1_1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) == (HEAPU8[((HEAP32[($0_1 + 68 | 0) >> 2] | 0) + $1_1 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   label$4 : {
    if (HEAPU8[(0 + 127464 | 0) >> 0] | 0) {
     break label$4
    }
    if (!($953() | 0)) {
     break label$4
    }
    $6_1 = $439() | 0;
    if (($2_1 | 0) != (1 | 0)) {
     break label$4
    }
    $5_1 = 0;
    if (!$6_1) {
     break label$1
    }
   }
   HEAP8[((HEAP32[($0_1 + 68 | 0) >> 2] | 0) + $1_1 | 0) >> 0] = $2_1;
   $5_1 = 0;
   if (($321($4_1 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP8[($3_1 + 21 | 0) >> 0] = $2_1;
   HEAP8[($3_1 + 20 | 0) >> 0] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   $5_1 = ($327($3_1 + 8 | 0 | 0) | 0 | 0) == (1 | 0);
  }
  global$0 = $3_1 + 64 | 0;
  return $5_1 | 0;
 }
 
 function $411($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) <= ($1_1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) == (HEAPU8[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + $1_1 | 0) >> 0] | 0 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[(0 + 127464 | 0) >> 0] | 0) {
     break label$2
    }
    if (!($953() | 0)) {
     break label$2
    }
    $5_1 = $439() | 0;
    if (!$2_1) {
     break label$2
    }
    $4_1 = 0;
    if (!$5_1) {
     break label$1
    }
   }
   HEAP8[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + $1_1 | 0) >> 0] = $2_1;
   $4_1 = 0;
   if (($321(1538 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = 1538;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP8[($3_1 + 21 | 0) >> 0] = $2_1;
   HEAP8[($3_1 + 20 | 0) >> 0] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   $4_1 = ($327($3_1 + 8 | 0 | 0) | 0 | 0) == (1 | 0);
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $412($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = Math_fround($4_1);
  $5_1 = Math_fround($5_1);
  $6_1 = Math_fround($6_1);
  var $9_1 = 0, $7_1 = 0, $8_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $10_1 = 0, $11_1 = 0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   if (($1_1 | 0) >= (HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $8_1 = 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $9_1 = (HEAP32[($0_1 + 76 | 0) >> 2] | 0) + ($1_1 << 3 | 0) | 0;
   if (($2_1 | 0) >= (HEAP32[$9_1 >> 2] | 0 | 0)) {
    break label$1
   }
   $9_1 = (HEAP32[($9_1 + 4 | 0) >> 2] | 0) + ($2_1 << 4 | 0) | 0;
   label$2 : {
    if ($3_1) {
     break label$2
    }
    $6_1 = Math_fround(0.0);
    if ($4_1 != Math_fround(0.0)) {
     break label$2
    }
    if ($5_1 != Math_fround(0.0)) {
     break label$2
    }
    $5_1 = Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]);
    $4_1 = Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]);
    $6_1 = Math_fround(0.0);
   }
   $12_1 = Math_fround(0.0);
   $13_1 = Math_fround(0.0);
   label$3 : {
    if ($4_1 < Math_fround(0.0)) {
     break label$3
    }
    $13_1 = $4_1;
    if (!($4_1 > Math_fround(1.0))) {
     break label$3
    }
    $13_1 = Math_fround(1.0);
   }
   label$4 : {
    if ($5_1 < Math_fround(0.0)) {
     break label$4
    }
    $12_1 = $5_1;
    if (!($5_1 > Math_fround(1.0))) {
     break label$4
    }
    $12_1 = Math_fround(1.0);
   }
   $4_1 = Math_fround(0.0);
   label$5 : {
    if ($6_1 < Math_fround(0.0)) {
     break label$5
    }
    $4_1 = $6_1;
    if (!($4_1 > Math_fround(1.0))) {
     break label$5
    }
    $4_1 = Math_fround(1.0);
   }
   label$6 : {
    label$7 : {
     if (($3_1 | 0) != (HEAPU8[$9_1 >> 0] | 0 | 0)) {
      break label$7
     }
     if (!$3_1) {
      break label$1
     }
     $10_1 = 1623;
     if ($13_1 != Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2])) {
      break label$6
     }
     if ($12_1 != Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2])) {
      break label$6
     }
     if ($4_1 != Math_fround(HEAPF32[($9_1 + 12 | 0) >> 2])) {
      break label$6
     }
     break label$1;
    }
    $10_1 = $3_1 ? 1622 : 1624;
   }
   label$8 : {
    if (HEAPU8[(0 + 127464 | 0) >> 0] | 0) {
     break label$8
    }
    if (!($953() | 0)) {
     break label$8
    }
    $11_1 = $439() | 0;
    if (!$3_1) {
     break label$8
    }
    $8_1 = 0;
    if (!$11_1) {
     break label$1
    }
   }
   HEAPF32[($9_1 + 12 | 0) >> 2] = $4_1;
   HEAPF32[($9_1 + 8 | 0) >> 2] = $12_1;
   HEAPF32[($9_1 + 4 | 0) >> 2] = $13_1;
   HEAP8[$9_1 >> 0] = $3_1;
   $8_1 = 0;
   if (($321($10_1 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($7_1 + 8 | 0) >> 2] = $10_1;
   $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAPF32[($7_1 + 36 | 0) >> 2] = $4_1;
   HEAPF32[($7_1 + 32 | 0) >> 2] = $12_1;
   HEAPF32[($7_1 + 28 | 0) >> 2] = $13_1;
   HEAP32[($7_1 + 24 | 0) >> 2] = $2_1;
   HEAP32[($7_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($7_1 + 16 | 0) >> 2] = $8_1;
   $8_1 = ($327($7_1 + 8 | 0 | 0) | 0 | 0) == (1 | 0);
  }
  global$0 = $7_1 + 64 | 0;
  return $8_1 | 0;
 }
 
 function $413($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $1_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   $3_1 = HEAP32[(0 + 127448 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $2_1 = 0;
   label$2 : while (1) {
    label$3 : {
     if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
      break label$3
     }
     $408($3_1 | 0);
     HEAP32[($3_1 + 120 | 0) >> 2] = 0;
     break label$1;
    }
    $2_1 = $2_1 + 1 | 0;
    $3_1 = HEAP32[($3_1 + 148 | 0) >> 2] | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $536($1_1 + 8 | 0 | 0, 0 | 0, 56 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 1542;
  label$4 : {
   if (($321(1542 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$4
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
   $327($1_1 + 8 | 0 | 0) | 0;
  }
  $414($2_1 | 0, 1541 | 0);
  $414($2_1 | 0, 1619 | 0);
  $3_1 = 0;
  label$5 : {
   label$6 : {
    $2_1 = HEAP32[(0 + 127460 | 0) >> 2] | 0;
    if (($2_1 | 0) < (1 | 0)) {
     break label$6
    }
    $3_1 = 0;
    $4_1 = HEAP32[(0 + 127456 | 0) >> 2] | 0;
    label$7 : while (1) {
     if (($0_1 | 0) == (HEAP32[($4_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0 | 0)) {
      break label$6
     }
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) != ($2_1 | 0)) {
      continue label$7
     }
     break label$5;
    };
   }
   $3_1 = ($3_1 | 0) == ($2_1 | 0) ? -1 : $3_1;
   if (($3_1 | 0) < (0 | 0)) {
    break label$5
   }
   HEAP32[((HEAP32[(0 + 127456 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = -1;
  }
  global$0 = $1_1 + 64 | 0;
 }
 
 function $414($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $2_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0;
  $2_1 = global$0;
  $3_1 = $2_1;
  label$1 : {
   $4_1 = $323(0 | 0, 0 | 0, 1 | 0, $1_1 | 0, $1_1 | 0) | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $5_1 = Math_imul($4_1, 56);
     if ($5_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $6_1 = $2_1 - (($5_1 + 15 | 0) & -16 | 0) | 0;
     global$0 = $6_1;
     break label$2;
    }
    $6_1 = $456($5_1 | 0) | 0;
    if (!$6_1) {
     break label$1
    }
   }
   label$4 : {
    $2_1 = $323($6_1 | 0, $4_1 | 0, 2 | 0, $1_1 | 0, $1_1 | 0) | 0;
    if (($2_1 | 0) < (1 | 0)) {
     break label$4
    }
    $4_1 = 0;
    $7_1 = ($1_1 | 0) == (1619 | 0);
    $8_1 = ($1_1 | 0) != (1541 | 0);
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       if ($7_1) {
        break label$7
       }
       $1_1 = -1;
       if ($8_1) {
        break label$6
       }
      }
      $1_1 = HEAP32[(($6_1 + Math_imul($4_1, 56) | 0) + 8 | 0) >> 2] | 0;
     }
     label$8 : {
      if (($1_1 | 0) < ($0_1 | 0)) {
       break label$8
      }
      label$9 : {
       if (($1_1 | 0) != ($0_1 | 0)) {
        break label$9
       }
       $1_1 = $6_1 + Math_imul($4_1, 56) | 0;
       $537($1_1 | 0, $1_1 + 56 | 0 | 0, Math_imul(($4_1 ^ -1 | 0) + $2_1 | 0, 56) | 0) | 0;
       $4_1 = $4_1 + -1 | 0;
       $2_1 = $2_1 + -1 | 0;
       break label$8;
      }
      label$10 : {
       if ($7_1) {
        break label$10
       }
       if ($8_1) {
        break label$8
       }
       $1_1 = $6_1 + Math_imul($4_1, 56) | 0;
       HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + -1 | 0;
       break label$8;
      }
      $1_1 = $6_1 + Math_imul($4_1, 56) | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + -1 | 0;
     }
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) < ($2_1 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $323($6_1 | 0, $2_1 | 0, 0 | 0, 0 | 0, 0 | 0) | 0;
   if ($5_1 >>> 0 < 128 >>> 0) {
    break label$1
   }
   $459($6_1 | 0);
  }
  global$0 = $3_1;
 }
 
 function $415($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[($0_1 + 14 | 0) >> 0] | 0 | 0) == (118 | 0) | 0;
 }
 
 function $416() {
  var $0_1 = 0, $2_1 = 0, $1_1 = 0;
  label$1 : {
   if (!($318(512 | 0) | 0)) {
    break label$1
   }
   $258(127436 | 0, 1 | 0) | 0;
   $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
   $258(127436 | 0, -1 | 0) | 0;
   HEAP32[(0 + 127444 | 0) >> 2] = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + 1 | 0;
   label$2 : {
    $0_1 = HEAP32[(0 + 127448 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : while (1) {
     label$4 : {
      if (!(HEAP32[($0_1 + 120 | 0) >> 2] | 0)) {
       break label$4
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 136 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0]($0_1);
      if (!(HEAP32[($0_1 + 128 | 0) >> 2] | 0)) {
       break label$4
      }
      $368($0_1 | 0);
     }
     $1_1 = $853() | 0;
     label$5 : {
      label$6 : {
       $2_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$6
       }
       if (($2_1 - $1_1 | 0 | 0) > (0 | 0)) {
        break label$6
       }
       $398($0_1 | 0, 0 | 0, 0 | 0, 0 | 0) | 0;
       HEAP32[($0_1 + 100 | 0) >> 2] = 0;
       break label$5;
      }
      $2_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$5
      }
      if (($2_1 - $1_1 | 0 | 0) > (0 | 0)) {
       break label$5
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 136 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, HEAPU16[($0_1 + 92 | 0) >> 1] | 0, HEAPU16[($0_1 + 94 | 0) >> 1] | 0) | 0;
      $2_1 = $1_1 + 2e3 | 0;
      HEAP32[($0_1 + 100 | 0) >> 2] = $2_1 >>> 0 > 1 >>> 0 ? $2_1 : 1;
     }
     label$7 : {
      $2_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$7
      }
      if (($2_1 - $1_1 | 0 | 0) > (0 | 0)) {
       break label$7
      }
      $399($0_1 | 0, 0 | 0, 0 | 0, 0 | 0) | 0;
     }
     $0_1 = HEAP32[($0_1 + 148 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$3
     }
     break label$3;
    };
   }
   FUNCTION_TABLE[HEAP32[(117540 + 8 | 0) >> 2] | 0 | 0]();
   $1_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 127444 | 0) >> 2] = $1_1;
   $0_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
   label$8 : {
    if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
     break label$8
    }
    if ($1_1) {
     break label$8
    }
    if ($259(127436 | 0) | 0) {
     break label$8
    }
    HEAP32[(0 + 127440 | 0) >> 2] = 0;
    $835($0_1 | 0) | 0;
    $833($0_1 | 0);
    return;
   }
   $835($0_1 | 0) | 0;
  }
 }
 
 function $417($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (($0_1 | 0) == (-1 | 0)) {
    break label$1
   }
   $321(1536 | 0, $0_1 | 0) | 0;
   $321(1537 | 0, $0_1 | 0) | 0;
   $321(1538 | 0, $0_1 | 0) | 0;
   $321(1539 | 0, $0_1 | 0) | 0;
   $321(1540 | 0, $0_1 | 0) | 0;
   $321(1541 | 0, $0_1 | 0) | 0;
   $321(1542 | 0, $0_1 | 0) | 0;
   $321(1543 | 0, $0_1 | 0) | 0;
   return $0_1 | 0;
  }
  $0_1 = 1;
  label$2 : {
   if (($321(1536 | 0, -1 | 0) | 0 | 0) == (1 | 0)) {
    break label$2
   }
   $0_1 = 1;
   if (($321(1537 | 0, -1 | 0) | 0 | 0) == (1 | 0)) {
    break label$2
   }
   $0_1 = 1;
   if (($321(1538 | 0, -1 | 0) | 0 | 0) == (1 | 0)) {
    break label$2
   }
   $0_1 = 1;
   if (($321(1539 | 0, -1 | 0) | 0 | 0) == (1 | 0)) {
    break label$2
   }
   $0_1 = 1;
   if (($321(1540 | 0, -1 | 0) | 0 | 0) == (1 | 0)) {
    break label$2
   }
   $0_1 = 1;
   if (($321(1541 | 0, -1 | 0) | 0 | 0) == (1 | 0)) {
    break label$2
   }
   $0_1 = 1;
   if (($321(1542 | 0, -1 | 0) | 0 | 0) == (1 | 0)) {
    break label$2
   }
   $0_1 = $321(1543 | 0, -1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $418($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $5_1 = HEAPU16[$0_1 >> 1] | 0;
      if ($5_1 >>> 0 < 32 >>> 0) {
       break label$4
      }
      if (($5_1 | 0) != (255 | 0)) {
       break label$3
      }
     }
     label$5 : {
      label$6 : {
       if (HEAPU16[($0_1 + 6 | 0) >> 1] | 0) {
        break label$6
       }
       if (HEAPU16[($0_1 + 10 | 0) >> 1] | 0) {
        break label$6
       }
       label$7 : {
        if (!$1_1) {
         break label$7
        }
        HEAP16[$1_1 >> 1] = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
       }
       label$8 : {
        if (!$2_1) {
         break label$8
        }
        HEAP16[$2_1 >> 1] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
       }
       label$9 : {
        if (!$3_1) {
         break label$9
        }
        HEAP16[$3_1 >> 1] = HEAPU16[($0_1 + 12 | 0) >> 1] | 0;
       }
       if ($4_1) {
        break label$5
       }
       break label$1;
      }
      label$10 : {
       if (!$1_1) {
        break label$10
       }
       HEAP16[$1_1 >> 1] = 0;
      }
      label$11 : {
       if (!$2_1) {
        break label$11
       }
       HEAP16[$2_1 >> 1] = 0;
      }
      label$12 : {
       if (!$3_1) {
        break label$12
       }
       HEAP16[$3_1 >> 1] = 0;
      }
      if (!$4_1) {
       break label$1
      }
     }
     $0_1 = HEAPU16[($0_1 + 2 | 0) >> 1] | 0;
     break label$2;
    }
    label$13 : {
     if (!$1_1) {
      break label$13
     }
     HEAP16[$1_1 >> 1] = 0;
    }
    label$14 : {
     if (!$2_1) {
      break label$14
     }
     HEAP16[$2_1 >> 1] = 0;
    }
    label$15 : {
     if (!$3_1) {
      break label$15
     }
     HEAP16[$3_1 >> 1] = 0;
    }
    $0_1 = 0;
    if (!$4_1) {
     break label$1
    }
   }
   HEAP16[$4_1 >> 1] = $0_1;
  }
 }
 
 function $419($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $7_1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $8_1 = 0, $195_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    $5_1 = $980($0_1 | 0, $1_1 | 0) | 0;
    if (!$5_1) {
     break label$2
    }
    $2_1 = $543($5_1 | 0) | 0;
    break label$1;
   }
   $2_1 = $2_1 ? $2_1 : 87288;
   label$3 : while (1) {
    $5_1 = $2_1;
    $2_1 = $2_1 + 1 | 0;
    $6_1 = HEAPU8[$5_1 >> 0] | 0;
    if (($6_1 | 0) == (32 | 0)) {
     continue label$3
    }
    break label$3;
   };
   $3_1 = $3_1 ? $3_1 : 87288;
   label$4 : while (1) {
    $2_1 = $3_1;
    $3_1 = $2_1 + 1 | 0;
    $7_1 = HEAPU8[$2_1 >> 0] | 0;
    if (($7_1 | 0) == (32 | 0)) {
     continue label$4
    }
    break label$4;
   };
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       if (!$6_1) {
        break label$8
       }
       if (!$7_1) {
        break label$8
       }
       $7_1 = (($539($5_1 | 0) | 0) + ($539($2_1 | 0) | 0) | 0) + 2 | 0;
       $3_1 = $456($7_1 | 0) | 0;
       if ($3_1) {
        break label$7
       }
       $2_1 = 0;
       break label$1;
      }
      label$9 : {
       if ($7_1) {
        break label$9
       }
       label$10 : {
        if ($1_1 | $0_1 | 0) {
         break label$10
        }
        $2_1 = 70037;
        break label$9;
       }
       $2_1 = 0;
       $3_1 = ($420($0_1 | 0, $1_1 | 0, 0 | 0, 1 | 0) | 0) + -1 | 0;
       if ($3_1 >>> 0 >= 7 >>> 0) {
        break label$6
       }
       if (!((95 >>> ($3_1 & 255 | 0) | 0) & 1 | 0)) {
        break label$6
       }
       $2_1 = HEAP32[(($3_1 << 2 | 0) + 87792 | 0) >> 2] | 0;
      }
      $3_1 = $543($2_1 | 0) | 0;
      if ($3_1) {
       break label$5
      }
      $2_1 = 0;
      break label$1;
     }
     HEAP32[($4_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
     $556($3_1 | 0, $7_1 | 0, 68583 | 0, $4_1 + 16 | 0 | 0) | 0;
     break label$5;
    }
    $3_1 = $456(14 | 0) | 0;
    if (!$3_1) {
     break label$1
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$4_1 >> 2] = $0_1;
    $556($3_1 | 0, 14 | 0, 65862 | 0, $4_1 | 0) | 0;
   }
   $2_1 = $539($3_1 | 0) | 0;
   label$11 : {
    label$12 : {
     label$13 : while (1) {
      label$14 : {
       $5_1 = $2_1;
       if ($2_1) {
        break label$14
       }
       $5_1 = 0;
       HEAP8[$3_1 >> 0] = 0;
       $6_1 = -1;
       break label$12;
      }
      $2_1 = $5_1 + -1 | 0;
      if ((HEAPU8[($3_1 + $2_1 | 0) >> 0] | 0 | 0) == (32 | 0)) {
       continue label$13
      }
      break label$13;
     };
     HEAP8[($3_1 + $5_1 | 0) >> 0] = 0;
     $6_1 = $5_1 + -1 | 0;
     if ($6_1) {
      break label$12
     }
     $5_1 = 1;
     break label$11;
    }
    $2_1 = 0;
    label$15 : while (1) {
     $7_1 = $2_1 + 1 | 0;
     label$16 : {
      label$17 : {
       $1_1 = $3_1 + $2_1 | 0;
       if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (32 | 0)) {
        break label$17
       }
       $2_1 = $7_1;
       break label$16;
      }
      label$18 : {
       $0_1 = $3_1 + $7_1 | 0;
       if ((HEAPU8[$0_1 >> 0] | 0 | 0) == (32 | 0)) {
        break label$18
       }
       $2_1 = $7_1;
       break label$16;
      }
      $537($1_1 | 0, $0_1 | 0, $5_1 - $2_1 | 0 | 0) | 0;
      $5_1 = $6_1;
     }
     $6_1 = $5_1 + -1 | 0;
     if ($2_1 >>> 0 < $6_1 >>> 0) {
      continue label$15
     }
     break label$15;
    };
   }
   label$19 : {
    label$20 : {
     label$21 : {
      $2_1 = $539(71893 | 0) | 0;
      if ($546($3_1 | 0, 71893 | 0, $2_1 | 0) | 0) {
       break label$21
      }
      $7_1 = 87712;
      break label$20;
     }
     label$22 : {
      $2_1 = $539(82701 | 0) | 0;
      if ($546($3_1 | 0, 82701 | 0, $2_1 | 0) | 0) {
       break label$22
      }
      $7_1 = 87720;
      break label$20;
     }
     label$23 : {
      $2_1 = $539(83038 | 0) | 0;
      if ($546($3_1 | 0, 83038 | 0, $2_1 | 0) | 0) {
       break label$23
      }
      $7_1 = 87728;
      break label$20;
     }
     label$24 : {
      $2_1 = $539(67988 | 0) | 0;
      if ($546($3_1 | 0, 67988 | 0, $2_1 | 0) | 0) {
       break label$24
      }
      $7_1 = 87736;
      break label$20;
     }
     label$25 : {
      $2_1 = $539(78407 | 0) | 0;
      if ($546($3_1 | 0, 78407 | 0, $2_1 | 0) | 0) {
       break label$25
      }
      $7_1 = 87744;
      break label$20;
     }
     label$26 : {
      $2_1 = $539(77156 | 0) | 0;
      if ($546($3_1 | 0, 77156 | 0, $2_1 | 0) | 0) {
       break label$26
      }
      $7_1 = 87752;
      break label$20;
     }
     label$27 : {
      $2_1 = $539(78393 | 0) | 0;
      if ($546($3_1 | 0, 78393 | 0, $2_1 | 0) | 0) {
       break label$27
      }
      $7_1 = 87760;
      break label$20;
     }
     label$28 : {
      $2_1 = $539(78141 | 0) | 0;
      if ($546($3_1 | 0, 78141 | 0, $2_1 | 0) | 0) {
       break label$28
      }
      $7_1 = 87768;
      break label$20;
     }
     label$29 : {
      $2_1 = $539(78127 | 0) | 0;
      if ($546($3_1 | 0, 78127 | 0, $2_1 | 0) | 0) {
       break label$29
      }
      $7_1 = 87776;
      break label$20;
     }
     $2_1 = $539(83029 | 0) | 0;
     if ($546($3_1 | 0, 83029 | 0, $2_1 | 0) | 0) {
      break label$19
     }
     $7_1 = 87784;
    }
    $6_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $7_1 = $539($6_1 | 0) | 0;
    if ($7_1 >>> 0 > $2_1 >>> 0) {
     break label$19
    }
    $535($3_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
    $195_1 = $3_1 + $2_1 | 0;
    $2_1 = $5_1 - $2_1 | 0;
    $537($3_1 + $7_1 | 0 | 0, $195_1 | 0, $2_1 + 1 | 0 | 0) | 0;
    $5_1 = $2_1 + $7_1 | 0;
   }
   label$30 : {
    $8_1 = $5_1 + -1 | 0;
    if ($8_1 >>> 0 < 2 >>> 0) {
     break label$30
    }
    $0_1 = 1;
    label$31 : while (1) {
     label$32 : {
      $6_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$6_1) {
       break label$32
      }
      $7_1 = $3_1 + $0_1 | 0;
      $2_1 = 0;
      $1_1 = $3_1;
      label$33 : {
       label$34 : {
        label$35 : while (1) {
         if (!(HEAPU8[$7_1 >> 0] | 0)) {
          break label$34
         }
         if (($534($6_1 & 255 | 0 | 0) | 0 | 0) != ($534(HEAPU8[$7_1 >> 0] | 0 | 0) | 0 | 0)) {
          break label$34
         }
         $2_1 = $2_1 + 1 | 0;
         $7_1 = $7_1 + 1 | 0;
         $6_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
         $1_1 = $1_1 + 1 | 0;
         if ($6_1) {
          continue label$35
         }
         break label$33;
        };
       }
       if (!$2_1) {
        break label$32
       }
      }
      label$36 : while (1) {
       label$37 : {
        $7_1 = $3_1 + $2_1 | 0;
        if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (32 | 0)) {
         break label$37
        }
        $537($3_1 | 0, $7_1 + 1 | 0 | 0, $5_1 - $2_1 | 0 | 0) | 0;
        break label$30;
       }
       $7_1 = ($2_1 | 0) > (1 | 0);
       $2_1 = $2_1 + -1 | 0;
       if ($7_1) {
        continue label$36
       }
       break label$36;
      };
     }
     $0_1 = $0_1 + 1 | 0;
     if (($0_1 | 0) != ($8_1 | 0)) {
      continue label$31
     }
     break label$31;
    };
   }
   $2_1 = $3_1;
  }
  global$0 = $4_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $420($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1 | $0_1 | 0) {
     break label$2
    }
    $4_1 = 0;
    if (!$2_1) {
     break label$1
    }
    label$3 : {
     if (!($552($2_1 | 0, 69363 | 0) | 0)) {
      break label$3
     }
     if (!($552($2_1 | 0, 74086 | 0) | 0)) {
      break label$3
     }
     if ($552($2_1 | 0, 74095 | 0) | 0) {
      break label$1
     }
    }
    return 5 | 0;
   }
   $4_1 = 0;
   label$4 : {
    if (($0_1 | 0) != (1 | 0)) {
     break label$4
    }
    if (($1_1 | 0) == (1 | 0)) {
     break label$1
    }
   }
   label$5 : {
    if (($0_1 | 0) != (1118 | 0)) {
     break label$5
    }
    if (($1_1 | 0) != (766 | 0)) {
     break label$5
    }
    return 2 | 0;
   }
   label$6 : {
    if (($0_1 | 0) != (6473 | 0) & ($0_1 | 0) != (369 | 0) | 0) {
     break label$6
    }
    if (($1_1 | 0) != (1049 | 0)) {
     break label$6
    }
    return 8 | 0;
   }
   label$7 : {
    if (($0_1 | 0) != (6353 | 0)) {
     break label$7
    }
    if (($1_1 | 0) != (37888 | 0)) {
     break label$7
    }
    return 9 | 0;
   }
   label$8 : {
    $5_1 = ($0_1 | 0) != (1406 | 0);
    if ($5_1) {
     break label$8
    }
    if (($1_1 | 0) != (8198 | 0)) {
     break label$8
    }
    return 11 | 0;
   }
   label$9 : {
    if ($5_1) {
     break label$9
    }
    if (($1_1 | 0) != (8199 | 0)) {
     break label$9
    }
    label$10 : {
     if (!$2_1) {
      break label$10
     }
     if ($545($2_1 | 0, 69813 | 0) | 0) {
      break label$1
     }
    }
    return 12 | 0;
   }
   label$11 : {
    $5_1 = ($0_1 | 0) != (1406 | 0);
    if ($5_1) {
     break label$11
    }
    if (($1_1 | 0) != (8206 | 0)) {
     break label$11
    }
    label$12 : {
     if (!$2_1) {
      break label$12
     }
     $4_1 = 11;
     if ($545($2_1 | 0, 82697 | 0) | 0) {
      break label$1
     }
    }
    return 12 | 0;
   }
   label$13 : {
    if ($5_1) {
     break label$13
    }
    if (($1_1 | 0) != (8200 | 0)) {
     break label$13
    }
    return 13 | 0;
   }
   label$14 : {
    if (($0_1 | 0) != (2389 | 0)) {
     break label$14
    }
    if (($1_1 & 65531 | 0 | 0) != (29200 | 0)) {
     break label$14
    }
    return 10 | 0;
   }
   label$15 : {
    switch (($979($0_1 | 0, $1_1 | 0) | 0) + -31 | 0 | 0) {
    case 0:
     return 1 | 0;
    case 1:
     return 2 | 0;
    case 2:
     return 3 | 0;
    case 3:
     return 4 | 0;
    case 14:
     return 7 | 0;
    case 15:
     return (($3_1 | 0) != (0 | 0)) << 2 | 0 | 0;
    case 7:
    case 11:
     return 5 | 0;
    case 13:
     break label$15;
    default:
     break label$1;
    };
   }
   $4_1 = $3_1 ? 5 : 0;
  }
  return $4_1 | 0;
 }
 
 function $421($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $536($0_1 | 0, 0 | 0, 16 | 0) | 0;
  HEAP16[$0_1 >> 1] = 0;
  $1_1 = $1_1 ? $1_1 : 87288;
  HEAP16[($0_1 + 2 | 0) >> 1] = $386(0 | 0, $1_1 | 0, $539($1_1 | 0) | 0 | 0) | 0;
  $540($0_1 + 4 | 0 | 0, $1_1 | 0, 12 | 0) | 0;
 }
 
 function $422($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP16[($0_1 + 12 | 0) >> 1] = $1_1;
 }
 
 function $423($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP16[($0_1 + 2 | 0) >> 1] = $1_1;
 }
 
 function $424($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAPU8[$0_1 >> 0] | 0 | ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
    if ($2_1 >>> 0 < 32 >>> 0) {
     break label$2
    }
    $3_1 = 0;
    $4_1 = 0;
    if (($2_1 | 0) != (255 | 0)) {
     break label$1
    }
   }
   $3_1 = HEAPU8[($0_1 + 6 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 7 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($0_1 + 10 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 11 | 0) >> 0] | 0) << 8 | 0) | 0) & 65535 | 0) | 0;
   $4_1 = (wasm2js_i32$0 = 0, wasm2js_i32$1 = HEAPU8[($0_1 + 8 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 9 | 0) >> 0] | 0) << 8 | 0) | 0, wasm2js_i32$2 = $3_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   $3_1 = (wasm2js_i32$0 = 0, wasm2js_i32$1 = HEAPU8[($0_1 + 4 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0, wasm2js_i32$2 = $3_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  }
  label$3 : {
   $3_1 = $420($3_1 & 65535 | 0 | 0, $4_1 & 65535 | 0 | 0, $1_1 | 0, 1 | 0) | 0;
   if (!$3_1) {
    break label$3
   }
   return $3_1 | 0;
  }
  $4_1 = 2;
  label$4 : {
   switch ((HEAPU8[($0_1 + 14 | 0) >> 0] | 0) + -118 | 0 | 0) {
   default:
    return $3_1 | 0;
   case 0:
    $4_1 = 6;
    break;
   case 2:
    break label$4;
   };
  }
  return $4_1 | 0;
 }
 
 function $425($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if (($0_1 | 0) != (1118 | 0)) {
     break label$2
    }
    $0_1 = 1;
    label$3 : {
     switch ($1_1 + -2816 | 0 | 0) {
     case 0:
     case 5:
      break label$1;
     case 1:
     case 2:
     case 3:
     case 4:
      break label$2;
     default:
      break label$3;
     };
    }
    if (($1_1 | 0) == (739 | 0)) {
     break label$1
    }
    if (($1_1 | 0) == (2850 | 0)) {
     break label$1
    }
   }
   $0_1 = 0;
  }
  return $0_1 | 0;
 }
 
 function $426($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != (1118 | 0)) {
      break label$3
     }
     if (($1_1 & 65534 | 0 | 0) == (2834 | 0)) {
      break label$2
     }
    }
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        if (($0_1 | 0) > (5425 | 0)) {
         break label$7
        }
        if (($0_1 | 0) == (3695 | 0)) {
         break label$6
        }
        if (($0_1 | 0) != (3853 | 0)) {
         break label$4
        }
        if ((($1_1 + -335 | 0) & 65535 | 0) >>> 0 < 2 >>> 0) {
         break label$2
        }
        break label$1;
       }
       if (($0_1 | 0) == (5426 | 0)) {
        break label$5
       }
       if (($0_1 | 0) != (8406 | 0)) {
        break label$4
       }
       if ((($1_1 + -8193 | 0) & 65535 | 0) >>> 0 < 26 >>> 0) {
        break label$2
       }
       if ((($1_1 + -16385 | 0) & 65535 | 0) >>> 0 >= 2 >>> 0) {
        break label$1
       }
       break label$2;
      }
      $2_1 = $1_1 + -726 | 0;
      if ($2_1 >>> 0 > 4 >>> 0) {
       break label$1
      }
      if (!((1 << $2_1 | 0) & 25 | 0)) {
       break label$1
      }
      break label$2;
     }
     switch ($1_1 + -2601 | 0 | 0) {
     case 0:
     case 5:
      break label$2;
     default:
      break label$1;
     };
    }
    label$8 : {
     if (($0_1 | 0) != (1103 | 0)) {
      break label$8
     }
     if (($1_1 | 0) == (53266 | 0)) {
      break label$2
     }
    }
    if (($0_1 | 0) != (4341 | 0)) {
     break label$1
    }
    switch ($1_1 + -28681 | 0 | 0) {
    case 0:
    case 10:
     break label$2;
    default:
     break label$1;
    };
   }
   return 1 | 0;
  }
  return ($0_1 | 0) == (11720 | 0) & ($1_1 | 0) == (8194 | 0) | 0 | 0;
 }
 
 function $427($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == (1356 | 0) & ($1_1 | 0) == (3570 | 0) | 0 | 0;
 }
 
 function $428($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == (1406 | 0) & ($1_1 | 0) == (8200 | 0) | 0 | 0;
 }
 
 function $429($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($979($0_1 | 0, $1_1 | 0) | 0) & -2 | 0 | 0) == (2 | 0) | 0;
 }
 
 function $430($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[($0_1 + 14 | 0) >> 0] | 0 | 0) == (119 | 0) | 0;
 }
 
 function $431($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[($0_1 + 14 | 0) >> 0] | 0 | 0) == (104 | 0) | 0;
 }
 
 function $432($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[($0_1 + 14 | 0) >> 0] | 0 | 0) == (114 | 0) | 0;
 }
 
 function $433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $258(127436 | 0, 1 | 0) | 0;
  $834(HEAP32[(0 + 127440 | 0) >> 2] | 0 | 0) | 0;
  $258(127436 | 0, -1 | 0) | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + 1 | 0;
  $3_1 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (0 | 0)) {
     break label$2
    }
    $3_1 = FUNCTION_TABLE[HEAP32[(117540 + 4 | 0) >> 2] | 0 | 0]() | 0;
    if (($1_1 | 0) >= ($3_1 | 0)) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[(117540 + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
    break label$1;
   }
   HEAP32[$2_1 >> 2] = $3_1;
   $260(72810 | 0, $2_1 | 0) | 0;
   $536($0_1 | 0, 0 | 0, 16 | 0) | 0;
  }
  $3_1 = (HEAP32[(0 + 127444 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[(0 + 127444 | 0) >> 2] = $3_1;
  $1_1 = HEAP32[(0 + 127440 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (HEAPU8[(0 + 127428 | 0) >> 0] | 0) {
     break label$4
    }
    if ($3_1) {
     break label$4
    }
    if ($259(127436 | 0) | 0) {
     break label$4
    }
    HEAP32[(0 + 127440 | 0) >> 2] = 0;
    $835($1_1 | 0) | 0;
    $833($1_1 | 0);
    break label$3;
   }
   $835($1_1 | 0) | 0;
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $434($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $387($0_1 | 0, $1_1 | 0);
 }
 
 function $435() {
  $436(0 | 0, 87824 | 0, 512 | 0, 0 | 0);
  return 0 | 0;
 }
 
 function $436($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 2048 | 0;
  global$0 = $4_1;
  label$1 : {
   if (($0_1 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $2_1 + $0_1 | 0;
   if (($5_1 | 0) > (512 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $535($4_1 | 0, 128500 | 0, $0_1 << 2 | 0 | 0) | 0;
   }
   $6_1 = $4_1 + ($0_1 << 2 | 0) | 0;
   $2_1 = $2_1 << 2 | 0;
   $535($6_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   label$3 : {
    if (($5_1 | 0) == (512 | 0)) {
     break label$3
    }
    $1_1 = $5_1 << 2 | 0;
    $535($4_1 + $1_1 | 0 | 0, $1_1 + 128500 | 0 | 0, 2048 - $1_1 | 0 | 0) | 0;
   }
   label$4 : {
    if (((HEAP32[($4_1 + 156 | 0) >> 2] | 0) + -58 | 0) >>> 0 > -11 >>> 0) {
     break label$4
    }
    if (((HEAP32[($4_1 + 120 | 0) >> 2] | 0) + -48 | 0) >>> 0 < 10 >>> 0) {
     break label$4
    }
    if (((HEAP32[($4_1 + 124 | 0) >> 2] | 0) + -48 | 0) >>> 0 < 10 >>> 0) {
     break label$4
    }
    if (((HEAP32[($4_1 + 128 | 0) >> 2] | 0) + -48 | 0) >>> 0 < 10 >>> 0) {
     break label$4
    }
    if (((HEAP32[($4_1 + 132 | 0) >> 2] | 0) + -48 | 0) >>> 0 < 10 >>> 0) {
     break label$4
    }
    if (((HEAP32[($4_1 + 136 | 0) >> 2] | 0) + -48 | 0) >>> 0 < 10 >>> 0) {
     break label$4
    }
    if (((HEAP32[($4_1 + 140 | 0) >> 2] | 0) + -48 | 0) >>> 0 < 10 >>> 0) {
     break label$4
    }
    if (((HEAP32[($4_1 + 144 | 0) >> 2] | 0) + -48 | 0) >>> 0 < 10 >>> 0) {
     break label$4
    }
    if (((HEAP32[($4_1 + 148 | 0) >> 2] | 0) + -48 | 0) >>> 0 < 10 >>> 0) {
     break label$4
    }
    if (((HEAP32[($4_1 + 152 | 0) >> 2] | 0) + -48 | 0) >>> 0 < 10 >>> 0) {
     break label$4
    }
    i64toi32_i32$0 = 56;
    HEAP32[($4_1 + 144 | 0) >> 2] = 55;
    HEAP32[($4_1 + 148 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 54;
    HEAP32[($4_1 + 136 | 0) >> 2] = 53;
    HEAP32[($4_1 + 140 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 52;
    HEAP32[($4_1 + 128 | 0) >> 2] = 51;
    HEAP32[($4_1 + 132 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 50;
    HEAP32[($4_1 + 120 | 0) >> 2] = 49;
    HEAP32[($4_1 + 124 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 48;
    HEAP32[($4_1 + 152 | 0) >> 2] = 57;
    HEAP32[($4_1 + 156 | 0) >> 2] = i64toi32_i32$0;
   }
   $0_1 = ($0_1 << 2 | 0) + 128500 | 0;
   if (!($538($0_1 | 0, $6_1 | 0, $2_1 | 0) | 0)) {
    break label$1
   }
   $535($0_1 | 0, $6_1 | 0, $2_1 | 0) | 0;
   if (!$3_1) {
    break label$1
   }
   $335() | 0;
  }
  global$0 = $4_1 + 2048 | 0;
 }
 
 function $437() {
  var $0_1 = 0;
  $0_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if ((HEAPU8[($0_1 + 127986 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    $438(1 | 0, 0 | 0, $0_1 | 0, 0 | 0) | 0;
   }
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != (512 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $438($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  label$1 : {
   if (($2_1 + -512 | 0) >>> 0 < -511 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($1_1 | 0) {
      case 1:
       $6_1 = $2_1 + 127474 | 0;
       $5_1 = HEAPU8[$6_1 >> 0] | 0;
       label$6 : {
        label$7 : {
         if (HEAPU8[($2_1 + 127986 | 0) >> 0] | 0) {
          break label$7
         }
         $7_1 = 0;
         break label$6;
        }
        if (!($5_1 & $0_1 | 0)) {
         break label$2
        }
        $7_1 = 1;
       }
       HEAP8[$6_1 >> 0] = $5_1 | $0_1 | 0;
       $8_1 = 1;
       $6_1 = 768;
       break label$3;
      case 0:
       break label$4;
      default:
       break label$1;
      };
     }
     if (!(HEAPU8[($2_1 + 127986 | 0) >> 0] | 0)) {
      break label$1
     }
     $8_1 = 0;
     HEAP8[($2_1 + 127474 | 0) >> 0] = 0;
     $6_1 = 769;
     $7_1 = 0;
    }
    HEAP8[($2_1 + 127986 | 0) >> 0] = $1_1;
    label$8 : {
     if ($3_1) {
      break label$8
     }
     $3_1 = HEAP32[(($2_1 << 2 | 0) + 128500 | 0) >> 2] | 0;
    }
    label$9 : {
     label$10 : {
      switch ($0_1 + -1 | 0 | 0) {
      case 0:
       HEAP32[(0 + 130552 | 0) >> 2] = $853() | 0;
       break label$9;
      case 3:
       break label$10;
      default:
       break label$9;
      };
     }
     HEAP32[(0 + 130548 | 0) >> 2] = 1;
    }
    $5_1 = 64;
    label$12 : {
     label$13 : {
      switch ($3_1 + -1073742048 | 0 | 0) {
      case 4:
       $5_1 = 128;
       break label$12;
      case 1:
       $5_1 = 1;
       break label$12;
      case 5:
       $5_1 = 2;
       break label$12;
      case 2:
       $5_1 = 256;
       break label$12;
      case 6:
       $5_1 = 512;
       break label$12;
      case 3:
       $5_1 = 1024;
       break label$12;
      case 7:
       $5_1 = 2048;
       break label$12;
      case 33:
       $5_1 = 16384;
       break label$12;
      case 0:
       break label$12;
      default:
       break label$13;
      };
     }
     $5_1 = 0;
    }
    $0_1 = HEAPU16[(0 + 127472 | 0) >> 1] | 0;
    label$22 : {
     label$23 : {
      if (!$8_1) {
       break label$23
      }
      label$24 : {
       switch ($3_1 + -1073741881 | 0 | 0) {
       case 26:
        $0_1 = $0_1 ^ 4096 | 0;
        break label$22;
       case 0:
        $0_1 = $0_1 ^ 8192 | 0;
        break label$22;
       case 14:
        $0_1 = $0_1 ^ -32768 | 0;
        break label$22;
       default:
        break label$24;
       };
      }
      $0_1 = $0_1 | $5_1 | 0;
      break label$22;
     }
     $0_1 = $0_1 & ($5_1 ^ -1 | 0) | 0;
    }
    $5_1 = 0;
    HEAP16[(0 + 127472 | 0) >> 1] = $0_1;
    label$28 : {
     if (($321($6_1 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
      break label$28
     }
     HEAP32[($4_1 + 28 | 0) >> 2] = $3_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
     HEAP8[($4_1 + 21 | 0) >> 0] = $7_1;
     HEAP8[($4_1 + 20 | 0) >> 0] = $1_1;
     HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
     HEAP16[($4_1 + 32 | 0) >> 1] = HEAPU16[(0 + 127472 | 0) >> 1] | 0;
     $2_1 = 0;
     label$29 : {
      $5_1 = HEAP32[(0 + 127468 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$29
      }
      $2_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = $2_1;
     $5_1 = ($327($4_1 + 8 | 0 | 0) | 0 | 0) > (0 | 0);
    }
    if (($1_1 | 0) != (1 | 0)) {
     break label$1
    }
    if (($3_1 | 0) != (9 | 0)) {
     break label$1
    }
    if (!((HEAPU8[(0 + 127473 | 0) >> 0] | 0) & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[(0 + 127468 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$1
    }
    if (((HEAP32[($2_1 + 48 | 0) >> 2] | 0) & 1048577 | 0 | 0) != (1048577 | 0)) {
     break label$1
    }
    if (!($383(77940 | 0, 1 | 0) | 0)) {
     break label$1
    }
    $950(HEAP32[(0 + 127468 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   HEAP8[($2_1 + 127474 | 0) >> 0] = $5_1 | $0_1 | 0;
   $5_1 = 0;
  }
  global$0 = $4_1 + 64 | 0;
  return $5_1 | 0;
 }
 
 function $439() {
  return HEAP32[(0 + 127468 | 0) >> 2] | 0 | 0;
 }
 
 function $440($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  $2_1 = HEAP32[(0 + 127468 | 0) >> 2] | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ((HEAPU8[($1_1 + 127986 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$3
     }
     $438(1 | 0, 0 | 0, $1_1 | 0, 0 | 0) | 0;
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != (512 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $2_1 = HEAP32[(0 + 127468 | 0) >> 2] | 0;
  }
  label$4 : {
   if (!$2_1) {
    break label$4
   }
   if (($2_1 | 0) == ($0_1 | 0)) {
    break label$4
   }
   label$5 : {
    if (!((HEAPU8[($2_1 + 49 | 0) >> 0] | 0) & 64 | 0)) {
     break label$5
    }
    $483(0 | 0) | 0;
    $471(1 | 0) | 0;
    $2_1 = HEAP32[(0 + 127468 | 0) >> 2] | 0;
   }
   $975($2_1 | 0, 13 | 0, 0 | 0, 0 | 0) | 0;
   if (!($321(771 | 0, -1 | 0) | 0)) {
    break label$4
   }
   $1_1 = $927() | 0;
   if (!$1_1) {
    break label$4
   }
   $2_1 = HEAP32[($1_1 + 300 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$4
   }
   FUNCTION_TABLE[$2_1 | 0]($1_1);
  }
  HEAP32[(0 + 127468 | 0) >> 2] = $0_1;
  label$6 : {
   if (!$0_1) {
    break label$6
   }
   $975($0_1 | 0, 12 | 0, 0 | 0, 0 | 0) | 0;
   if (!($321(771 | 0, -1 | 0) | 0)) {
    break label$6
   }
   $1_1 = $927() | 0;
   if (!$1_1) {
    break label$6
   }
   $0_1 = HEAP32[($1_1 + 296 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$6
   }
   FUNCTION_TABLE[$0_1 | 0]($1_1);
  }
 }
 
 function $441($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $438(1 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $442() {
  var $0_1 = 0;
  $0_1 = 0;
  label$1 : {
   if (!(HEAP32[(0 + 130548 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ((HEAPU8[($0_1 + 127474 | 0) >> 0] | 0 | 0) != (4 | 0)) {
      break label$3
     }
     $438(4 | 0, 0 | 0, $0_1 | 0, 0 | 0) | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) != (512 | 0)) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[(0 + 130548 | 0) >> 2] = 0;
  }
  label$4 : {
   $0_1 = HEAP32[(0 + 130552 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$4
   }
   if ((($0_1 - ($853() | 0) | 0) + 250 | 0 | 0) > (0 | 0)) {
    break label$4
   }
   HEAP32[(0 + 130552 | 0) >> 2] = 0;
  }
 }
 
 function $443($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $5_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if ($3_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   if (($3_1 | 0) == (127 | 0)) {
    break label$1
   }
   if (($321(771 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $4_1 = $539($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = 771;
   $2_1 = 0;
   $3_1 = 0;
   label$2 : {
    $5_1 = HEAP32[(0 + 127468 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$2
    }
    $3_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = $3_1;
   if (!$4_1) {
    break label$1
   }
   $6_1 = $1_1 + 20 | 0;
   $3_1 = 0;
   label$3 : while (1) {
    $5_1 = $541($6_1 | 0, $0_1 + $3_1 | 0 | 0, 32 | 0) | 0;
    if (!$5_1) {
     break label$1
    }
    $2_1 = $2_1 | ($327($1_1 + 8 | 0 | 0) | 0 | 0) > (0 | 0) | 0;
    $3_1 = $5_1 + $3_1 | 0;
    if ($3_1 >>> 0 < $4_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  global$0 = $1_1 + 64 | 0;
  return $2_1 | 0;
 }
 
 function $444() {
  
 }
 
 function $445() {
  label$1 : {
   if (HEAP32[(0 + 130556 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 130556 | 0) >> 2] = $832() | 0;
  }
 }
 
 function $446($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 130560 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ((HEAP32[$1_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
      break label$3
     }
     return HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0;
    }
    $1_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $1_1 = 1;
  label$4 : {
   switch ($0_1 | 0) {
   case 0:
    return HEAP32[(0 + 114368 | 0) >> 2] | 0 | 0;
   case 2:
    return HEAP32[(0 + 114364 | 0) >> 2] | 0 | 0;
   default:
    $1_1 = HEAP32[(0 + 114360 | 0) >> 2] | 0;
    break;
   case 8:
    break label$4;
   };
  }
  return $1_1 | 0;
 }
 
 function $447($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $448(0 | 0, 3 | 0, $0_1 | 0, $1_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $448($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 288 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 284 | 0) >> 2] = $3_1;
  label$1 : {
   if ($1_1 >>> 0 > 6 >>> 0) {
    break label$1
   }
   if (!(HEAP32[(0 + 114372 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      $3_1 = HEAP32[(0 + 130560 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$4
      }
      label$5 : while (1) {
       label$6 : {
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
         break label$6
        }
        $5_1 = $3_1 + 4 | 0;
        break label$3;
       }
       $3_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       if ($3_1) {
        continue label$5
       }
       break label$5;
      };
     }
     $5_1 = 114368;
     $3_1 = 1;
     label$7 : {
      switch ($0_1 | 0) {
      case 2:
       $5_1 = 114364;
       break label$3;
      case 8:
       break label$2;
      case 0:
       break label$3;
      default:
       break label$7;
      };
     }
     $5_1 = 114360;
    }
    $3_1 = HEAP32[$5_1 >> 2] | 0;
   }
   if ($1_1 >>> 0 < $3_1 >>> 0) {
    break label$1
   }
   label$9 : {
    if (HEAP32[(0 + 130556 | 0) >> 2] | 0) {
     break label$9
    }
    HEAP32[(0 + 130556 | 0) >> 2] = $832() | 0;
   }
   $3_1 = HEAP32[($4_1 + 284 | 0) >> 2] | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
   $3_1 = $557($4_1 + 16 | 0 | 0, 256 | 0, $2_1 | 0, $3_1 | 0) | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $4_1 + 16 | 0;
   label$10 : {
    if ($3_1 >>> 0 < 256 >>> 0) {
     break label$10
    }
    $3_1 = $3_1 + 1 | 0;
    $5_1 = $456($3_1 | 0) | 0;
    if (!$5_1) {
     break label$1
    }
    $6_1 = HEAP32[($4_1 + 284 | 0) >> 2] | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
    $3_1 = $557($5_1 | 0, $3_1 | 0, $2_1 | 0, $6_1 | 0) | 0;
   }
   label$11 : {
    if (($3_1 | 0) < (1 | 0)) {
     break label$11
    }
    $6_1 = $3_1 + $5_1 | 0;
    $2_1 = $6_1 + -1 | 0;
    if ((HEAPU8[$2_1 >> 0] | 0 | 0) != (10 | 0)) {
     break label$11
    }
    HEAP8[$2_1 >> 0] = 0;
    if (($3_1 | 0) == (1 | 0)) {
     break label$11
    }
    $3_1 = $6_1 + -2 | 0;
    if ((HEAPU8[$3_1 >> 0] | 0 | 0) != (13 | 0)) {
     break label$11
    }
    HEAP8[$3_1 >> 0] = 0;
   }
   $834(HEAP32[(0 + 130556 | 0) >> 2] | 0 | 0) | 0;
   FUNCTION_TABLE[HEAP32[(0 + 114372 | 0) >> 2] | 0 | 0](HEAP32[(0 + 130564 | 0) >> 2] | 0, $0_1, $1_1, $5_1);
   $835(HEAP32[(0 + 130556 | 0) >> 2] | 0 | 0) | 0;
   if (($5_1 | 0) == ($4_1 + 16 | 0 | 0)) {
    break label$1
   }
   $459($5_1 | 0);
  }
  global$0 = $4_1 + 288 | 0;
 }
 
 function $449($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $448($0_1 | 0, 2 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $450($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $448($0_1 | 0, 6 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $451($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $3_1;
  HEAP32[$4_1 >> 2] = HEAP32[(($2_1 << 2 | 0) + 89872 | 0) >> 2] | 0;
  $1025(HEAP32[(0 + 110208 | 0) >> 2] | 0 | 0, 83093 | 0, $4_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $452($0_1) {
  $0_1 = $0_1 | 0;
  return $1146($0_1 | 0) | 0 | 0;
 }
 
 function $453($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1154($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $454($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1149($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $455($0_1) {
  $0_1 = $0_1 | 0;
  $1148($0_1 | 0);
 }
 
 function $456($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(0 + 114376 | 0) >> 2] | 0 | 0]($0_1 >>> 0 > 1 >>> 0 ? $0_1 : 1) | 0;
   if (!$0_1) {
    break label$1
   }
   $258(114392 | 0, 1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $457($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = ($0_1 | 0) != (0 | 0) & ($1_1 | 0) != (0 | 0) | 0;
   $1_1 = FUNCTION_TABLE[HEAP32[(0 + 114380 | 0) >> 2] | 0 | 0]($2_1 ? $0_1 : 1, $2_1 ? $1_1 : 1) | 0;
   if (!$1_1) {
    break label$1
   }
   $258(114392 | 0, 1 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $458($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = FUNCTION_TABLE[HEAP32[(0 + 114384 | 0) >> 2] | 0 | 0]($0_1, $0_1 | $1_1 | 0 ? $1_1 : 1) | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   if (!$1_1) {
    break label$1
   }
   $258(114392 | 0, 1 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $459($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[(0 + 114388 | 0) >> 2] | 0 | 0]($0_1);
   $258(114392 | 0, -1 | 0) | 0;
  }
 }
 
 function $460() {
  $536(130568 | 0, 0 | 0, 200 | 0) | 0;
  $384(76852 | 0, 48 | 0, 130568 | 0);
  $384(75186 | 0, 49 | 0, 130568 | 0);
  $384(77056 | 0, 50 | 0, 130568 | 0);
  $384(77085 | 0, 51 | 0, 130568 | 0);
  $384(77024 | 0, 52 | 0, 130568 | 0);
  $384(75266 | 0, 53 | 0, 130568 | 0);
  $384(75243 | 0, 54 | 0, 130568 | 0);
  $384(76806 | 0, 55 | 0, 130568 | 0);
  $384(76094 | 0, 56 | 0, 130568 | 0);
  HEAP32[(0 + 130760 | 0) >> 2] = 1;
  HEAP32[(0 + 130716 | 0) >> 2] = 0;
  return 0 | 0;
 }
 
 function $461($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = 500;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   if (!(HEAPU8[$3_1 >> 0] | 0)) {
    break label$1
   }
   $4_1 = $549($3_1 | 0) | 0;
  }
  HEAP32[($0_1 + 132 | 0) >> 2] = $4_1;
 }
 
 function $462($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = 32;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   if (!(HEAPU8[$3_1 >> 0] | 0)) {
    break label$1
   }
   $4_1 = $549($3_1 | 0) | 0;
  }
  HEAP32[($0_1 + 136 | 0) >> 2] = $4_1;
 }
 
 function $463($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   if (!(HEAPU8[$3_1 >> 0] | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 96 | 0) >> 2] = 1;
   HEAPF32[($0_1 + 100 | 0) >> 2] = Math_fround(+$550($3_1 | 0));
   return;
  }
  HEAP32[($0_1 + 96 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 100 | 0) >> 2] = Math_fround(1.0);
 }
 
 function $464($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   if (!(HEAPU8[$3_1 >> 0] | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = 1;
   HEAPF32[($0_1 + 108 | 0) >> 2] = Math_fround(+$550($3_1 | 0));
   return;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 108 | 0) >> 2] = Math_fround(1.0);
 }
 
 function $465($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP32[($0_1 + 112 | 0) >> 2] = $382($3_1 | 0, 0 | 0) | 0;
 }
 
 function $466($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP32[($0_1 + 140 | 0) >> 2] = $382($3_1 | 0, 1 | 0) | 0;
 }
 
 function $467($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = $382($3_1 | 0, 0 | 0) | 0;
  HEAP32[($0_1 + 144 | 0) >> 2] = $3_1;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $856(-1 | 0, -1 | 0, 0 | 0, 66997 | 0) | 0;
  }
 }
 
 function $468($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   $3_1 = $382($3_1 | 0, 1 | 0) | 0;
   if (($3_1 | 0) == (HEAP32[($0_1 + 152 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 152 | 0) >> 2] = $3_1;
   $471(0 | 0) | 0;
  }
 }
 
 function $469($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP32[($0_1 + 92 | 0) >> 2] = $382($3_1 | 0, 0 | 0) | 0;
 }
 
 function $470() {
  return 130568 | 0;
 }
 
 function $471($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $7_1 = 0, $1_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (!(HEAP32[(0 + 130600 | 0) >> 2] | 0)) {
    break label$1
   }
   $1_1 = 0;
   $2_1 = 0;
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $2_1 = 0;
    if ($974() | 0) {
     break label$2
    }
    $2_1 = 0;
    label$3 : {
     label$4 : {
      if (HEAP32[(0 + 130724 | 0) >> 2] | 0) {
       break label$4
      }
      $2_1 = 0;
      if (!(HEAP32[(0 + 130720 | 0) >> 2] | 0)) {
       break label$2
      }
      $2_1 = 0;
      $3_1 = HEAP32[(0 + 130732 | 0) >> 2] | 0;
      if (($3_1 | 0) < (1 | 0)) {
       break label$2
      }
      $4_1 = $3_1 & 1 | 0;
      $0_1 = 0;
      $5_1 = HEAP32[(0 + 130736 | 0) >> 2] | 0;
      $2_1 = 0;
      label$5 : {
       if (($3_1 | 0) == (1 | 0)) {
        break label$5
       }
       $6_1 = $3_1 & 2147483646 | 0;
       $0_1 = 0;
       $2_1 = 0;
       $3_1 = 0;
       label$6 : while (1) {
        label$7 : {
         $7_1 = $5_1 + ($2_1 << 3 | 0) | 0;
         if ((HEAP32[$7_1 >> 2] | 0 | 0) == (-1 | 0)) {
          break label$7
         }
         $0_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0 | $0_1 | 0;
        }
        label$8 : {
         $7_1 = $5_1 + (($2_1 | 1 | 0) << 3 | 0) | 0;
         if ((HEAP32[$7_1 >> 2] | 0 | 0) == (-1 | 0)) {
          break label$8
         }
         $0_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0 | $0_1 | 0;
        }
        $2_1 = $2_1 + 2 | 0;
        $3_1 = $3_1 + 2 | 0;
        if (($3_1 | 0) != ($6_1 | 0)) {
         continue label$6
        }
        break label$6;
       };
      }
      label$9 : {
       if (!$4_1) {
        break label$9
       }
       $2_1 = $5_1 + ($2_1 << 3 | 0) | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) == (-1 | 0)) {
        break label$9
       }
       $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0 | $0_1 | 0;
      }
      $2_1 = 0;
      if (!$0_1) {
       break label$2
      }
      if (!(HEAP32[(0 + 130652 | 0) >> 2] | 0)) {
       break label$3
      }
      break label$2;
     }
     if (HEAP32[(0 + 130652 | 0) >> 2] | 0) {
      break label$2
     }
    }
    $2_1 = $439() | 0;
   }
   $0_1 = HEAP32[(0 + 130728 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($0_1 | 0)) {
    break label$1
   }
   label$10 : {
    if (!$0_1) {
     break label$10
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = (HEAP32[($0_1 + 48 | 0) >> 2] | 0) & -16385 | 0;
   }
   label$11 : {
    if (!$2_1) {
     break label$11
    }
    HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($2_1 + 48 | 0) >> 2] | 0 | 16384 | 0;
   }
   $1_1 = 0;
   HEAP32[(0 + 130728 | 0) >> 2] = $2_1;
   if ((FUNCTION_TABLE[HEAP32[(0 + 130600 | 0) >> 2] | 0 | 0]($2_1) | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   label$12 : {
    if (!$0_1) {
     break label$12
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 16384 | 0;
   }
   label$13 : {
    if (!$2_1) {
     break label$13
    }
    HEAP32[($2_1 + 48 | 0) >> 2] = (HEAP32[($2_1 + 48 | 0) >> 2] | 0) & -16385 | 0;
   }
   HEAP32[(0 + 130728 | 0) >> 2] = $0_1;
   $1_1 = -1;
  }
  return $1_1 | 0;
 }
 
 function $472($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[(0 + 130752 | 0) >> 2] = $0_1;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   if (HEAP32[(0 + 130756 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 130756 | 0) >> 2] = $0_1;
   $1_1 = HEAP32[(0 + 130576 | 0) >> 2] | 0;
   label$2 : {
    if (!(HEAP32[(0 + 130760 | 0) >> 2] | 0)) {
     break label$2
    }
    if (HEAP32[(0 + 130652 | 0) >> 2] | 0) {
     break label$2
    }
    if (!$1_1) {
     break label$1
    }
    FUNCTION_TABLE[$1_1 | 0]($0_1) | 0;
    return;
   }
   if (!$1_1) {
    break label$1
   }
   FUNCTION_TABLE[$1_1 | 0](0) | 0;
  }
 }
 
 function $473() {
  return HEAP32[(0 + 130612 | 0) >> 2] | 0 | 0;
 }
 
 function $474($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 130612 | 0) >> 2] | 0;
   if (($1_1 | 0) == ($0_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    $975($1_1 | 0, 11 | 0, 0 | 0, 0 | 0) | 0;
   }
   HEAP32[(0 + 130612 | 0) >> 2] = $0_1;
   HEAP32[(0 + 130648 | 0) >> 2] = 0;
   label$3 : {
    if (!$0_1) {
     break label$3
    }
    $975($0_1 | 0, 10 | 0, 0 | 0, 0 | 0) | 0;
   }
   $1_1 = HEAP32[(0 + 130756 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $0_1 = HEAP32[(0 + 130576 | 0) >> 2] | 0;
   label$4 : {
    $1_1 = (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = HEAP32[(0 + 130752 | 0) >> 2] | 0, wasm2js_i32$2 = HEAP32[(0 + 130612 | 0) >> 2] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    if (!$1_1) {
     break label$4
    }
    if (!(HEAP32[(0 + 130760 | 0) >> 2] | 0)) {
     break label$4
    }
    if (HEAP32[(0 + 130652 | 0) >> 2] | 0) {
     break label$4
    }
    if (!$0_1) {
     break label$1
    }
    FUNCTION_TABLE[$0_1 | 0]($1_1) | 0;
    return;
   }
   if (!$0_1) {
    break label$1
   }
   FUNCTION_TABLE[$0_1 | 0](0) | 0;
  }
 }
 
 function $475($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($2_1) {
     break label$2
    }
    $5_1 = 0;
    label$3 : {
     $6_1 = HEAP32[(0 + 130732 | 0) >> 2] | 0;
     if (($6_1 | 0) < (1 | 0)) {
      break label$3
     }
     $7_1 = $6_1 & 7 | 0;
     label$4 : {
      if ($6_1 >>> 0 < 8 >>> 0) {
       break label$4
      }
      $8_1 = $6_1 & 2147483640 | 0;
      $6_1 = 0;
      label$5 : while (1) {
       $6_1 = $6_1 + 8 | 0;
       if (($6_1 | 0) != ($8_1 | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     if (!$7_1) {
      break label$3
     }
     $6_1 = 0;
     label$6 : while (1) {
      $6_1 = $6_1 + 1 | 0;
      if (($6_1 | 0) != ($7_1 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    if (!($476($0_1 | 0, $3_1 | 0, $4_1 | 0, ($1_1 | 0) != (-1 | 0) | 0) | 0)) {
     break label$1
    }
   }
   $5_1 = $477($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  }
  return $5_1 | 0;
 }
 
 function $476($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($0_1 + 49 | 0) >> 0] | 0) & 64 | 0) {
     break label$2
    }
    $955($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
    $5_1 = 0;
    label$3 : {
     if (($2_1 | $1_1 | 0 | 0) < (0 | 0)) {
      break label$3
     }
     if (($1_1 | 0) >= (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     if (($2_1 | 0) < (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0)) {
      break label$2
     }
    }
    $6_1 = HEAP32[(0 + 130612 | 0) >> 2] | 0;
    if (($0_1 | 0) != ($6_1 | 0)) {
     break label$1
    }
    label$4 : {
     if (!$3_1) {
      break label$4
     }
     $477($0_1 | 0, HEAP32[(0 + 130608 | 0) >> 2] | 0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
     $6_1 = HEAP32[(0 + 130612 | 0) >> 2] | 0;
    }
    if (!$6_1) {
     break label$1
    }
    $5_1 = 0;
    $975($6_1 | 0, 11 | 0, 0 | 0, 0 | 0) | 0;
    HEAP32[(0 + 130648 | 0) >> 2] = 0;
    HEAP32[(0 + 130612 | 0) >> 2] = 0;
    if (!(HEAP32[(0 + 130756 | 0) >> 2] | 0)) {
     break label$1
    }
    $5_1 = 0;
    $0_1 = HEAP32[(0 + 130576 | 0) >> 2] | 0;
    label$5 : {
     $1_1 = HEAP32[(0 + 130752 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$5
     }
     if (!(HEAP32[(0 + 130760 | 0) >> 2] | 0)) {
      break label$5
     }
     if (HEAP32[(0 + 130652 | 0) >> 2] | 0) {
      break label$5
     }
     if (!$0_1) {
      break label$1
     }
     FUNCTION_TABLE[$0_1 | 0]($1_1) | 0;
     break label$1;
    }
    if (!$0_1) {
     break label$1
    }
    $5_1 = 0;
    FUNCTION_TABLE[$0_1 | 0](0) | 0;
    break label$1;
   }
   $5_1 = 1;
   if (($0_1 | 0) == (HEAP32[(0 + 130612 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $474($0_1 | 0);
   if (!$3_1) {
    break label$1
   }
   $477($0_1 | 0, HEAP32[(0 + 130608 | 0) >> 2] | 0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $477($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $16_1 = Math_fround(0), $6_1 = 0, $5_1 = 0, $9_1 = 0, $18_1 = 0.0, $8_1 = 0, $10_1 = 0, $13_1 = 0, $11_1 = 0, $12_1 = 0, $17_1 = Math_fround(0), i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $14_1 = 0, i64toi32_i32$2 = 0, $114_1 = Math_fround(0), $154_1 = Math_fround(0), $239_1 = Math_fround(0), $335_1 = Math_fround(0), $375_1 = Math_fround(0), $15_1 = 0, $692_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP32[(0 + 130712 | 0) >> 2] | 0)) {
      break label$3
     }
     if (!$0_1) {
      break label$3
     }
     if (($1_1 | 0) == (-1 | 0)) {
      break label$3
     }
     if ($2_1) {
      break label$3
     }
     if (!((HEAPU8[(0 + 130768 | 0) >> 0] | 0) & 1 | 0)) {
      break label$3
     }
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = 0;
     $858(-1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $0_1 | 0, Math_fround(Math_fround(Math_fround($3_1 | 0) / Math_fround(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(Math_fround($4_1 | 0) / Math_fround(HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(1.0))) | 0;
     $7_1 = 0;
     break label$2;
    }
    $7_1 = ($1_1 | 0) == (-1 | 0);
    if (($1_1 | 0) != (-1 | 0)) {
     break label$2
    }
    if (!(HEAP32[(0 + 130708 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   label$4 : {
    if ($7_1) {
     break label$4
    }
    if (!(HEAP32[(0 + 130656 | 0) >> 2] | 0)) {
     break label$4
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = 0;
    HEAP32[($5_1 + 72 | 0) >> 2] = 0;
    $955($0_1 | 0, $5_1 + 16 | 0 | 0, $5_1 + 72 | 0 | 0);
    $6_1 = (HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
    HEAP32[($5_1 + 16 | 0) >> 2] = $6_1;
    $8_1 = (HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
    HEAP32[($5_1 + 72 | 0) >> 2] = $8_1;
    label$5 : {
     if (($3_1 | 0) != ($6_1 | 0)) {
      break label$5
     }
     if (($4_1 | 0) != ($8_1 | 0)) {
      break label$5
     }
     $6_1 = 0;
     HEAP32[(0 + 130636 | 0) >> 2] = $4_1;
     HEAP32[(0 + 130632 | 0) >> 2] = $3_1;
     if (HEAP32[(0 + 130660 | 0) >> 2] | 0) {
      break label$4
     }
     break label$1;
    }
    if (!$0_1) {
     break label$4
    }
    if (!((HEAPU8[($0_1 + 49 | 0) >> 0] | 0) & 2 | 0)) {
     break label$4
    }
    label$6 : {
     $9_1 = HEAP32[(0 + 130588 | 0) >> 2] | 0;
     if (!$9_1) {
      break label$6
     }
     FUNCTION_TABLE[$9_1 | 0]($0_1, $6_1, $8_1);
     break label$4;
    }
    $477($0_1 | 0, $1_1 | 0, 0 | 0, $6_1 | 0, $8_1 | 0) | 0;
   }
   label$7 : {
    label$8 : {
     label$9 : {
      label$10 : {
       label$11 : {
        label$12 : {
         if (!$2_1) {
          break label$12
         }
         label$13 : {
          label$14 : {
           if (!(HEAP32[(0 + 130652 | 0) >> 2] | 0)) {
            break label$14
           }
           label$15 : {
            if (!(HEAP32[(0 + 130672 | 0) >> 2] | 0)) {
             break label$15
            }
            $16_1 = Math_fround(HEAPF32[(0 + 130676 | 0) >> 2]);
            label$16 : {
             label$17 : {
              if ($3_1) {
               break label$17
              }
              $10_1 = $3_1;
              break label$16;
             }
             label$18 : {
              if ($16_1 != Math_fround(1.0)) {
               break label$18
              }
              $10_1 = $3_1;
              break label$16;
             }
             $114_1 = Math_fround($16_1 * Math_fround($3_1 | 0));
             $16_1 = Math_fround(HEAPF32[(0 + 130692 | 0) >> 2]);
             $16_1 = Math_fround($114_1 + ($16_1 > Math_fround(0.0) ^ ($3_1 | 0) > (0 | 0) | 0 ? Math_fround(0.0) : $16_1));
             HEAPF32[(0 + 130692 | 0) >> 2] = $16_1;
             $18_1 = +$16_1;
             label$19 : {
              label$20 : {
               if (!($16_1 >= Math_fround(0.0))) {
                break label$20
               }
               $18_1 = +$528(+$18_1);
               break label$19;
              }
              $18_1 = +$525(+$18_1);
             }
             $16_1 = Math_fround(HEAPF32[(0 + 130692 | 0) >> 2]);
             label$21 : {
              label$22 : {
               if (!(Math_abs($18_1) < 2147483648.0)) {
                break label$22
               }
               $10_1 = ~~$18_1;
               break label$21;
              }
              $10_1 = -2147483648;
             }
             HEAPF32[(0 + 130692 | 0) >> 2] = Math_fround($16_1 - Math_fround($10_1 | 0));
             $16_1 = Math_fround(HEAPF32[(0 + 130676 | 0) >> 2]);
            }
            label$23 : {
             if ($4_1) {
              break label$23
             }
             $11_1 = $4_1;
             break label$10;
            }
            label$24 : {
             if ($16_1 != Math_fround(1.0)) {
              break label$24
             }
             $11_1 = $4_1;
             break label$10;
            }
            $154_1 = Math_fround($16_1 * Math_fround($4_1 | 0));
            $16_1 = Math_fround(HEAPF32[(0 + 130696 | 0) >> 2]);
            $16_1 = Math_fround($154_1 + ($16_1 > Math_fround(0.0) ^ ($4_1 | 0) > (0 | 0) | 0 ? Math_fround(0.0) : $16_1));
            HEAPF32[(0 + 130696 | 0) >> 2] = $16_1;
            $18_1 = +$16_1;
            label$25 : {
             if (!($16_1 >= Math_fround(0.0))) {
              break label$25
             }
             $18_1 = +$528(+$18_1);
             break label$13;
            }
            $18_1 = +$525(+$18_1);
            break label$13;
           }
           if (!(HEAP32[(0 + 130680 | 0) >> 2] | 0)) {
            break label$11
           }
           $12_1 = HEAP32[(0 + 130684 | 0) >> 2] | 0;
           if (($12_1 | 0) < (1 | 0)) {
            break label$11
           }
           $6_1 = 0;
           $9_1 = HEAP32[(0 + 130688 | 0) >> 2] | 0;
           label$26 : {
            label$27 : {
             if (($12_1 | 0) != (1 | 0)) {
              break label$27
             }
             $17_1 = Math_fround(HEAPF32[$9_1 >> 2]);
             break label$26;
            }
            $13_1 = $12_1 + -2 | 0;
            $16_1 = Math_fround($531(Math_fround(Math_fround(Math_fround(Math_imul($3_1, $3_1) >>> 0) + Math_fround(Math_imul($4_1, $4_1) >>> 0)))));
            label$28 : {
             label$29 : while (1) {
              $8_1 = $6_1;
              if (($6_1 | 0) >= ($13_1 | 0)) {
               break label$28
              }
              $6_1 = $6_1 + 2 | 0;
              if (!($16_1 < Math_fround(HEAPF32[($9_1 + ($6_1 << 2 | 0) | 0) >> 2]))) {
               continue label$29
              }
              break label$29;
             };
            }
            label$30 : {
             label$31 : {
              if (($8_1 | 0) != ($13_1 | 0)) {
               break label$31
              }
              $17_1 = Math_fround(HEAPF32[(($9_1 + ($12_1 << 2 | 0) | 0) + -4 | 0) >> 2]);
              break label$30;
             }
             label$32 : {
              $6_1 = $9_1 + ($8_1 << 2 | 0) | 0;
              $17_1 = Math_fround(HEAPF32[$6_1 >> 2]);
              if (!($16_1 <= $17_1)) {
               break label$32
              }
              $17_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
              break label$30;
             }
             $239_1 = Math_fround(Math_fround($16_1 - $17_1) / Math_fround(Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]) - $17_1));
             $17_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
             $17_1 = Math_fround(Math_fround($239_1 * Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) - $17_1)) + $17_1);
            }
            HEAPF64[($5_1 + 8 | 0) >> 3] = +$17_1;
            HEAPF64[$5_1 >> 3] = +$16_1;
            $447(83101 | 0, $5_1 | 0);
           }
           label$33 : {
            label$34 : {
             if ($3_1) {
              break label$34
             }
             $10_1 = $3_1;
             break label$33;
            }
            label$35 : {
             if ($17_1 != Math_fround(1.0)) {
              break label$35
             }
             $10_1 = $3_1;
             break label$33;
            }
            $16_1 = Math_fround(HEAPF32[(0 + 130692 | 0) >> 2]);
            $16_1 = Math_fround(Math_fround($17_1 * Math_fround($3_1 | 0)) + ($16_1 > Math_fround(0.0) ^ ($3_1 | 0) > (0 | 0) | 0 ? Math_fround(0.0) : $16_1));
            HEAPF32[(0 + 130692 | 0) >> 2] = $16_1;
            $18_1 = +$16_1;
            label$36 : {
             label$37 : {
              if (!($16_1 >= Math_fround(0.0))) {
               break label$37
              }
              $18_1 = +$528(+$18_1);
              break label$36;
             }
             $18_1 = +$525(+$18_1);
            }
            $16_1 = Math_fround(HEAPF32[(0 + 130692 | 0) >> 2]);
            label$38 : {
             label$39 : {
              if (!(Math_abs($18_1) < 2147483648.0)) {
               break label$39
              }
              $10_1 = ~~$18_1;
              break label$38;
             }
             $10_1 = -2147483648;
            }
            HEAPF32[(0 + 130692 | 0) >> 2] = Math_fround($16_1 - Math_fround($10_1 | 0));
           }
           label$40 : {
            if ($4_1) {
             break label$40
            }
            $11_1 = $4_1;
            break label$10;
           }
           label$41 : {
            if ($17_1 != Math_fround(1.0)) {
             break label$41
            }
            $11_1 = $4_1;
            break label$10;
           }
           $16_1 = Math_fround(HEAPF32[(0 + 130696 | 0) >> 2]);
           $16_1 = Math_fround(Math_fround($17_1 * Math_fround($4_1 | 0)) + ($16_1 > Math_fround(0.0) ^ ($4_1 | 0) > (0 | 0) | 0 ? Math_fround(0.0) : $16_1));
           HEAPF32[(0 + 130696 | 0) >> 2] = $16_1;
           $18_1 = +$16_1;
           label$42 : {
            if (!($16_1 >= Math_fround(0.0))) {
             break label$42
            }
            $18_1 = +$528(+$18_1);
            break label$13;
           }
           $18_1 = +$525(+$18_1);
           break label$13;
          }
          if (!(HEAP32[(0 + 130664 | 0) >> 2] | 0)) {
           break label$11
          }
          $16_1 = Math_fround(HEAPF32[(0 + 130668 | 0) >> 2]);
          label$43 : {
           label$44 : {
            if ($3_1) {
             break label$44
            }
            $10_1 = $3_1;
            break label$43;
           }
           label$45 : {
            if ($16_1 != Math_fround(1.0)) {
             break label$45
            }
            $10_1 = $3_1;
            break label$43;
           }
           $335_1 = Math_fround($16_1 * Math_fround($3_1 | 0));
           $16_1 = Math_fround(HEAPF32[(0 + 130692 | 0) >> 2]);
           $16_1 = Math_fround($335_1 + ($16_1 > Math_fround(0.0) ^ ($3_1 | 0) > (0 | 0) | 0 ? Math_fround(0.0) : $16_1));
           HEAPF32[(0 + 130692 | 0) >> 2] = $16_1;
           $18_1 = +$16_1;
           label$46 : {
            label$47 : {
             if (!($16_1 >= Math_fround(0.0))) {
              break label$47
             }
             $18_1 = +$528(+$18_1);
             break label$46;
            }
            $18_1 = +$525(+$18_1);
           }
           $16_1 = Math_fround(HEAPF32[(0 + 130692 | 0) >> 2]);
           label$48 : {
            label$49 : {
             if (!(Math_abs($18_1) < 2147483648.0)) {
              break label$49
             }
             $10_1 = ~~$18_1;
             break label$48;
            }
            $10_1 = -2147483648;
           }
           HEAPF32[(0 + 130692 | 0) >> 2] = Math_fround($16_1 - Math_fround($10_1 | 0));
           $16_1 = Math_fround(HEAPF32[(0 + 130668 | 0) >> 2]);
          }
          label$50 : {
           if ($4_1) {
            break label$50
           }
           $11_1 = $4_1;
           break label$10;
          }
          label$51 : {
           if ($16_1 != Math_fround(1.0)) {
            break label$51
           }
           $11_1 = $4_1;
           break label$10;
          }
          $375_1 = Math_fround($16_1 * Math_fround($4_1 | 0));
          $16_1 = Math_fround(HEAPF32[(0 + 130696 | 0) >> 2]);
          $16_1 = Math_fround($375_1 + ($16_1 > Math_fround(0.0) ^ ($4_1 | 0) > (0 | 0) | 0 ? Math_fround(0.0) : $16_1));
          HEAPF32[(0 + 130696 | 0) >> 2] = $16_1;
          $18_1 = +$16_1;
          label$52 : {
           if (!($16_1 >= Math_fround(0.0))) {
            break label$52
           }
           $18_1 = +$528(+$18_1);
           break label$13;
          }
          $18_1 = +$525(+$18_1);
         }
         $16_1 = Math_fround(HEAPF32[(0 + 130696 | 0) >> 2]);
         label$53 : {
          label$54 : {
           if (!(Math_abs($18_1) < 2147483648.0)) {
            break label$54
           }
           $11_1 = ~~$18_1;
           break label$53;
          }
          $11_1 = -2147483648;
         }
         HEAPF32[(0 + 130696 | 0) >> 2] = Math_fround($16_1 - Math_fround($11_1 | 0));
         break label$10;
        }
        $10_1 = 0;
        label$55 : {
         if (HEAP32[(0 + 130648 | 0) >> 2] | 0) {
          break label$55
         }
         $11_1 = 0;
         break label$9;
        }
        $11_1 = $4_1 - (HEAP32[(0 + 130636 | 0) >> 2] | 0) | 0;
        $10_1 = $3_1 - (HEAP32[(0 + 130632 | 0) >> 2] | 0) | 0;
        break label$8;
       }
       $10_1 = $3_1;
       $11_1 = $4_1;
      }
      $4_1 = (HEAP32[(0 + 130636 | 0) >> 2] | 0) + $11_1 | 0;
      $3_1 = (HEAP32[(0 + 130632 | 0) >> 2] | 0) + $10_1 | 0;
      if (HEAP32[(0 + 130648 | 0) >> 2] | 0) {
       break label$8
      }
     }
     HEAP32[(0 + 130648 | 0) >> 2] = 1;
     HEAP32[(0 + 130620 | 0) >> 2] = $4_1;
     HEAP32[(0 + 130616 | 0) >> 2] = $3_1;
     break label$7;
    }
    $6_1 = 0;
    if (!($10_1 | $11_1 | 0)) {
     break label$1
    }
   }
   label$56 : {
    if (!$7_1) {
     break label$56
    }
    $6_1 = 1;
    label$57 : {
     $9_1 = HEAP32[(0 + 130732 | 0) >> 2] | 0;
     if (($9_1 | 0) < (1 | 0)) {
      break label$57
     }
     $14_1 = $9_1 & 3 | 0;
     $13_1 = HEAP32[(0 + 130736 | 0) >> 2] | 0;
     $8_1 = 0;
     $6_1 = 0;
     label$58 : {
      if ($9_1 >>> 0 < 4 >>> 0) {
       break label$58
      }
      $15_1 = $9_1 & 2147483644 | 0;
      $8_1 = 0;
      $6_1 = 0;
      $12_1 = 0;
      label$59 : while (1) {
       $9_1 = $13_1 + ($6_1 << 3 | 0) | 0;
       $8_1 = HEAP32[($9_1 + 28 | 0) >> 2] | 0 | (HEAP32[($9_1 + 20 | 0) >> 2] | 0 | (HEAP32[($9_1 + 12 | 0) >> 2] | 0 | (HEAP32[($9_1 + 4 | 0) >> 2] | 0 | $8_1 | 0) | 0) | 0) | 0;
       $6_1 = $6_1 + 4 | 0;
       $12_1 = $12_1 + 4 | 0;
       if (($12_1 | 0) != ($15_1 | 0)) {
        continue label$59
       }
       break label$59;
      };
     }
     label$60 : {
      if (!$14_1) {
       break label$60
      }
      $9_1 = 0;
      label$61 : while (1) {
       $8_1 = HEAP32[(($13_1 + ($6_1 << 3 | 0) | 0) + 4 | 0) >> 2] | 0 | $8_1 | 0;
       $6_1 = $6_1 + 1 | 0;
       $9_1 = $9_1 + 1 | 0;
       if (($9_1 | 0) != ($14_1 | 0)) {
        continue label$61
       }
       break label$61;
      };
     }
     $6_1 = !$8_1;
    }
    $10_1 = $6_1 ? 0 : $10_1;
    $11_1 = $6_1 ? 0 : $11_1;
   }
   $6_1 = HEAP32[(0 + 130652 | 0) >> 2] | 0;
   HEAP32[(0 + 130620 | 0) >> 2] = (wasm2js_i32$0 = (HEAP32[(0 + 130620 | 0) >> 2] | 0) + $11_1 | 0, wasm2js_i32$1 = $4_1, wasm2js_i32$2 = $6_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   HEAP32[(0 + 130616 | 0) >> 2] = (wasm2js_i32$0 = (HEAP32[(0 + 130616 | 0) >> 2] | 0) + $10_1 | 0, wasm2js_i32$1 = $3_1, wasm2js_i32$2 = $6_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   label$62 : {
    if (!$0_1) {
     break label$62
    }
    if ((HEAPU8[($0_1 + 49 | 0) >> 0] | 0) & 64 | 0) {
     break label$62
    }
    HEAP32[($5_1 + 92 | 0) >> 2] = 0;
    HEAP32[($5_1 + 88 | 0) >> 2] = 0;
    $13_1 = $957($0_1 | 0) | 0;
    $955($0_1 | 0, $5_1 + 92 | 0 | 0, $5_1 + 88 | 0 | 0);
    $12_1 = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
    $6_1 = $12_1 + -1 | 0;
    HEAP32[($5_1 + 92 | 0) >> 2] = $6_1;
    $0_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
    HEAP32[($5_1 + 88 | 0) >> 2] = $0_1 + -1 | 0;
    $8_1 = 0;
    $9_1 = 0;
    label$63 : {
     if (!$13_1) {
      break label$63
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $12_1;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$1 = 0;
     HEAP32[($5_1 + 16 | 0) >> 2] = 0;
     HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$1;
     label$64 : {
      if ($492($13_1 | 0, $5_1 + 16 | 0 | 0, $5_1 + 72 | 0 | 0) | 0) {
       break label$64
      }
      $8_1 = 0;
      $6_1 = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
      $9_1 = 0;
      break label$63;
     }
     $8_1 = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
     $6_1 = ($8_1 + (HEAP32[($5_1 + 80 | 0) >> 2] | 0) | 0) + -1 | 0;
     HEAP32[($5_1 + 92 | 0) >> 2] = $6_1;
     $9_1 = HEAP32[($5_1 + 76 | 0) >> 2] | 0;
     HEAP32[($5_1 + 88 | 0) >> 2] = ($9_1 + (HEAP32[($5_1 + 84 | 0) >> 2] | 0) | 0) + -1 | 0;
    }
    $13_1 = HEAP32[(0 + 130616 | 0) >> 2] | 0;
    $12_1 = ($13_1 | 0) < ($6_1 | 0) ? $13_1 : $6_1;
    label$65 : {
     label$66 : {
      if (($13_1 | 0) > ($6_1 | 0)) {
       break label$66
      }
      if (($12_1 | 0) >= ($8_1 | 0)) {
       break label$65
      }
     }
     HEAP32[(0 + 130616 | 0) >> 2] = ($12_1 | 0) > ($8_1 | 0) ? $12_1 : $8_1;
    }
    $6_1 = HEAP32[(0 + 130620 | 0) >> 2] | 0;
    $8_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
    $13_1 = ($6_1 | 0) < ($8_1 | 0) ? $6_1 : $8_1;
    label$67 : {
     label$68 : {
      if (($6_1 | 0) > ($8_1 | 0)) {
       break label$68
      }
      if (($13_1 | 0) >= ($9_1 | 0)) {
       break label$67
      }
     }
     HEAP32[(0 + 130620 | 0) >> 2] = ($13_1 | 0) > ($9_1 | 0) ? $13_1 : $9_1;
    }
    $6_1 = HEAP32[(0 + 130652 | 0) >> 2] | 0;
   }
   HEAP32[(0 + 130624 | 0) >> 2] = (HEAP32[(0 + 130624 | 0) >> 2] | 0) + $10_1 | 0;
   HEAP32[(0 + 130628 | 0) >> 2] = (HEAP32[(0 + 130628 | 0) >> 2] | 0) + $11_1 | 0;
   label$69 : {
    if (!(HEAP32[(0 + 130760 | 0) >> 2] | 0)) {
     break label$69
    }
    if ($6_1) {
     break label$69
    }
    $6_1 = HEAP32[(0 + 130580 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$69
    }
    $8_1 = HEAP32[(0 + 130756 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$69
    }
    FUNCTION_TABLE[$6_1 | 0]($8_1);
   }
   $6_1 = 0;
   label$70 : {
    if (($321(1024 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
     break label$70
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = 1024;
    $8_1 = 0;
    $6_1 = 0;
    label$71 : {
     $9_1 = HEAP32[(0 + 130612 | 0) >> 2] | 0;
     if (!$9_1) {
      break label$71
     }
     $6_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
    }
    HEAP32[(0 + 130716 | 0) >> 2] = $7_1;
    HEAP32[($5_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($5_1 + 24 | 0) >> 2] = $6_1;
    label$72 : {
     $9_1 = HEAP32[(0 + 130732 | 0) >> 2] | 0;
     if (($9_1 | 0) < (1 | 0)) {
      break label$72
     }
     $1_1 = $9_1 & 3 | 0;
     $13_1 = 0;
     $12_1 = HEAP32[(0 + 130736 | 0) >> 2] | 0;
     $8_1 = 0;
     $6_1 = 0;
     label$73 : {
      if ($9_1 >>> 0 < 4 >>> 0) {
       break label$73
      }
      $14_1 = $9_1 & 2147483644 | 0;
      $8_1 = 0;
      $6_1 = 0;
      $0_1 = 0;
      label$74 : while (1) {
       $9_1 = $12_1 + ($6_1 << 3 | 0) | 0;
       $8_1 = HEAP32[($9_1 + 28 | 0) >> 2] | 0 | (HEAP32[($9_1 + 20 | 0) >> 2] | 0 | (HEAP32[($9_1 + 12 | 0) >> 2] | 0 | (HEAP32[($9_1 + 4 | 0) >> 2] | 0 | $8_1 | 0) | 0) | 0) | 0;
       $6_1 = $6_1 + 4 | 0;
       $0_1 = $0_1 + 4 | 0;
       if (($0_1 | 0) != ($14_1 | 0)) {
        continue label$74
       }
       break label$74;
      };
     }
     if (!$1_1) {
      break label$72
     }
     label$75 : while (1) {
      $8_1 = HEAP32[(($12_1 + ($6_1 << 3 | 0) | 0) + 4 | 0) >> 2] | 0 | $8_1 | 0;
      $6_1 = $6_1 + 1 | 0;
      $13_1 = $13_1 + 1 | 0;
      if (($13_1 | 0) != ($1_1 | 0)) {
       continue label$75
      }
      break label$75;
     };
    }
    HEAP32[($5_1 + 32 | 0) >> 2] = $8_1;
    HEAP32[($5_1 + 48 | 0) >> 2] = $11_1;
    HEAP32[($5_1 + 44 | 0) >> 2] = $10_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 130616 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 130620 | 0) >> 2] | 0;
    $692_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1;
    HEAP32[($5_1 + 36 | 0) >> 2] = $692_1;
    HEAP32[($5_1 + 40 | 0) >> 2] = i64toi32_i32$0;
    $6_1 = ($327($5_1 + 16 | 0 | 0) | 0 | 0) > (0 | 0);
   }
   HEAP32[(0 + 130632 | 0) >> 2] = (wasm2js_i32$0 = HEAP32[(0 + 130616 | 0) >> 2] | 0, wasm2js_i32$1 = $3_1, wasm2js_i32$2 = $2_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   HEAP32[(0 + 130636 | 0) >> 2] = (wasm2js_i32$0 = HEAP32[(0 + 130620 | 0) >> 2] | 0, wasm2js_i32$1 = $4_1, wasm2js_i32$2 = $2_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  }
  global$0 = $5_1 + 96 | 0;
  return $6_1 | 0;
 }
 
 function $478($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $9_1 = 0, $7_1 = 0, $5_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$2 = 0, $208_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  $7_1 = HEAP32[(0 + 130736 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $8_1 = HEAP32[(0 + 130732 | 0) >> 2] | 0;
     if (($8_1 | 0) <= (0 | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : while (1) {
       $9_1 = $7_1 + ($6_1 << 3 | 0) | 0;
       if ((HEAP32[$9_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
        break label$4
       }
       $6_1 = $6_1 + 1 | 0;
       if (($6_1 | 0) == ($8_1 | 0)) {
        break label$3
       }
       continue label$5;
      };
     }
     $7_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
     break label$2;
    }
    label$6 : {
     $6_1 = $458($7_1 | 0, ($8_1 << 3 | 0) + 8 | 0 | 0) | 0;
     if ($6_1) {
      break label$6
     }
     $6_1 = 0;
     break label$1;
    }
    $7_1 = 0;
    HEAP32[(0 + 130736 | 0) >> 2] = $6_1;
    $9_1 = HEAP32[(0 + 130732 | 0) >> 2] | 0;
    HEAP32[(0 + 130732 | 0) >> 2] = $9_1 + 1 | 0;
    $9_1 = $6_1 + ($9_1 << 3 | 0) | 0;
    HEAP32[($9_1 + 4 | 0) >> 2] = 0;
    HEAP32[$9_1 >> 2] = $1_1;
   }
   $6_1 = 0;
   label$7 : {
    label$8 : {
     if (!(HEAP32[(0 + 130712 | 0) >> 2] | 0)) {
      break label$8
     }
     if (($1_1 | 0) == (-1 | 0)) {
      break label$8
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$8
     }
     HEAP8[(0 + 130768 | 0) >> 0] = ($2_1 | 0) == (1 | 0);
     if (!$0_1) {
      break label$7
     }
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = 0;
     $857(-1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $0_1 | 0, ($2_1 | 0) == (1 | 0) | 0, Math_fround(Math_fround(Math_fround(HEAP32[(0 + 130616 | 0) >> 2] | 0 | 0) / Math_fround(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(Math_fround(HEAP32[(0 + 130620 | 0) >> 2] | 0 | 0) / Math_fround(HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(1.0))) | 0;
     break label$7;
    }
    if (($1_1 | 0) != (-1 | 0)) {
     break label$7
    }
    if (!(HEAP32[(0 + 130708 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   $6_1 = 0;
   label$9 : {
    label$10 : {
     switch ($2_1 | 0) {
     case 0:
      $10_1 = 0;
      $11_1 = ($0_1 | 0) != (0 | 0);
      $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $3_1 + -1 | 0 | 0) | 0) | 0;
      $8_1 = 1026;
      break label$9;
     case 1:
      break label$10;
     default:
      break label$1;
     };
    }
    $10_1 = 1;
    $7_1 = $7_1 | (1 << ($3_1 + -1 | 0) | 0) | 0;
    $8_1 = 1025;
    label$12 : {
     if ($0_1) {
      break label$12
     }
     $11_1 = 0;
     break label$9;
    }
    $10_1 = 1;
    $476($0_1 | 0, HEAP32[(0 + 130616 | 0) >> 2] | 0 | 0, HEAP32[(0 + 130620 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
    $11_1 = 1;
   }
   if (($7_1 | 0) == (HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   HEAP32[($9_1 + 4 | 0) >> 2] = $7_1;
   label$13 : {
    if (($4_1 | 0) > (-1 | 0)) {
     break label$13
    }
    $9_1 = HEAP32[(0 + 130744 | 0) >> 2] | 0;
    label$14 : {
     if ((HEAP32[(0 + 130740 | 0) >> 2] | 0 | 0) > ($3_1 | 0)) {
      break label$14
     }
     $4_1 = 1;
     $7_1 = $3_1 + 1 | 0;
     $9_1 = $458($9_1 | 0, $7_1 << 4 | 0 | 0) | 0;
     if (!$9_1) {
      break label$13
     }
     HEAP32[(0 + 130744 | 0) >> 2] = $9_1;
     label$15 : {
      $6_1 = HEAP32[(0 + 130740 | 0) >> 2] | 0;
      if (($6_1 | 0) > ($3_1 | 0)) {
       break label$15
      }
      label$16 : while (1) {
       $536((HEAP32[(0 + 130744 | 0) >> 2] | 0) + ($6_1 << 4 | 0) | 0 | 0, 0 | 0, 16 | 0) | 0;
       $9_1 = ($6_1 | 0) != ($3_1 | 0);
       $6_1 = $6_1 + 1 | 0;
       if ($9_1) {
        continue label$16
       }
       break label$16;
      };
      $9_1 = HEAP32[(0 + 130744 | 0) >> 2] | 0;
     }
     HEAP32[(0 + 130740 | 0) >> 2] = $7_1;
    }
    label$17 : {
     if ($9_1) {
      break label$17
     }
     $4_1 = 1;
     break label$13;
    }
    $6_1 = $9_1 + ($3_1 << 4 | 0) | 0;
    label$18 : {
     label$19 : {
      if ($10_1) {
       break label$19
      }
      $9_1 = HEAPU8[($6_1 + 12 | 0) >> 0] | 0;
      break label$18;
     }
     $9_1 = $853() | 0;
     $7_1 = 0;
     label$20 : {
      label$21 : {
       label$22 : {
        if ((((HEAP32[($6_1 + 8 | 0) >> 2] | 0) - $9_1 | 0) + (HEAP32[(0 + 130700 | 0) >> 2] | 0) | 0 | 0) < (1 | 0)) {
         break label$22
        }
        if (($532((HEAP32[(0 + 130616 | 0) >> 2] | 0) - (HEAP32[$6_1 >> 2] | 0) | 0 | 0) | 0 | 0) > (HEAP32[(0 + 130704 | 0) >> 2] | 0 | 0)) {
         break label$22
        }
        if (($532((HEAP32[(0 + 130620 | 0) >> 2] | 0) - (HEAP32[($6_1 + 4 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) <= (HEAP32[(0 + 130704 | 0) >> 2] | 0 | 0)) {
         break label$21
        }
       }
       HEAP32[($6_1 + 8 | 0) >> 2] = $9_1;
       HEAP32[$6_1 >> 2] = HEAP32[(0 + 130616 | 0) >> 2] | 0;
       HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[(0 + 130620 | 0) >> 2] | 0;
       break label$20;
      }
      HEAP32[($6_1 + 8 | 0) >> 2] = $9_1;
      HEAP32[$6_1 >> 2] = HEAP32[(0 + 130616 | 0) >> 2] | 0;
      HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[(0 + 130620 | 0) >> 2] | 0;
      $9_1 = 255;
      $7_1 = HEAPU8[($6_1 + 12 | 0) >> 0] | 0;
      if (($7_1 | 0) == (255 | 0)) {
       break label$18
      }
     }
     $9_1 = $7_1 + 1 | 0;
     HEAP8[($6_1 + 12 | 0) >> 0] = $9_1;
    }
    $4_1 = $9_1 & 255 | 0;
   }
   $6_1 = 0;
   label$23 : {
    if (($321($8_1 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
     break label$23
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = $8_1;
    $6_1 = 0;
    label$24 : {
     $9_1 = HEAP32[(0 + 130612 | 0) >> 2] | 0;
     if (!$9_1) {
      break label$24
     }
     $6_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
    }
    HEAP8[($5_1 + 25 | 0) >> 0] = $2_1;
    HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($5_1 + 16 | 0) >> 2] = $6_1;
    HEAP8[($5_1 + 24 | 0) >> 0] = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 130616 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 130620 | 0) >> 2] | 0;
    $208_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1;
    HEAP32[($5_1 + 28 | 0) >> 2] = $208_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($5_1 + 26 | 0) >> 0] = $4_1 >>> 0 < 255 >>> 0 ? $4_1 : 255;
    $6_1 = ($327($5_1 + 8 | 0 | 0) | 0 | 0) > (0 | 0);
   }
   label$25 : {
    if (($2_1 | 0) != (0 | 0) | ($11_1 ^ 1 | 0) | 0) {
     break label$25
    }
    $476($0_1 | 0, HEAP32[(0 + 130616 | 0) >> 2] | 0 | 0, HEAP32[(0 + 130620 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
   }
   if (!(HEAP32[(0 + 130720 | 0) >> 2] | 0)) {
    break label$1
   }
   $471(0 | 0) | 0;
  }
  global$0 = $5_1 + 64 | 0;
  return $6_1 | 0;
 }
 
 function $479($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $478($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, -1 | 0) | 0 | 0;
 }
 
 function $480($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  var $9_1 = Math_fround(0), $6_1 = 0, $5_1 = 0, $10_1 = 0.0, $7_1 = 0, $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $6_1 = HEAP32[(0 + 130612 | 0) >> 2] | 0;
   if (($6_1 | 0) == ($0_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$6_1) {
     break label$2
    }
    $975($6_1 | 0, 11 | 0, 0 | 0, 0 | 0) | 0;
   }
   HEAP32[(0 + 130612 | 0) >> 2] = $0_1;
   HEAP32[(0 + 130648 | 0) >> 2] = 0;
   $975($0_1 | 0, 10 | 0, 0 | 0, 0 | 0) | 0;
   $6_1 = HEAP32[(0 + 130756 | 0) >> 2] | 0;
   if (!$6_1) {
    break label$1
   }
   $0_1 = HEAP32[(0 + 130576 | 0) >> 2] | 0;
   label$3 : {
    $6_1 = (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = HEAP32[(0 + 130752 | 0) >> 2] | 0, wasm2js_i32$2 = HEAP32[(0 + 130612 | 0) >> 2] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    if (!$6_1) {
     break label$3
    }
    if (!(HEAP32[(0 + 130760 | 0) >> 2] | 0)) {
     break label$3
    }
    if (HEAP32[(0 + 130652 | 0) >> 2] | 0) {
     break label$3
    }
    if (!$0_1) {
     break label$1
    }
    FUNCTION_TABLE[$0_1 | 0]($6_1) | 0;
    break label$1;
   }
   if (!$0_1) {
    break label$1
   }
   FUNCTION_TABLE[$0_1 | 0](0) | 0;
  }
  label$4 : {
   label$5 : {
    if ($2_1 != Math_fround(0.0)) {
     break label$5
    }
    $0_1 = 0;
    if ($3_1 == Math_fround(0.0)) {
     break label$4
    }
   }
   label$6 : {
    label$7 : {
     if (!($2_1 > Math_fround(0.0))) {
      break label$7
     }
     $9_1 = Math_fround(HEAPF32[(0 + 130640 | 0) >> 2]);
     if (!($9_1 < Math_fround(0.0))) {
      break label$6
     }
     $9_1 = Math_fround(0.0);
     break label$6;
    }
    $9_1 = Math_fround(HEAPF32[(0 + 130640 | 0) >> 2]);
    $9_1 = $2_1 < Math_fround(0.0) ? ($9_1 > Math_fround(0.0) ? Math_fround(0.0) : $9_1) : $9_1;
   }
   $6_1 = 0;
   $9_1 = Math_fround($2_1 + $9_1);
   HEAPF32[(0 + 130640 | 0) >> 2] = $9_1;
   label$8 : {
    label$9 : {
     label$10 : {
      if (!($9_1 > Math_fround(0.0))) {
       break label$10
      }
      $10_1 = +$528(+(+$9_1));
      if (!(Math_abs($10_1) < 2147483648.0)) {
       break label$9
      }
      $6_1 = ~~$10_1;
      break label$8;
     }
     if (!($9_1 < Math_fround(0.0))) {
      break label$8
     }
     $10_1 = +$525(+(+$9_1));
     if (!(Math_abs($10_1) < 2147483648.0)) {
      break label$9
     }
     $6_1 = ~~$10_1;
     break label$8;
    }
    $6_1 = -2147483648;
   }
   HEAPF32[(0 + 130640 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(0 + 130640 | 0) >> 2]) - Math_fround($6_1 | 0));
   label$11 : {
    label$12 : {
     if (!($3_1 > Math_fround(0.0))) {
      break label$12
     }
     $9_1 = Math_fround(HEAPF32[(0 + 130644 | 0) >> 2]);
     if (!($9_1 < Math_fround(0.0))) {
      break label$11
     }
     $9_1 = Math_fround(0.0);
     break label$11;
    }
    $9_1 = Math_fround(HEAPF32[(0 + 130644 | 0) >> 2]);
    $9_1 = $3_1 < Math_fround(0.0) ? ($9_1 > Math_fround(0.0) ? Math_fround(0.0) : $9_1) : $9_1;
   }
   $7_1 = 0;
   $9_1 = Math_fround($3_1 + $9_1);
   HEAPF32[(0 + 130644 | 0) >> 2] = $9_1;
   label$13 : {
    label$14 : {
     label$15 : {
      if (!($9_1 > Math_fround(0.0))) {
       break label$15
      }
      $10_1 = +$528(+(+$9_1));
      if (!(Math_abs($10_1) < 2147483648.0)) {
       break label$14
      }
      $7_1 = ~~$10_1;
      break label$13;
     }
     if (!($9_1 < Math_fround(0.0))) {
      break label$13
     }
     $10_1 = +$525(+(+$9_1));
     if (!(Math_abs($10_1) < 2147483648.0)) {
      break label$14
     }
     $7_1 = ~~$10_1;
     break label$13;
    }
    $7_1 = -2147483648;
   }
   $0_1 = 0;
   HEAPF32[(0 + 130644 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(0 + 130644 | 0) >> 2]) - Math_fround($7_1 | 0));
   if (($321(1027 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$4
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = 1027;
   $0_1 = 0;
   label$16 : {
    $8_1 = HEAP32[(0 + 130612 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$16
    }
    $0_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
   }
   HEAPF32[($5_1 + 40 | 0) >> 2] = $3_1;
   HEAPF32[($5_1 + 36 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 28 | 0) >> 2] = $7_1;
   HEAP32[($5_1 + 24 | 0) >> 2] = $6_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($5_1 + 32 | 0) >> 2] = $4_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 130620 | 0) >> 2] | 0;
   HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 130616 | 0) >> 2] | 0;
   HEAP32[($5_1 + 48 | 0) >> 2] = i64toi32_i32$1;
   $0_1 = ($327($5_1 + 8 | 0 | 0) | 0 | 0) > (0 | 0);
  }
  global$0 = $5_1 + 64 | 0;
  return $0_1 | 0;
 }
 
 function $481() {
  var $1_1 = 0, $0_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   if (!(HEAP32[(0 + 130600 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[(0 + 130724 | 0) >> 2] = 0;
   $471(0 | 0) | 0;
   $0_1 = HEAP32[(0 + 130600 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $1_1 = HEAP32[(0 + 130728 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($1_1 + 48 | 0) >> 2] = (HEAP32[($1_1 + 48 | 0) >> 2] | 0) & -16385 | 0;
   HEAP32[(0 + 130728 | 0) >> 2] = 0;
   if ((FUNCTION_TABLE[$0_1 | 0](0) | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 16384 | 0;
   HEAP32[(0 + 130728 | 0) >> 2] = $1_1;
  }
  $482(0 | 0) | 0;
  $1_1 = HEAP32[(0 + 130760 | 0) >> 2] | 0;
  HEAP32[(0 + 130760 | 0) >> 2] = 1;
  label$2 : {
   if (($1_1 | 0) == (1 | 0)) {
    break label$2
   }
   $0_1 = HEAP32[(0 + 130756 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$2
   }
   $1_1 = HEAP32[(0 + 130576 | 0) >> 2] | 0;
   label$3 : {
    $0_1 = (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = HEAP32[(0 + 130752 | 0) >> 2] | 0, wasm2js_i32$2 = HEAP32[(0 + 130612 | 0) >> 2] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    if (!$0_1) {
     break label$3
    }
    if (HEAP32[(0 + 130652 | 0) >> 2] | 0) {
     break label$3
    }
    if (!$1_1) {
     break label$2
    }
    FUNCTION_TABLE[$1_1 | 0]($0_1) | 0;
    break label$2;
   }
   if (!$1_1) {
    break label$2
   }
   FUNCTION_TABLE[$1_1 | 0](0) | 0;
  }
  label$4 : {
   $2_1 = HEAP32[(0 + 130748 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$4
   }
   label$5 : while (1) {
    $3_1 = $2_1;
    $2_1 = HEAP32[$3_1 >> 2] | 0;
    label$6 : {
     $1_1 = HEAP32[(0 + 130752 | 0) >> 2] | 0;
     if (($3_1 | 0) == ($1_1 | 0)) {
      break label$6
     }
     label$7 : {
      $0_1 = HEAP32[(0 + 130756 | 0) >> 2] | 0;
      if (($3_1 | 0) != ($0_1 | 0)) {
       break label$7
      }
      label$8 : {
       label$9 : {
        if (!$1_1) {
         break label$9
        }
        HEAP32[(0 + 130756 | 0) >> 2] = $1_1;
        break label$8;
       }
       $1_1 = HEAP32[(0 + 130612 | 0) >> 2] | 0 ? $0_1 : 0;
      }
      $0_1 = HEAP32[(0 + 130576 | 0) >> 2] | 0;
      label$10 : {
       if (!$1_1) {
        break label$10
       }
       if (!(HEAP32[(0 + 130760 | 0) >> 2] | 0)) {
        break label$10
       }
       if (HEAP32[(0 + 130652 | 0) >> 2] | 0) {
        break label$10
       }
       if (!$0_1) {
        break label$7
       }
       FUNCTION_TABLE[$0_1 | 0]($1_1) | 0;
       break label$7;
      }
      if (!$0_1) {
       break label$7
      }
      FUNCTION_TABLE[$0_1 | 0](0) | 0;
     }
     $0_1 = 0;
     $1_1 = 130748;
     label$11 : while (1) {
      $4_1 = $0_1;
      $1_1 = HEAP32[$1_1 >> 2] | 0;
      if (!$1_1) {
       break label$6
      }
      $0_1 = $1_1;
      if (($1_1 | 0) != ($3_1 | 0)) {
       continue label$11
      }
      break label$11;
     };
     HEAP32[($4_1 ? $4_1 : 130748) >> 2] = HEAP32[$1_1 >> 2] | 0;
     $0_1 = HEAP32[(0 + 130584 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$6
     }
     FUNCTION_TABLE[$0_1 | 0]($1_1);
    }
    if ($2_1) {
     continue label$5
    }
    break label$5;
   };
  }
  HEAP32[(0 + 130756 | 0) >> 2] = 0;
  HEAP32[(0 + 130748 | 0) >> 2] = 0;
  label$12 : {
   $1_1 = HEAP32[(0 + 130752 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$12
   }
   $0_1 = HEAP32[(0 + 130584 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$12
   }
   FUNCTION_TABLE[$0_1 | 0]($1_1);
   HEAP32[(0 + 130752 | 0) >> 2] = 0;
  }
  label$13 : {
   $1_1 = HEAP32[(0 + 130736 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$13
   }
   $459($1_1 | 0);
   HEAP32[(0 + 130736 | 0) >> 2] = 0;
  }
  HEAP32[(0 + 130732 | 0) >> 2] = 0;
  label$14 : {
   $1_1 = HEAP32[(0 + 130744 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$14
   }
   $459($1_1 | 0);
   HEAP32[(0 + 130744 | 0) >> 2] = 0;
  }
  HEAP32[(0 + 130740 | 0) >> 2] = 0;
  label$15 : {
   $1_1 = HEAP32[(0 + 130688 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$15
   }
   $459($1_1 | 0);
   HEAP32[(0 + 130688 | 0) >> 2] = 0;
  }
  HEAP32[(0 + 130684 | 0) >> 2] = 0;
  $385(76852 | 0, 48 | 0, 130568 | 0);
  $385(75186 | 0, 49 | 0, 130568 | 0);
  $385(77056 | 0, 50 | 0, 130568 | 0);
  $385(77085 | 0, 51 | 0, 130568 | 0);
  $385(77024 | 0, 52 | 0, 130568 | 0);
  $385(75266 | 0, 53 | 0, 130568 | 0);
  $385(75243 | 0, 54 | 0, 130568 | 0);
  $385(76806 | 0, 55 | 0, 130568 | 0);
  $385(76094 | 0, 56 | 0, 130568 | 0);
 }
 
 function $482($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = 0;
  $2_1 = $439() | 0;
  label$1 : {
   if (($0_1 | 0) == (HEAP32[(0 + 130652 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      if ($0_1) {
       break label$4
      }
      if (!(HEAP32[(0 + 130656 | 0) >> 2] | 0)) {
       break label$4
      }
      HEAP32[(0 + 130656 | 0) >> 2] = 0;
      break label$3;
     }
     label$5 : {
      label$6 : {
       label$7 : {
        if (!$0_1) {
         break label$7
        }
        label$8 : {
         if (!(HEAP32[(0 + 130588 | 0) >> 2] | 0)) {
          break label$8
         }
         if ($383(75876 | 0, 0 | 0) | 0) {
          break label$6
         }
        }
        label$9 : {
         $1_1 = HEAP32[(0 + 130596 | 0) >> 2] | 0;
         if (!$1_1) {
          break label$9
         }
         if ((FUNCTION_TABLE[$1_1 | 0]($0_1) | 0 | 0) > (-1 | 0)) {
          break label$5
         }
        }
        if (HEAP32[(0 + 130588 | 0) >> 2] | 0) {
         break label$6
        }
        return $260(72843 | 0, 0 | 0) | 0 | 0;
       }
       $0_1 = HEAP32[(0 + 130596 | 0) >> 2] | 0;
       if (!$0_1) {
        break label$3
       }
       FUNCTION_TABLE[$0_1 | 0](0) | 0;
       break label$3;
      }
      HEAP32[(0 + 130656 | 0) >> 2] = 1;
     }
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$1 + 130692 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 130696 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[(0 + 130652 | 0) >> 2] = $0_1;
     label$10 : {
      if (!(HEAP32[(0 + 130756 | 0) >> 2] | 0)) {
       break label$10
      }
      $0_1 = HEAP32[(0 + 130576 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$10
      }
      FUNCTION_TABLE[$0_1 | 0](0) | 0;
     }
     if (!$2_1) {
      break label$2
     }
     label$11 : {
      $0_1 = HEAP32[(0 + 130612 | 0) >> 2] | 0;
      if (($0_1 | 0) == ($2_1 | 0)) {
       break label$11
      }
      label$12 : {
       if (!$0_1) {
        break label$12
       }
       $975($0_1 | 0, 11 | 0, 0 | 0, 0 | 0) | 0;
      }
      HEAP32[(0 + 130612 | 0) >> 2] = $2_1;
      HEAP32[(0 + 130648 | 0) >> 2] = 0;
      $975($2_1 | 0, 10 | 0, 0 | 0, 0 | 0) | 0;
      $1_1 = HEAP32[(0 + 130756 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$11
      }
      $0_1 = HEAP32[(0 + 130576 | 0) >> 2] | 0;
      label$13 : {
       $1_1 = (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = HEAP32[(0 + 130752 | 0) >> 2] | 0, wasm2js_i32$2 = HEAP32[(0 + 130612 | 0) >> 2] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
       if (!$1_1) {
        break label$13
       }
       if (!(HEAP32[(0 + 130760 | 0) >> 2] | 0)) {
        break label$13
       }
       if (HEAP32[(0 + 130652 | 0) >> 2] | 0) {
        break label$13
       }
       if (!$0_1) {
        break label$11
       }
       FUNCTION_TABLE[$0_1 | 0]($1_1) | 0;
       break label$11;
      }
      if (!$0_1) {
       break label$11
      }
      FUNCTION_TABLE[$0_1 | 0](0) | 0;
     }
     label$14 : {
      if (!(HEAP32[(0 + 130656 | 0) >> 2] | 0)) {
       break label$14
      }
      $0_1 = (HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
      $1_1 = (HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
      if ((HEAPU8[($2_1 + 48 | 0) >> 0] | 0) & 64 | 0) {
       break label$14
      }
      HEAP32[(0 + 130636 | 0) >> 2] = $0_1;
      HEAP32[(0 + 130632 | 0) >> 2] = $1_1;
      HEAP32[(0 + 130648 | 0) >> 2] = 0;
      label$15 : {
       $3_1 = HEAP32[(0 + 130588 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$15
       }
       FUNCTION_TABLE[$3_1 | 0]($2_1, $1_1, $0_1);
       break label$14;
      }
      $477($2_1 | 0, HEAP32[(0 + 130608 | 0) >> 2] | 0 | 0, 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
     }
     $949($2_1 | 0);
     $471(0 | 0) | 0;
     break label$2;
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$1 + 130692 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 130696 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(0 + 130652 | 0) >> 2] = 0;
    label$16 : {
     if (!$2_1) {
      break label$16
     }
     $949($2_1 | 0);
     label$17 : {
      if ((HEAPU8[($2_1 + 48 | 0) >> 0] | 0) & 64 | 0) {
       break label$17
      }
      $0_1 = HEAP32[(0 + 130616 | 0) >> 2] | 0;
      $1_1 = HEAP32[(0 + 130620 | 0) >> 2] | 0;
      HEAP32[(0 + 130636 | 0) >> 2] = $1_1;
      HEAP32[(0 + 130632 | 0) >> 2] = $0_1;
      HEAP32[(0 + 130648 | 0) >> 2] = 0;
      label$18 : {
       $3_1 = HEAP32[(0 + 130588 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$18
       }
       label$19 : {
        if (!(HEAP32[(0 + 130652 | 0) >> 2] | 0)) {
         break label$19
        }
        if (!(HEAP32[(0 + 130656 | 0) >> 2] | 0)) {
         break label$18
        }
       }
       FUNCTION_TABLE[$3_1 | 0]($2_1, $0_1, $1_1);
       break label$17;
      }
      $477($2_1 | 0, HEAP32[(0 + 130608 | 0) >> 2] | 0 | 0, 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
     }
     $471(0 | 0) | 0;
    }
    $2_1 = HEAP32[(0 + 130756 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    $0_1 = HEAP32[(0 + 130576 | 0) >> 2] | 0;
    label$20 : {
     $2_1 = (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = HEAP32[(0 + 130752 | 0) >> 2] | 0, wasm2js_i32$2 = HEAP32[(0 + 130612 | 0) >> 2] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     if (!$2_1) {
      break label$20
     }
     if (!(HEAP32[(0 + 130760 | 0) >> 2] | 0)) {
      break label$20
     }
     if (HEAP32[(0 + 130652 | 0) >> 2] | 0) {
      break label$20
     }
     if (!$0_1) {
      break label$2
     }
     FUNCTION_TABLE[$0_1 | 0]($2_1) | 0;
     break label$2;
    }
    if (!$0_1) {
     break label$2
    }
    FUNCTION_TABLE[$0_1 | 0](0) | 0;
   }
   $325(1024 | 0);
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $483($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAP32[(0 + 130600 | 0) >> 2] | 0) {
    break label$1
   }
   return $262(4 | 0) | 0 | 0;
  }
  label$2 : {
   if (!$0_1) {
    break label$2
   }
   if ($439() | 0) {
    break label$2
   }
   return $260(67946 | 0, 0 | 0) | 0 | 0;
  }
  HEAP32[(0 + 130724 | 0) >> 2] = $0_1;
  return $471(0 | 0) | 0 | 0;
 }
 
 function $484($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $7_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = HEAP32[(0 + 130616 | 0) >> 2] | 0;
  }
  label$2 : {
   if (!$1_1) {
    break label$2
   }
   HEAP32[$1_1 >> 2] = HEAP32[(0 + 130620 | 0) >> 2] | 0;
  }
  $0_1 = 0;
  label$3 : {
   $2_1 = HEAP32[(0 + 130732 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$3
   }
   $3_1 = $2_1 & 3 | 0;
   $4_1 = 0;
   $5_1 = HEAP32[(0 + 130736 | 0) >> 2] | 0;
   $0_1 = 0;
   $1_1 = 0;
   label$4 : {
    if ($2_1 >>> 0 < 4 >>> 0) {
     break label$4
    }
    $6_1 = $2_1 & 2147483644 | 0;
    $0_1 = 0;
    $1_1 = 0;
    $7_1 = 0;
    label$5 : while (1) {
     $2_1 = $5_1 + ($1_1 << 3 | 0) | 0;
     $0_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0 | (HEAP32[($2_1 + 20 | 0) >> 2] | 0 | (HEAP32[($2_1 + 12 | 0) >> 2] | 0 | (HEAP32[($2_1 + 4 | 0) >> 2] | 0 | $0_1 | 0) | 0) | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $7_1 = $7_1 + 4 | 0;
     if (($7_1 | 0) != ($6_1 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   if (!$3_1) {
    break label$3
   }
   label$6 : while (1) {
    $0_1 = HEAP32[(($5_1 + ($1_1 << 3 | 0) | 0) + 4 | 0) >> 2] | 0 | $0_1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != ($3_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  return $0_1 | 0;
 }
 
 function $485($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $0_1 = (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = HEAP32[(0 + 130612 | 0) >> 2] | 0, wasm2js_i32$2 = $0_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   if (!$0_1) {
    break label$1
   }
   if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 64 | 0) {
    break label$1
   }
   HEAP32[(0 + 130636 | 0) >> 2] = $2_1;
   HEAP32[(0 + 130632 | 0) >> 2] = $1_1;
   HEAP32[(0 + 130648 | 0) >> 2] = 0;
   $4_1 = HEAP32[(0 + 130652 | 0) >> 2] | 0;
   label$2 : {
    if ($3_1) {
     break label$2
    }
    if (!$4_1) {
     break label$2
    }
    if (HEAP32[(0 + 130660 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[(0 + 130648 | 0) >> 2] = 1;
    HEAP32[(0 + 130620 | 0) >> 2] = $2_1;
    HEAP32[(0 + 130616 | 0) >> 2] = $1_1;
    return;
   }
   label$3 : {
    $3_1 = HEAP32[(0 + 130588 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$3
    }
    label$4 : {
     if (!$4_1) {
      break label$4
     }
     if (!(HEAP32[(0 + 130656 | 0) >> 2] | 0)) {
      break label$3
     }
    }
    FUNCTION_TABLE[$3_1 | 0]($0_1, $1_1, $2_1);
    return;
   }
   $477($0_1 | 0, HEAP32[(0 + 130608 | 0) >> 2] | 0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
 }
 
 function $486($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $0_1 = (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = HEAP32[(0 + 130612 | 0) >> 2] | 0, wasm2js_i32$2 = $0_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   if (!$0_1) {
    break label$1
   }
   if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 64 | 0) {
    break label$1
   }
   HEAP32[(0 + 130636 | 0) >> 2] = $2_1;
   HEAP32[(0 + 130632 | 0) >> 2] = $1_1;
   HEAP32[(0 + 130648 | 0) >> 2] = 0;
   label$2 : {
    $3_1 = HEAP32[(0 + 130652 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    if (HEAP32[(0 + 130660 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[(0 + 130648 | 0) >> 2] = 1;
    HEAP32[(0 + 130620 | 0) >> 2] = $2_1;
    HEAP32[(0 + 130616 | 0) >> 2] = $1_1;
    return;
   }
   label$3 : {
    $4_1 = HEAP32[(0 + 130588 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$3
    }
    label$4 : {
     if (!$3_1) {
      break label$4
     }
     if (!(HEAP32[(0 + 130656 | 0) >> 2] | 0)) {
      break label$3
     }
    }
    FUNCTION_TABLE[$4_1 | 0]($0_1, $1_1, $2_1);
    return;
   }
   $477($0_1 | 0, HEAP32[(0 + 130608 | 0) >> 2] | 0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
 }
 
 function $487() {
  var $0_1 = 0;
  $0_1 = global$0 - 144 | 0;
  global$0 = $0_1;
  label$1 : {
   if ($383(75410 | 0, 0 | 0) | 0) {
    break label$1
   }
   $1070(2 | 0, 0 | 0, $0_1 + 4 | 0 | 0) | 0;
   label$2 : {
    if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 57;
    $1070(2 | 0, $0_1 + 4 | 0 | 0, 0 | 0) | 0;
   }
   $1070(15 | 0, 0 | 0, $0_1 + 4 | 0 | 0) | 0;
   if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = 57;
   $1070(15 | 0, $0_1 + 4 | 0 | 0, 0 | 0) | 0;
  }
  global$0 = $0_1 + 144 | 0;
  return 0 | 0;
 }
 
 function $488($0_1) {
  $0_1 = $0_1 | 0;
  $1071($0_1 | 0, 57 | 0) | 0;
  label$1 : {
   switch ($0_1 + -2 | 0 | 0) {
   case 0:
   case 13:
    HEAP8[(0 + 130772 | 0) >> 0] = 1;
    break;
   default:
    break label$1;
   };
  }
 }
 
 function $489() {
  var $0_1 = 0;
  $0_1 = global$0 - 144 | 0;
  global$0 = $0_1;
  $1070(2 | 0, 0 | 0, $0_1 + 4 | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != (57 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   $1070(2 | 0, $0_1 + 4 | 0 | 0, 0 | 0) | 0;
  }
  $1070(15 | 0, 0 | 0, $0_1 + 4 | 0 | 0) | 0;
  label$2 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != (57 | 0)) {
    break label$2
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   $1070(15 | 0, $0_1 + 4 | 0 | 0, 0 | 0) | 0;
  }
  global$0 = $0_1 + 144 | 0;
 }
 
 function $490() {
  label$1 : {
   if (!(HEAPU8[(0 + 130772 | 0) >> 0] | 0)) {
    break label$1
   }
   HEAP8[(0 + 130772 | 0) >> 0] = 0;
   $334(256 | 0) | 0;
  }
 }
 
 function $491() {
  HEAP8[(0 + 130772 | 0) >> 0] = 0;
  return $334(256 | 0) | 0 | 0;
 }
 
 function $492($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $5_1 = 0, $7_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$3_1 >> 2] = 78180;
    $260(73395 | 0, $3_1 | 0) | 0;
    $0_1 = 0;
    break label$1;
   }
   label$3 : {
    if ($1_1) {
     break label$3
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = 78176;
    $260(73395 | 0, $3_1 + 16 | 0 | 0) | 0;
    $0_1 = 0;
    break label$1;
   }
   label$4 : {
    if ($2_1) {
     break label$4
    }
    HEAP32[($3_1 + 32 | 0) >> 2] = 67313;
    $260(73395 | 0, $3_1 + 32 | 0 | 0) | 0;
    $0_1 = 0;
    break label$1;
   }
   label$5 : {
    label$6 : {
     $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (($4_1 | 0) < (1 | 0)) {
      break label$6
     }
     $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (($5_1 | 0) < (1 | 0)) {
      break label$6
     }
     $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     if (($6_1 | 0) < (1 | 0)) {
      break label$6
     }
     $7_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (($7_1 | 0) > (0 | 0)) {
      break label$5
     }
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = 0;
    $0_1 = 0;
    break label$1;
   }
   $8_1 = HEAP32[$1_1 >> 2] | 0;
   $9_1 = HEAP32[$0_1 >> 2] | 0;
   $10_1 = ($8_1 | 0) > ($9_1 | 0) ? $8_1 : $9_1;
   HEAP32[$2_1 >> 2] = $10_1;
   $6_1 = $8_1 + $6_1 | 0;
   $4_1 = $9_1 + $4_1 | 0;
   $4_1 = (($6_1 | 0) < ($4_1 | 0) ? $6_1 : $4_1) - $10_1 | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
   $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $6_1 = ($1_1 | 0) > ($0_1 | 0) ? $1_1 : $0_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
   $1_1 = $7_1 + $1_1 | 0;
   $0_1 = $5_1 + $0_1 | 0;
   $0_1 = (($1_1 | 0) < ($0_1 | 0) ? $1_1 : $0_1) - $6_1 | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
   $0_1 = ($4_1 | 0) > (0 | 0) & ($0_1 | 0) > (0 | 0) | 0;
  }
  global$0 = $3_1 + 48 | 0;
  return $0_1 | 0;
 }
 
 function $493($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $15_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $4_1 = 0, $10_1 = 0, $8_1 = 0, $16_1 = 0, $9_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$4_1 >> 2] = 67966;
    $260(73395 | 0, $4_1 | 0) | 0;
    $5_1 = 0;
    break label$1;
   }
   $5_1 = 0;
   label$3 : {
    if (($1_1 | 0) > (0 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = 67163;
    $260(73395 | 0, $4_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!$2_1) {
        break label$7
       }
       $5_1 = 0;
       $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
       if (($6_1 | 0) < (1 | 0)) {
        break label$1
       }
       $7_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       if (($7_1 | 0) < (1 | 0)) {
        break label$1
       }
       $8_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       $9_1 = $7_1 + $8_1 | 0;
       $10_1 = HEAP32[$2_1 >> 2] | 0;
       $11_1 = $6_1 + $10_1 | 0;
       $12_1 = 0;
       $13_1 = 0;
       $6_1 = 0;
       $5_1 = 0;
       $14_1 = 0;
       $7_1 = 0;
       label$8 : while (1) {
        label$9 : {
         $15_1 = $0_1 + ($14_1 << 3 | 0) | 0;
         $2_1 = HEAP32[$15_1 >> 2] | 0;
         if (($2_1 | 0) < ($10_1 | 0)) {
          break label$9
         }
         if (($2_1 | 0) >= ($11_1 | 0)) {
          break label$9
         }
         $15_1 = HEAP32[($15_1 + 4 | 0) >> 2] | 0;
         if (($15_1 | 0) < ($8_1 | 0)) {
          break label$9
         }
         if (($15_1 | 0) >= ($9_1 | 0)) {
          break label$9
         }
         label$10 : {
          if ($5_1) {
           break label$10
          }
          $5_1 = 1;
          $7_1 = $15_1;
          $6_1 = $2_1;
          $13_1 = $15_1;
          $12_1 = $2_1;
          if ($3_1) {
           break label$9
          }
          break label$1;
         }
         $5_1 = ($15_1 | 0) < ($13_1 | 0);
         $7_1 = $5_1 ? $7_1 : ($15_1 | 0) > ($7_1 | 0) ? $15_1 : $7_1;
         $16_1 = ($2_1 | 0) < ($12_1 | 0);
         $6_1 = $16_1 ? $6_1 : ($2_1 | 0) > ($6_1 | 0) ? $2_1 : $6_1;
         $13_1 = $5_1 ? $15_1 : $13_1;
         $12_1 = $16_1 ? $2_1 : $12_1;
         $5_1 = 1;
        }
        $14_1 = $14_1 + 1 | 0;
        if (($14_1 | 0) != ($1_1 | 0)) {
         continue label$8
        }
        break label$8;
       };
       if ($5_1) {
        break label$6
       }
       $5_1 = 0;
       break label$1;
      }
      if (!$3_1) {
       break label$5
      }
      $14_1 = 1;
      $13_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $12_1 = HEAP32[$0_1 >> 2] | 0;
      label$11 : {
       if (($1_1 | 0) != (1 | 0)) {
        break label$11
       }
       $6_1 = $12_1;
       $7_1 = $13_1;
       break label$4;
      }
      $6_1 = $12_1;
      $7_1 = $13_1;
      label$12 : while (1) {
       $15_1 = $0_1 + ($14_1 << 3 | 0) | 0;
       $2_1 = HEAP32[($15_1 + 4 | 0) >> 2] | 0;
       $5_1 = ($2_1 | 0) < ($13_1 | 0);
       $13_1 = $5_1 ? $2_1 : $13_1;
       $15_1 = HEAP32[$15_1 >> 2] | 0;
       $10_1 = ($15_1 | 0) < ($12_1 | 0);
       $12_1 = $10_1 ? $15_1 : $12_1;
       $7_1 = $5_1 ? $7_1 : ($2_1 | 0) > ($7_1 | 0) ? $2_1 : $7_1;
       $6_1 = $10_1 ? $6_1 : ($15_1 | 0) > ($6_1 | 0) ? $15_1 : $6_1;
       $14_1 = $14_1 + 1 | 0;
       if (($14_1 | 0) != ($1_1 | 0)) {
        continue label$12
       }
       break label$12;
      };
     }
     if ($3_1) {
      break label$4
     }
    }
    $5_1 = 1;
    break label$1;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = $13_1;
   HEAP32[$3_1 >> 2] = $12_1;
   $5_1 = 1;
   HEAP32[($3_1 + 12 | 0) >> 2] = ($7_1 - $13_1 | 0) + 1 | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = ($6_1 - $12_1 | 0) + 1 | 0;
  }
  global$0 = $4_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $494($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if (!$1_1) {
      break label$3
     }
     if (!((HEAPU8[$0_1 >> 0] | 0) & 255 | 0)) {
      break label$3
     }
     if (HEAPU8[$1_1 >> 0] | 0) {
      break label$2
     }
    }
    $0_1 = 0;
    $260(73874 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$4 : {
    $1_1 = $1024($0_1 | 0, $1_1 | 0) | 0;
    if ($1_1) {
     break label$4
    }
    HEAP32[$2_1 >> 2] = $0_1;
    $260(68589 | 0, $2_1 | 0) | 0;
    $0_1 = 0;
    break label$1;
   }
   label$5 : {
    $0_1 = $456(36 | 0) | 0;
    if ($0_1) {
     break label$5
    }
    $0_1 = 0;
    $262(0 | 0) | 0;
    break label$1;
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
   HEAP32[($0_1 + 16 | 0) >> 2] = 58;
   HEAP32[($0_1 + 12 | 0) >> 2] = 59;
   HEAP32[($0_1 + 8 | 0) >> 2] = 60;
   HEAP32[($0_1 + 4 | 0) >> 2] = 61;
   HEAP32[$0_1 >> 2] = 62;
   HEAP32[($0_1 + 20 | 0) >> 2] = 2;
   HEAP32[($0_1 + 24 | 0) >> 2] = 1;
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $495($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  $1_1 = 0;
  label$2 : {
   if (!(HEAP32[($0_1 + 24 | 0) >> 2] | 0)) {
    break label$2
   }
   if (!($1013(HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) | 0)) {
    break label$2
   }
   $1_1 = $262(2 | 0) | 0;
  }
  $459($0_1 | 0);
  return $1_1 | 0;
 }
 
 function $496($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   $3_1 = $1034($1_1 | 0, $2_1 | 0, $3_1 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) | 0;
   if ($3_1) {
    break label$1
   }
   if (!($1014(HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   $262(2 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $497($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   $3_1 = $1027($1_1 | 0, $2_1 | 0, $3_1 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) | 0;
   if ($3_1) {
    break label$1
   }
   if (!($1014(HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   $262(1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $498($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, i64toi32_i32$3 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   i64toi32_i32$1 = $260(82917 | 0, 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
   return i64toi32_i32$1 | 0;
  }
  label$2 : {
   label$3 : {
    i64toi32_i32$1 = $1$hi;
    if ($1029(HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$1 = $1031(HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
     $8_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $9_1 = 0
      } else {
       $9_1 = 1
      }
      $10_1 = $9_1;
     } else {
      $10_1 = 0
     }
     $8_1 = $10_1;
    }
    if ($8_1) {
     break label$2
    }
    i64toi32_i32$0 = $260(67404 | 0, 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
    return i64toi32_i32$0 | 0;
   }
   i64toi32_i32$2 = $262(3 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$2 | 0;
 }
 
 function $499($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $1_1 = 0, $1$hi = 0, i64toi32_i32$3 = 0, $2_1 = 0, $2$hi = 0;
  label$1 : {
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0]($0_1, 0, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
    $9_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      $10_1 = 0
     } else {
      $10_1 = 1
     }
     $11_1 = $10_1;
    } else {
     $11_1 = 0
    }
    $9_1 = $11_1;
   }
   if ($9_1) {
    break label$1
   }
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
   return i64toi32_i32$1 | 0;
  }
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0]($0_1, 0, i64toi32_i32$1, 2) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$1;
  $2$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$2 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0]($0_1, $1_1, i64toi32_i32$2, 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function $500($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $7_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $10$hi = 0, $3_1 = 0, $10_1 = 0, $6_1 = 0, $5_1 = 0, $22_1 = 0, $24_1 = 0, $25_1 = 0, $11$hi = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $8_1 = 0, $9_1 = 0, $23_1 = 0, $23$hi = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$3_1 >> 2] = 74321;
    $260(73395 | 0, $3_1 | 0) | 0;
    $4_1 = 0;
    break label$1;
   }
   $5_1 = 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[$0_1 >> 2] | 0 | 0]($0_1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$1;
   $23_1 = i64toi32_i32$0;
   $23$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $22_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $24_1 = 0
     } else {
      $24_1 = 1
     }
     $25_1 = $24_1;
    } else {
     $25_1 = 0
    }
    $22_1 = $25_1;
   }
   i64toi32_i32$4 = $22_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = $23$hi;
   i64toi32_i32$0 = i64toi32_i32$4 ? 1024 : $23_1;
   i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$3;
   $6_1 = $456(i64toi32_i32$0 + 1 | 0 | 0) | 0;
   label$3 : {
    label$4 : while (1) {
     label$5 : {
      label$6 : {
       $7_1 = $5_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = $7_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$2 = 1024;
       i64toi32_i32$1 = $7_1 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $11_1 = i64toi32_i32$1;
       $11$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$3 = i64toi32_i32$1;
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$2 = $10_1;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$4 | 0)) {
        $26_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$4 | 0)) {
         if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $27_1 = 0
         } else {
          $27_1 = 1
         }
         $28_1 = $27_1;
        } else {
         $28_1 = 0
        }
        $26_1 = $28_1;
       }
       if ($26_1) {
        break label$6
       }
       $4_1 = $6_1;
       break label$5;
      }
      i64toi32_i32$3 = $11$hi;
      $10_1 = $11_1;
      $10$hi = i64toi32_i32$3;
      $4_1 = $458($6_1 | 0, $7_1 + 1025 | 0 | 0) | 0;
      if ($4_1) {
       break label$5
      }
      $459($6_1 | 0);
      $4_1 = 0;
      $262(0 | 0) | 0;
      break label$3;
     }
     $8_1 = $4_1 + $7_1 | 0;
     i64toi32_i32$3 = $10$hi;
     $9_1 = FUNCTION_TABLE[HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0]($0_1, $8_1, 1, $10_1 - $7_1 | 0) | 0;
     $5_1 = $9_1 + $7_1 | 0;
     $6_1 = $4_1;
     if ($9_1) {
      continue label$4
     }
     break label$4;
    };
    label$7 : {
     if (!$1_1) {
      break label$7
     }
     HEAP32[$1_1 >> 2] = $7_1;
    }
    HEAP8[$8_1 >> 0] = 0;
   }
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0]($0_1) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $501($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[$0_1 >> 2] | 0 | 0]($0_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $502($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $503($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $504($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $500($494($0_1 | 0, 74381 | 0) | 0 | 0, $1_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $505($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $506() {
  return 0 | 0;
 }
 
 function $507() {
  return 0 | 0;
 }
 
 function $508() {
  
 }
 
 function $509($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $510($0_1) {
  $0_1 = $0_1 | 0;
  return -1 | 0;
 }
 
 function $511($0_1) {
  $0_1 = $0_1 | 0;
  return -1 | 0;
 }
 
 function $512($0_1) {
  $0_1 = $0_1 | 0;
  return -1 | 0;
 }
 
 function $513($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $262(4 | 0) | 0 | 0;
 }
 
 function $514($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $515($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $516() {
  
 }
 
 function $517() {
  label$1 : {
   if (HEAP32[(0 + 130776 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 130776 | 0) >> 2] = $832() | 0;
  }
  label$2 : {
   if (($315(16384 | 0) | 0 | 0) >= (0 | 0)) {
    break label$2
   }
   return -1 | 0;
  }
  return (FUNCTION_TABLE[HEAP32[(0 + 114396 | 0) >> 2] | 0 | 0]() | 0) >> 31 | 0 | 0;
 }
 
 function $518() {
  var $0_1 = 0;
  $834(HEAP32[(0 + 130776 | 0) >> 2] | 0 | 0) | 0;
  $0_1 = FUNCTION_TABLE[HEAP32[(114396 + 4 | 0) >> 2] | 0 | 0]() | 0;
  $835(HEAP32[(0 + 130776 | 0) >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $519($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $260(67374 | 0, 0 | 0) | 0;
   return;
  }
  $834(HEAP32[(0 + 130776 | 0) >> 2] | 0 | 0) | 0;
  $1_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = $1_1 + -1 | 0;
  label$2 : {
   if (($1_1 | 0) < (2 | 0)) {
    break label$2
   }
   $835(HEAP32[(0 + 130776 | 0) >> 2] | 0 | 0) | 0;
   return;
  }
  label$3 : {
   if (!(HEAPU8[(0 + 130784 | 0) >> 0] | 0)) {
    break label$3
   }
   $835(HEAP32[(0 + 130776 | 0) >> 2] | 0 | 0) | 0;
   return;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 88 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1);
  $2_1 = 0;
  HEAP32[($0_1 + 92 | 0) >> 2] = 0;
  label$4 : {
   $1_1 = HEAP32[(0 + 130780 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$4
   }
   label$5 : {
    label$6 : {
     if (($0_1 | 0) != ($1_1 | 0)) {
      break label$6
     }
     $3_1 = $1_1;
     break label$5;
    }
    label$7 : while (1) {
     $3_1 = HEAP32[($1_1 + 100 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$4
     }
     $2_1 = $1_1;
     $1_1 = $3_1;
     if (($0_1 | 0) != ($1_1 | 0)) {
      continue label$7
     }
     break label$7;
    };
   }
   label$8 : {
    if (!$2_1) {
     break label$8
    }
    HEAP32[($2_1 + 100 | 0) >> 2] = HEAP32[($3_1 + 100 | 0) >> 2] | 0;
    break label$4;
   }
   HEAP32[(0 + 130780 | 0) >> 2] = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
  }
  $459(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $459($0_1 | 0);
  $835(HEAP32[(0 + 130776 | 0) >> 2] | 0 | 0) | 0;
 }
 
 function $520() {
  var $0_1 = 0;
  $834(HEAP32[(0 + 130776 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   $0_1 = HEAP32[(0 + 130780 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    HEAP32[($0_1 + 96 | 0) >> 2] = 1;
    $519($0_1 | 0);
    $0_1 = HEAP32[(0 + 130780 | 0) >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  FUNCTION_TABLE[HEAP32[(114396 + 40 | 0) >> 2] | 0 | 0]();
  $835(HEAP32[(0 + 130776 | 0) >> 2] | 0 | 0) | 0;
  $316(16384 | 0);
  label$3 : {
   $0_1 = HEAP32[(0 + 130776 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$3
   }
   $833($0_1 | 0);
   HEAP32[(0 + 130776 | 0) >> 2] = 0;
  }
 }
 
 function $521() {
  var $0_1 = 0, $1_1 = 0;
  label$1 : {
   if (!($318(32768 | 0) | 0)) {
    break label$1
   }
   $834(HEAP32[(0 + 130776 | 0) >> 2] | 0 | 0) | 0;
   label$2 : {
    if (HEAPU8[(0 + 130784 | 0) >> 0] | 0) {
     break label$2
    }
    HEAP8[(0 + 130784 | 0) >> 0] = 1;
    label$3 : {
     label$4 : {
      $0_1 = HEAP32[(0 + 130780 | 0) >> 2] | 0;
      if ($0_1) {
       break label$4
      }
      HEAP8[(0 + 130784 | 0) >> 0] = 0;
      break label$3;
     }
     label$5 : while (1) {
      FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 88 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1);
      $0_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
      if ($0_1) {
       continue label$5
      }
      break label$5;
     };
     HEAP8[(0 + 130784 | 0) >> 0] = 0;
     $0_1 = HEAP32[(0 + 130780 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$3
     }
     label$6 : while (1) {
      $1_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
      label$7 : {
       if ((HEAP32[($0_1 + 96 | 0) >> 2] | 0 | 0) > (0 | 0)) {
        break label$7
       }
       $519($0_1 | 0);
      }
      $0_1 = $1_1;
      if ($0_1) {
       continue label$6
      }
      break label$6;
     };
    }
    FUNCTION_TABLE[HEAP32[(114396 + 8 | 0) >> 2] | 0 | 0]();
   }
   $835(HEAP32[(0 + 130776 | 0) >> 2] | 0 | 0) | 0;
  }
 }
 
 function $522($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = 1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (($1_1 | 0) > (31 | 0)) {
       break label$4
      }
      $1_1 = $1_1 + 1 | 0;
      break label$3;
     }
     $841(0 | 0);
    }
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = 1;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $523($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $524($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  return +(+$989(+$0_1, +$1_1));
 }
 
 function $525($0_1) {
  $0_1 = +$0_1;
  return +Math_ceil($0_1);
 }
 
 function $526($0_1) {
  $0_1 = +$0_1;
  return +(+$998(+$0_1));
 }
 
 function $527($0_1) {
  $0_1 = +$0_1;
  return +Math_abs($0_1);
 }
 
 function $528($0_1) {
  $0_1 = +$0_1;
  return +Math_floor($0_1);
 }
 
 function $529($0_1) {
  $0_1 = +$0_1;
  return +(+$1072(+$0_1));
 }
 
 function $530($0_1) {
  $0_1 = +$0_1;
  return +Math_sqrt($0_1);
 }
 
 function $531($0_1) {
  $0_1 = Math_fround($0_1);
  return Math_fround(Math_fround(Math_sqrt($0_1)));
 }
 
 function $532($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1 >> 31 | 0;
  return ($0_1 ^ $1_1 | 0) - $1_1 | 0 | 0;
 }
 
 function $533($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $534($0_1) {
  $0_1 = $0_1 | 0;
  return $1112($0_1 | 0) | 0 | 0;
 }
 
 function $535($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1004($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $536($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1006($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $537($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1005($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $538($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1049($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $539($0_1) {
  $0_1 = $0_1 | 0;
  return $1083($0_1 | 0) | 0 | 0;
 }
 
 function $540($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1082($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $541($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = 0;
  label$1 : {
   $4_1 = $1083($1_1 | 0) | 0;
   $2_1 = $2_1 + -1 | 0;
   $4_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
   if (!$4_1) {
    break label$1
   }
   label$2 : {
    $3_1 = $4_1 + -1 | 0;
    $2_1 = HEAP8[($1_1 + $3_1 | 0) >> 0] | 0;
    if ((($2_1 + 64 | 0) & 255 | 0) >>> 0 < 53 >>> 0) {
     break label$2
    }
    label$3 : {
     if (($2_1 | 0) > (-65 | 0)) {
      break label$3
     }
     if (!$3_1) {
      break label$3
     }
     label$4 : while (1) {
      label$5 : {
       label$6 : {
        label$7 : {
         $2_1 = HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0;
         if (($2_1 & 224 | 0 | 0) != (192 | 0)) {
          break label$7
         }
         $5_1 = 2;
         break label$6;
        }
        label$8 : {
         if (($2_1 & 240 | 0 | 0) != (224 | 0)) {
          break label$8
         }
         $5_1 = 3;
         break label$6;
        }
        $5_1 = 4;
        if ((($2_1 + 16 | 0) & 255 | 0) >>> 0 > 4 >>> 0) {
         break label$5
        }
       }
       $3_1 = ($4_1 - $3_1 | 0 | 0) == ($5_1 | 0) ? $4_1 : $3_1;
       break label$2;
      }
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       continue label$4
      }
      break label$4;
     };
    }
    $3_1 = $4_1;
   }
   $535($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  }
  HEAP8[($0_1 + $3_1 | 0) >> 0] = 0;
  return $3_1 | 0;
 }
 
 function $542($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1081($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $543($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   $1_1 = ($1083($0_1 | 0) | 0) + 1 | 0;
   $2_1 = $456($1_1 | 0) | 0;
   if (!$2_1) {
    break label$1
   }
   $535($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $544($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1076($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $545($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1088($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $546($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1084($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $547($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $548($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $548($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    if (($0_1 | 0) > (-1 | 0)) {
     break label$2
    }
    HEAP8[$1_1 >> 0] = 45;
    $0_1 = 0 - $0_1 | 0;
    $3_1 = $1_1 + 1 | 0;
    $4_1 = $3_1;
    label$3 : while (1) {
     $5_1 = ($0_1 >>> 0) / ($2_1 >>> 0) | 0;
     HEAP8[$4_1 >> 0] = HEAPU8[(($0_1 - Math_imul($5_1, $2_1) | 0) + 89904 | 0) >> 0] | 0;
     $4_1 = $4_1 + 1 | 0;
     $6_1 = $2_1 >>> 0 <= $0_1 >>> 0;
     $0_1 = $5_1;
     if ($6_1) {
      continue label$3
     }
     break label$3;
    };
    $5_1 = 0;
    HEAP8[$4_1 >> 0] = 0;
    $0_1 = $1083($3_1 | 0) | 0;
    if ($0_1 >>> 0 < 2 >>> 0) {
     break label$1
    }
    $2_1 = $3_1 + $0_1 | 0;
    $0_1 = $0_1 >>> 1 | 0;
    $7_1 = $0_1 + -1 | 0;
    label$4 : {
     $6_1 = $0_1 & 3 | 0;
     if (!$6_1) {
      break label$4
     }
     label$5 : while (1) {
      $4_1 = HEAPU8[$3_1 >> 0] | 0;
      $2_1 = $2_1 + -1 | 0;
      HEAP8[$3_1 >> 0] = HEAPU8[$2_1 >> 0] | 0;
      HEAP8[$2_1 >> 0] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      $0_1 = $0_1 + -1 | 0;
      $5_1 = $5_1 + 1 | 0;
      if (($5_1 | 0) != ($6_1 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    if ($7_1 >>> 0 < 3 >>> 0) {
     break label$1
    }
    label$6 : while (1) {
     $4_1 = HEAPU8[$3_1 >> 0] | 0;
     $5_1 = $2_1 + -1 | 0;
     HEAP8[$3_1 >> 0] = HEAPU8[$5_1 >> 0] | 0;
     HEAP8[$5_1 >> 0] = $4_1;
     $4_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
     $5_1 = $2_1 + -2 | 0;
     HEAP8[($3_1 + 1 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
     HEAP8[$5_1 >> 0] = $4_1;
     $4_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
     $5_1 = $2_1 + -3 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
     HEAP8[$5_1 >> 0] = $4_1;
     $4_1 = HEAPU8[($3_1 + 3 | 0) >> 0] | 0;
     $2_1 = $2_1 + -4 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = HEAPU8[$2_1 >> 0] | 0;
     HEAP8[$2_1 >> 0] = $4_1;
     $3_1 = $3_1 + 4 | 0;
     $0_1 = $0_1 + -4 | 0;
     if ($0_1) {
      continue label$6
     }
     break label$1;
    };
   }
   label$7 : {
    label$8 : {
     if (!$0_1) {
      break label$8
     }
     $3_1 = $1_1;
     label$9 : while (1) {
      $4_1 = ($0_1 >>> 0) / ($2_1 >>> 0) | 0;
      HEAP8[$3_1 >> 0] = HEAPU8[(($0_1 - Math_imul($4_1, $2_1) | 0) + 89904 | 0) >> 0] | 0;
      $3_1 = $3_1 + 1 | 0;
      $5_1 = $2_1 >>> 0 > $0_1 >>> 0;
      $0_1 = $4_1;
      if (!$5_1) {
       continue label$9
      }
      break label$7;
     };
    }
    HEAP8[$1_1 >> 0] = 48;
    $3_1 = $1_1 + 1 | 0;
   }
   $4_1 = 0;
   HEAP8[$3_1 >> 0] = 0;
   $2_1 = $1083($1_1 | 0) | 0;
   if ($2_1 >>> 0 < 2 >>> 0) {
    break label$1
   }
   $0_1 = $1_1 + $2_1 | 0;
   $3_1 = $2_1 >>> 1 | 0;
   $7_1 = $3_1 + -1 | 0;
   label$10 : {
    label$11 : {
     $6_1 = $3_1 & 3 | 0;
     if ($6_1) {
      break label$11
     }
     $2_1 = $1_1;
     break label$10;
    }
    $2_1 = $1_1;
    label$12 : while (1) {
     $5_1 = HEAPU8[$2_1 >> 0] | 0;
     $0_1 = $0_1 + -1 | 0;
     HEAP8[$2_1 >> 0] = HEAPU8[$0_1 >> 0] | 0;
     HEAP8[$0_1 >> 0] = $5_1;
     $2_1 = $2_1 + 1 | 0;
     $3_1 = $3_1 + -1 | 0;
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != ($6_1 | 0)) {
      continue label$12
     }
     break label$12;
    };
   }
   if ($7_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   label$13 : while (1) {
    $4_1 = HEAPU8[$2_1 >> 0] | 0;
    $5_1 = $0_1 + -1 | 0;
    HEAP8[$2_1 >> 0] = HEAPU8[$5_1 >> 0] | 0;
    HEAP8[$5_1 >> 0] = $4_1;
    $4_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $5_1 = $0_1 + -2 | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
    HEAP8[$5_1 >> 0] = $4_1;
    $4_1 = HEAPU8[($2_1 + 2 | 0) >> 0] | 0;
    $5_1 = $0_1 + -3 | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
    HEAP8[$5_1 >> 0] = $4_1;
    $4_1 = HEAPU8[($2_1 + 3 | 0) >> 0] | 0;
    $0_1 = $0_1 + -4 | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[$0_1 >> 0] | 0;
    HEAP8[$0_1 >> 0] = $4_1;
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $3_1 + -4 | 0;
    if ($3_1) {
     continue label$13
    }
    break label$13;
   };
  }
  return $1_1 | 0;
 }
 
 function $549($0_1) {
  $0_1 = $0_1 | 0;
  return $992($0_1 | 0) | 0 | 0;
 }
 
 function $550($0_1) {
  $0_1 = $0_1 | 0;
  return +(+$991($0_1 | 0));
 }
 
 function $551($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1110($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $552($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1078($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $553($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1085($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $554($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1075($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $555($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $1139($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $556($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $1129($0_1 | 0, $1_1 | 0, ($2_1 ? $2_1 : 87288) | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $557($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $1129($0_1 | 0, $1_1 | 0, ($2_1 ? $2_1 : 87288) | 0, $3_1 | 0) | 0 | 0;
 }
 
 function $558($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = 0;
  $2_1 = -1;
  $4_1 = 100;
  label$1 : {
   $5_1 = $456(100 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   $6_1 = $1_1 ? $1_1 : 87288;
   label$2 : while (1) {
    $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
    $1_1 = $5_1;
    $2_1 = $1129($1_1 | 0, $4_1 | 0, $6_1 | 0, $2_1 | 0) | 0;
    if (($2_1 | 0) < (0 | 0)) {
     break label$1
    }
    label$3 : {
     if ($2_1 >>> 0 >= $4_1 >>> 0) {
      break label$3
     }
     HEAP32[$0_1 >> 2] = $1_1;
     break label$1;
    }
    $4_1 = $2_1 + 1 | 0;
    $5_1 = $458($1_1 | 0, $4_1 | 0) | 0;
    if ($5_1) {
     continue label$2
    }
    break label$2;
   };
   $459($1_1 | 0);
   $2_1 = -1;
  }
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $559($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = $456(8 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   return $262(0 | 0) | 0 | 0;
  }
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  return 0 | 0;
 }
 
 function $560($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[$2_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     $0_1 = $2_1;
     $2_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$1
     }
     if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $0_1 = $0_1 + 4 | 0;
   }
   HEAP32[$0_1 >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $459($2_1 | 0);
  }
 }
 
 function $561() {
  var $1_1 = 0, $0_1 = 0;
  $0_1 = global$0 - 16 | 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 114444 | 0) >> 2] | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[(0 + 130788 | 0) >> 0] | 0) {
     break label$2
    }
    HEAP8[(0 + 130788 | 0) >> 0] = 1;
   }
   $1_1 = 0;
   HEAP32[(0 + 114440 | 0) >> 2] = 4;
   HEAP32[(0 + 114444 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[(0 + 114440 | 0) >> 2] = 16;
   $1_1 = 2;
   HEAP32[(0 + 114444 | 0) >> 2] = 2;
  }
  return ($1_1 >>> 1 | 0) & 1 | 0 | 0;
 }
 
 function $562() {
  var $1_1 = 0, $0_1 = 0;
  $0_1 = global$0 - 16 | 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 114444 | 0) >> 2] | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[(0 + 130788 | 0) >> 0] | 0) {
     break label$2
    }
    HEAP8[(0 + 130788 | 0) >> 0] = 1;
   }
   $1_1 = 0;
   HEAP32[(0 + 114440 | 0) >> 2] = 4;
   HEAP32[(0 + 114444 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[(0 + 114440 | 0) >> 2] = 16;
   $1_1 = 2;
   HEAP32[(0 + 114444 | 0) >> 2] = 2;
  }
  return ($1_1 >>> 2 | 0) & 1 | 0 | 0;
 }
 
 function $563() {
  var $1_1 = 0, $0_1 = 0;
  $0_1 = global$0 - 16 | 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 114444 | 0) >> 2] | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[(0 + 130788 | 0) >> 0] | 0) {
     break label$2
    }
    HEAP8[(0 + 130788 | 0) >> 0] = 1;
   }
   $1_1 = 0;
   HEAP32[(0 + 114440 | 0) >> 2] = 4;
   HEAP32[(0 + 114444 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[(0 + 114440 | 0) >> 2] = 16;
   $1_1 = 2;
   HEAP32[(0 + 114444 | 0) >> 2] = 2;
  }
  return ($1_1 >>> 3 | 0) & 1 | 0 | 0;
 }
 
 function $564() {
  var $1_1 = 0, $0_1 = 0;
  $0_1 = global$0 - 16 | 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 114444 | 0) >> 2] | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[(0 + 130788 | 0) >> 0] | 0) {
     break label$2
    }
    HEAP8[(0 + 130788 | 0) >> 0] = 1;
   }
   $1_1 = 0;
   HEAP32[(0 + 114440 | 0) >> 2] = 4;
   HEAP32[(0 + 114444 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[(0 + 114440 | 0) >> 2] = 16;
   $1_1 = 2;
   HEAP32[(0 + 114444 | 0) >> 2] = 2;
  }
  return ($1_1 >>> 4 | 0) & 1 | 0 | 0;
 }
 
 function $565() {
  var $1_1 = 0, $0_1 = 0;
  $0_1 = global$0 - 16 | 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 114444 | 0) >> 2] | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[(0 + 130788 | 0) >> 0] | 0) {
     break label$2
    }
    HEAP8[(0 + 130788 | 0) >> 0] = 1;
   }
   $1_1 = 0;
   HEAP32[(0 + 114440 | 0) >> 2] = 4;
   HEAP32[(0 + 114444 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[(0 + 114440 | 0) >> 2] = 16;
   $1_1 = 2;
   HEAP32[(0 + 114444 | 0) >> 2] = 2;
  }
  return ($1_1 >>> 5 | 0) & 1 | 0 | 0;
 }
 
 function $566() {
  var $1_1 = 0, $0_1 = 0;
  $0_1 = global$0 - 16 | 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 114444 | 0) >> 2] | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[(0 + 130788 | 0) >> 0] | 0) {
     break label$2
    }
    HEAP8[(0 + 130788 | 0) >> 0] = 1;
   }
   $1_1 = 0;
   HEAP32[(0 + 114440 | 0) >> 2] = 4;
   HEAP32[(0 + 114444 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[(0 + 114440 | 0) >> 2] = 16;
   $1_1 = 2;
   HEAP32[(0 + 114444 | 0) >> 2] = 2;
  }
  return ($1_1 >>> 13 | 0) & 1 | 0 | 0;
 }
 
 function $567($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $1_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   $3_1 = HEAP32[(0 + 114440 | 0) >> 2] | 0;
   if (($3_1 | 0) != (-1 | 0)) {
    break label$1
   }
   if ((HEAP32[(0 + 114444 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[(0 + 130788 | 0) >> 0] | 0) {
     break label$2
    }
    HEAP8[(0 + 130788 | 0) >> 0] = 1;
   }
   $3_1 = 4;
   HEAP32[(0 + 114440 | 0) >> 2] = 4;
   HEAP32[(0 + 114444 | 0) >> 2] = 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = 0;
   if (!(HEAP32[($1_1 + 12 | 0) >> 2] | 0)) {
    break label$1
   }
   $3_1 = 16;
   HEAP32[(0 + 114440 | 0) >> 2] = 16;
   HEAP32[(0 + 114444 | 0) >> 2] = 2;
  }
  label$3 : {
   $4_1 = (($3_1 + ((($3_1 - (($0_1 >>> 0) % ($3_1 >>> 0) | 0) | 0) >>> 0) % ($3_1 >>> 0) | 0) | 0) + $0_1 | 0) + 4 | 0;
   if ($4_1 >>> 0 < $0_1 >>> 0) {
    break label$3
   }
   $0_1 = $456($4_1 | 0) | 0;
   if (!$0_1) {
    break label$3
   }
   $2_1 = $0_1 + 4 | 0;
   $2_1 = $2_1 + ($3_1 - (($2_1 >>> 0) % ($3_1 >>> 0) | 0) | 0) | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $0_1;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $568($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $459(HEAP32[($0_1 + -4 | 0) >> 2] | 0 | 0);
  }
 }
 
 function $569($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$3_1 >> 2] = 67022;
    $1_1 = $260(73395 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if ($1_1) {
     break label$3
    }
    $1_1 = 0;
    if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$1
    }
    $1_1 = $0_1 + 36 | 0;
   }
   $1_1 = $570($0_1 | 0, $1_1 | 0, 1 | 0, $2_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $570($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$4_1 >> 2] = 67042;
    $5_1 = $260(73395 | 0, $4_1 | 0) | 0;
    break label$1;
   }
   $5_1 = 0;
   $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$6_1) {
    break label$1
   }
   $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$7_1) {
    break label$1
   }
   label$3 : {
    $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if ($8_1) {
     break label$3
    }
    $5_1 = $260(73264 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if ($1_1) {
     break label$4
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = 68018;
    $5_1 = $260(73395 | 0, $4_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   label$5 : {
    $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $10_1 = HEAPU8[($9_1 + 8 | 0) >> 0] | 0;
    if ($10_1 >>> 0 > 7 >>> 0) {
     break label$5
    }
    label$6 : {
     if (($2_1 | 0) != (1 | 0)) {
      break label$6
     }
     if (HEAP32[$1_1 >> 2] | 0) {
      break label$6
     }
     if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
      break label$6
     }
     if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
      break label$6
     }
     if (($10_1 | 0) != (4 | 0)) {
      break label$6
     }
     if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
      break label$6
     }
     $536($8_1 | 0, ($3_1 << 4 | 0 | $3_1 | 0) & 255 | 0 | 0, Math_imul(HEAP32[($0_1 + 16 | 0) >> 2] | 0, $7_1) | 0) | 0;
     $5_1 = 1;
     break label$1;
    }
    $5_1 = $260(67678 | 0, 0 | 0) | 0;
    break label$1;
   }
   $8_1 = 74;
   label$7 : {
    label$8 : {
     switch ((HEAPU8[($9_1 + 9 | 0) >> 0] | 0) + -1 | 0 | 0) {
     case 1:
      $3_1 = $3_1 << 16 | 0 | $3_1 | 0;
      $8_1 = 75;
      break label$7;
     case 3:
      $8_1 = 76;
      break label$7;
     default:
      $5_1 = $260(67578 | 0, 0 | 0) | 0;
      break label$1;
     case 2:
      break label$7;
     case 0:
      break label$8;
     };
    }
    $6_1 = $3_1 << 8 | 0 | $3_1 | 0;
    $3_1 = $6_1 << 16 | 0 | $6_1 | 0;
    $8_1 = 77;
   }
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $7_1 = $0_1 + 36 | 0;
   $6_1 = 0;
   label$12 : while (1) {
    label$13 : {
     if (!($492($1_1 + ($6_1 << 4 | 0) | 0 | 0, $7_1 | 0, $4_1 + 32 | 0 | 0) | 0)) {
      break label$13
     }
     $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     FUNCTION_TABLE[$8_1 | 0](((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + Math_imul($5_1, HEAP32[($4_1 + 36 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($4_1 + 32 | 0) >> 2] | 0, HEAPU8[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) | 0, $5_1, $3_1, HEAP32[($4_1 + 40 | 0) >> 2] | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0);
    }
    $5_1 = 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($2_1 | 0)) {
     continue label$12
    }
    break label$12;
   };
  }
  global$0 = $4_1 + 48 | 0;
  return $5_1 | 0;
 }
 
 function $571($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $10_1 = 0, $5_1 = 0, $6_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   if (!$4_1) {
    break label$1
   }
   $5_1 = $2_1 >>> 16 | 0;
   $6_1 = $2_1 >>> 8 | 0;
   $7_1 = $3_1 & 3 | 0;
   $8_1 = $3_1 >>> 0 < 4 >>> 0;
   label$2 : while (1) {
    label$3 : {
     if (!$3_1) {
      break label$3
     }
     $9_1 = 0;
     $10_1 = $0_1;
     $11_1 = $3_1;
     label$4 : {
      if (!$7_1) {
       break label$4
      }
      label$5 : while (1) {
       HEAP8[($10_1 + 2 | 0) >> 0] = $5_1;
       HEAP8[($10_1 + 1 | 0) >> 0] = $6_1;
       HEAP8[$10_1 >> 0] = $2_1;
       $10_1 = $10_1 + 3 | 0;
       $11_1 = $11_1 + -1 | 0;
       $9_1 = $9_1 + 1 | 0;
       if (($9_1 | 0) != ($7_1 | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     if ($8_1) {
      break label$3
     }
     label$6 : while (1) {
      HEAP8[($10_1 + 11 | 0) >> 0] = $5_1;
      HEAP8[($10_1 + 10 | 0) >> 0] = $6_1;
      HEAP8[($10_1 + 9 | 0) >> 0] = $2_1;
      HEAP8[($10_1 + 8 | 0) >> 0] = $5_1;
      HEAP8[($10_1 + 7 | 0) >> 0] = $6_1;
      HEAP8[($10_1 + 6 | 0) >> 0] = $2_1;
      HEAP8[($10_1 + 5 | 0) >> 0] = $5_1;
      HEAP8[($10_1 + 4 | 0) >> 0] = $6_1;
      HEAP8[($10_1 + 3 | 0) >> 0] = $2_1;
      HEAP8[($10_1 + 2 | 0) >> 0] = $5_1;
      HEAP8[($10_1 + 1 | 0) >> 0] = $6_1;
      HEAP8[$10_1 >> 0] = $2_1;
      $10_1 = $10_1 + 12 | 0;
      $11_1 = $11_1 + -4 | 0;
      if ($11_1) {
       continue label$6
      }
      break label$6;
     };
    }
    $0_1 = $0_1 + $1_1 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $572($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if (!$4_1) {
    break label$1
   }
   $5_1 = $3_1 + -1 | 0;
   $6_1 = ($3_1 | 0) < (2 | 0);
   label$2 : while (1) {
    $7_1 = $3_1;
    $8_1 = $0_1;
    label$3 : {
     label$4 : {
      label$5 : {
       if ($6_1) {
        break label$5
       }
       $8_1 = $0_1;
       $9_1 = $7_1;
       label$6 : {
        if (!($0_1 & 2 | 0)) {
         break label$6
        }
        HEAP16[$0_1 >> 1] = $2_1;
        $8_1 = $0_1 + 2 | 0;
        $7_1 = 1;
        $9_1 = $5_1;
        if ($9_1 >>> 0 < 2 >>> 0) {
         break label$4
        }
       }
       $7_1 = $9_1 >>> 1 | 0;
       $10_1 = ($7_1 + 3 | 0) >>> 2 | 0;
       $11_1 = $8_1;
       $12_1 = $8_1;
       $13_1 = $8_1;
       $14_1 = $8_1;
       label$7 : {
        label$8 : {
         switch ($7_1 & 3 | 0 | 0) {
         default:
          $7_1 = 0;
          break label$7;
         case 1:
          $7_1 = 3;
          break label$7;
         case 2:
          $7_1 = 2;
          break label$7;
         case 3:
          break label$8;
         };
        }
        $7_1 = 1;
       }
       label$12 : while (1) {
        label$13 : {
         switch ($7_1 | 0) {
         case 0:
          HEAP32[$11_1 >> 2] = $2_1;
          $12_1 = $11_1 + 4 | 0;
          $7_1 = 1;
          continue label$12;
         case 1:
          HEAP32[$12_1 >> 2] = $2_1;
          $13_1 = $12_1 + 4 | 0;
          $7_1 = 2;
          continue label$12;
         case 2:
          HEAP32[$13_1 >> 2] = $2_1;
          $14_1 = $13_1 + 4 | 0;
          $7_1 = 3;
          continue label$12;
         default:
          break label$13;
         };
        }
        HEAP32[$14_1 >> 2] = $2_1;
        $11_1 = $14_1 + 4 | 0;
        label$17 : {
         $10_1 = $10_1 + -1 | 0;
         if ($10_1) {
          break label$17
         }
         $7_1 = $9_1;
         break label$5;
        }
        $7_1 = 0;
        continue label$12;
       };
      }
      if (!($7_1 & 1 | 0)) {
       break label$3
      }
     }
     HEAP16[((($7_1 << 1 | 0) + $8_1 | 0) + -2 | 0) >> 1] = $2_1;
    }
    $0_1 = $0_1 + $1_1 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $573($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $12_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if (!$4_1) {
    break label$1
   }
   $5_1 = $3_1 & 3 | 0;
   $6_1 = ($3_1 + 3 | 0) >>> 2 | 0;
   label$2 : while (1) {
    label$3 : {
     if (!$3_1) {
      break label$3
     }
     $7_1 = $0_1;
     $8_1 = $6_1;
     $9_1 = $0_1;
     $10_1 = $0_1;
     $11_1 = $0_1;
     label$4 : {
      label$5 : {
       switch ($5_1 | 0) {
       default:
        $12_1 = 0;
        break label$4;
       case 1:
        $12_1 = 3;
        break label$4;
       case 2:
        $12_1 = 2;
        break label$4;
       case 3:
        break label$5;
       };
      }
      $12_1 = 1;
     }
     label$9 : while (1) {
      label$10 : {
       switch ($12_1 | 0) {
       case 0:
        HEAP32[$7_1 >> 2] = $2_1;
        $9_1 = $7_1 + 4 | 0;
        $12_1 = 1;
        continue label$9;
       case 1:
        HEAP32[$9_1 >> 2] = $2_1;
        $10_1 = $9_1 + 4 | 0;
        $12_1 = 2;
        continue label$9;
       case 2:
        HEAP32[$10_1 >> 2] = $2_1;
        $11_1 = $10_1 + 4 | 0;
        $12_1 = 3;
        continue label$9;
       default:
        break label$10;
       };
      }
      HEAP32[$11_1 >> 2] = $2_1;
      $7_1 = $11_1 + 4 | 0;
      $8_1 = $8_1 + -1 | 0;
      if (!$8_1) {
       break label$3
      }
      $12_1 = 0;
      continue label$9;
     };
    }
    $0_1 = $0_1 + $1_1 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $574($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $8_1 = 0, $12_1 = 0, $10_1 = 0, $11_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (!$4_1) {
    break label$1
   }
   $5_1 = $3_1 + -2 | 0;
   $6_1 = $3_1 + -1 | 0;
   $7_1 = ($3_1 | 0) < (4 | 0);
   label$2 : while (1) {
    $8_1 = $3_1;
    $9_1 = $0_1;
    label$3 : {
     if ($7_1) {
      break label$3
     }
     $10_1 = $6_1;
     $11_1 = $0_1;
     $8_1 = $10_1;
     $12_1 = $0_1;
     $9_1 = $0_1;
     $13_1 = $3_1;
     label$4 : {
      switch ($0_1 & 3 | 0 | 0) {
      case 1:
       HEAP8[$0_1 >> 0] = $2_1;
       $11_1 = $0_1 + 1 | 0;
       $10_1 = $5_1;
      case 2:
       HEAP8[$11_1 >> 0] = $2_1;
       $8_1 = $10_1 + -1 | 0;
       $12_1 = $11_1 + 1 | 0;
      case 3:
       HEAP8[$12_1 >> 0] = $2_1;
       $9_1 = $12_1 + 1 | 0;
       $13_1 = $8_1;
       if ($8_1 >>> 0 < 4 >>> 0) {
        break label$3
       }
       break;
      default:
       break label$4;
      };
     }
     $8_1 = $13_1 >>> 2 | 0;
     $14_1 = ($8_1 + 3 | 0) >>> 2 | 0;
     $12_1 = $9_1;
     $11_1 = $12_1;
     $10_1 = $12_1;
     $15_1 = $12_1;
     label$8 : {
      label$9 : {
       switch ($8_1 & 3 | 0 | 0) {
       default:
        $8_1 = 0;
        break label$8;
       case 1:
        $8_1 = 3;
        break label$8;
       case 2:
        $8_1 = 2;
        break label$8;
       case 3:
        break label$9;
       };
      }
      $8_1 = 1;
     }
     label$13 : while (1) {
      label$14 : {
       switch ($8_1 | 0) {
       case 0:
        HEAP32[$12_1 >> 2] = $2_1;
        $11_1 = $12_1 + 4 | 0;
        $8_1 = 1;
        continue label$13;
       case 1:
        HEAP32[$11_1 >> 2] = $2_1;
        $10_1 = $11_1 + 4 | 0;
        $8_1 = 2;
        continue label$13;
       case 2:
        HEAP32[$10_1 >> 2] = $2_1;
        $15_1 = $10_1 + 4 | 0;
        $8_1 = 3;
        continue label$13;
       default:
        break label$14;
       };
      }
      HEAP32[$15_1 >> 2] = $2_1;
      $12_1 = $15_1 + 4 | 0;
      label$18 : {
       $14_1 = $14_1 + -1 | 0;
       if ($14_1) {
        break label$18
       }
       $8_1 = $13_1;
       break label$3;
      }
      $8_1 = 0;
      continue label$13;
     };
    }
    label$19 : {
     $12_1 = $8_1 & 3 | 0;
     if (!$12_1) {
      break label$19
     }
     $8_1 = $9_1 + ($8_1 & -4 | 0) | 0;
     label$20 : {
      switch ($12_1 + -1 | 0 | 0) {
      case 2:
       HEAP8[$8_1 >> 0] = $2_1;
       $8_1 = $8_1 + 1 | 0;
      case 1:
       HEAP8[$8_1 >> 0] = $2_1;
       $8_1 = $8_1 + 1 | 0;
       break;
      default:
       break label$20;
      };
     }
     HEAP8[$8_1 >> 0] = $2_1;
    }
    $0_1 = $0_1 + $1_1 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $575($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $2_1 = 0, $1_1 = 0, $3_1 = 0;
  label$1 : {
   if (!((HEAPU8[$0_1 >> 0] | 0) & 2 | 0)) {
    break label$1
   }
   $576($0_1 | 0, 1 | 0);
  }
  $1_1 = -1;
  label$2 : {
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) >>> 0 < 8 >>> 0) {
    break label$2
   }
   if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     $4_1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
     if ($4_1 & 256 | 0) {
      break label$4
     }
     if (!($4_1 & 16 | 0)) {
      break label$2
     }
     if ($4_1 & 1 | 0) {
      break label$2
     }
     if (HEAP32[($2_1 + 24 | 0) >> 2] | 0) {
      break label$3
     }
     break label$2;
    }
    if ($4_1 & 1 | 0) {
     break label$2
    }
   }
   label$5 : {
    label$6 : {
     if (!($4_1 & 2 | 0)) {
      break label$6
     }
     if (!(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | ($4_1 & 224 | 0) | 0)) {
      break label$5
     }
     break label$2;
    }
    if ($4_1 & 224 | 0) {
     break label$2
    }
   }
   if ($4_1 & 512 | 0) {
    break label$2
   }
   label$7 : {
    label$8 : {
     label$9 : {
      if (!($4_1 & 16 | 0)) {
       break label$9
      }
      if (HEAP32[($2_1 + 24 | 0) >> 2] | 0) {
       break label$8
      }
     }
     if (!(HEAP32[($3_1 + 4 | 0) >> 2] | 0)) {
      break label$2
     }
     if (($577($0_1 | 0) | 0 | 0) < (0 | 0)) {
      break label$2
     }
     $2_1 = 8192;
     $4_1 = 78;
     break label$7;
    }
    if (($579($0_1 | 0) | 0 | 0) < (0 | 0)) {
     break label$2
    }
    $2_1 = 16384;
    $4_1 = 79;
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
   HEAP32[($1_1 + 68 | 0) >> 2] = HEAP32[($1_1 + 68 | 0) >> 2] | 0 | $2_1 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 2 | 0;
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $576($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $7_1 = 0, $2_1 = 0, $13_1 = 0, $6_1 = 0, $11_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $14_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($3_1 & 2 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $3_1 & -3 | 0;
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    if ($3_1 & 1 | 0) {
     break label$2
    }
    label$3 : {
     $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     if (!((HEAPU8[($3_1 + 69 | 0) >> 0] | 0) & 32 | 0)) {
      break label$3
     }
     $3_1 = $567(Math_imul(HEAP32[($0_1 + 16 | 0) >> 2] | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0) | 0;
     HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
     $1_1 = HEAP32[$0_1 >> 2] | 0;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      HEAP32[$0_1 >> 2] = $1_1 | 8 | 0;
      $569($0_1 | 0, 0 | 0, HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[$2_1 >> 2] = 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $578($0_1 | 0, $2_1 | 0, $0_1 | 0, $2_1 | 0) | 0;
      break label$2;
     }
     HEAP32[$0_1 >> 2] = $1_1 | 2 | 0;
     break label$1;
    }
    $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $1_1 = HEAPU8[$6_1 >> 0] | 0;
    $3_1 = $567(Math_imul(HEAP32[($0_1 + 16 | 0) >> 2] | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0) | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
    $7_1 = HEAP32[$0_1 >> 2] | 0;
    label$5 : {
     if (!$3_1) {
      break label$5
     }
     $8_1 = ($1_1 | 0) == (2 | 0);
     $9_1 = $8_1 ? 80 : 81;
     $10_1 = $8_1 ? 82 : 81;
     HEAP32[$0_1 >> 2] = $7_1 | 8 | 0;
     $536($3_1 | 0, 0 | 0, Math_imul(HEAP32[($0_1 + 16 | 0) >> 2] | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0) | 0;
     $3_1 = $6_1 + 28 | 0;
     $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     $12_1 = ($1_1 | 0) != (2 | 0);
     label$6 : while (1) {
      $1_1 = 0;
      label$7 : while (1) {
       label$8 : {
        label$9 : {
         if ($12_1) {
          break label$9
         }
         $7_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
         $13_1 = HEAPU8[$3_1 >> 0] | 0;
         $14_1 = 2;
         break label$8;
        }
        $7_1 = HEAPU16[($3_1 + 2 | 0) >> 1] | 0;
        $13_1 = HEAPU16[$3_1 >> 1] | 0;
        $14_1 = 4;
       }
       $1_1 = $13_1 + $1_1 | 0;
       $3_1 = $3_1 + $14_1 | 0;
       label$10 : {
        label$11 : {
         if (!$7_1) {
          break label$11
         }
         $3_1 = $3_1 + (FUNCTION_TABLE[$10_1 | 0]($11_1 + ($1_1 << 2 | 0) | 0, $3_1, $7_1, $6_1, $5_1) | 0) | 0;
         $1_1 = $1_1 + $7_1 | 0;
         break label$10;
        }
        if (!$1_1) {
         break label$2
        }
       }
       if (($1_1 | 0) < ($4_1 | 0)) {
        continue label$7
       }
       break label$7;
      };
      $1_1 = 0;
      $3_1 = $3_1 + ($8_1 ? $3_1 & 2 | 0 : 0) | 0;
      label$12 : while (1) {
       $7_1 = $3_1 + 4 | 0;
       $13_1 = $1_1 + (HEAPU16[$3_1 >> 1] | 0) | 0;
       label$13 : {
        label$14 : {
         $3_1 = HEAPU16[($3_1 + 2 | 0) >> 1] | 0;
         if ($3_1) {
          break label$14
         }
         $3_1 = $7_1;
         $1_1 = $13_1;
         break label$13;
        }
        $1_1 = $13_1 + $3_1 | 0;
        $3_1 = $7_1 + (FUNCTION_TABLE[$9_1 | 0]($11_1 + ($13_1 << 2 | 0) | 0, $7_1, $3_1, $6_1, $5_1) | 0) | 0;
       }
       if (($1_1 | 0) < ($4_1 | 0)) {
        continue label$12
       }
       break label$12;
      };
      $11_1 = $11_1 + ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & -4 | 0) | 0;
      continue label$6;
     };
    }
    HEAP32[$0_1 >> 2] = $7_1 | 2 | 0;
    break label$1;
   }
   $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   HEAP32[($3_1 + 68 | 0) >> 2] = (HEAP32[($3_1 + 68 | 0) >> 2] | 0) & -24577 | 0;
   $459(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = 0;
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $577($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $19_1 = 0, $14_1 = 0, $16_1 = 0, $21_1 = 0, $2_1 = 0, $4_1 = 0, $10_1 = 0, $6_1 = 0, $11_1 = 0, $3_1 = 0, $18_1 = 0, $7_1 = 0, $17_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $20_1 = 0, $5_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0;
  $1_1 = -1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $2_1 = HEAPU8[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0;
       switch ($2_1 + -1 | 0 | 0) {
       case 3:
        break label$3;
       case 1:
       case 2:
        break label$4;
       case 0:
        break label$5;
       default:
        break label$1;
       };
      }
      $1_1 = Math_imul(Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) / (2 | 0) | 0) + 1 | 0), 3) + 2 | 0;
      break label$2;
     }
     $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     $1_1 = Math_imul((Math_imul($1_1, $2_1) + ((($1_1 | 0) / (255 | 0) | 0) << 1 | 0) | 0) + 2 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 2 | 0;
     break label$2;
    }
    $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $1_1 = Math_imul((((($1_1 | 0) / (65535 | 0) | 0) + $1_1 | 0) << 2 | 0) + 4 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 4 | 0;
   }
   label$6 : {
    $3_1 = $456($1_1 | 0) | 0;
    if ($3_1) {
     break label$6
    }
    return $262(0 | 0) | 0 | 0;
   }
   $4_1 = $3_1;
   label$7 : {
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (($5_1 | 0) < (1 | 0)) {
     break label$7
    }
    $6_1 = ($2_1 | 0) == (4 | 0) ? 65535 : 255;
    $7_1 = (HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) ^ -1 | 0;
    $8_1 = (HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) & $7_1 | 0;
    $9_1 = HEAP32[(($2_1 << 2 | 0) + 89948 | 0) >> 2] | 0;
    $10_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    $12_1 = ($2_1 | 0) != (4 | 0);
    $1_1 = $3_1;
    $13_1 = 0;
    $4_1 = $1_1;
    label$8 : while (1) {
     $14_1 = 0;
     $15_1 = 0;
     label$9 : while (1) {
      $16_1 = $14_1;
      label$10 : {
       label$11 : {
        if (($16_1 | 0) >= ($10_1 | 0)) {
         break label$11
        }
        label$12 : while (1) {
         if (((FUNCTION_TABLE[$9_1 | 0]($11_1 + Math_imul($16_1, $2_1) | 0) | 0) & $7_1 | 0 | 0) != ($8_1 | 0)) {
          break label$11
         }
         $16_1 = $16_1 + 1 | 0;
         if (($16_1 | 0) != ($10_1 | 0)) {
          continue label$12
         }
         break label$12;
        };
        $17_1 = 0;
        $16_1 = $10_1;
        $18_1 = $16_1;
        break label$10;
       }
       label$13 : {
        if (($16_1 | 0) < ($10_1 | 0)) {
         break label$13
        }
        $17_1 = 0;
        $18_1 = $16_1;
        break label$10;
       }
       $19_1 = $16_1;
       label$14 : {
        if (((FUNCTION_TABLE[$9_1 | 0]($11_1 + Math_imul($19_1, $2_1) | 0) | 0) & $7_1 | 0 | 0) != ($8_1 | 0)) {
         break label$14
        }
        $17_1 = 1;
        $18_1 = $19_1;
        break label$10;
       }
       label$15 : {
        label$16 : {
         label$17 : while (1) {
          $19_1 = $19_1 + 1 | 0;
          if (($19_1 | 0) == ($10_1 | 0)) {
           break label$16
          }
          if (((FUNCTION_TABLE[$9_1 | 0]($11_1 + Math_imul($19_1, $2_1) | 0) | 0) & $7_1 | 0 | 0) != ($8_1 | 0)) {
           continue label$17
          }
          break label$17;
         };
         $18_1 = $19_1;
         break label$15;
        }
        $18_1 = $10_1;
       }
       $17_1 = ($19_1 | 0) < ($10_1 | 0);
      }
      $20_1 = $18_1 - $16_1 | 0;
      $21_1 = $16_1 - $14_1 | 0;
      $19_1 = $21_1;
      label$18 : {
       if (($19_1 | 0) <= ($6_1 | 0)) {
        break label$18
       }
       label$19 : while (1) {
        label$20 : {
         label$21 : {
          if ($12_1) {
           break label$21
          }
          $22_1 = 65535;
          HEAP16[$1_1 >> 1] = $22_1;
          HEAP16[($1_1 + 2 | 0) >> 1] = $22_1 >>> 16 | 0;
          $14_1 = 4;
          break label$20;
         }
         $23_1 = 255;
         HEAP8[$1_1 >> 0] = $23_1;
         HEAP8[($1_1 + 1 | 0) >> 0] = $23_1 >>> 8 | 0;
         $14_1 = 2;
        }
        $1_1 = $1_1 + $14_1 | 0;
        $19_1 = $19_1 - $6_1 | 0;
        if (($19_1 | 0) > ($6_1 | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $14_1 = ($21_1 | 0) == ($10_1 | 0);
      $21_1 = ($20_1 | 0) < ($6_1 | 0) ? $20_1 : $6_1;
      label$22 : {
       label$23 : {
        if ($12_1) {
         break label$23
        }
        HEAP16[($1_1 + 2 | 0) >> 1] = $21_1;
        HEAP16[$1_1 >> 1] = $19_1;
        $19_1 = 4;
        break label$22;
       }
       HEAP8[($1_1 + 1 | 0) >> 0] = $21_1;
       HEAP8[$1_1 >> 0] = $19_1;
       $19_1 = 2;
      }
      $15_1 = $14_1 ? 1 : $15_1;
      $1_1 = $1_1 + $19_1 | 0;
      $19_1 = Math_imul($21_1, $2_1);
      $535($1_1 | 0, $11_1 + Math_imul($16_1, $2_1) | 0 | 0, $19_1 | 0) | 0;
      $1_1 = $1_1 + $19_1 | 0;
      label$24 : {
       $14_1 = $20_1 - $21_1 | 0;
       if (!$14_1) {
        break label$24
       }
       $16_1 = $21_1 + $16_1 | 0;
       label$25 : while (1) {
        $19_1 = ($14_1 | 0) < ($6_1 | 0) ? $14_1 : $6_1;
        label$26 : {
         label$27 : {
          if ($12_1) {
           break label$27
          }
          HEAP16[($1_1 + 2 | 0) >> 1] = $19_1;
          HEAP16[$1_1 >> 1] = 0;
          $21_1 = 4;
          break label$26;
         }
         HEAP8[($1_1 + 1 | 0) >> 0] = $19_1;
         HEAP8[$1_1 >> 0] = 0;
         $21_1 = 2;
        }
        $1_1 = $1_1 + $21_1 | 0;
        $21_1 = Math_imul($19_1, $2_1);
        $535($1_1 | 0, $11_1 + Math_imul($16_1, $2_1) | 0 | 0, $21_1 | 0) | 0;
        $1_1 = $1_1 + $21_1 | 0;
        $16_1 = $16_1 + $19_1 | 0;
        $14_1 = $14_1 - $19_1 | 0;
        if ($14_1) {
         continue label$25
        }
        break label$25;
       };
      }
      $4_1 = $15_1 ? $4_1 : $1_1;
      $14_1 = $18_1;
      if ($17_1) {
       continue label$9
      }
      break label$9;
     };
     $11_1 = $11_1 + (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
     $13_1 = $13_1 + 1 | 0;
     if (($13_1 | 0) != ($5_1 | 0)) {
      continue label$8
     }
     break label$8;
    };
   }
   label$28 : {
    label$29 : {
     if (($2_1 | 0) != (4 | 0)) {
      break label$29
     }
     $24_1 = 0;
     HEAP16[$4_1 >> 1] = $24_1;
     HEAP16[($4_1 + 2 | 0) >> 1] = $24_1 >>> 16 | 0;
     $1_1 = 4;
     break label$28;
    }
    $25_1 = 0;
    HEAP8[$4_1 >> 0] = $25_1;
    HEAP8[($4_1 + 1 | 0) >> 0] = $25_1 >>> 8 | 0;
    $1_1 = 2;
   }
   $1_1 = $4_1 + $1_1 | 0;
   label$30 : {
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    if ($19_1 & 1 | 0) {
     break label$30
    }
    $14_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    label$31 : {
     label$32 : {
      if (!($19_1 & 8 | 0)) {
       break label$32
      }
      $568($14_1 | 0);
      HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -9 | 0;
      break label$31;
     }
     $459($14_1 | 0);
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   }
   $1_1 = $458($3_1 | 0, $1_1 - $3_1 | 0 | 0) | 0;
   HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = $1_1 ? $1_1 : $3_1;
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $578($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $12_1 = 0, $6_1 = 0, $14_1 = 0, $13_1 = 0, $7_1 = 0, $5_1 = 0, $8_1 = 0, $18_1 = 0, $15_1 = 0, $10_1 = 0, $11_1 = 0, $16_1 = 0, $17_1 = 0, $30_1 = 0, $4_1 = 0, $23_1 = 0, $31_1 = 0, $19_1 = 0, $26_1 = 0, $27_1 = 0, $25_1 = 0, $28_1 = 0, $9_1 = 0, $24_1 = 0, $29_1 = 0, $20_1 = 0, $22_1 = 0, $21_1 = 0, $236_1 = 0, $310_1 = 0, $386_1 = 0, $462_1 = 0, $838_1 = 0, $1213_1 = 0, $1376 = 0, $1404 = 0, $1412 = 0, $1545 = 0, $1577 = 0, $1595 = 0, $1615 = 0, $1627 = 0, $1943 = 0, $1967 = 0, $1977 = 0, $1997 = 0, $2007 = 0, $2493 = 0, $2799 = 0, $2923 = 0, $2951 = 0, $2959 = 0, $3053 = 0, $3085 = 0, $3103 = 0, $3123 = 0, $3135 = 0, $3374 = 0, $3398 = 0, $3408 = 0, $3428 = 0, $3438 = 0, $3519 = 0, $3521 = 0, $3625 = 0, $3627 = 0;
  $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAPU8[$2_1 >> 0] | 0) & 2 | 0)) {
    break label$1
   }
   if (($805($2_1 | 0) | 0 | 0) >= (0 | 0)) {
    break label$1
   }
   return -1 | 0;
  }
  $5_1 = HEAP32[$3_1 >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $7_1 = HEAPU8[($6_1 + 9 | 0) >> 0] | 0;
  $8_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $9_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
  $10_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
  $11_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $12_1 = HEAP32[($11_1 + 12 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    $13_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (!$13_1) {
     break label$3
    }
    label$4 : {
     switch ($7_1 + -1 | 0 | 0) {
     case 0:
      label$8 : while (1) {
       $3_1 = 0;
       label$9 : while (1) {
        $14_1 = $12_1 + 2 | 0;
        $3_1 = $3_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
        label$10 : {
         label$11 : {
          $12_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
          if (!$12_1) {
           break label$11
          }
          $3_1 = $3_1 + $12_1 | 0;
          $12_1 = $14_1 + $12_1 | 0;
          break label$10;
         }
         $12_1 = $14_1;
         if (!$3_1) {
          break label$2
         }
        }
        if (($3_1 | 0) != ($4_1 | 0)) {
         continue label$9
        }
        break label$9;
       };
       $13_1 = $13_1 + -1 | 0;
       if ($13_1) {
        continue label$8
       }
       break label$3;
      };
     case 1:
      label$12 : while (1) {
       $3_1 = 0;
       label$13 : while (1) {
        $14_1 = $12_1 + 2 | 0;
        $3_1 = $3_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
        label$14 : {
         label$15 : {
          $12_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
          if (!$12_1) {
           break label$15
          }
          $3_1 = $3_1 + $12_1 | 0;
          $12_1 = $14_1 + ($12_1 << 1 | 0) | 0;
          break label$14;
         }
         $12_1 = $14_1;
         if (!$3_1) {
          break label$2
         }
        }
        if (($3_1 | 0) != ($4_1 | 0)) {
         continue label$13
        }
        break label$13;
       };
       $13_1 = $13_1 + -1 | 0;
       if (!$13_1) {
        break label$3
       }
       continue label$12;
      };
     case 2:
      label$16 : while (1) {
       $3_1 = 0;
       label$17 : while (1) {
        $14_1 = $12_1 + 2 | 0;
        $3_1 = $3_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
        label$18 : {
         label$19 : {
          $12_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
          if (!$12_1) {
           break label$19
          }
          $3_1 = $3_1 + $12_1 | 0;
          $12_1 = $14_1 + Math_imul($12_1, 3) | 0;
          break label$18;
         }
         $12_1 = $14_1;
         if (!$3_1) {
          break label$2
         }
        }
        if (($3_1 | 0) != ($4_1 | 0)) {
         continue label$17
        }
        break label$17;
       };
       $13_1 = $13_1 + -1 | 0;
       if (!$13_1) {
        break label$3
       }
       continue label$16;
      };
     case 3:
      break label$4;
     default:
      break label$3;
     };
    }
    label$20 : while (1) {
     $3_1 = 0;
     label$21 : while (1) {
      $14_1 = $12_1 + 4 | 0;
      $3_1 = $3_1 + (HEAPU16[$12_1 >> 1] | 0) | 0;
      label$22 : {
       label$23 : {
        $12_1 = HEAPU16[($12_1 + 2 | 0) >> 1] | 0;
        if (!$12_1) {
         break label$23
        }
        $3_1 = $3_1 + $12_1 | 0;
        $12_1 = $14_1 + ($12_1 << 2 | 0) | 0;
        break label$22;
       }
       $12_1 = $14_1;
       if (!$3_1) {
        break label$2
       }
      }
      if (($3_1 | 0) != ($4_1 | 0)) {
       continue label$21
      }
      break label$21;
     };
     $13_1 = $13_1 + -1 | 0;
     if ($13_1) {
      continue label$20
     }
     break label$20;
    };
   }
   $15_1 = ($10_1 + Math_imul($9_1, $8_1) | 0) + Math_imul($5_1, $7_1) | 0;
   $3_1 = HEAPU8[($11_1 + 79 | 0) >> 0] | 0;
   label$24 : {
    label$25 : {
     label$26 : {
      label$27 : {
       label$28 : {
        $16_1 = HEAP32[$1_1 >> 2] | 0;
        if ($16_1) {
         break label$28
        }
        if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
         break label$27
        }
       }
       $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       $14_1 = HEAPU8[($6_1 + 9 | 0) >> 0] | 0;
       label$29 : {
        if (($3_1 | 0) != (255 | 0)) {
         break label$29
        }
        label$30 : {
         switch ($14_1 + -1 | 0 | 0) {
         case 0:
          $7_1 = $15_1 - $16_1 | 0;
          $0_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + $16_1 | 0;
          $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
          label$34 : while (1) {
           $3_1 = 0;
           label$35 : while (1) {
            $14_1 = $12_1 + 2 | 0;
            $3_1 = $3_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
            label$36 : {
             label$37 : {
              $6_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
              if (!$6_1) {
               break label$37
              }
              label$38 : {
               if (($3_1 | 0) >= ($0_1 | 0)) {
                break label$38
               }
               label$39 : {
                label$40 : {
                 $12_1 = $16_1 - $3_1 | 0;
                 if (($12_1 | 0) >= (1 | 0)) {
                  break label$40
                 }
                 $12_1 = 0;
                 $1_1 = $6_1;
                 break label$39;
                }
                $1_1 = $6_1 - $12_1 | 0;
                if (($1_1 | 0) < (1 | 0)) {
                 break label$38
                }
               }
               $13_1 = $12_1 + $3_1 | 0;
               $236_1 = $14_1 + $12_1 | 0;
               $12_1 = $0_1 - $13_1 | 0;
               $535($7_1 + $13_1 | 0 | 0, $236_1 | 0, (($1_1 | 0) < ($12_1 | 0) ? $1_1 : $12_1) | 0) | 0;
              }
              $3_1 = $3_1 + $6_1 | 0;
              $12_1 = $14_1 + $6_1 | 0;
              break label$36;
             }
             $12_1 = $14_1;
             if (!$3_1) {
              break label$2
             }
            }
            if (($3_1 | 0) != ($4_1 | 0)) {
             continue label$35
            }
            break label$35;
           };
           $7_1 = $7_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
           $5_1 = $5_1 + -1 | 0;
           if ($5_1) {
            continue label$34
           }
           break label$2;
          };
         case 1:
          $7_1 = $15_1 - ($16_1 << 1 | 0) | 0;
          $0_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + $16_1 | 0;
          $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
          label$41 : while (1) {
           $3_1 = 0;
           label$42 : while (1) {
            $14_1 = $12_1 + 2 | 0;
            $3_1 = $3_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
            label$43 : {
             label$44 : {
              $6_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
              if (!$6_1) {
               break label$44
              }
              label$45 : {
               if (($3_1 | 0) >= ($0_1 | 0)) {
                break label$45
               }
               label$46 : {
                label$47 : {
                 $12_1 = $16_1 - $3_1 | 0;
                 if (($12_1 | 0) >= (1 | 0)) {
                  break label$47
                 }
                 $12_1 = 0;
                 $1_1 = $6_1;
                 break label$46;
                }
                $1_1 = $6_1 - $12_1 | 0;
                if (($1_1 | 0) < (1 | 0)) {
                 break label$45
                }
               }
               $13_1 = $12_1 + $3_1 | 0;
               $310_1 = $14_1 + ($12_1 << 1 | 0) | 0;
               $12_1 = $0_1 - $13_1 | 0;
               $535($7_1 + ($13_1 << 1 | 0) | 0 | 0, $310_1 | 0, (($1_1 | 0) < ($12_1 | 0) ? $1_1 : $12_1) << 1 | 0 | 0) | 0;
              }
              $3_1 = $3_1 + $6_1 | 0;
              $12_1 = $14_1 + ($6_1 << 1 | 0) | 0;
              break label$43;
             }
             $12_1 = $14_1;
             if (!$3_1) {
              break label$2
             }
            }
            if (($3_1 | 0) != ($4_1 | 0)) {
             continue label$42
            }
            break label$42;
           };
           $7_1 = $7_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
           $5_1 = $5_1 + -1 | 0;
           if ($5_1) {
            continue label$41
           }
           break label$2;
          };
         case 2:
          $7_1 = $15_1 + Math_imul($16_1, -3) | 0;
          $0_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + $16_1 | 0;
          $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
          label$48 : while (1) {
           $3_1 = 0;
           label$49 : while (1) {
            $14_1 = $12_1 + 2 | 0;
            $3_1 = $3_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
            label$50 : {
             label$51 : {
              $6_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
              if (!$6_1) {
               break label$51
              }
              label$52 : {
               if (($3_1 | 0) >= ($0_1 | 0)) {
                break label$52
               }
               label$53 : {
                label$54 : {
                 $12_1 = $16_1 - $3_1 | 0;
                 if (($12_1 | 0) >= (1 | 0)) {
                  break label$54
                 }
                 $12_1 = 0;
                 $1_1 = $6_1;
                 break label$53;
                }
                $1_1 = $6_1 - $12_1 | 0;
                if (($1_1 | 0) < (1 | 0)) {
                 break label$52
                }
               }
               $13_1 = $12_1 + $3_1 | 0;
               $386_1 = $14_1 + Math_imul($12_1, 3) | 0;
               $12_1 = $0_1 - $13_1 | 0;
               $535($7_1 + Math_imul($13_1, 3) | 0 | 0, $386_1 | 0, Math_imul(($1_1 | 0) < ($12_1 | 0) ? $1_1 : $12_1, 3) | 0) | 0;
              }
              $3_1 = $3_1 + $6_1 | 0;
              $12_1 = $14_1 + Math_imul($6_1, 3) | 0;
              break label$50;
             }
             $12_1 = $14_1;
             if (!$3_1) {
              break label$2
             }
            }
            if (($3_1 | 0) != ($4_1 | 0)) {
             continue label$49
            }
            break label$49;
           };
           $7_1 = $7_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
           $5_1 = $5_1 + -1 | 0;
           if ($5_1) {
            continue label$48
           }
           break label$2;
          };
         case 3:
          break label$30;
         default:
          break label$2;
         };
        }
        $7_1 = $15_1 - ($16_1 << 2 | 0) | 0;
        $0_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + $16_1 | 0;
        $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        label$55 : while (1) {
         $3_1 = 0;
         label$56 : while (1) {
          $14_1 = $12_1 + 4 | 0;
          $3_1 = $3_1 + (HEAPU16[$12_1 >> 1] | 0) | 0;
          label$57 : {
           label$58 : {
            $6_1 = HEAPU16[($12_1 + 2 | 0) >> 1] | 0;
            if (!$6_1) {
             break label$58
            }
            label$59 : {
             if (($3_1 | 0) >= ($0_1 | 0)) {
              break label$59
             }
             label$60 : {
              label$61 : {
               $12_1 = $16_1 - $3_1 | 0;
               if (($12_1 | 0) >= (1 | 0)) {
                break label$61
               }
               $12_1 = 0;
               $1_1 = $6_1;
               break label$60;
              }
              $1_1 = $6_1 - $12_1 | 0;
              if (($1_1 | 0) < (1 | 0)) {
               break label$59
              }
             }
             $13_1 = $12_1 + $3_1 | 0;
             $462_1 = $14_1 + ($12_1 << 2 | 0) | 0;
             $12_1 = $0_1 - $13_1 | 0;
             $535($7_1 + ($13_1 << 2 | 0) | 0 | 0, $462_1 | 0, (($1_1 | 0) < ($12_1 | 0) ? $1_1 : $12_1) << 2 | 0 | 0) | 0;
            }
            $3_1 = $3_1 + $6_1 | 0;
            $12_1 = $14_1 + ($6_1 << 2 | 0) | 0;
            break label$57;
           }
           $12_1 = $14_1;
           if (!$3_1) {
            break label$2
           }
          }
          if (($3_1 | 0) != ($4_1 | 0)) {
           continue label$56
          }
          break label$56;
         };
         $7_1 = $7_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
         $5_1 = $5_1 + -1 | 0;
         if ($5_1) {
          continue label$55
         }
         break label$2;
        };
       }
       label$62 : {
        switch ($14_1 + -2 | 0 | 0) {
        case 0:
         label$65 : {
          label$66 : {
           $17_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
           $18_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
           $19_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
           $14_1 = $17_1 | $18_1 | 0 | $19_1 | 0;
           if (($14_1 | 0) == (32767 | 0)) {
            break label$66
           }
           if (($14_1 | 0) != (65535 | 0)) {
            break label$65
           }
           label$67 : {
            if (($18_1 | 0) == (2016 | 0)) {
             break label$67
            }
            if (($17_1 | 0) == (2016 | 0)) {
             break label$67
            }
            if (($19_1 | 0) != (2016 | 0)) {
             break label$65
            }
           }
           $10_1 = $15_1 - ($16_1 << 1 | 0) | 0;
           $8_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + $16_1 | 0;
           $11_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
           label$68 : {
            if (($3_1 | 0) != (128 | 0)) {
             break label$68
            }
            label$69 : while (1) {
             $14_1 = 0;
             label$70 : while (1) {
              $7_1 = $12_1 + 2 | 0;
              $14_1 = $14_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
              label$71 : {
               label$72 : {
                $13_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
                if (!$13_1) {
                 break label$72
                }
                label$73 : {
                 if (($14_1 | 0) >= ($8_1 | 0)) {
                  break label$73
                 }
                 label$74 : {
                  label$75 : {
                   $6_1 = $16_1 - $14_1 | 0;
                   if (($6_1 | 0) >= (1 | 0)) {
                    break label$75
                   }
                   $6_1 = 0;
                   $3_1 = $13_1;
                   break label$74;
                  }
                  $3_1 = $13_1 - $6_1 | 0;
                  if (($3_1 | 0) < (1 | 0)) {
                   break label$73
                  }
                 }
                 $0_1 = $6_1 + $14_1 | 0;
                 $12_1 = $8_1 - $0_1 | 0;
                 $12_1 = ($3_1 | 0) < ($12_1 | 0) ? $3_1 : $12_1;
                 label$76 : {
                  $3_1 = $10_1 + ($0_1 << 1 | 0) | 0;
                  $6_1 = $7_1 + ($6_1 << 1 | 0) | 0;
                  if (!(($3_1 ^ $6_1 | 0) & 3 | 0)) {
                   break label$76
                  }
                  if (!$12_1) {
                   break label$73
                  }
                  label$77 : {
                   label$78 : {
                    if ($12_1 & 1 | 0) {
                     break label$78
                    }
                    $0_1 = $12_1;
                    break label$77;
                   }
                   $0_1 = HEAPU16[$3_1 >> 1] | 0;
                   $1_1 = HEAPU16[$6_1 >> 1] | 0;
                   HEAP16[$3_1 >> 1] = ((($0_1 & 63454 | 0) + ($1_1 & 63454 | 0) | 0) >>> 1 | 0) + (($1_1 & $0_1 | 0) & 2081 | 0) | 0;
                   $3_1 = $3_1 + 2 | 0;
                   $6_1 = $6_1 + 2 | 0;
                   $0_1 = $12_1 + -1 | 0;
                  }
                  if (($12_1 | 0) == (1 | 0)) {
                   break label$73
                  }
                  label$79 : while (1) {
                   $12_1 = HEAPU16[$3_1 >> 1] | 0;
                   $1_1 = HEAPU16[$6_1 >> 1] | 0;
                   HEAP16[$3_1 >> 1] = ((($12_1 & 63454 | 0) + ($1_1 & 63454 | 0) | 0) >>> 1 | 0) + (($1_1 & $12_1 | 0) & 2081 | 0) | 0;
                   $12_1 = HEAPU16[($3_1 + 2 | 0) >> 1] | 0;
                   $1_1 = HEAPU16[($6_1 + 2 | 0) >> 1] | 0;
                   HEAP16[($3_1 + 2 | 0) >> 1] = ((($12_1 & 63454 | 0) + ($1_1 & 63454 | 0) | 0) >>> 1 | 0) + (($1_1 & $12_1 | 0) & 2081 | 0) | 0;
                   $3_1 = $3_1 + 4 | 0;
                   $6_1 = $6_1 + 4 | 0;
                   $0_1 = $0_1 + -2 | 0;
                   if ($0_1) {
                    continue label$79
                   }
                   break label$73;
                  };
                 }
                 label$80 : {
                  if (!($6_1 & 3 | 0)) {
                   break label$80
                  }
                  $0_1 = HEAPU16[$3_1 >> 1] | 0;
                  $1_1 = HEAPU16[$6_1 >> 1] | 0;
                  HEAP16[$3_1 >> 1] = ((($0_1 & 63454 | 0) + ($1_1 & 63454 | 0) | 0) >>> 1 | 0) + (($1_1 & $0_1 | 0) & 2081 | 0) | 0;
                  $12_1 = $12_1 + -1 | 0;
                  $3_1 = $3_1 + 2 | 0;
                  $6_1 = $6_1 + 2 | 0;
                 }
                 label$81 : {
                  label$82 : {
                   if ($12_1 >>> 0 >= 2 >>> 0) {
                    break label$82
                   }
                   $0_1 = $12_1;
                   break label$81;
                  }
                  label$83 : {
                   $0_1 = $12_1 + -2 | 0;
                   if ($0_1 & 2 | 0) {
                    break label$83
                   }
                   $12_1 = HEAP32[$6_1 >> 2] | 0;
                   $1_1 = HEAP32[$3_1 >> 2] | 0;
                   HEAP32[$3_1 >> 2] = ((($12_1 & $1_1 | 0) & 136382497 | 0) + (($12_1 >>> 1 | 0) & 2079292399 | 0) | 0) + (($1_1 >>> 1 | 0) & 2079292399 | 0) | 0;
                   $3_1 = $3_1 + 4 | 0;
                   $6_1 = $6_1 + 4 | 0;
                   $12_1 = $0_1;
                  }
                  if ($0_1 >>> 0 < 2 >>> 0) {
                   break label$81
                  }
                  label$84 : while (1) {
                   $0_1 = HEAP32[$6_1 >> 2] | 0;
                   $1_1 = HEAP32[$3_1 >> 2] | 0;
                   HEAP32[$3_1 >> 2] = ((($0_1 & $1_1 | 0) & 136382497 | 0) + (($0_1 >>> 1 | 0) & 2079292399 | 0) | 0) + (($1_1 >>> 1 | 0) & 2079292399 | 0) | 0;
                   $0_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                   $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                   HEAP32[($3_1 + 4 | 0) >> 2] = ((($0_1 & $1_1 | 0) & 136382497 | 0) + (($0_1 >>> 1 | 0) & 2079292399 | 0) | 0) + (($1_1 >>> 1 | 0) & 2079292399 | 0) | 0;
                   $3_1 = $3_1 + 8 | 0;
                   $6_1 = $6_1 + 8 | 0;
                   $12_1 = $12_1 + -4 | 0;
                   $0_1 = $12_1;
                   if ($12_1 >>> 0 > 1 >>> 0) {
                    continue label$84
                   }
                   break label$84;
                  };
                 }
                 if (!$0_1) {
                  break label$73
                 }
                 $12_1 = HEAPU16[$3_1 >> 1] | 0;
                 $6_1 = HEAPU16[$6_1 >> 1] | 0;
                 HEAP16[$3_1 >> 1] = ((($12_1 & 63454 | 0) + ($6_1 & 63454 | 0) | 0) >>> 1 | 0) + (($6_1 & $12_1 | 0) & 2081 | 0) | 0;
                }
                $14_1 = $14_1 + $13_1 | 0;
                $12_1 = $7_1 + ($13_1 << 1 | 0) | 0;
                break label$71;
               }
               $12_1 = $7_1;
               if (!$14_1) {
                break label$2
               }
              }
              if (($14_1 | 0) != ($4_1 | 0)) {
               continue label$70
              }
              break label$70;
             };
             $10_1 = $10_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
             $11_1 = $11_1 + -1 | 0;
             if ($11_1) {
              continue label$69
             }
             break label$2;
            };
           }
           $13_1 = $3_1 >>> 3 | 0;
           label$85 : while (1) {
            $0_1 = 0;
            label$86 : while (1) {
             $5_1 = $12_1 + 2 | 0;
             $0_1 = $0_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
             label$87 : {
              label$88 : {
               $7_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
               if (!$7_1) {
                break label$88
               }
               label$89 : {
                if (($0_1 | 0) >= ($8_1 | 0)) {
                 break label$89
                }
                label$90 : {
                 label$91 : {
                  $3_1 = $16_1 - $0_1 | 0;
                  if (($3_1 | 0) >= (1 | 0)) {
                   break label$91
                  }
                  $3_1 = 0;
                  $6_1 = $7_1;
                  break label$90;
                 }
                 $6_1 = $7_1 - $3_1 | 0;
                 if (($6_1 | 0) < (1 | 0)) {
                  break label$89
                 }
                }
                $14_1 = $3_1 + $0_1 | 0;
                $12_1 = $8_1 - $14_1 | 0;
                $1_1 = ($6_1 | 0) < ($12_1 | 0) ? $6_1 : $12_1;
                if (($1_1 | 0) < (1 | 0)) {
                 break label$89
                }
                $6_1 = $5_1 + ($3_1 << 1 | 0) | 0;
                $3_1 = $10_1 + ($14_1 << 1 | 0) | 0;
                $12_1 = 0;
                label$92 : while (1) {
                 $14_1 = HEAPU16[$6_1 >> 1] | 0;
                 $838_1 = ($14_1 << 16 | 0 | $14_1 | 0) & 132184095 | 0;
                 $14_1 = HEAPU16[$3_1 >> 1] | 0;
                 $14_1 = ($14_1 << 16 | 0 | $14_1 | 0) & 132184095 | 0;
                 $14_1 = ((Math_imul($838_1 - $14_1 | 0, $13_1) >>> 5 | 0) + $14_1 | 0) & 132184095 | 0;
                 HEAP16[$3_1 >> 1] = $14_1 >>> 16 | 0 | $14_1 | 0;
                 $3_1 = $3_1 + 2 | 0;
                 $6_1 = $6_1 + 2 | 0;
                 $12_1 = $12_1 + 1 | 0;
                 if (($12_1 | 0) != ($1_1 | 0)) {
                  continue label$92
                 }
                 break label$92;
                };
               }
               $0_1 = $0_1 + $7_1 | 0;
               $12_1 = $5_1 + ($7_1 << 1 | 0) | 0;
               break label$87;
              }
              $12_1 = $5_1;
              if (!$0_1) {
               break label$2
              }
             }
             if (($0_1 | 0) != ($4_1 | 0)) {
              continue label$86
             }
             break label$86;
            };
            $10_1 = $10_1 + $9_1 | 0;
            $11_1 = $11_1 + -1 | 0;
            if ($11_1) {
             continue label$85
            }
            break label$2;
           };
          }
          label$93 : {
           if (($18_1 | 0) == (992 | 0)) {
            break label$93
           }
           if (($17_1 | 0) == (992 | 0)) {
            break label$93
           }
           if (($19_1 | 0) != (992 | 0)) {
            break label$65
           }
          }
          $10_1 = $15_1 - ($16_1 << 1 | 0) | 0;
          $8_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + $16_1 | 0;
          $11_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
          label$94 : {
           if (($3_1 | 0) != (128 | 0)) {
            break label$94
           }
           label$95 : while (1) {
            $14_1 = 0;
            label$96 : while (1) {
             $7_1 = $12_1 + 2 | 0;
             $14_1 = $14_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
             label$97 : {
              label$98 : {
               $13_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
               if (!$13_1) {
                break label$98
               }
               label$99 : {
                if (($14_1 | 0) >= ($8_1 | 0)) {
                 break label$99
                }
                label$100 : {
                 label$101 : {
                  $6_1 = $16_1 - $14_1 | 0;
                  if (($6_1 | 0) >= (1 | 0)) {
                   break label$101
                  }
                  $6_1 = 0;
                  $3_1 = $13_1;
                  break label$100;
                 }
                 $3_1 = $13_1 - $6_1 | 0;
                 if (($3_1 | 0) < (1 | 0)) {
                  break label$99
                 }
                }
                $0_1 = $6_1 + $14_1 | 0;
                $12_1 = $8_1 - $0_1 | 0;
                $12_1 = ($3_1 | 0) < ($12_1 | 0) ? $3_1 : $12_1;
                label$102 : {
                 $3_1 = $10_1 + ($0_1 << 1 | 0) | 0;
                 $6_1 = $7_1 + ($6_1 << 1 | 0) | 0;
                 if (!(($3_1 ^ $6_1 | 0) & 3 | 0)) {
                  break label$102
                 }
                 if (!$12_1) {
                  break label$99
                 }
                 label$103 : {
                  label$104 : {
                   if ($12_1 & 1 | 0) {
                    break label$104
                   }
                   $0_1 = $12_1;
                   break label$103;
                  }
                  $0_1 = HEAPU16[$3_1 >> 1] | 0;
                  $1_1 = HEAPU16[$6_1 >> 1] | 0;
                  HEAP16[$3_1 >> 1] = ((($0_1 & 64478 | 0) + ($1_1 & 64478 | 0) | 0) >>> 1 | 0) + (($1_1 & $0_1 | 0) & 1057 | 0) | 0;
                  $3_1 = $3_1 + 2 | 0;
                  $6_1 = $6_1 + 2 | 0;
                  $0_1 = $12_1 + -1 | 0;
                 }
                 if (($12_1 | 0) == (1 | 0)) {
                  break label$99
                 }
                 label$105 : while (1) {
                  $12_1 = HEAPU16[$3_1 >> 1] | 0;
                  $1_1 = HEAPU16[$6_1 >> 1] | 0;
                  HEAP16[$3_1 >> 1] = ((($12_1 & 64478 | 0) + ($1_1 & 64478 | 0) | 0) >>> 1 | 0) + (($1_1 & $12_1 | 0) & 1057 | 0) | 0;
                  $12_1 = HEAPU16[($3_1 + 2 | 0) >> 1] | 0;
                  $1_1 = HEAPU16[($6_1 + 2 | 0) >> 1] | 0;
                  HEAP16[($3_1 + 2 | 0) >> 1] = ((($12_1 & 64478 | 0) + ($1_1 & 64478 | 0) | 0) >>> 1 | 0) + (($1_1 & $12_1 | 0) & 1057 | 0) | 0;
                  $3_1 = $3_1 + 4 | 0;
                  $6_1 = $6_1 + 4 | 0;
                  $0_1 = $0_1 + -2 | 0;
                  if ($0_1) {
                   continue label$105
                  }
                  break label$99;
                 };
                }
                label$106 : {
                 if (!($6_1 & 3 | 0)) {
                  break label$106
                 }
                 $0_1 = HEAPU16[$3_1 >> 1] | 0;
                 $1_1 = HEAPU16[$6_1 >> 1] | 0;
                 HEAP16[$3_1 >> 1] = ((($0_1 & 64478 | 0) + ($1_1 & 64478 | 0) | 0) >>> 1 | 0) + (($1_1 & $0_1 | 0) & 1057 | 0) | 0;
                 $12_1 = $12_1 + -1 | 0;
                 $3_1 = $3_1 + 2 | 0;
                 $6_1 = $6_1 + 2 | 0;
                }
                label$107 : {
                 label$108 : {
                  if ($12_1 >>> 0 >= 2 >>> 0) {
                   break label$108
                  }
                  $0_1 = $12_1;
                  break label$107;
                 }
                 label$109 : {
                  $0_1 = $12_1 + -2 | 0;
                  if ($0_1 & 2 | 0) {
                   break label$109
                  }
                  $12_1 = HEAP32[$6_1 >> 2] | 0;
                  $1_1 = HEAP32[$3_1 >> 2] | 0;
                  HEAP32[$3_1 >> 2] = ((($12_1 & $1_1 | 0) & 69272609 | 0) + (($12_1 >>> 1 | 0) & 2112847343 | 0) | 0) + (($1_1 >>> 1 | 0) & 2112847343 | 0) | 0;
                  $3_1 = $3_1 + 4 | 0;
                  $6_1 = $6_1 + 4 | 0;
                  $12_1 = $0_1;
                 }
                 if ($0_1 >>> 0 < 2 >>> 0) {
                  break label$107
                 }
                 label$110 : while (1) {
                  $0_1 = HEAP32[$6_1 >> 2] | 0;
                  $1_1 = HEAP32[$3_1 >> 2] | 0;
                  HEAP32[$3_1 >> 2] = ((($0_1 & $1_1 | 0) & 69272609 | 0) + (($0_1 >>> 1 | 0) & 2112847343 | 0) | 0) + (($1_1 >>> 1 | 0) & 2112847343 | 0) | 0;
                  $0_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                  $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                  HEAP32[($3_1 + 4 | 0) >> 2] = ((($0_1 & $1_1 | 0) & 69272609 | 0) + (($0_1 >>> 1 | 0) & 2112847343 | 0) | 0) + (($1_1 >>> 1 | 0) & 2112847343 | 0) | 0;
                  $3_1 = $3_1 + 8 | 0;
                  $6_1 = $6_1 + 8 | 0;
                  $12_1 = $12_1 + -4 | 0;
                  $0_1 = $12_1;
                  if ($12_1 >>> 0 > 1 >>> 0) {
                   continue label$110
                  }
                  break label$110;
                 };
                }
                if (!$0_1) {
                 break label$99
                }
                $12_1 = HEAPU16[$3_1 >> 1] | 0;
                $6_1 = HEAPU16[$6_1 >> 1] | 0;
                HEAP16[$3_1 >> 1] = ((($12_1 & 64478 | 0) + ($6_1 & 64478 | 0) | 0) >>> 1 | 0) + (($6_1 & $12_1 | 0) & 1057 | 0) | 0;
               }
               $14_1 = $14_1 + $13_1 | 0;
               $12_1 = $7_1 + ($13_1 << 1 | 0) | 0;
               break label$97;
              }
              $12_1 = $7_1;
              if (!$14_1) {
               break label$2
              }
             }
             if (($14_1 | 0) != ($4_1 | 0)) {
              continue label$96
             }
             break label$96;
            };
            $10_1 = $10_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
            $11_1 = $11_1 + -1 | 0;
            if ($11_1) {
             continue label$95
            }
            break label$2;
           };
          }
          $13_1 = $3_1 >>> 3 | 0;
          label$111 : while (1) {
           $0_1 = 0;
           label$112 : while (1) {
            $5_1 = $12_1 + 2 | 0;
            $0_1 = $0_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
            label$113 : {
             label$114 : {
              $7_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
              if (!$7_1) {
               break label$114
              }
              label$115 : {
               if (($0_1 | 0) >= ($8_1 | 0)) {
                break label$115
               }
               label$116 : {
                label$117 : {
                 $3_1 = $16_1 - $0_1 | 0;
                 if (($3_1 | 0) >= (1 | 0)) {
                  break label$117
                 }
                 $3_1 = 0;
                 $6_1 = $7_1;
                 break label$116;
                }
                $6_1 = $7_1 - $3_1 | 0;
                if (($6_1 | 0) < (1 | 0)) {
                 break label$115
                }
               }
               $14_1 = $3_1 + $0_1 | 0;
               $12_1 = $8_1 - $14_1 | 0;
               $1_1 = ($6_1 | 0) < ($12_1 | 0) ? $6_1 : $12_1;
               if (($1_1 | 0) < (1 | 0)) {
                break label$115
               }
               $6_1 = $5_1 + ($3_1 << 1 | 0) | 0;
               $3_1 = $10_1 + ($14_1 << 1 | 0) | 0;
               $12_1 = 0;
               label$118 : while (1) {
                $14_1 = HEAPU16[$6_1 >> 1] | 0;
                $1213_1 = ($14_1 << 16 | 0 | $14_1 | 0) & 65043487 | 0;
                $14_1 = HEAPU16[$3_1 >> 1] | 0;
                $14_1 = ($14_1 << 16 | 0 | $14_1 | 0) & 65043487 | 0;
                $14_1 = ((Math_imul($1213_1 - $14_1 | 0, $13_1) >>> 5 | 0) + $14_1 | 0) & 65043487 | 0;
                HEAP16[$3_1 >> 1] = $14_1 >>> 16 | 0 | $14_1 | 0;
                $3_1 = $3_1 + 2 | 0;
                $6_1 = $6_1 + 2 | 0;
                $12_1 = $12_1 + 1 | 0;
                if (($12_1 | 0) != ($1_1 | 0)) {
                 continue label$118
                }
                break label$118;
               };
              }
              $0_1 = $0_1 + $7_1 | 0;
              $12_1 = $5_1 + ($7_1 << 1 | 0) | 0;
              break label$113;
             }
             $12_1 = $5_1;
             if (!$0_1) {
              break label$2
             }
            }
            if (($0_1 | 0) != ($4_1 | 0)) {
             continue label$112
            }
            break label$112;
           };
           $10_1 = $10_1 + $9_1 | 0;
           $11_1 = $11_1 + -1 | 0;
           if ($11_1) {
            continue label$111
           }
           break label$2;
          };
         }
         $20_1 = $15_1 - ($16_1 << 1 | 0) | 0;
         $21_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + $16_1 | 0;
         $22_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
         label$119 : while (1) {
          $23_1 = 0;
          label$120 : while (1) {
           $24_1 = $12_1 + 2 | 0;
           $23_1 = $23_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
           label$121 : {
            label$122 : {
             $25_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
             if (!$25_1) {
              break label$122
             }
             label$123 : {
              if (($23_1 | 0) >= ($21_1 | 0)) {
               break label$123
              }
              label$124 : {
               label$125 : {
                $12_1 = $16_1 - $23_1 | 0;
                if (($12_1 | 0) >= (1 | 0)) {
                 break label$125
                }
                $12_1 = 0;
                $14_1 = $25_1;
                break label$124;
               }
               $14_1 = $25_1 - $12_1 | 0;
               if (($14_1 | 0) < (1 | 0)) {
                break label$123
               }
              }
              $1_1 = $12_1 + $23_1 | 0;
              $0_1 = $21_1 - $1_1 | 0;
              $26_1 = ($14_1 | 0) < ($0_1 | 0) ? $14_1 : $0_1;
              if (($26_1 | 0) < (1 | 0)) {
               break label$123
              }
              $14_1 = $24_1 + ($12_1 << 1 | 0) | 0;
              $12_1 = $20_1 + ($1_1 << 1 | 0) | 0;
              $27_1 = HEAPU8[($6_1 + 30 | 0) >> 0] | 0;
              $8_1 = HEAP32[(117504 + ($27_1 << 2 | 0) | 0) >> 2] | 0;
              $28_1 = HEAPU8[($6_1 + 29 | 0) >> 0] | 0;
              $10_1 = HEAP32[(117504 + ($28_1 << 2 | 0) | 0) >> 2] | 0;
              $29_1 = HEAPU8[($6_1 + 28 | 0) >> 0] | 0;
              $11_1 = HEAP32[(117504 + ($29_1 << 2 | 0) | 0) >> 2] | 0;
              $15_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
              $0_1 = HEAPU8[($6_1 + 34 | 0) >> 0] | 0;
              $1_1 = HEAPU8[($6_1 + 33 | 0) >> 0] | 0;
              $13_1 = HEAPU8[($6_1 + 32 | 0) >> 0] | 0;
              $30_1 = 0;
              label$126 : while (1) {
               $7_1 = HEAPU16[$14_1 >> 1] | 0;
               $5_1 = HEAPU16[$12_1 >> 1] | 0;
               $31_1 = HEAPU8[($11_1 + (($18_1 & $5_1 | 0) >>> $13_1 | 0) | 0) >> 0] | 0;
               $1376 = (((Math_imul((HEAPU8[($11_1 + (($18_1 & $7_1 | 0) >>> $13_1 | 0) | 0) >> 0] | 0) - $31_1 | 0, $3_1) >>> 8 | 0) + $31_1 | 0) >>> $29_1 | 0) << $13_1 | 0 | $15_1 | 0;
               $31_1 = HEAPU8[($10_1 + (($17_1 & $5_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0;
               $1404 = $1376 | ((((Math_imul((HEAPU8[($10_1 + (($17_1 & $7_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0) - $31_1 | 0, $3_1) >>> 8 | 0) + $31_1 | 0) >>> $28_1 | 0) << $1_1 | 0) | 0;
               $1412 = HEAPU8[($8_1 + (($19_1 & $7_1 | 0) >>> $0_1 | 0) | 0) >> 0] | 0;
               $7_1 = HEAPU8[($8_1 + (($19_1 & $5_1 | 0) >>> $0_1 | 0) | 0) >> 0] | 0;
               HEAP16[$12_1 >> 1] = $1404 | ((((Math_imul($1412 - $7_1 | 0, $3_1) >>> 8 | 0) + $7_1 | 0) >>> $27_1 | 0) << $0_1 | 0) | 0;
               $12_1 = $12_1 + 2 | 0;
               $14_1 = $14_1 + 2 | 0;
               $30_1 = $30_1 + 1 | 0;
               if (($30_1 | 0) != ($26_1 | 0)) {
                continue label$126
               }
               break label$126;
              };
             }
             $23_1 = $23_1 + $25_1 | 0;
             $12_1 = $24_1 + ($25_1 << 1 | 0) | 0;
             break label$121;
            }
            $12_1 = $24_1;
            if (!$23_1) {
             break label$2
            }
           }
           if (($23_1 | 0) != ($4_1 | 0)) {
            continue label$120
           }
           break label$120;
          };
          $20_1 = $20_1 + $9_1 | 0;
          $22_1 = $22_1 + -1 | 0;
          if ($22_1) {
           continue label$119
          }
          break label$2;
         };
        case 1:
         $31_1 = $15_1 + Math_imul($16_1, -3) | 0;
         $19_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + $16_1 | 0;
         $23_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
         label$127 : while (1) {
          $11_1 = 0;
          label$128 : while (1) {
           $17_1 = $12_1 + 2 | 0;
           $11_1 = $11_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
           label$129 : {
            label$130 : {
             $18_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
             if (!$18_1) {
              break label$130
             }
             label$131 : {
              if (($11_1 | 0) >= ($19_1 | 0)) {
               break label$131
              }
              label$132 : {
               label$133 : {
                $12_1 = $16_1 - $11_1 | 0;
                if (($12_1 | 0) >= (1 | 0)) {
                 break label$133
                }
                $12_1 = 0;
                $14_1 = $18_1;
                break label$132;
               }
               $14_1 = $18_1 - $12_1 | 0;
               if (($14_1 | 0) < (1 | 0)) {
                break label$131
               }
              }
              $1_1 = $12_1 + $11_1 | 0;
              $0_1 = $19_1 - $1_1 | 0;
              $30_1 = ($14_1 | 0) < ($0_1 | 0) ? $14_1 : $0_1;
              if (($30_1 | 0) < (1 | 0)) {
               break label$131
              }
              $14_1 = $17_1 + Math_imul($12_1, 3) | 0;
              $12_1 = $31_1 + Math_imul($1_1, 3) | 0;
              $7_1 = 0;
              label$134 : while (1) {
               $5_1 = HEAPU8[($6_1 + 28 | 0) >> 0] | 0;
               $8_1 = HEAP32[(117504 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
               $10_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
               $0_1 = (HEAPU8[($14_1 + 1 | 0) >> 0] | 0) << 8 | 0 | ((HEAPU8[($14_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0 | (HEAPU8[$14_1 >> 0] | 0) | 0;
               $1_1 = HEAPU8[($6_1 + 32 | 0) >> 0] | 0;
               $1545 = HEAPU8[($8_1 + (($10_1 & $0_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0;
               $13_1 = (HEAPU8[($12_1 + 1 | 0) >> 0] | 0) << 8 | 0 | ((HEAPU8[($12_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0 | (HEAPU8[$12_1 >> 0] | 0) | 0;
               $8_1 = HEAPU8[($8_1 + (($13_1 & $10_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0;
               $1577 = (((Math_imul($1545 - $8_1 | 0, $3_1) >>> 8 | 0) + $8_1 | 0) >>> $5_1 | 0) << $1_1 | 0 | (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0;
               $5_1 = HEAPU8[($6_1 + 29 | 0) >> 0] | 0;
               $8_1 = HEAP32[(117504 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
               $10_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
               $1_1 = HEAPU8[($6_1 + 33 | 0) >> 0] | 0;
               $1595 = HEAPU8[($8_1 + (($10_1 & $0_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0;
               $8_1 = HEAPU8[($8_1 + (($10_1 & $13_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0;
               $1615 = $1577 | ((((Math_imul($1595 - $8_1 | 0, $3_1) >>> 8 | 0) + $8_1 | 0) >>> $5_1 | 0) << $1_1 | 0) | 0;
               $1_1 = HEAPU8[($6_1 + 30 | 0) >> 0] | 0;
               $5_1 = HEAP32[(117504 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
               $8_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
               $1627 = $8_1 & $0_1 | 0;
               $0_1 = HEAPU8[($6_1 + 34 | 0) >> 0] | 0;
               $13_1 = HEAPU8[($5_1 + (($8_1 & $13_1 | 0) >>> $0_1 | 0) | 0) >> 0] | 0;
               $0_1 = $1615 | ((((Math_imul((HEAPU8[($5_1 + ($1627 >>> $0_1 | 0) | 0) >> 0] | 0) - $13_1 | 0, $3_1) >>> 8 | 0) + $13_1 | 0) >>> $1_1 | 0) << $0_1 | 0) | 0;
               HEAP8[$12_1 >> 0] = $0_1;
               HEAP8[($12_1 + 2 | 0) >> 0] = $0_1 >>> 16 | 0;
               HEAP8[($12_1 + 1 | 0) >> 0] = $0_1 >>> 8 | 0;
               $12_1 = $12_1 + 3 | 0;
               $14_1 = $14_1 + 3 | 0;
               $7_1 = $7_1 + 1 | 0;
               if (($7_1 | 0) != ($30_1 | 0)) {
                continue label$134
               }
               break label$134;
              };
             }
             $11_1 = $11_1 + $18_1 | 0;
             $12_1 = $17_1 + Math_imul($18_1, 3) | 0;
             break label$129;
            }
            $12_1 = $17_1;
            if (!$11_1) {
             break label$2
            }
           }
           if (($11_1 | 0) != ($4_1 | 0)) {
            continue label$128
           }
           break label$128;
          };
          $31_1 = $31_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
          $23_1 = $23_1 + -1 | 0;
          if ($23_1) {
           continue label$127
          }
          break label$2;
         };
        case 2:
         break label$62;
        default:
         break label$2;
        };
       }
       label$135 : {
        $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        $14_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
        $13_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
        if (($0_1 | $14_1 | 0 | $13_1 | 0 | 0) != (16777215 | 0)) {
         break label$135
        }
        label$136 : {
         if (($14_1 | 0) == (65280 | 0)) {
          break label$136
         }
         if (($0_1 | 0) == (65280 | 0)) {
          break label$136
         }
         if (($13_1 | 0) != (65280 | 0)) {
          break label$135
         }
        }
        $30_1 = $15_1 - ($16_1 << 2 | 0) | 0;
        $11_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + $16_1 | 0;
        $18_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        if (($3_1 | 0) != (128 | 0)) {
         break label$26
        }
        label$137 : while (1) {
         $14_1 = 0;
         label$138 : while (1) {
          $5_1 = $12_1 + 4 | 0;
          $14_1 = $14_1 + (HEAPU16[$12_1 >> 1] | 0) | 0;
          label$139 : {
           label$140 : {
            $13_1 = HEAPU16[($12_1 + 2 | 0) >> 1] | 0;
            if (!$13_1) {
             break label$140
            }
            label$141 : {
             if (($14_1 | 0) >= ($11_1 | 0)) {
              break label$141
             }
             label$142 : {
              label$143 : {
               $3_1 = $16_1 - $14_1 | 0;
               if (($3_1 | 0) >= (1 | 0)) {
                break label$143
               }
               $3_1 = 0;
               $6_1 = $13_1;
               break label$142;
              }
              $6_1 = $13_1 - $3_1 | 0;
              if (($6_1 | 0) < (1 | 0)) {
               break label$141
              }
             }
             $0_1 = $3_1 + $14_1 | 0;
             $12_1 = $11_1 - $0_1 | 0;
             $12_1 = ($6_1 | 0) < ($12_1 | 0) ? $6_1 : $12_1;
             if (($12_1 | 0) < (1 | 0)) {
              break label$141
             }
             $8_1 = $12_1 & 1 | 0;
             $6_1 = $5_1 + ($3_1 << 2 | 0) | 0;
             $3_1 = $30_1 + ($0_1 << 2 | 0) | 0;
             label$144 : {
              if (($12_1 | 0) == (1 | 0)) {
               break label$144
              }
              $7_1 = $12_1 & 2147483646 | 0;
              $12_1 = 0;
              label$145 : while (1) {
               $0_1 = HEAP32[$3_1 >> 2] | 0;
               $1_1 = HEAP32[$6_1 >> 2] | 0;
               HEAP32[$3_1 >> 2] = ((($0_1 & 16711422 | 0) + ($1_1 & 16711422 | 0) | 0) >>> 1 | 0) + (($1_1 & $0_1 | 0) & 65793 | 0) | 0;
               $0_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
               $1_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
               HEAP32[($3_1 + 4 | 0) >> 2] = ((($0_1 & 16711422 | 0) + ($1_1 & 16711422 | 0) | 0) >>> 1 | 0) + (($1_1 & $0_1 | 0) & 65793 | 0) | 0;
               $3_1 = $3_1 + 8 | 0;
               $6_1 = $6_1 + 8 | 0;
               $12_1 = $12_1 + 2 | 0;
               if (($12_1 | 0) != ($7_1 | 0)) {
                continue label$145
               }
               break label$145;
              };
             }
             if (!$8_1) {
              break label$141
             }
             $12_1 = HEAP32[$3_1 >> 2] | 0;
             $6_1 = HEAP32[$6_1 >> 2] | 0;
             HEAP32[$3_1 >> 2] = ((($12_1 & 16711422 | 0) + ($6_1 & 16711422 | 0) | 0) >>> 1 | 0) + (($6_1 & $12_1 | 0) & 65793 | 0) | 0;
            }
            $14_1 = $14_1 + $13_1 | 0;
            $12_1 = $5_1 + ($13_1 << 2 | 0) | 0;
            break label$139;
           }
           $12_1 = $5_1;
           if (!$14_1) {
            break label$2
           }
          }
          if (($14_1 | 0) != ($4_1 | 0)) {
           continue label$138
          }
          break label$138;
         };
         $30_1 = $30_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
         $18_1 = $18_1 + -1 | 0;
         if ($18_1) {
          continue label$137
         }
         break label$2;
        };
       }
       $15_1 = $15_1 - ($16_1 << 2 | 0) | 0;
       $29_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + $16_1 | 0;
       $25_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       label$146 : while (1) {
        $17_1 = 0;
        label$147 : while (1) {
         $28_1 = $12_1 + 4 | 0;
         $17_1 = $17_1 + (HEAPU16[$12_1 >> 1] | 0) | 0;
         label$148 : {
          label$149 : {
           $27_1 = HEAPU16[($12_1 + 2 | 0) >> 1] | 0;
           if (!$27_1) {
            break label$149
           }
           label$150 : {
            if (($17_1 | 0) >= ($29_1 | 0)) {
             break label$150
            }
            label$151 : {
             label$152 : {
              $12_1 = $16_1 - $17_1 | 0;
              if (($12_1 | 0) >= (1 | 0)) {
               break label$152
              }
              $12_1 = 0;
              $14_1 = $27_1;
              break label$151;
             }
             $14_1 = $27_1 - $12_1 | 0;
             if (($14_1 | 0) < (1 | 0)) {
              break label$150
             }
            }
            $1_1 = $12_1 + $17_1 | 0;
            $0_1 = $29_1 - $1_1 | 0;
            $19_1 = ($14_1 | 0) < ($0_1 | 0) ? $14_1 : $0_1;
            if (($19_1 | 0) < (1 | 0)) {
             break label$150
            }
            $14_1 = $28_1 + ($12_1 << 2 | 0) | 0;
            $12_1 = $15_1 + ($1_1 << 2 | 0) | 0;
            $31_1 = HEAPU8[($6_1 + 30 | 0) >> 0] | 0;
            $8_1 = HEAP32[(117504 + ($31_1 << 2 | 0) | 0) >> 2] | 0;
            $23_1 = HEAPU8[($6_1 + 29 | 0) >> 0] | 0;
            $10_1 = HEAP32[(117504 + ($23_1 << 2 | 0) | 0) >> 2] | 0;
            $26_1 = HEAPU8[($6_1 + 28 | 0) >> 0] | 0;
            $11_1 = HEAP32[(117504 + ($26_1 << 2 | 0) | 0) >> 2] | 0;
            $0_1 = HEAPU8[($6_1 + 34 | 0) >> 0] | 0;
            $1_1 = HEAPU8[($6_1 + 33 | 0) >> 0] | 0;
            $13_1 = HEAPU8[($6_1 + 32 | 0) >> 0] | 0;
            $30_1 = 0;
            label$153 : while (1) {
             $18_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
             $7_1 = HEAP32[$14_1 >> 2] | 0;
             $1943 = HEAPU8[($11_1 + (($18_1 & $7_1 | 0) >>> $13_1 | 0) | 0) >> 0] | 0;
             $5_1 = HEAP32[$12_1 >> 2] | 0;
             $18_1 = HEAPU8[($11_1 + (($18_1 & $5_1 | 0) >>> $13_1 | 0) | 0) >> 0] | 0;
             $1967 = (((Math_imul($1943 - $18_1 | 0, $3_1) >>> 8 | 0) + $18_1 | 0) >>> $26_1 | 0) << $13_1 | 0 | (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0;
             $18_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
             $1977 = HEAPU8[($10_1 + (($18_1 & $7_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0;
             $18_1 = HEAPU8[($10_1 + (($18_1 & $5_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0;
             $1997 = $1967 | ((((Math_imul($1977 - $18_1 | 0, $3_1) >>> 8 | 0) + $18_1 | 0) >>> $23_1 | 0) << $1_1 | 0) | 0;
             $18_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
             $2007 = HEAPU8[($8_1 + (($18_1 & $7_1 | 0) >>> $0_1 | 0) | 0) >> 0] | 0;
             $7_1 = HEAPU8[($8_1 + (($18_1 & $5_1 | 0) >>> $0_1 | 0) | 0) >> 0] | 0;
             HEAP32[$12_1 >> 2] = $1997 | ((((Math_imul($2007 - $7_1 | 0, $3_1) >>> 8 | 0) + $7_1 | 0) >>> $31_1 | 0) << $0_1 | 0) | 0;
             $12_1 = $12_1 + 4 | 0;
             $14_1 = $14_1 + 4 | 0;
             $30_1 = $30_1 + 1 | 0;
             if (($30_1 | 0) != ($19_1 | 0)) {
              continue label$153
             }
             break label$153;
            };
           }
           $17_1 = $17_1 + $27_1 | 0;
           $12_1 = $28_1 + ($27_1 << 2 | 0) | 0;
           break label$148;
          }
          $12_1 = $28_1;
          if (!$17_1) {
           break label$2
          }
         }
         if (($17_1 | 0) != ($4_1 | 0)) {
          continue label$147
         }
         break label$147;
        };
        $15_1 = $15_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
        $25_1 = $25_1 + -1 | 0;
        if ($25_1) {
         continue label$146
        }
        break label$2;
       };
      }
      label$154 : {
       if (($3_1 | 0) != (255 | 0)) {
        break label$154
       }
       label$155 : {
        switch ($7_1 + -1 | 0 | 0) {
        case 0:
         $0_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
         label$159 : while (1) {
          $3_1 = 0;
          label$160 : while (1) {
           $14_1 = $12_1 + 2 | 0;
           $3_1 = $3_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
           label$161 : {
            label$162 : {
             $6_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
             if (!$6_1) {
              break label$162
             }
             $535($15_1 + $3_1 | 0 | 0, $14_1 | 0, $6_1 | 0) | 0;
             $3_1 = $3_1 + $6_1 | 0;
             $12_1 = $14_1 + $6_1 | 0;
             break label$161;
            }
            $12_1 = $14_1;
            if (!$3_1) {
             break label$2
            }
           }
           if (($3_1 | 0) != ($4_1 | 0)) {
            continue label$160
           }
           break label$160;
          };
          $15_1 = $15_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
          $0_1 = $0_1 + -1 | 0;
          if ($0_1) {
           continue label$159
          }
          break label$2;
         };
        case 1:
         $0_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
         label$163 : while (1) {
          $3_1 = 0;
          label$164 : while (1) {
           $6_1 = $12_1 + 2 | 0;
           $3_1 = $3_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
           label$165 : {
            label$166 : {
             $12_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
             if (!$12_1) {
              break label$166
             }
             $14_1 = $12_1 << 1 | 0;
             $535($15_1 + ($3_1 << 1 | 0) | 0 | 0, $6_1 | 0, $14_1 | 0) | 0;
             $3_1 = $3_1 + $12_1 | 0;
             $12_1 = $6_1 + $14_1 | 0;
             break label$165;
            }
            $12_1 = $6_1;
            if (!$3_1) {
             break label$2
            }
           }
           if (($3_1 | 0) != ($4_1 | 0)) {
            continue label$164
           }
           break label$164;
          };
          $15_1 = $15_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
          $0_1 = $0_1 + -1 | 0;
          if ($0_1) {
           continue label$163
          }
          break label$2;
         };
        case 2:
         $0_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
         label$167 : while (1) {
          $3_1 = 0;
          label$168 : while (1) {
           $6_1 = $12_1 + 2 | 0;
           $3_1 = $3_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
           label$169 : {
            label$170 : {
             $12_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
             if (!$12_1) {
              break label$170
             }
             $14_1 = Math_imul($12_1, 3);
             $535($15_1 + Math_imul($3_1, 3) | 0 | 0, $6_1 | 0, $14_1 | 0) | 0;
             $3_1 = $3_1 + $12_1 | 0;
             $12_1 = $6_1 + $14_1 | 0;
             break label$169;
            }
            $12_1 = $6_1;
            if (!$3_1) {
             break label$2
            }
           }
           if (($3_1 | 0) != ($4_1 | 0)) {
            continue label$168
           }
           break label$168;
          };
          $15_1 = $15_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
          $0_1 = $0_1 + -1 | 0;
          if ($0_1) {
           continue label$167
          }
          break label$2;
         };
        case 3:
         break label$155;
        default:
         break label$2;
        };
       }
       $0_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       label$171 : while (1) {
        $3_1 = 0;
        label$172 : while (1) {
         $6_1 = $12_1 + 4 | 0;
         $3_1 = $3_1 + (HEAPU16[$12_1 >> 1] | 0) | 0;
         label$173 : {
          label$174 : {
           $12_1 = HEAPU16[($12_1 + 2 | 0) >> 1] | 0;
           if (!$12_1) {
            break label$174
           }
           $14_1 = $12_1 << 2 | 0;
           $535($15_1 + ($3_1 << 2 | 0) | 0 | 0, $6_1 | 0, $14_1 | 0) | 0;
           $3_1 = $3_1 + $12_1 | 0;
           $12_1 = $6_1 + $14_1 | 0;
           break label$173;
          }
          $12_1 = $6_1;
          if (!$3_1) {
           break label$2
          }
         }
         if (($3_1 | 0) != ($4_1 | 0)) {
          continue label$172
         }
         break label$172;
        };
        $15_1 = $15_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
        $0_1 = $0_1 + -1 | 0;
        if ($0_1) {
         continue label$171
        }
        break label$2;
       };
      }
      label$175 : {
       switch ($7_1 + -2 | 0 | 0) {
       case 0:
        label$178 : {
         label$179 : {
          $17_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
          $18_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
          $19_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
          $14_1 = $17_1 | $18_1 | 0 | $19_1 | 0;
          if (($14_1 | 0) == (32767 | 0)) {
           break label$179
          }
          if (($14_1 | 0) != (65535 | 0)) {
           break label$178
          }
          label$180 : {
           if (($18_1 | 0) == (2016 | 0)) {
            break label$180
           }
           if (($17_1 | 0) == (2016 | 0)) {
            break label$180
           }
           if (($19_1 | 0) != (2016 | 0)) {
            break label$178
           }
          }
          $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
          label$181 : {
           if (($3_1 | 0) != (128 | 0)) {
            break label$181
           }
           label$182 : while (1) {
            $1_1 = 0;
            label$183 : while (1) {
             $7_1 = $12_1 + 2 | 0;
             $1_1 = $1_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
             label$184 : {
              label$185 : {
               $13_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
               if (!$13_1) {
                break label$185
               }
               label$186 : {
                label$187 : {
                 $3_1 = $15_1 + ($1_1 << 1 | 0) | 0;
                 if (!(($3_1 ^ $7_1 | 0) & 3 | 0)) {
                  break label$187
                 }
                 label$188 : {
                  label$189 : {
                   if ($13_1 & 1 | 0) {
                    break label$189
                   }
                   $12_1 = $13_1;
                   $6_1 = $7_1;
                   break label$188;
                  }
                  $6_1 = HEAPU16[$3_1 >> 1] | 0;
                  $14_1 = HEAPU16[($12_1 + 2 | 0) >> 1] | 0;
                  HEAP16[$3_1 >> 1] = ((($6_1 & 63454 | 0) + ($14_1 & 63454 | 0) | 0) >>> 1 | 0) + (($14_1 & $6_1 | 0) & 2081 | 0) | 0;
                  $3_1 = $3_1 + 2 | 0;
                  $6_1 = $12_1 + 4 | 0;
                  $12_1 = $13_1 + -1 | 0;
                 }
                 if (($13_1 | 0) == (1 | 0)) {
                  break label$186
                 }
                 label$190 : while (1) {
                  $14_1 = HEAPU16[$3_1 >> 1] | 0;
                  $0_1 = HEAPU16[$6_1 >> 1] | 0;
                  HEAP16[$3_1 >> 1] = ((($14_1 & 63454 | 0) + ($0_1 & 63454 | 0) | 0) >>> 1 | 0) + (($0_1 & $14_1 | 0) & 2081 | 0) | 0;
                  $14_1 = HEAPU16[($3_1 + 2 | 0) >> 1] | 0;
                  $0_1 = HEAPU16[($6_1 + 2 | 0) >> 1] | 0;
                  HEAP16[($3_1 + 2 | 0) >> 1] = ((($14_1 & 63454 | 0) + ($0_1 & 63454 | 0) | 0) >>> 1 | 0) + (($0_1 & $14_1 | 0) & 2081 | 0) | 0;
                  $3_1 = $3_1 + 4 | 0;
                  $6_1 = $6_1 + 4 | 0;
                  $12_1 = $12_1 + -2 | 0;
                  if ($12_1) {
                   continue label$190
                  }
                  break label$186;
                 };
                }
                label$191 : {
                 label$192 : {
                  if ($7_1 & 3 | 0) {
                   break label$192
                  }
                  $6_1 = $7_1;
                  $14_1 = $13_1;
                  break label$191;
                 }
                 $6_1 = HEAPU16[$3_1 >> 1] | 0;
                 $14_1 = HEAPU16[($12_1 + 2 | 0) >> 1] | 0;
                 HEAP16[$3_1 >> 1] = ((($6_1 & 63454 | 0) + ($14_1 & 63454 | 0) | 0) >>> 1 | 0) + (($14_1 & $6_1 | 0) & 2081 | 0) | 0;
                 $14_1 = $13_1 + -1 | 0;
                 $3_1 = $3_1 + 2 | 0;
                 $6_1 = $12_1 + 4 | 0;
                }
                label$193 : {
                 label$194 : {
                  if ($14_1 >>> 0 >= 2 >>> 0) {
                   break label$194
                  }
                  $12_1 = $14_1;
                  break label$193;
                 }
                 label$195 : {
                  $12_1 = $14_1 + -2 | 0;
                  if ($12_1 & 2 | 0) {
                   break label$195
                  }
                  $14_1 = HEAP32[$6_1 >> 2] | 0;
                  $0_1 = HEAP32[$3_1 >> 2] | 0;
                  HEAP32[$3_1 >> 2] = ((($14_1 & $0_1 | 0) & 136382497 | 0) + (($14_1 >>> 1 | 0) & 2079292399 | 0) | 0) + (($0_1 >>> 1 | 0) & 2079292399 | 0) | 0;
                  $3_1 = $3_1 + 4 | 0;
                  $6_1 = $6_1 + 4 | 0;
                  $14_1 = $12_1;
                 }
                 if ($12_1 >>> 0 < 2 >>> 0) {
                  break label$193
                 }
                 label$196 : while (1) {
                  $12_1 = HEAP32[$6_1 >> 2] | 0;
                  $0_1 = HEAP32[$3_1 >> 2] | 0;
                  HEAP32[$3_1 >> 2] = ((($12_1 & $0_1 | 0) & 136382497 | 0) + (($12_1 >>> 1 | 0) & 2079292399 | 0) | 0) + (($0_1 >>> 1 | 0) & 2079292399 | 0) | 0;
                  $12_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                  $0_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                  HEAP32[($3_1 + 4 | 0) >> 2] = ((($12_1 & $0_1 | 0) & 136382497 | 0) + (($12_1 >>> 1 | 0) & 2079292399 | 0) | 0) + (($0_1 >>> 1 | 0) & 2079292399 | 0) | 0;
                  $3_1 = $3_1 + 8 | 0;
                  $6_1 = $6_1 + 8 | 0;
                  $14_1 = $14_1 + -4 | 0;
                  $12_1 = $14_1;
                  if ($12_1 >>> 0 > 1 >>> 0) {
                   continue label$196
                  }
                  break label$196;
                 };
                }
                if (!$12_1) {
                 break label$186
                }
                $12_1 = HEAPU16[$3_1 >> 1] | 0;
                $6_1 = HEAPU16[$6_1 >> 1] | 0;
                HEAP16[$3_1 >> 1] = ((($12_1 & 63454 | 0) + ($6_1 & 63454 | 0) | 0) >>> 1 | 0) + (($6_1 & $12_1 | 0) & 2081 | 0) | 0;
               }
               $1_1 = $1_1 + $13_1 | 0;
               $12_1 = $7_1 + ($13_1 << 1 | 0) | 0;
               break label$184;
              }
              $12_1 = $7_1;
              if (!$1_1) {
               break label$2
              }
             }
             if (($1_1 | 0) != ($4_1 | 0)) {
              continue label$183
             }
             break label$183;
            };
            $15_1 = $15_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
            $5_1 = $5_1 + -1 | 0;
            if ($5_1) {
             continue label$182
            }
            break label$2;
           };
          }
          $1_1 = $3_1 >>> 3 | 0;
          label$197 : while (1) {
           $13_1 = 0;
           label$198 : while (1) {
            $7_1 = $12_1 + 2 | 0;
            $13_1 = $13_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
            label$199 : {
             label$200 : {
              $0_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
              if (!$0_1) {
               break label$200
              }
              $3_1 = $15_1 + ($13_1 << 1 | 0) | 0;
              $12_1 = 0;
              $6_1 = $7_1;
              label$201 : while (1) {
               $14_1 = HEAPU16[$6_1 >> 1] | 0;
               $2493 = ($14_1 << 16 | 0 | $14_1 | 0) & 132184095 | 0;
               $14_1 = HEAPU16[$3_1 >> 1] | 0;
               $14_1 = ($14_1 << 16 | 0 | $14_1 | 0) & 132184095 | 0;
               $14_1 = ((Math_imul($2493 - $14_1 | 0, $1_1) >>> 5 | 0) + $14_1 | 0) & 132184095 | 0;
               HEAP16[$3_1 >> 1] = $14_1 >>> 16 | 0 | $14_1 | 0;
               $3_1 = $3_1 + 2 | 0;
               $6_1 = $6_1 + 2 | 0;
               $12_1 = $12_1 + 1 | 0;
               if (($12_1 | 0) != ($0_1 | 0)) {
                continue label$201
               }
               break label$201;
              };
              $13_1 = $13_1 + $0_1 | 0;
              $12_1 = $7_1 + ($0_1 << 1 | 0) | 0;
              break label$199;
             }
             $12_1 = $7_1;
             if (!$13_1) {
              break label$2
             }
            }
            if (($13_1 | 0) != ($4_1 | 0)) {
             continue label$198
            }
            break label$198;
           };
           $15_1 = $15_1 + $9_1 | 0;
           $5_1 = $5_1 + -1 | 0;
           if ($5_1) {
            continue label$197
           }
           break label$2;
          };
         }
         label$202 : {
          if (($18_1 | 0) == (992 | 0)) {
           break label$202
          }
          if (($17_1 | 0) == (992 | 0)) {
           break label$202
          }
          if (($19_1 | 0) != (992 | 0)) {
           break label$178
          }
         }
         $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
         label$203 : {
          if (($3_1 | 0) != (128 | 0)) {
           break label$203
          }
          label$204 : while (1) {
           $1_1 = 0;
           label$205 : while (1) {
            $7_1 = $12_1 + 2 | 0;
            $1_1 = $1_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
            label$206 : {
             label$207 : {
              $13_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
              if (!$13_1) {
               break label$207
              }
              label$208 : {
               label$209 : {
                $3_1 = $15_1 + ($1_1 << 1 | 0) | 0;
                if (!(($3_1 ^ $7_1 | 0) & 3 | 0)) {
                 break label$209
                }
                label$210 : {
                 label$211 : {
                  if ($13_1 & 1 | 0) {
                   break label$211
                  }
                  $12_1 = $13_1;
                  $6_1 = $7_1;
                  break label$210;
                 }
                 $6_1 = HEAPU16[$3_1 >> 1] | 0;
                 $14_1 = HEAPU16[($12_1 + 2 | 0) >> 1] | 0;
                 HEAP16[$3_1 >> 1] = ((($6_1 & 64478 | 0) + ($14_1 & 64478 | 0) | 0) >>> 1 | 0) + (($14_1 & $6_1 | 0) & 1057 | 0) | 0;
                 $3_1 = $3_1 + 2 | 0;
                 $6_1 = $12_1 + 4 | 0;
                 $12_1 = $13_1 + -1 | 0;
                }
                if (($13_1 | 0) == (1 | 0)) {
                 break label$208
                }
                label$212 : while (1) {
                 $14_1 = HEAPU16[$3_1 >> 1] | 0;
                 $0_1 = HEAPU16[$6_1 >> 1] | 0;
                 HEAP16[$3_1 >> 1] = ((($14_1 & 64478 | 0) + ($0_1 & 64478 | 0) | 0) >>> 1 | 0) + (($0_1 & $14_1 | 0) & 1057 | 0) | 0;
                 $14_1 = HEAPU16[($3_1 + 2 | 0) >> 1] | 0;
                 $0_1 = HEAPU16[($6_1 + 2 | 0) >> 1] | 0;
                 HEAP16[($3_1 + 2 | 0) >> 1] = ((($14_1 & 64478 | 0) + ($0_1 & 64478 | 0) | 0) >>> 1 | 0) + (($0_1 & $14_1 | 0) & 1057 | 0) | 0;
                 $3_1 = $3_1 + 4 | 0;
                 $6_1 = $6_1 + 4 | 0;
                 $12_1 = $12_1 + -2 | 0;
                 if ($12_1) {
                  continue label$212
                 }
                 break label$208;
                };
               }
               label$213 : {
                label$214 : {
                 if ($7_1 & 3 | 0) {
                  break label$214
                 }
                 $6_1 = $7_1;
                 $14_1 = $13_1;
                 break label$213;
                }
                $6_1 = HEAPU16[$3_1 >> 1] | 0;
                $14_1 = HEAPU16[($12_1 + 2 | 0) >> 1] | 0;
                HEAP16[$3_1 >> 1] = ((($6_1 & 64478 | 0) + ($14_1 & 64478 | 0) | 0) >>> 1 | 0) + (($14_1 & $6_1 | 0) & 1057 | 0) | 0;
                $14_1 = $13_1 + -1 | 0;
                $3_1 = $3_1 + 2 | 0;
                $6_1 = $12_1 + 4 | 0;
               }
               label$215 : {
                label$216 : {
                 if ($14_1 >>> 0 >= 2 >>> 0) {
                  break label$216
                 }
                 $12_1 = $14_1;
                 break label$215;
                }
                label$217 : {
                 $12_1 = $14_1 + -2 | 0;
                 if ($12_1 & 2 | 0) {
                  break label$217
                 }
                 $14_1 = HEAP32[$6_1 >> 2] | 0;
                 $0_1 = HEAP32[$3_1 >> 2] | 0;
                 HEAP32[$3_1 >> 2] = ((($14_1 & $0_1 | 0) & 69272609 | 0) + (($14_1 >>> 1 | 0) & 2112847343 | 0) | 0) + (($0_1 >>> 1 | 0) & 2112847343 | 0) | 0;
                 $3_1 = $3_1 + 4 | 0;
                 $6_1 = $6_1 + 4 | 0;
                 $14_1 = $12_1;
                }
                if ($12_1 >>> 0 < 2 >>> 0) {
                 break label$215
                }
                label$218 : while (1) {
                 $12_1 = HEAP32[$6_1 >> 2] | 0;
                 $0_1 = HEAP32[$3_1 >> 2] | 0;
                 HEAP32[$3_1 >> 2] = ((($12_1 & $0_1 | 0) & 69272609 | 0) + (($12_1 >>> 1 | 0) & 2112847343 | 0) | 0) + (($0_1 >>> 1 | 0) & 2112847343 | 0) | 0;
                 $12_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                 $0_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                 HEAP32[($3_1 + 4 | 0) >> 2] = ((($12_1 & $0_1 | 0) & 69272609 | 0) + (($12_1 >>> 1 | 0) & 2112847343 | 0) | 0) + (($0_1 >>> 1 | 0) & 2112847343 | 0) | 0;
                 $3_1 = $3_1 + 8 | 0;
                 $6_1 = $6_1 + 8 | 0;
                 $14_1 = $14_1 + -4 | 0;
                 $12_1 = $14_1;
                 if ($12_1 >>> 0 > 1 >>> 0) {
                  continue label$218
                 }
                 break label$218;
                };
               }
               if (!$12_1) {
                break label$208
               }
               $12_1 = HEAPU16[$3_1 >> 1] | 0;
               $6_1 = HEAPU16[$6_1 >> 1] | 0;
               HEAP16[$3_1 >> 1] = ((($12_1 & 64478 | 0) + ($6_1 & 64478 | 0) | 0) >>> 1 | 0) + (($6_1 & $12_1 | 0) & 1057 | 0) | 0;
              }
              $1_1 = $1_1 + $13_1 | 0;
              $12_1 = $7_1 + ($13_1 << 1 | 0) | 0;
              break label$206;
             }
             $12_1 = $7_1;
             if (!$1_1) {
              break label$2
             }
            }
            if (($1_1 | 0) != ($4_1 | 0)) {
             continue label$205
            }
            break label$205;
           };
           $15_1 = $15_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
           $5_1 = $5_1 + -1 | 0;
           if ($5_1) {
            continue label$204
           }
           break label$2;
          };
         }
         $1_1 = $3_1 >>> 3 | 0;
         label$219 : while (1) {
          $13_1 = 0;
          label$220 : while (1) {
           $7_1 = $12_1 + 2 | 0;
           $13_1 = $13_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
           label$221 : {
            label$222 : {
             $0_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
             if (!$0_1) {
              break label$222
             }
             $3_1 = $15_1 + ($13_1 << 1 | 0) | 0;
             $12_1 = 0;
             $6_1 = $7_1;
             label$223 : while (1) {
              $14_1 = HEAPU16[$6_1 >> 1] | 0;
              $2799 = ($14_1 << 16 | 0 | $14_1 | 0) & 65043487 | 0;
              $14_1 = HEAPU16[$3_1 >> 1] | 0;
              $14_1 = ($14_1 << 16 | 0 | $14_1 | 0) & 65043487 | 0;
              $14_1 = ((Math_imul($2799 - $14_1 | 0, $1_1) >>> 5 | 0) + $14_1 | 0) & 65043487 | 0;
              HEAP16[$3_1 >> 1] = $14_1 >>> 16 | 0 | $14_1 | 0;
              $3_1 = $3_1 + 2 | 0;
              $6_1 = $6_1 + 2 | 0;
              $12_1 = $12_1 + 1 | 0;
              if (($12_1 | 0) != ($0_1 | 0)) {
               continue label$223
              }
              break label$223;
             };
             $13_1 = $13_1 + $0_1 | 0;
             $12_1 = $7_1 + ($0_1 << 1 | 0) | 0;
             break label$221;
            }
            $12_1 = $7_1;
            if (!$13_1) {
             break label$2
            }
           }
           if (($13_1 | 0) != ($4_1 | 0)) {
            continue label$220
           }
           break label$220;
          };
          $15_1 = $15_1 + $9_1 | 0;
          $5_1 = $5_1 + -1 | 0;
          if ($5_1) {
           continue label$219
          }
          break label$2;
         };
        }
        $24_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        label$224 : while (1) {
         $16_1 = 0;
         label$225 : while (1) {
          $25_1 = $12_1 + 2 | 0;
          $16_1 = $16_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
          label$226 : {
           label$227 : {
            $23_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
            if (!$23_1) {
             break label$227
            }
            $12_1 = $15_1 + ($16_1 << 1 | 0) | 0;
            $26_1 = HEAPU8[($6_1 + 30 | 0) >> 0] | 0;
            $8_1 = HEAP32[(117504 + ($26_1 << 2 | 0) | 0) >> 2] | 0;
            $27_1 = HEAPU8[($6_1 + 29 | 0) >> 0] | 0;
            $10_1 = HEAP32[(117504 + ($27_1 << 2 | 0) | 0) >> 2] | 0;
            $28_1 = HEAPU8[($6_1 + 28 | 0) >> 0] | 0;
            $11_1 = HEAP32[(117504 + ($28_1 << 2 | 0) | 0) >> 2] | 0;
            $29_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
            $14_1 = HEAPU8[($6_1 + 34 | 0) >> 0] | 0;
            $0_1 = HEAPU8[($6_1 + 33 | 0) >> 0] | 0;
            $1_1 = HEAPU8[($6_1 + 32 | 0) >> 0] | 0;
            $30_1 = 0;
            $13_1 = $25_1;
            label$228 : while (1) {
             $7_1 = HEAPU16[$13_1 >> 1] | 0;
             $5_1 = HEAPU16[$12_1 >> 1] | 0;
             $31_1 = HEAPU8[($11_1 + (($18_1 & $5_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0;
             $2923 = (((Math_imul((HEAPU8[($11_1 + (($18_1 & $7_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0) - $31_1 | 0, $3_1) >>> 8 | 0) + $31_1 | 0) >>> $28_1 | 0) << $1_1 | 0 | $29_1 | 0;
             $31_1 = HEAPU8[($10_1 + (($17_1 & $5_1 | 0) >>> $0_1 | 0) | 0) >> 0] | 0;
             $2951 = $2923 | ((((Math_imul((HEAPU8[($10_1 + (($17_1 & $7_1 | 0) >>> $0_1 | 0) | 0) >> 0] | 0) - $31_1 | 0, $3_1) >>> 8 | 0) + $31_1 | 0) >>> $27_1 | 0) << $0_1 | 0) | 0;
             $2959 = HEAPU8[($8_1 + (($19_1 & $7_1 | 0) >>> $14_1 | 0) | 0) >> 0] | 0;
             $7_1 = HEAPU8[($8_1 + (($19_1 & $5_1 | 0) >>> $14_1 | 0) | 0) >> 0] | 0;
             HEAP16[$12_1 >> 1] = $2951 | ((((Math_imul($2959 - $7_1 | 0, $3_1) >>> 8 | 0) + $7_1 | 0) >>> $26_1 | 0) << $14_1 | 0) | 0;
             $12_1 = $12_1 + 2 | 0;
             $13_1 = $13_1 + 2 | 0;
             $30_1 = $30_1 + 1 | 0;
             if (($30_1 | 0) != ($23_1 | 0)) {
              continue label$228
             }
             break label$228;
            };
            $16_1 = $16_1 + $23_1 | 0;
            $12_1 = $25_1 + ($23_1 << 1 | 0) | 0;
            break label$226;
           }
           $12_1 = $25_1;
           if (!$16_1) {
            break label$2
           }
          }
          if (($16_1 | 0) != ($4_1 | 0)) {
           continue label$225
          }
          break label$225;
         };
         $15_1 = $15_1 + $9_1 | 0;
         $24_1 = $24_1 + -1 | 0;
         if ($24_1) {
          continue label$224
         }
         break label$2;
        };
       case 1:
        $17_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        label$229 : while (1) {
         $30_1 = 0;
         label$230 : while (1) {
          $18_1 = $12_1 + 2 | 0;
          $30_1 = $30_1 + (HEAPU8[$12_1 >> 0] | 0) | 0;
          label$231 : {
           label$232 : {
            $11_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
            if (!$11_1) {
             break label$232
            }
            $12_1 = $15_1 + Math_imul($30_1, 3) | 0;
            $7_1 = 0;
            $14_1 = $18_1;
            label$233 : while (1) {
             $5_1 = HEAPU8[($6_1 + 28 | 0) >> 0] | 0;
             $8_1 = HEAP32[(117504 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
             $10_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
             $0_1 = (HEAPU8[($14_1 + 1 | 0) >> 0] | 0) << 8 | 0 | ((HEAPU8[($14_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0 | (HEAPU8[$14_1 >> 0] | 0) | 0;
             $1_1 = HEAPU8[($6_1 + 32 | 0) >> 0] | 0;
             $3053 = HEAPU8[($8_1 + (($10_1 & $0_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0;
             $13_1 = (HEAPU8[($12_1 + 1 | 0) >> 0] | 0) << 8 | 0 | ((HEAPU8[($12_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0 | (HEAPU8[$12_1 >> 0] | 0) | 0;
             $8_1 = HEAPU8[($8_1 + (($13_1 & $10_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0;
             $3085 = (((Math_imul($3053 - $8_1 | 0, $3_1) >>> 8 | 0) + $8_1 | 0) >>> $5_1 | 0) << $1_1 | 0 | (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0;
             $5_1 = HEAPU8[($6_1 + 29 | 0) >> 0] | 0;
             $8_1 = HEAP32[(117504 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
             $10_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU8[($6_1 + 33 | 0) >> 0] | 0;
             $3103 = HEAPU8[($8_1 + (($10_1 & $0_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0;
             $8_1 = HEAPU8[($8_1 + (($10_1 & $13_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0;
             $3123 = $3085 | ((((Math_imul($3103 - $8_1 | 0, $3_1) >>> 8 | 0) + $8_1 | 0) >>> $5_1 | 0) << $1_1 | 0) | 0;
             $1_1 = HEAPU8[($6_1 + 30 | 0) >> 0] | 0;
             $5_1 = HEAP32[(117504 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
             $8_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
             $3135 = $8_1 & $0_1 | 0;
             $0_1 = HEAPU8[($6_1 + 34 | 0) >> 0] | 0;
             $13_1 = HEAPU8[($5_1 + (($8_1 & $13_1 | 0) >>> $0_1 | 0) | 0) >> 0] | 0;
             $0_1 = $3123 | ((((Math_imul((HEAPU8[($5_1 + ($3135 >>> $0_1 | 0) | 0) >> 0] | 0) - $13_1 | 0, $3_1) >>> 8 | 0) + $13_1 | 0) >>> $1_1 | 0) << $0_1 | 0) | 0;
             HEAP8[$12_1 >> 0] = $0_1;
             HEAP8[($12_1 + 2 | 0) >> 0] = $0_1 >>> 16 | 0;
             HEAP8[($12_1 + 1 | 0) >> 0] = $0_1 >>> 8 | 0;
             $12_1 = $12_1 + 3 | 0;
             $14_1 = $14_1 + 3 | 0;
             $7_1 = $7_1 + 1 | 0;
             if (($7_1 | 0) != ($11_1 | 0)) {
              continue label$233
             }
             break label$233;
            };
            $30_1 = $30_1 + $11_1 | 0;
            $12_1 = $18_1 + Math_imul($11_1, 3) | 0;
            break label$231;
           }
           $12_1 = $18_1;
           if (!$30_1) {
            break label$2
           }
          }
          if (($30_1 | 0) != ($4_1 | 0)) {
           continue label$230
          }
          break label$230;
         };
         $15_1 = $15_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
         $17_1 = $17_1 + -1 | 0;
         if ($17_1) {
          continue label$229
         }
         break label$2;
        };
       case 2:
        break label$175;
       default:
        break label$2;
       };
      }
      label$234 : {
       $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       $14_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
       $13_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
       if (($0_1 | $14_1 | 0 | $13_1 | 0 | 0) != (16777215 | 0)) {
        break label$234
       }
       label$235 : {
        if (($14_1 | 0) == (65280 | 0)) {
         break label$235
        }
        if (($0_1 | 0) == (65280 | 0)) {
         break label$235
        }
        if (($13_1 | 0) != (65280 | 0)) {
         break label$234
        }
       }
       $10_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($3_1 | 0) != (128 | 0)) {
        break label$25
       }
       label$236 : while (1) {
        $13_1 = 0;
        label$237 : while (1) {
         $5_1 = $12_1 + 4 | 0;
         $13_1 = $13_1 + (HEAPU16[$12_1 >> 1] | 0) | 0;
         label$238 : {
          label$239 : {
           $7_1 = HEAPU16[($12_1 + 2 | 0) >> 1] | 0;
           if (!$7_1) {
            break label$239
           }
           $8_1 = $7_1 & 1 | 0;
           $3_1 = $15_1 + ($13_1 << 2 | 0) | 0;
           label$240 : {
            label$241 : {
             if (($7_1 | 0) != (1 | 0)) {
              break label$241
             }
             $6_1 = $5_1;
             break label$240;
            }
            $1_1 = $7_1 & 65534 | 0;
            $12_1 = 0;
            $6_1 = $5_1;
            label$242 : while (1) {
             $14_1 = HEAP32[$3_1 >> 2] | 0;
             $0_1 = HEAP32[$6_1 >> 2] | 0;
             HEAP32[$3_1 >> 2] = ((($14_1 & 16711422 | 0) + ($0_1 & 16711422 | 0) | 0) >>> 1 | 0) + (($0_1 & $14_1 | 0) & 65793 | 0) | 0;
             $14_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
             $0_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
             HEAP32[($3_1 + 4 | 0) >> 2] = ((($14_1 & 16711422 | 0) + ($0_1 & 16711422 | 0) | 0) >>> 1 | 0) + (($0_1 & $14_1 | 0) & 65793 | 0) | 0;
             $3_1 = $3_1 + 8 | 0;
             $6_1 = $6_1 + 8 | 0;
             $12_1 = $12_1 + 2 | 0;
             if (($12_1 | 0) != ($1_1 | 0)) {
              continue label$242
             }
             break label$242;
            };
           }
           label$243 : {
            if (!$8_1) {
             break label$243
            }
            $12_1 = HEAP32[$3_1 >> 2] | 0;
            $6_1 = HEAP32[$6_1 >> 2] | 0;
            HEAP32[$3_1 >> 2] = ((($12_1 & 16711422 | 0) + ($6_1 & 16711422 | 0) | 0) >>> 1 | 0) + (($6_1 & $12_1 | 0) & 65793 | 0) | 0;
           }
           $13_1 = $13_1 + $7_1 | 0;
           $12_1 = $5_1 + ($7_1 << 2 | 0) | 0;
           break label$238;
          }
          $12_1 = $5_1;
          if (!$13_1) {
           break label$2
          }
         }
         if (($13_1 | 0) != ($4_1 | 0)) {
          continue label$237
         }
         break label$237;
        };
        $15_1 = $15_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
        $10_1 = $10_1 + -1 | 0;
        if ($10_1) {
         continue label$236
        }
        break label$2;
       };
      }
      $28_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      label$244 : while (1) {
       $26_1 = 0;
       label$245 : while (1) {
        $27_1 = $12_1 + 4 | 0;
        $26_1 = $26_1 + (HEAPU16[$12_1 >> 1] | 0) | 0;
        label$246 : {
         label$247 : {
          $17_1 = HEAPU16[($12_1 + 2 | 0) >> 1] | 0;
          if (!$17_1) {
           break label$247
          }
          $12_1 = $15_1 + ($26_1 << 2 | 0) | 0;
          $19_1 = HEAPU8[($6_1 + 30 | 0) >> 0] | 0;
          $8_1 = HEAP32[(117504 + ($19_1 << 2 | 0) | 0) >> 2] | 0;
          $31_1 = HEAPU8[($6_1 + 29 | 0) >> 0] | 0;
          $10_1 = HEAP32[(117504 + ($31_1 << 2 | 0) | 0) >> 2] | 0;
          $23_1 = HEAPU8[($6_1 + 28 | 0) >> 0] | 0;
          $11_1 = HEAP32[(117504 + ($23_1 << 2 | 0) | 0) >> 2] | 0;
          $14_1 = HEAPU8[($6_1 + 34 | 0) >> 0] | 0;
          $0_1 = HEAPU8[($6_1 + 33 | 0) >> 0] | 0;
          $1_1 = HEAPU8[($6_1 + 32 | 0) >> 0] | 0;
          $30_1 = 0;
          $13_1 = $27_1;
          label$248 : while (1) {
           $18_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
           $7_1 = HEAP32[$13_1 >> 2] | 0;
           $3374 = HEAPU8[($11_1 + (($18_1 & $7_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0;
           $5_1 = HEAP32[$12_1 >> 2] | 0;
           $18_1 = HEAPU8[($11_1 + (($18_1 & $5_1 | 0) >>> $1_1 | 0) | 0) >> 0] | 0;
           $3398 = (((Math_imul($3374 - $18_1 | 0, $3_1) >>> 8 | 0) + $18_1 | 0) >>> $23_1 | 0) << $1_1 | 0 | (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0;
           $18_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
           $3408 = HEAPU8[($10_1 + (($18_1 & $7_1 | 0) >>> $0_1 | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[($10_1 + (($18_1 & $5_1 | 0) >>> $0_1 | 0) | 0) >> 0] | 0;
           $3428 = $3398 | ((((Math_imul($3408 - $18_1 | 0, $3_1) >>> 8 | 0) + $18_1 | 0) >>> $31_1 | 0) << $0_1 | 0) | 0;
           $18_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
           $3438 = HEAPU8[($8_1 + (($18_1 & $7_1 | 0) >>> $14_1 | 0) | 0) >> 0] | 0;
           $7_1 = HEAPU8[($8_1 + (($18_1 & $5_1 | 0) >>> $14_1 | 0) | 0) >> 0] | 0;
           HEAP32[$12_1 >> 2] = $3428 | ((((Math_imul($3438 - $7_1 | 0, $3_1) >>> 8 | 0) + $7_1 | 0) >>> $19_1 | 0) << $14_1 | 0) | 0;
           $12_1 = $12_1 + 4 | 0;
           $13_1 = $13_1 + 4 | 0;
           $30_1 = $30_1 + 1 | 0;
           if (($30_1 | 0) != ($17_1 | 0)) {
            continue label$248
           }
           break label$248;
          };
          $26_1 = $26_1 + $17_1 | 0;
          $12_1 = $27_1 + ($17_1 << 2 | 0) | 0;
          break label$246;
         }
         $12_1 = $27_1;
         if (!$26_1) {
          break label$2
         }
        }
        if (($26_1 | 0) != ($4_1 | 0)) {
         continue label$245
        }
        break label$245;
       };
       $15_1 = $15_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
       $28_1 = $28_1 + -1 | 0;
       if ($28_1) {
        continue label$244
       }
       break label$2;
      };
     }
     $7_1 = 0;
     break label$24;
    }
    $5_1 = 0;
    label$249 : while (1) {
     $8_1 = $12_1 + 4 | 0;
     $5_1 = $5_1 + (HEAPU16[$12_1 >> 1] | 0) | 0;
     label$250 : {
      label$251 : {
       $7_1 = HEAPU16[($12_1 + 2 | 0) >> 1] | 0;
       if (!$7_1) {
        break label$251
       }
       $6_1 = $15_1 + ($5_1 << 2 | 0) | 0;
       $14_1 = 0;
       $12_1 = $8_1;
       label$252 : while (1) {
        $0_1 = HEAP32[$12_1 >> 2] | 0;
        $1_1 = HEAP32[$6_1 >> 2] | 0;
        $13_1 = $1_1 & 16711935 | 0;
        $3519 = ((Math_imul(($0_1 & 16711935 | 0) - $13_1 | 0, $3_1) >>> 8 | 0) + $13_1 | 0) & 16711935 | 0;
        $3521 = $0_1 & 65280 | 0;
        $0_1 = $1_1 & 65280 | 0;
        HEAP32[$6_1 >> 2] = $3519 | (((Math_imul($3521 - $0_1 | 0, $3_1) >>> 8 | 0) + $0_1 | 0) & 65280 | 0) | 0;
        $6_1 = $6_1 + 4 | 0;
        $12_1 = $12_1 + 4 | 0;
        $14_1 = $14_1 + 1 | 0;
        if (($14_1 | 0) != ($7_1 | 0)) {
         continue label$252
        }
        break label$252;
       };
       $5_1 = $5_1 + $7_1 | 0;
       $12_1 = $8_1 + ($7_1 << 2 | 0) | 0;
       break label$250;
      }
      $12_1 = $8_1;
      if (!$5_1) {
       break label$2
      }
     }
     if (($5_1 | 0) != ($4_1 | 0)) {
      continue label$249
     }
     $15_1 = $15_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
     $10_1 = $10_1 + -1 | 0;
     if (!$10_1) {
      break label$2
     }
     $5_1 = 0;
     continue label$249;
    };
   }
   label$253 : while (1) {
    $10_1 = $12_1 + 4 | 0;
    $7_1 = $7_1 + (HEAPU16[$12_1 >> 1] | 0) | 0;
    label$254 : {
     label$255 : {
      $8_1 = HEAPU16[($12_1 + 2 | 0) >> 1] | 0;
      if (!$8_1) {
       break label$255
      }
      label$256 : {
       if (($7_1 | 0) >= ($11_1 | 0)) {
        break label$256
       }
       label$257 : {
        label$258 : {
         $6_1 = $16_1 - $7_1 | 0;
         if (($6_1 | 0) >= (1 | 0)) {
          break label$258
         }
         $6_1 = 0;
         $12_1 = $8_1;
         break label$257;
        }
        $12_1 = $8_1 - $6_1 | 0;
        if (($12_1 | 0) < (1 | 0)) {
         break label$256
        }
       }
       $0_1 = $6_1 + $7_1 | 0;
       $14_1 = $11_1 - $0_1 | 0;
       $5_1 = ($12_1 | 0) < ($14_1 | 0) ? $12_1 : $14_1;
       if (($5_1 | 0) < (1 | 0)) {
        break label$256
       }
       $12_1 = $10_1 + ($6_1 << 2 | 0) | 0;
       $6_1 = $30_1 + ($0_1 << 2 | 0) | 0;
       $14_1 = 0;
       label$259 : while (1) {
        $0_1 = HEAP32[$12_1 >> 2] | 0;
        $1_1 = HEAP32[$6_1 >> 2] | 0;
        $13_1 = $1_1 & 16711935 | 0;
        $3625 = ((Math_imul(($0_1 & 16711935 | 0) - $13_1 | 0, $3_1) >>> 8 | 0) + $13_1 | 0) & 16711935 | 0;
        $3627 = $0_1 & 65280 | 0;
        $0_1 = $1_1 & 65280 | 0;
        HEAP32[$6_1 >> 2] = $3625 | (((Math_imul($3627 - $0_1 | 0, $3_1) >>> 8 | 0) + $0_1 | 0) & 65280 | 0) | 0;
        $6_1 = $6_1 + 4 | 0;
        $12_1 = $12_1 + 4 | 0;
        $14_1 = $14_1 + 1 | 0;
        if (($14_1 | 0) != ($5_1 | 0)) {
         continue label$259
        }
        break label$259;
       };
      }
      $7_1 = $7_1 + $8_1 | 0;
      $12_1 = $10_1 + ($8_1 << 2 | 0) | 0;
      break label$254;
     }
     $12_1 = $10_1;
     if (!$7_1) {
      break label$2
     }
    }
    if (($7_1 | 0) != ($4_1 | 0)) {
     continue label$253
    }
    $30_1 = $30_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
    $18_1 = $18_1 + -1 | 0;
    if (!$18_1) {
     break label$2
    }
    $7_1 = 0;
    continue label$253;
   };
  }
  label$260 : {
   if (!((HEAPU8[$2_1 >> 0] | 0) & 2 | 0)) {
    break label$260
   }
   $806($2_1 | 0);
  }
  return 0 | 0;
 }
 
 function $579($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $6_1 = 0, $4_1 = 0, $3_1 = 0, $9_1 = 0, $15_1 = 0, $5_1 = 0, $13_1 = 0, $18_1 = 0, $19_1 = 0, $12_1 = 0, $20_1 = 0, $10_1 = 0, $16_1 = 0, $7_1 = 0, $17_1 = 0, $8_1 = 0, $14_1 = 0, $11_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0;
  $1_1 = -1;
  label$1 : {
   $2_1 = HEAP32[(HEAP32[($0_1 + 52 | 0) >> 2] | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if ((HEAPU8[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0 | 0) != (32 | 0)) {
    break label$1
   }
   $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
   $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   $2_1 = $4_1 | $5_1 | 0 | $6_1 | 0;
   label$2 : {
    label$3 : {
     switch ((HEAPU8[($3_1 + 9 | 0) >> 0] | 0) + -2 | 0 | 0) {
     case 0:
      label$5 : {
       label$6 : {
        if (($2_1 | 0) == (32767 | 0)) {
         break label$6
        }
        if (($2_1 | 0) != (65535 | 0)) {
         break label$1
        }
        $7_1 = 83;
        if (($4_1 | 0) == (2016 | 0)) {
         break label$5
        }
        if (($5_1 | 0) == (2016 | 0)) {
         break label$5
        }
        if (($6_1 | 0) == (2016 | 0)) {
         break label$5
        }
        break label$1;
       }
       $7_1 = 84;
       if (($4_1 | 0) == (992 | 0)) {
        break label$5
       }
       if (($5_1 | 0) == (992 | 0)) {
        break label$5
       }
       if (($6_1 | 0) != (992 | 0)) {
        break label$1
       }
      }
      $1_1 = Math_imul(Math_imul(HEAP32[($0_1 + 8 | 0) >> 2] | 0, 6) + 8 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 2 | 0;
      $8_1 = 85;
      break label$2;
     case 2:
      break label$3;
     default:
      break label$1;
     };
    }
    if (($2_1 | 0) != (16777215 | 0)) {
     break label$1
    }
    $1_1 = Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 4 | 0;
    $8_1 = 86;
    $7_1 = 86;
   }
   label$7 : {
    $9_1 = $456($1_1 + 28 | 0 | 0) | 0;
    if ($9_1) {
     break label$7
    }
    return $262(0 | 0) | 0 | 0;
   }
   $1_1 = HEAPU8[($3_1 + 9 | 0) >> 0] | 0;
   HEAP8[$9_1 >> 0] = $1_1;
   HEAP32[($9_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   HEAP32[($9_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
   HEAP32[($9_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   HEAP32[($9_1 + 16 | 0) >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   HEAP8[($9_1 + 20 | 0) >> 0] = HEAPU8[($3_1 + 28 | 0) >> 0] | 0;
   HEAP8[($9_1 + 21 | 0) >> 0] = HEAPU8[($3_1 + 29 | 0) >> 0] | 0;
   HEAP8[($9_1 + 22 | 0) >> 0] = HEAPU8[($3_1 + 30 | 0) >> 0] | 0;
   HEAP8[($9_1 + 23 | 0) >> 0] = HEAPU8[($3_1 + 31 | 0) >> 0] | 0;
   HEAP8[($9_1 + 24 | 0) >> 0] = HEAPU8[($3_1 + 32 | 0) >> 0] | 0;
   HEAP8[($9_1 + 25 | 0) >> 0] = HEAPU8[($3_1 + 33 | 0) >> 0] | 0;
   HEAP8[($9_1 + 26 | 0) >> 0] = HEAPU8[($3_1 + 34 | 0) >> 0] | 0;
   HEAP8[($9_1 + 27 | 0) >> 0] = HEAPU8[($3_1 + 35 | 0) >> 0] | 0;
   $10_1 = $9_1 + 28 | 0;
   label$8 : {
    $11_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (($11_1 | 0) < (1 | 0)) {
     break label$8
    }
    $12_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $13_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    $14_1 = 0;
    $1_1 = $10_1;
    label$9 : while (1) {
     $15_1 = 0;
     $16_1 = 0;
     label$10 : while (1) {
      $6_1 = $15_1;
      label$11 : {
       label$12 : {
        if (($6_1 | 0) >= ($13_1 | 0)) {
         break label$12
        }
        $2_1 = HEAPU8[($12_1 + 35 | 0) >> 0] | 0;
        $4_1 = HEAP32[($12_1 + 24 | 0) >> 2] | 0;
        label$13 : while (1) {
         if ((($4_1 & (HEAP32[($5_1 + ($6_1 << 2 | 0) | 0) >> 2] | 0) | 0) >>> $2_1 | 0 | 0) == (255 | 0)) {
          break label$12
         }
         $6_1 = $6_1 + 1 | 0;
         if (($6_1 | 0) != ($13_1 | 0)) {
          continue label$13
         }
         break label$13;
        };
        $17_1 = 0;
        $6_1 = $13_1;
        $18_1 = $6_1;
        break label$11;
       }
       label$14 : {
        if (($6_1 | 0) < ($13_1 | 0)) {
         break label$14
        }
        $17_1 = 0;
        $18_1 = $6_1;
        break label$11;
       }
       $2_1 = $6_1;
       label$15 : {
        $4_1 = HEAP32[($12_1 + 24 | 0) >> 2] | 0;
        $19_1 = HEAPU8[($12_1 + 35 | 0) >> 0] | 0;
        if ((($4_1 & (HEAP32[($5_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0) | 0) >>> $19_1 | 0 | 0) == (255 | 0)) {
         break label$15
        }
        $17_1 = 1;
        $18_1 = $2_1;
        break label$11;
       }
       label$16 : {
        label$17 : {
         label$18 : while (1) {
          $2_1 = $2_1 + 1 | 0;
          if (($2_1 | 0) == ($13_1 | 0)) {
           break label$17
          }
          if ((($4_1 & (HEAP32[($5_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0) | 0) >>> $19_1 | 0 | 0) == (255 | 0)) {
           continue label$18
          }
          break label$18;
         };
         $18_1 = $2_1;
         break label$16;
        }
        $18_1 = $13_1;
       }
       $17_1 = ($2_1 | 0) < ($13_1 | 0);
      }
      $19_1 = $18_1 - $6_1 | 0;
      $20_1 = $6_1 - $15_1 | 0;
      $2_1 = $20_1;
      label$19 : {
       if (($2_1 | 0) < (256 | 0)) {
        break label$19
       }
       label$20 : while (1) {
        label$21 : {
         label$22 : {
          if ((HEAPU8[($3_1 + 9 | 0) >> 0] | 0 | 0) != (4 | 0)) {
           break label$22
          }
          $21_1 = 255;
          HEAP16[$1_1 >> 1] = $21_1;
          HEAP16[($1_1 + 2 | 0) >> 1] = $21_1 >>> 16 | 0;
          $4_1 = 4;
          break label$21;
         }
         $22_1 = 255;
         HEAP8[$1_1 >> 0] = $22_1;
         HEAP8[($1_1 + 1 | 0) >> 0] = $22_1 >>> 8 | 0;
         $4_1 = 2;
        }
        $1_1 = $1_1 + $4_1 | 0;
        $4_1 = ($2_1 | 0) > (510 | 0);
        $2_1 = $2_1 + -255 | 0;
        if ($4_1) {
         continue label$20
        }
        break label$20;
       };
      }
      $15_1 = ($19_1 | 0) < (255 | 0) ? $19_1 : 255;
      label$23 : {
       label$24 : {
        if ((HEAPU8[($3_1 + 9 | 0) >> 0] | 0 | 0) != (4 | 0)) {
         break label$24
        }
        HEAP16[($1_1 + 2 | 0) >> 1] = $15_1;
        HEAP16[$1_1 >> 1] = $2_1;
        $2_1 = 4;
        break label$23;
       }
       HEAP8[($1_1 + 1 | 0) >> 0] = $15_1;
       HEAP8[$1_1 >> 0] = $2_1;
       $2_1 = 2;
      }
      $20_1 = ($20_1 | 0) == ($13_1 | 0);
      $1_1 = $1_1 + $2_1 | 0;
      $1_1 = $1_1 + (FUNCTION_TABLE[$8_1 | 0]($1_1, $5_1 + ($6_1 << 2 | 0) | 0, $15_1, $12_1, $3_1) | 0) | 0;
      label$25 : {
       $4_1 = $19_1 - $15_1 | 0;
       if (!$4_1) {
        break label$25
       }
       $6_1 = $15_1 + $6_1 | 0;
       label$26 : while (1) {
        $2_1 = ($4_1 | 0) < (255 | 0) ? $4_1 : 255;
        label$27 : {
         label$28 : {
          if ((HEAPU8[($3_1 + 9 | 0) >> 0] | 0 | 0) != (4 | 0)) {
           break label$28
          }
          HEAP16[($1_1 + 2 | 0) >> 1] = $2_1;
          HEAP16[$1_1 >> 1] = 0;
          $15_1 = 4;
          break label$27;
         }
         HEAP8[($1_1 + 1 | 0) >> 0] = $2_1;
         HEAP8[$1_1 >> 0] = 0;
         $15_1 = 2;
        }
        $1_1 = $1_1 + $15_1 | 0;
        $1_1 = $1_1 + (FUNCTION_TABLE[$8_1 | 0]($1_1, $5_1 + ($6_1 << 2 | 0) | 0, $2_1, $12_1, $3_1) | 0) | 0;
        $6_1 = $2_1 + $6_1 | 0;
        $4_1 = $4_1 - $2_1 | 0;
        if ($4_1) {
         continue label$26
        }
        break label$26;
       };
      }
      $16_1 = $20_1 ? 1 : $16_1;
      $15_1 = $18_1;
      if ($17_1) {
       continue label$10
      }
      break label$10;
     };
     $1_1 = $1_1 + ($1_1 & 2 | 0) | 0;
     $15_1 = 0;
     label$29 : while (1) {
      $6_1 = $15_1;
      label$30 : {
       label$31 : {
        if (($6_1 | 0) >= ($13_1 | 0)) {
         break label$31
        }
        $2_1 = HEAPU8[($12_1 + 35 | 0) >> 0] | 0;
        $4_1 = HEAP32[($12_1 + 24 | 0) >> 2] | 0;
        label$32 : while (1) {
         if (((($4_1 & (HEAP32[($5_1 + ($6_1 << 2 | 0) | 0) >> 2] | 0) | 0) >>> $2_1 | 0) + -255 | 0) >>> 0 > -255 >>> 0) {
          break label$31
         }
         $6_1 = $6_1 + 1 | 0;
         if (($6_1 | 0) != ($13_1 | 0)) {
          continue label$32
         }
         break label$32;
        };
        $20_1 = 0;
        $6_1 = $13_1;
        $18_1 = $6_1;
        break label$30;
       }
       label$33 : {
        if (($6_1 | 0) < ($13_1 | 0)) {
         break label$33
        }
        $20_1 = 0;
        $18_1 = $6_1;
        break label$30;
       }
       $2_1 = $6_1;
       label$34 : {
        $4_1 = HEAP32[($12_1 + 24 | 0) >> 2] | 0;
        $19_1 = HEAPU8[($12_1 + 35 | 0) >> 0] | 0;
        if (((($4_1 & (HEAP32[($5_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0) | 0) >>> $19_1 | 0) + -1 | 0) >>> 0 < 254 >>> 0) {
         break label$34
        }
        $20_1 = 1;
        $18_1 = $2_1;
        break label$30;
       }
       label$35 : {
        label$36 : {
         label$37 : while (1) {
          $2_1 = $2_1 + 1 | 0;
          if (($2_1 | 0) == ($13_1 | 0)) {
           break label$36
          }
          if (((($4_1 & (HEAP32[($5_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0) | 0) >>> $19_1 | 0) + -1 | 0) >>> 0 <= 253 >>> 0) {
           continue label$37
          }
          break label$37;
         };
         $18_1 = $2_1;
         break label$35;
        }
        $18_1 = $13_1;
       }
       $20_1 = ($2_1 | 0) < ($13_1 | 0);
      }
      $19_1 = $18_1 - $6_1 | 0;
      $2_1 = $6_1 - $15_1 | 0;
      $15_1 = ($2_1 | 0) == ($13_1 | 0);
      label$38 : {
       if (($2_1 | 0) < (65536 | 0)) {
        break label$38
       }
       label$39 : while (1) {
        $23_1 = 65535;
        HEAP16[$1_1 >> 1] = $23_1;
        HEAP16[($1_1 + 2 | 0) >> 1] = $23_1 >>> 16 | 0;
        $1_1 = $1_1 + 4 | 0;
        $4_1 = $2_1 >>> 0 > 131070 >>> 0;
        $2_1 = $2_1 + -65535 | 0;
        if ($4_1) {
         continue label$39
        }
        break label$39;
       };
      }
      $16_1 = $15_1 & $16_1 | 0;
      HEAP16[$1_1 >> 1] = $2_1;
      $4_1 = ($19_1 | 0) < (65535 | 0) ? $19_1 : 65535;
      HEAP16[($1_1 + 2 | 0) >> 1] = $4_1;
      $1_1 = $1_1 + 4 | 0;
      $1_1 = $1_1 + (FUNCTION_TABLE[$7_1 | 0]($1_1, $5_1 + ($6_1 << 2 | 0) | 0, $4_1, $12_1, $3_1) | 0) | 0;
      label$40 : {
       $2_1 = $19_1 - $4_1 | 0;
       if (!$2_1) {
        break label$40
       }
       $6_1 = $4_1 + $6_1 | 0;
       label$41 : while (1) {
        HEAP16[$1_1 >> 1] = 0;
        $4_1 = ($2_1 | 0) < (65535 | 0) ? $2_1 : 65535;
        HEAP16[($1_1 + 2 | 0) >> 1] = $4_1;
        $1_1 = $1_1 + 4 | 0;
        $1_1 = $1_1 + (FUNCTION_TABLE[$7_1 | 0]($1_1, $5_1 + ($6_1 << 2 | 0) | 0, $4_1, $12_1, $3_1) | 0) | 0;
        $6_1 = $4_1 + $6_1 | 0;
        $2_1 = $2_1 - $4_1 | 0;
        if ($2_1) {
         continue label$41
        }
        break label$41;
       };
      }
      $10_1 = $16_1 ? $10_1 : $1_1;
      $15_1 = $18_1;
      if ($20_1) {
       continue label$29
      }
      break label$29;
     };
     $5_1 = $5_1 + ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & -4 | 0) | 0;
     $14_1 = $14_1 + 1 | 0;
     if (($14_1 | 0) != ($11_1 | 0)) {
      continue label$9
     }
     break label$9;
    };
    $1_1 = HEAPU8[($3_1 + 9 | 0) >> 0] | 0;
   }
   $2_1 = 4;
   label$42 : {
    label$43 : {
     if (($1_1 & 255 | 0 | 0) != (4 | 0)) {
      break label$43
     }
     $24_1 = 0;
     HEAP16[$10_1 >> 1] = $24_1;
     HEAP16[($10_1 + 2 | 0) >> 1] = $24_1 >>> 16 | 0;
     break label$42;
    }
    $25_1 = 0;
    HEAP8[$10_1 >> 0] = $25_1;
    HEAP8[($10_1 + 1 | 0) >> 0] = $25_1 >>> 8 | 0;
    $2_1 = 2;
   }
   $1_1 = $10_1 + $2_1 | 0;
   label$44 : {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if ($2_1 & 1 | 0) {
     break label$44
    }
    $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    label$45 : {
     label$46 : {
      if (!($2_1 & 8 | 0)) {
       break label$46
      }
      $568($4_1 | 0);
      HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -9 | 0;
      break label$45;
     }
     $459($4_1 | 0);
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   }
   $1_1 = $458($9_1 | 0, $1_1 - $9_1 | 0 | 0) | 0;
   HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = $1_1 ? $1_1 : $9_1;
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $580($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $11_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $16_1 = 0, $179_1 = 0, $244_1 = 0, $279_1 = 0, $354_1 = 0, $419_1 = 0, $454_1 = 0, $529_1 = 0, $590_1 = 0, $626_1 = 0, $646_1 = 0, $648_1 = 0, $959_1 = 0, $961_1 = 0;
  $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAPU8[$2_1 >> 0] | 0) & 2 | 0)) {
    break label$1
   }
   if (($805($2_1 | 0) | 0 | 0) >= (0 | 0)) {
    break label$1
   }
   return -1 | 0;
  }
  $6_1 = HEAPU8[($4_1 + 9 | 0) >> 0] | 0;
  $7_1 = HEAP32[$3_1 >> 2] | 0;
  $8_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $9_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
  $10_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
  $3_1 = (HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 28 | 0;
  label$2 : {
   label$3 : {
    $11_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$3
    }
    label$4 : {
     if (($6_1 | 0) != (2 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      $12_1 = 0;
      label$6 : while (1) {
       $13_1 = $3_1 + 2 | 0;
       $12_1 = $12_1 + (HEAPU8[$3_1 >> 0] | 0) | 0;
       label$7 : {
        label$8 : {
         $3_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
         if (!$3_1) {
          break label$8
         }
         $12_1 = $12_1 + $3_1 | 0;
         $3_1 = $13_1 + ($3_1 << 1 | 0) | 0;
         break label$7;
        }
        $3_1 = $13_1;
        if (!$12_1) {
         break label$2
        }
       }
       if (($12_1 | 0) < ($5_1 | 0)) {
        continue label$6
       }
       break label$6;
      };
      $12_1 = $3_1 + ($3_1 & 2 | 0) | 0;
      $13_1 = 0;
      label$9 : while (1) {
       $14_1 = HEAPU16[$12_1 >> 1] | 0;
       $15_1 = HEAPU16[($12_1 + 2 | 0) >> 1] | 0;
       $3_1 = (($15_1 << 2 | 0) + $12_1 | 0) + 4 | 0;
       $12_1 = $3_1;
       $13_1 = $15_1 + ($13_1 + $14_1 | 0) | 0;
       if (($13_1 | 0) < ($5_1 | 0)) {
        continue label$9
       }
       break label$9;
      };
      $11_1 = $11_1 + -1 | 0;
      if ($11_1) {
       continue label$5
      }
      break label$3;
     };
    }
    $14_1 = $11_1 << 1 | 0;
    label$10 : while (1) {
     $12_1 = 0;
     label$11 : while (1) {
      $13_1 = $3_1 + 4 | 0;
      $12_1 = $12_1 + (HEAPU16[$3_1 >> 1] | 0) | 0;
      label$12 : {
       label$13 : {
        $3_1 = HEAPU16[($3_1 + 2 | 0) >> 1] | 0;
        if (!$3_1) {
         break label$13
        }
        $12_1 = $12_1 + $3_1 | 0;
        $3_1 = $13_1 + ($3_1 << 2 | 0) | 0;
        break label$12;
       }
       $3_1 = $13_1;
       if (!$12_1) {
        break label$2
       }
      }
      if (($12_1 | 0) < ($5_1 | 0)) {
       continue label$11
      }
      break label$11;
     };
     $14_1 = $14_1 + -1 | 0;
     if ($14_1) {
      continue label$10
     }
     break label$10;
    };
   }
   $8_1 = ($10_1 + Math_imul($9_1, $8_1) | 0) + Math_imul($7_1, $6_1) | 0;
   label$14 : {
    label$15 : {
     $7_1 = HEAP32[$1_1 >> 2] | 0;
     if ($7_1) {
      break label$15
     }
     if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
      break label$14
     }
    }
    label$16 : {
     label$17 : {
      $12_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      switch ((HEAPU8[($12_1 + 9 | 0) >> 0] | 0) + -2 | 0 | 0) {
      case 2:
       break label$16;
      case 0:
       break label$17;
      default:
       break label$2;
      };
     }
     label$18 : {
      label$19 : {
       if ((HEAP32[($12_1 + 16 | 0) >> 2] | 0 | 0) == (2016 | 0)) {
        break label$19
       }
       if ((HEAP32[($12_1 + 12 | 0) >> 2] | 0 | 0) == (2016 | 0)) {
        break label$19
       }
       if ((HEAP32[($12_1 + 20 | 0) >> 2] | 0 | 0) != (2016 | 0)) {
        break label$18
       }
      }
      $6_1 = $8_1 - ($7_1 << 1 | 0) | 0;
      $8_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + $7_1 | 0;
      $9_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      label$20 : while (1) {
       $12_1 = 0;
       label$21 : while (1) {
        $13_1 = $3_1 + 2 | 0;
        $12_1 = $12_1 + (HEAPU8[$3_1 >> 0] | 0) | 0;
        label$22 : {
         label$23 : {
          $3_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
          if (!$3_1) {
           break label$23
          }
          label$24 : {
           $14_1 = $7_1 - $12_1 | 0;
           $179_1 = $14_1;
           $14_1 = ($14_1 | 0) > (0 | 0);
           $15_1 = $3_1 - ($14_1 ? $179_1 : 0) | 0;
           $14_1 = $14_1 ? $7_1 : $12_1;
           $0_1 = $8_1 - $14_1 | 0;
           $15_1 = ($15_1 | 0) < ($0_1 | 0) ? $15_1 : $0_1;
           if (($15_1 | 0) < (1 | 0)) {
            break label$24
           }
           $535($6_1 + ($14_1 << 1 | 0) | 0 | 0, $13_1 + (($14_1 - $12_1 | 0) << 1 | 0) | 0 | 0, $15_1 << 1 | 0 | 0) | 0;
          }
          $12_1 = $12_1 + $3_1 | 0;
          $3_1 = $13_1 + ($3_1 << 1 | 0) | 0;
          break label$22;
         }
         $3_1 = $13_1;
         if (!$12_1) {
          break label$2
         }
        }
        if (($12_1 | 0) < ($5_1 | 0)) {
         continue label$21
        }
        break label$21;
       };
       $3_1 = $3_1 + ($3_1 & 2 | 0) | 0;
       $1_1 = 0;
       label$25 : while (1) {
        $4_1 = $3_1 + 4 | 0;
        $1_1 = $1_1 + (HEAPU16[$3_1 >> 1] | 0) | 0;
        label$26 : {
         label$27 : {
          $11_1 = HEAPU16[($3_1 + 2 | 0) >> 1] | 0;
          if ($11_1) {
           break label$27
          }
          $3_1 = $4_1;
          break label$26;
         }
         label$28 : {
          $3_1 = $7_1 - $1_1 | 0;
          $244_1 = $3_1;
          $3_1 = ($3_1 | 0) > (0 | 0);
          $12_1 = $11_1 - ($3_1 ? $244_1 : 0) | 0;
          $3_1 = $3_1 ? $7_1 : $1_1;
          $13_1 = $8_1 - $3_1 | 0;
          $14_1 = ($12_1 | 0) < ($13_1 | 0) ? $12_1 : $13_1;
          if (($14_1 | 0) < (1 | 0)) {
           break label$28
          }
          $15_1 = $6_1 + ($3_1 << 1 | 0) | 0;
          $0_1 = $4_1 + (($3_1 - $1_1 | 0) << 2 | 0) | 0;
          $3_1 = 0;
          label$29 : while (1) {
           $12_1 = $15_1 + ($3_1 << 1 | 0) | 0;
           $279_1 = $12_1;
           $13_1 = HEAP32[($0_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
           $12_1 = HEAPU16[$12_1 >> 1] | 0;
           $12_1 = ($12_1 << 16 | 0 | $12_1 | 0) & 132184095 | 0;
           $12_1 = ((Math_imul(($13_1 & 132184095 | 0) - $12_1 | 0, ($13_1 >>> 5 | 0) & 31 | 0) >>> 5 | 0) + $12_1 | 0) & 132184095 | 0;
           HEAP16[$279_1 >> 1] = $12_1 >>> 16 | 0 | $12_1 | 0;
           $3_1 = $3_1 + 1 | 0;
           if (($3_1 | 0) != ($14_1 | 0)) {
            continue label$29
           }
           break label$29;
          };
         }
         $1_1 = $1_1 + $11_1 | 0;
         $3_1 = $4_1 + ($11_1 << 2 | 0) | 0;
        }
        if (($1_1 | 0) < ($5_1 | 0)) {
         continue label$25
        }
        break label$25;
       };
       $6_1 = $6_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
       $9_1 = $9_1 + -1 | 0;
       if ($9_1) {
        continue label$20
       }
       break label$2;
      };
     }
     $6_1 = $8_1 - ($7_1 << 1 | 0) | 0;
     $8_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + $7_1 | 0;
     $9_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     label$30 : while (1) {
      $12_1 = 0;
      label$31 : while (1) {
       $13_1 = $3_1 + 2 | 0;
       $12_1 = $12_1 + (HEAPU8[$3_1 >> 0] | 0) | 0;
       label$32 : {
        label$33 : {
         $3_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
         if (!$3_1) {
          break label$33
         }
         label$34 : {
          $14_1 = $7_1 - $12_1 | 0;
          $354_1 = $14_1;
          $14_1 = ($14_1 | 0) > (0 | 0);
          $15_1 = $3_1 - ($14_1 ? $354_1 : 0) | 0;
          $14_1 = $14_1 ? $7_1 : $12_1;
          $0_1 = $8_1 - $14_1 | 0;
          $15_1 = ($15_1 | 0) < ($0_1 | 0) ? $15_1 : $0_1;
          if (($15_1 | 0) < (1 | 0)) {
           break label$34
          }
          $535($6_1 + ($14_1 << 1 | 0) | 0 | 0, $13_1 + (($14_1 - $12_1 | 0) << 1 | 0) | 0 | 0, $15_1 << 1 | 0 | 0) | 0;
         }
         $12_1 = $12_1 + $3_1 | 0;
         $3_1 = $13_1 + ($3_1 << 1 | 0) | 0;
         break label$32;
        }
        $3_1 = $13_1;
        if (!$12_1) {
         break label$2
        }
       }
       if (($12_1 | 0) < ($5_1 | 0)) {
        continue label$31
       }
       break label$31;
      };
      $3_1 = $3_1 + ($3_1 & 2 | 0) | 0;
      $1_1 = 0;
      label$35 : while (1) {
       $4_1 = $3_1 + 4 | 0;
       $1_1 = $1_1 + (HEAPU16[$3_1 >> 1] | 0) | 0;
       label$36 : {
        label$37 : {
         $11_1 = HEAPU16[($3_1 + 2 | 0) >> 1] | 0;
         if ($11_1) {
          break label$37
         }
         $3_1 = $4_1;
         break label$36;
        }
        label$38 : {
         $3_1 = $7_1 - $1_1 | 0;
         $419_1 = $3_1;
         $3_1 = ($3_1 | 0) > (0 | 0);
         $12_1 = $11_1 - ($3_1 ? $419_1 : 0) | 0;
         $3_1 = $3_1 ? $7_1 : $1_1;
         $13_1 = $8_1 - $3_1 | 0;
         $14_1 = ($12_1 | 0) < ($13_1 | 0) ? $12_1 : $13_1;
         if (($14_1 | 0) < (1 | 0)) {
          break label$38
         }
         $15_1 = $6_1 + ($3_1 << 1 | 0) | 0;
         $0_1 = $4_1 + (($3_1 - $1_1 | 0) << 2 | 0) | 0;
         $3_1 = 0;
         label$39 : while (1) {
          $12_1 = $15_1 + ($3_1 << 1 | 0) | 0;
          $454_1 = $12_1;
          $13_1 = HEAP32[($0_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
          $12_1 = HEAPU16[$12_1 >> 1] | 0;
          $12_1 = ($12_1 << 16 | 0 | $12_1 | 0) & 65043487 | 0;
          $12_1 = ((Math_imul(($13_1 & 65043487 | 0) - $12_1 | 0, ($13_1 >>> 5 | 0) & 31 | 0) >>> 5 | 0) + $12_1 | 0) & 65043487 | 0;
          HEAP16[$454_1 >> 1] = $12_1 >>> 16 | 0 | $12_1 | 0;
          $3_1 = $3_1 + 1 | 0;
          if (($3_1 | 0) != ($14_1 | 0)) {
           continue label$39
          }
          break label$39;
         };
        }
        $1_1 = $1_1 + $11_1 | 0;
        $3_1 = $4_1 + ($11_1 << 2 | 0) | 0;
       }
       if (($1_1 | 0) < ($5_1 | 0)) {
        continue label$35
       }
       break label$35;
      };
      $6_1 = $6_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
      $9_1 = $9_1 + -1 | 0;
      if ($9_1) {
       continue label$30
      }
      break label$2;
     };
    }
    $10_1 = $8_1 - ($7_1 << 2 | 0) | 0;
    $9_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + $7_1 | 0;
    $16_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    label$40 : while (1) {
     $12_1 = 0;
     label$41 : while (1) {
      $13_1 = $3_1 + 4 | 0;
      $12_1 = $12_1 + (HEAPU16[$3_1 >> 1] | 0) | 0;
      label$42 : {
       label$43 : {
        $3_1 = HEAPU16[($3_1 + 2 | 0) >> 1] | 0;
        if (!$3_1) {
         break label$43
        }
        label$44 : {
         $14_1 = $7_1 - $12_1 | 0;
         $529_1 = $14_1;
         $14_1 = ($14_1 | 0) > (0 | 0);
         $15_1 = $3_1 - ($14_1 ? $529_1 : 0) | 0;
         $14_1 = $14_1 ? $7_1 : $12_1;
         $0_1 = $9_1 - $14_1 | 0;
         $15_1 = ($15_1 | 0) < ($0_1 | 0) ? $15_1 : $0_1;
         if (($15_1 | 0) < (1 | 0)) {
          break label$44
         }
         $535($10_1 + ($14_1 << 2 | 0) | 0 | 0, $13_1 + (($14_1 - $12_1 | 0) << 2 | 0) | 0 | 0, $15_1 << 2 | 0 | 0) | 0;
        }
        $12_1 = $12_1 + $3_1 | 0;
        $3_1 = $13_1 + ($3_1 << 2 | 0) | 0;
        break label$42;
       }
       $3_1 = $13_1;
       if (!$12_1) {
        break label$2
       }
      }
      if (($12_1 | 0) < ($5_1 | 0)) {
       continue label$41
      }
      break label$41;
     };
     $4_1 = 0;
     label$45 : while (1) {
      $6_1 = $3_1 + 4 | 0;
      $4_1 = $4_1 + (HEAPU16[$3_1 >> 1] | 0) | 0;
      label$46 : {
       label$47 : {
        $8_1 = HEAPU16[($3_1 + 2 | 0) >> 1] | 0;
        if ($8_1) {
         break label$47
        }
        $3_1 = $6_1;
        break label$46;
       }
       label$48 : {
        $3_1 = $7_1 - $4_1 | 0;
        $590_1 = $3_1;
        $3_1 = ($3_1 | 0) > (0 | 0);
        $12_1 = $8_1 - ($3_1 ? $590_1 : 0) | 0;
        $3_1 = $3_1 ? $7_1 : $4_1;
        $13_1 = $9_1 - $3_1 | 0;
        $0_1 = ($12_1 | 0) < ($13_1 | 0) ? $12_1 : $13_1;
        if (($0_1 | 0) < (1 | 0)) {
         break label$48
        }
        $1_1 = $10_1 + ($3_1 << 2 | 0) | 0;
        $11_1 = $6_1 + (($3_1 - $4_1 | 0) << 2 | 0) | 0;
        $3_1 = 0;
        label$49 : while (1) {
         $12_1 = $3_1 << 2 | 0;
         $13_1 = $1_1 + $12_1 | 0;
         $626_1 = $13_1;
         $12_1 = HEAP32[($11_1 + $12_1 | 0) >> 2] | 0;
         $13_1 = HEAP32[$13_1 >> 2] | 0;
         $14_1 = $13_1 & 16711935 | 0;
         $15_1 = $12_1 >>> 24 | 0;
         $646_1 = ((Math_imul(($12_1 & 16711935 | 0) - $14_1 | 0, $15_1) >>> 8 | 0) + $14_1 | 0) & 16711935 | 0;
         $648_1 = $12_1 & 65280 | 0;
         $12_1 = $13_1 & 65280 | 0;
         HEAP32[$626_1 >> 2] = $646_1 | (((Math_imul($648_1 - $12_1 | 0, $15_1) >>> 8 | 0) + $12_1 | 0) & 65280 | 0) | 0 | -16777216 | 0;
         $3_1 = $3_1 + 1 | 0;
         if (($3_1 | 0) != ($0_1 | 0)) {
          continue label$49
         }
         break label$49;
        };
       }
       $4_1 = $4_1 + $8_1 | 0;
       $3_1 = $6_1 + ($8_1 << 2 | 0) | 0;
      }
      if (($4_1 | 0) < ($5_1 | 0)) {
       continue label$45
      }
      break label$45;
     };
     $10_1 = $10_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
     $16_1 = $16_1 + -1 | 0;
     if ($16_1) {
      continue label$40
     }
     break label$2;
    };
   }
   label$50 : {
    switch ($6_1 + -2 | 0 | 0) {
    case 0:
     label$52 : {
      label$53 : {
       if ((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) == (2016 | 0)) {
        break label$53
       }
       if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (2016 | 0)) {
        break label$53
       }
       if ((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (2016 | 0)) {
        break label$52
       }
      }
      $11_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      label$54 : while (1) {
       $12_1 = 0;
       label$55 : while (1) {
        $13_1 = $3_1 + 2 | 0;
        $12_1 = $12_1 + (HEAPU8[$3_1 >> 0] | 0) | 0;
        label$56 : {
         label$57 : {
          $3_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
          if (!$3_1) {
           break label$57
          }
          $14_1 = $3_1 << 1 | 0;
          $535($8_1 + ($12_1 << 1 | 0) | 0 | 0, $13_1 | 0, $14_1 | 0) | 0;
          $12_1 = $12_1 + $3_1 | 0;
          $3_1 = $13_1 + $14_1 | 0;
          break label$56;
         }
         $3_1 = $13_1;
         if (!$12_1) {
          break label$2
         }
        }
        if (($12_1 | 0) < ($5_1 | 0)) {
         continue label$55
        }
        break label$55;
       };
       $3_1 = $3_1 + ($3_1 & 2 | 0) | 0;
       $1_1 = 0;
       label$58 : while (1) {
        $12_1 = $3_1 + 4 | 0;
        $1_1 = $1_1 + (HEAPU16[$3_1 >> 1] | 0) | 0;
        label$59 : {
         $0_1 = HEAPU16[($3_1 + 2 | 0) >> 1] | 0;
         if (!$0_1) {
          break label$59
         }
         $3_1 = $8_1 + ($1_1 << 1 | 0) | 0;
         $13_1 = 0;
         label$60 : while (1) {
          $14_1 = HEAP32[$12_1 >> 2] | 0;
          $15_1 = HEAPU16[$3_1 >> 1] | 0;
          $15_1 = ($15_1 << 16 | 0 | $15_1 | 0) & 132184095 | 0;
          $14_1 = ((Math_imul(($14_1 & 132184095 | 0) - $15_1 | 0, ($14_1 >>> 5 | 0) & 31 | 0) >>> 5 | 0) + $15_1 | 0) & 132184095 | 0;
          HEAP16[$3_1 >> 1] = $14_1 >>> 16 | 0 | $14_1 | 0;
          $3_1 = $3_1 + 2 | 0;
          $12_1 = $12_1 + 4 | 0;
          $13_1 = $13_1 + 1 | 0;
          if (($13_1 | 0) != ($0_1 | 0)) {
           continue label$60
          }
          break label$60;
         };
         $1_1 = $1_1 + $0_1 | 0;
        }
        $3_1 = $12_1;
        if (($1_1 | 0) < ($5_1 | 0)) {
         continue label$58
        }
        break label$58;
       };
       $8_1 = $8_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
       $11_1 = $11_1 + -1 | 0;
       if ($11_1) {
        continue label$54
       }
       break label$2;
      };
     }
     $11_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     label$61 : while (1) {
      $12_1 = 0;
      label$62 : while (1) {
       $13_1 = $3_1 + 2 | 0;
       $12_1 = $12_1 + (HEAPU8[$3_1 >> 0] | 0) | 0;
       label$63 : {
        label$64 : {
         $3_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
         if (!$3_1) {
          break label$64
         }
         $14_1 = $3_1 << 1 | 0;
         $535($8_1 + ($12_1 << 1 | 0) | 0 | 0, $13_1 | 0, $14_1 | 0) | 0;
         $12_1 = $12_1 + $3_1 | 0;
         $3_1 = $13_1 + $14_1 | 0;
         break label$63;
        }
        $3_1 = $13_1;
        if (!$12_1) {
         break label$2
        }
       }
       if (($12_1 | 0) < ($5_1 | 0)) {
        continue label$62
       }
       break label$62;
      };
      $3_1 = $3_1 + ($3_1 & 2 | 0) | 0;
      $1_1 = 0;
      label$65 : while (1) {
       $12_1 = $3_1 + 4 | 0;
       $1_1 = $1_1 + (HEAPU16[$3_1 >> 1] | 0) | 0;
       label$66 : {
        $0_1 = HEAPU16[($3_1 + 2 | 0) >> 1] | 0;
        if (!$0_1) {
         break label$66
        }
        $3_1 = $8_1 + ($1_1 << 1 | 0) | 0;
        $13_1 = 0;
        label$67 : while (1) {
         $14_1 = HEAP32[$12_1 >> 2] | 0;
         $15_1 = HEAPU16[$3_1 >> 1] | 0;
         $15_1 = ($15_1 << 16 | 0 | $15_1 | 0) & 65043487 | 0;
         $14_1 = ((Math_imul(($14_1 & 65043487 | 0) - $15_1 | 0, ($14_1 >>> 5 | 0) & 31 | 0) >>> 5 | 0) + $15_1 | 0) & 65043487 | 0;
         HEAP16[$3_1 >> 1] = $14_1 >>> 16 | 0 | $14_1 | 0;
         $3_1 = $3_1 + 2 | 0;
         $12_1 = $12_1 + 4 | 0;
         $13_1 = $13_1 + 1 | 0;
         if (($13_1 | 0) != ($0_1 | 0)) {
          continue label$67
         }
         break label$67;
        };
        $1_1 = $1_1 + $0_1 | 0;
       }
       $3_1 = $12_1;
       if (($1_1 | 0) < ($5_1 | 0)) {
        continue label$65
       }
       break label$65;
      };
      $8_1 = $8_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
      $11_1 = $11_1 + -1 | 0;
      if ($11_1) {
       continue label$61
      }
      break label$2;
     };
    case 2:
     break label$50;
    default:
     break label$2;
    };
   }
   $7_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   label$68 : while (1) {
    $12_1 = 0;
    label$69 : while (1) {
     $13_1 = $3_1 + 4 | 0;
     $12_1 = $12_1 + (HEAPU16[$3_1 >> 1] | 0) | 0;
     label$70 : {
      label$71 : {
       $3_1 = HEAPU16[($3_1 + 2 | 0) >> 1] | 0;
       if (!$3_1) {
        break label$71
       }
       $14_1 = $3_1 << 2 | 0;
       $535($8_1 + ($12_1 << 2 | 0) | 0 | 0, $13_1 | 0, $14_1 | 0) | 0;
       $12_1 = $12_1 + $3_1 | 0;
       $3_1 = $13_1 + $14_1 | 0;
       break label$70;
      }
      $3_1 = $13_1;
      if (!$12_1) {
       break label$2
      }
     }
     if (($12_1 | 0) < ($5_1 | 0)) {
      continue label$69
     }
     break label$69;
    };
    $4_1 = 0;
    label$72 : while (1) {
     $12_1 = $3_1 + 4 | 0;
     $4_1 = $4_1 + (HEAPU16[$3_1 >> 1] | 0) | 0;
     label$73 : {
      $11_1 = HEAPU16[($3_1 + 2 | 0) >> 1] | 0;
      if (!$11_1) {
       break label$73
      }
      $3_1 = $8_1 + ($4_1 << 2 | 0) | 0;
      $14_1 = 0;
      label$74 : while (1) {
       $13_1 = HEAP32[$12_1 >> 2] | 0;
       $15_1 = HEAP32[$3_1 >> 2] | 0;
       $0_1 = $15_1 & 65280 | 0;
       $1_1 = $13_1 >>> 24 | 0;
       $959_1 = ((Math_imul(($13_1 & 65280 | 0) - $0_1 | 0, $1_1) >>> 8 | 0) + $0_1 | 0) & 65280 | 0;
       $961_1 = $13_1 & 16711935 | 0;
       $13_1 = $15_1 & 16711935 | 0;
       HEAP32[$3_1 >> 2] = $959_1 | (((Math_imul($961_1 - $13_1 | 0, $1_1) >>> 8 | 0) + $13_1 | 0) & 16711935 | 0) | 0 | -16777216 | 0;
       $3_1 = $3_1 + 4 | 0;
       $12_1 = $12_1 + 4 | 0;
       $14_1 = $14_1 + 1 | 0;
       if (($14_1 | 0) != ($11_1 | 0)) {
        continue label$74
       }
       break label$74;
      };
      $4_1 = $4_1 + $11_1 | 0;
     }
     $3_1 = $12_1;
     if (($4_1 | 0) < ($5_1 | 0)) {
      continue label$72
     }
     break label$72;
    };
    $8_1 = $8_1 + (HEAP32[($2_1 + 16 | 0) >> 2] | 0) | 0;
    $7_1 = $7_1 + -1 | 0;
    if ($7_1) {
     continue label$68
    }
    break label$68;
   };
  }
  label$75 : {
   if (!((HEAPU8[$2_1 >> 0] | 0) & 2 | 0)) {
    break label$75
   }
   $806($2_1 | 0);
  }
  return 0 | 0;
 }
 
 function $581($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $19_1 = 0, $20_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[(117504 + ((HEAPU8[($3_1 + 22 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
   $6_1 = HEAP32[(117504 + ((HEAPU8[($3_1 + 21 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
   $7_1 = HEAP32[(117504 + ((HEAPU8[($3_1 + 20 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
   $8_1 = HEAPU8[($4_1 + 35 | 0) >> 0] | 0;
   $9_1 = HEAPU8[($4_1 + 31 | 0) >> 0] | 0;
   $10_1 = HEAPU8[($4_1 + 34 | 0) >> 0] | 0;
   $11_1 = HEAPU8[($4_1 + 30 | 0) >> 0] | 0;
   $12_1 = HEAPU8[($4_1 + 33 | 0) >> 0] | 0;
   $13_1 = HEAPU8[($4_1 + 29 | 0) >> 0] | 0;
   $14_1 = HEAPU8[($4_1 + 32 | 0) >> 0] | 0;
   $15_1 = HEAPU8[($4_1 + 28 | 0) >> 0] | 0;
   $16_1 = HEAPU8[($3_1 + 26 | 0) >> 0] | 0;
   $17_1 = HEAPU8[($3_1 + 25 | 0) >> 0] | 0;
   $18_1 = HEAPU8[($3_1 + 24 | 0) >> 0] | 0;
   $19_1 = 0;
   label$2 : while (1) {
    $4_1 = HEAP32[$1_1 >> 2] | 0;
    $20_1 = $4_1 & -993 | 0 | ($4_1 >>> 16 | 0) | 0;
    HEAP32[$0_1 >> 2] = ((HEAPU8[($6_1 + (((HEAP32[($3_1 + 8 | 0) >> 2] | 0) & $20_1 | 0) >>> $17_1 | 0) | 0) >> 0] | 0) >>> $13_1 | 0) << $12_1 | 0 | (((HEAPU8[($7_1 + (((HEAP32[($3_1 + 4 | 0) >> 2] | 0) & $20_1 | 0) >>> $18_1 | 0) | 0) >> 0] | 0) >>> $15_1 | 0) << $14_1 | 0) | 0 | (((HEAPU8[($5_1 + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> $16_1 | 0) | 0) >> 0] | 0) >>> $11_1 | 0) << $10_1 | 0) | 0 | (((($4_1 >>> 2 | 0) & 248 | 0) >>> $9_1 | 0) << $8_1 | 0) | 0;
    $0_1 = $0_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $19_1 = $19_1 + 1 | 0;
    if (($19_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 << 2 | 0 | 0;
 }
 
 function $582($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $19_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[(117504 + ((HEAPU8[($3_1 + 22 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
   $6_1 = HEAP32[(117504 + ((HEAPU8[($3_1 + 21 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
   $7_1 = HEAP32[(117504 + ((HEAPU8[($3_1 + 20 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
   $8_1 = HEAPU8[($4_1 + 35 | 0) >> 0] | 0;
   $9_1 = HEAPU8[($4_1 + 31 | 0) >> 0] | 0;
   $10_1 = HEAPU8[($4_1 + 34 | 0) >> 0] | 0;
   $11_1 = HEAPU8[($4_1 + 30 | 0) >> 0] | 0;
   $12_1 = HEAPU8[($4_1 + 33 | 0) >> 0] | 0;
   $13_1 = HEAPU8[($4_1 + 29 | 0) >> 0] | 0;
   $14_1 = HEAPU8[($4_1 + 32 | 0) >> 0] | 0;
   $15_1 = HEAPU8[($4_1 + 28 | 0) >> 0] | 0;
   $16_1 = HEAPU8[($3_1 + 26 | 0) >> 0] | 0;
   $17_1 = HEAPU8[($3_1 + 25 | 0) >> 0] | 0;
   $18_1 = HEAPU8[($3_1 + 24 | 0) >> 0] | 0;
   $19_1 = 0;
   label$2 : while (1) {
    $4_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = ((HEAPU8[($6_1 + (((HEAP32[($3_1 + 8 | 0) >> 2] | 0) & $4_1 | 0) >>> $17_1 | 0) | 0) >> 0] | 0) >>> $13_1 | 0) << $12_1 | 0 | (((HEAPU8[($7_1 + (((HEAP32[($3_1 + 4 | 0) >> 2] | 0) & $4_1 | 0) >>> $18_1 | 0) | 0) >> 0] | 0) >>> $15_1 | 0) << $14_1 | 0) | 0 | (((HEAPU8[($5_1 + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & $4_1 | 0) >>> $16_1 | 0) | 0) >> 0] | 0) >>> $11_1 | 0) << $10_1 | 0) | 0 | ((($4_1 >>> 24 | 0) >>> $9_1 | 0) << $8_1 | 0) | 0;
    $0_1 = $0_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $19_1 = $19_1 + 1 | 0;
    if (($19_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 << 2 | 0 | 0;
 }
 
 function $583($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = 0;
   $6_1 = ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 ? 255 : 0) >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0;
   $7_1 = HEAP32[(117504 + ((HEAPU8[($3_1 + 22 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
   $8_1 = HEAP32[(117504 + ((HEAPU8[($3_1 + 21 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
   $9_1 = HEAP32[(117504 + ((HEAPU8[($3_1 + 20 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
   $10_1 = HEAPU8[($4_1 + 34 | 0) >> 0] | 0;
   $11_1 = HEAPU8[($4_1 + 30 | 0) >> 0] | 0;
   $12_1 = HEAPU8[($4_1 + 33 | 0) >> 0] | 0;
   $13_1 = HEAPU8[($4_1 + 29 | 0) >> 0] | 0;
   $14_1 = HEAPU8[($4_1 + 32 | 0) >> 0] | 0;
   $15_1 = HEAPU8[($4_1 + 28 | 0) >> 0] | 0;
   $16_1 = HEAPU8[($3_1 + 26 | 0) >> 0] | 0;
   $17_1 = HEAPU8[($3_1 + 25 | 0) >> 0] | 0;
   $18_1 = HEAPU8[($3_1 + 24 | 0) >> 0] | 0;
   label$2 : while (1) {
    $4_1 = HEAPU16[$1_1 >> 1] | 0;
    HEAP32[$0_1 >> 2] = ((HEAPU8[($8_1 + (((HEAP32[($3_1 + 8 | 0) >> 2] | 0) & $4_1 | 0) >>> $17_1 | 0) | 0) >> 0] | 0) >>> $13_1 | 0) << $12_1 | 0 | (((HEAPU8[($9_1 + (((HEAP32[($3_1 + 4 | 0) >> 2] | 0) & $4_1 | 0) >>> $18_1 | 0) | 0) >> 0] | 0) >>> $15_1 | 0) << $14_1 | 0) | 0 | (((HEAPU8[($7_1 + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & $4_1 | 0) >>> $16_1 | 0) | 0) >> 0] | 0) >>> $11_1 | 0) << $10_1 | 0) | 0 | $6_1 | 0;
    $0_1 = $0_1 + 4 | 0;
    $1_1 = $1_1 + 2 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 << 1 | 0 | 0;
 }
 
 function $584($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $16_1 = 0, $15_1 = 0, $17_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = HEAPU8[($4_1 + 34 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($4_1 + 30 | 0) >> 0] | 0;
   $7_1 = HEAPU8[($4_1 + 33 | 0) >> 0] | 0;
   $8_1 = HEAPU8[($4_1 + 29 | 0) >> 0] | 0;
   $9_1 = HEAPU8[($4_1 + 32 | 0) >> 0] | 0;
   $10_1 = HEAPU8[($4_1 + 28 | 0) >> 0] | 0;
   $11_1 = HEAPU8[($3_1 + 35 | 0) >> 0] | 0;
   $12_1 = HEAPU8[($3_1 + 34 | 0) >> 0] | 0;
   $13_1 = HEAPU8[($3_1 + 33 | 0) >> 0] | 0;
   $14_1 = HEAPU8[($3_1 + 32 | 0) >> 0] | 0;
   $15_1 = 0;
   label$2 : while (1) {
    $16_1 = HEAP32[$1_1 >> 2] | 0;
    $17_1 = ((((HEAP32[($3_1 + 16 | 0) >> 2] | 0) & $16_1 | 0) >>> $13_1 | 0) >>> $8_1 | 0) << $7_1 | 0 | (((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & $16_1 | 0) >>> $14_1 | 0) >>> $10_1 | 0) << $9_1 | 0) | 0 | (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0 | (((((HEAP32[($3_1 + 20 | 0) >> 2] | 0) & $16_1 | 0) >>> $12_1 | 0) >>> $6_1 | 0) << $5_1 | 0) | 0;
    HEAP32[$0_1 >> 2] = $17_1 & 63519 | 0 | (((((HEAP32[($3_1 + 24 | 0) >> 2] | 0) & $16_1 | 0) >>> $11_1 | 0) << 2 | 0) & 2016 | 0) | 0 | (($17_1 << 16 | 0) & 132120576 | 0) | 0;
    $0_1 = $0_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $15_1 = $15_1 + 1 | 0;
    if (($15_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 << 2 | 0 | 0;
 }
 
 function $585($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $16_1 = 0, $15_1 = 0, $17_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = HEAPU8[($4_1 + 34 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($4_1 + 30 | 0) >> 0] | 0;
   $7_1 = HEAPU8[($4_1 + 33 | 0) >> 0] | 0;
   $8_1 = HEAPU8[($4_1 + 29 | 0) >> 0] | 0;
   $9_1 = HEAPU8[($4_1 + 32 | 0) >> 0] | 0;
   $10_1 = HEAPU8[($4_1 + 28 | 0) >> 0] | 0;
   $11_1 = HEAPU8[($3_1 + 35 | 0) >> 0] | 0;
   $12_1 = HEAPU8[($3_1 + 34 | 0) >> 0] | 0;
   $13_1 = HEAPU8[($3_1 + 33 | 0) >> 0] | 0;
   $14_1 = HEAPU8[($3_1 + 32 | 0) >> 0] | 0;
   $15_1 = 0;
   label$2 : while (1) {
    $16_1 = HEAP32[$1_1 >> 2] | 0;
    $17_1 = ((((HEAP32[($3_1 + 16 | 0) >> 2] | 0) & $16_1 | 0) >>> $13_1 | 0) >>> $8_1 | 0) << $7_1 | 0 | (((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & $16_1 | 0) >>> $14_1 | 0) >>> $10_1 | 0) << $9_1 | 0) | 0 | (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0 | (((((HEAP32[($3_1 + 20 | 0) >> 2] | 0) & $16_1 | 0) >>> $12_1 | 0) >>> $6_1 | 0) << $5_1 | 0) | 0;
    HEAP32[$0_1 >> 2] = $17_1 & 64543 | 0 | (((((HEAP32[($3_1 + 24 | 0) >> 2] | 0) & $16_1 | 0) >>> $11_1 | 0) << 2 | 0) & 992 | 0) | 0 | (($17_1 << 16 | 0) & 65011712 | 0) | 0;
    $0_1 = $0_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $15_1 = $15_1 + 1 | 0;
    if (($15_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 << 2 | 0 | 0;
 }
 
 function $586($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[(117504 + ((HEAPU8[($3_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
   $6_1 = HEAP32[(117504 + ((HEAPU8[($3_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
   $7_1 = HEAP32[(117504 + ((HEAPU8[($3_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
   $8_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
   $9_1 = HEAPU8[($4_1 + 34 | 0) >> 0] | 0;
   $10_1 = HEAPU8[($4_1 + 30 | 0) >> 0] | 0;
   $11_1 = HEAPU8[($4_1 + 33 | 0) >> 0] | 0;
   $12_1 = HEAPU8[($4_1 + 29 | 0) >> 0] | 0;
   $13_1 = HEAPU8[($4_1 + 32 | 0) >> 0] | 0;
   $14_1 = HEAPU8[($4_1 + 28 | 0) >> 0] | 0;
   $15_1 = HEAPU8[($3_1 + 34 | 0) >> 0] | 0;
   $16_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   $17_1 = HEAPU8[($3_1 + 33 | 0) >> 0] | 0;
   $18_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
   $19_1 = HEAPU8[($3_1 + 32 | 0) >> 0] | 0;
   $20_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   $4_1 = 0;
   label$2 : while (1) {
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP16[$0_1 >> 1] = ((HEAPU8[($6_1 + (($18_1 & $3_1 | 0) >>> $17_1 | 0) | 0) >> 0] | 0) >>> $12_1 | 0) << $11_1 | 0 | (((HEAPU8[($7_1 + (($20_1 & $3_1 | 0) >>> $19_1 | 0) | 0) >> 0] | 0) >>> $14_1 | 0) << $13_1 | 0) | 0 | $8_1 | 0 | (((HEAPU8[($5_1 + (($16_1 & $3_1 | 0) >>> $15_1 | 0) | 0) >> 0] | 0) >>> $10_1 | 0) << $9_1 | 0) | 0;
    $0_1 = $0_1 + 2 | 0;
    $1_1 = $1_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 << 1 | 0 | 0;
 }
 
 function $587($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $15_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = HEAPU8[($4_1 + 34 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($4_1 + 30 | 0) >> 0] | 0;
   $7_1 = HEAPU8[($4_1 + 33 | 0) >> 0] | 0;
   $8_1 = HEAPU8[($4_1 + 29 | 0) >> 0] | 0;
   $9_1 = HEAPU8[($4_1 + 32 | 0) >> 0] | 0;
   $10_1 = HEAPU8[($4_1 + 28 | 0) >> 0] | 0;
   $11_1 = HEAPU8[($3_1 + 35 | 0) >> 0] | 0;
   $12_1 = HEAPU8[($3_1 + 34 | 0) >> 0] | 0;
   $13_1 = HEAPU8[($3_1 + 33 | 0) >> 0] | 0;
   $14_1 = HEAPU8[($3_1 + 32 | 0) >> 0] | 0;
   $15_1 = 0;
   label$2 : while (1) {
    $4_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP32[$0_1 >> 2] = ((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & $4_1 | 0) >>> $14_1 | 0) >>> $10_1 | 0) << $9_1 | 0 | ((((HEAP32[($3_1 + 24 | 0) >> 2] | 0) & $4_1 | 0) >>> $11_1 | 0) << 24 | 0) | 0 | (((((HEAP32[($3_1 + 16 | 0) >> 2] | 0) & $4_1 | 0) >>> $13_1 | 0) >>> $8_1 | 0) << $7_1 | 0) | 0 | (((((HEAP32[($3_1 + 20 | 0) >> 2] | 0) & $4_1 | 0) >>> $12_1 | 0) >>> $6_1 | 0) << $5_1 | 0) | 0;
    $1_1 = $1_1 + 4 | 0;
    $0_1 = $0_1 + 4 | 0;
    $15_1 = $15_1 + 1 | 0;
    if (($15_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 << 2 | 0 | 0;
 }
 
 function $588($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $589($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU16[$0_1 >> 1] | 0 | 0;
 }
 
 function $590($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0 | 0;
 }
 
 function $591($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $592($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $1_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $1_1 = Math_imul(HEAP32[($0_1 + 24 | 0) >> 2] | 0, HEAPU8[((HEAP32[($0_1 + 44 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0);
  $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[$0_1 >> 2] | 0;
      $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $0_1 >>> 0) {
       break label$4
      }
      if ($0_1 >>> 0 < ($5_1 + Math_imul($3_1, $4_1) | 0) >>> 0) {
       break label$3
      }
      break label$2;
     }
     if ($5_1 >>> 0 >= ($0_1 + Math_imul($2_1, $4_1) | 0) >>> 0) {
      break label$2
     }
    }
    label$5 : {
     if ($0_1 >>> 0 >= $5_1 >>> 0) {
      break label$5
     }
     if (!$4_1) {
      break label$1
     }
     label$6 : while (1) {
      $537($0_1 | 0, $5_1 | 0, $1_1 | 0) | 0;
      $0_1 = $0_1 + $2_1 | 0;
      $5_1 = $5_1 + $3_1 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue label$6
      }
      break label$1;
     };
    }
    if (!$4_1) {
     break label$1
    }
    $6_1 = 0 - $2_1 | 0;
    $7_1 = 0 - $3_1 | 0;
    $8_1 = $4_1 + -1 | 0;
    $5_1 = $5_1 + Math_imul($3_1, $8_1) | 0;
    $0_1 = $0_1 + Math_imul($2_1, $8_1) | 0;
    label$7 : while (1) {
     $537($0_1 | 0, $5_1 | 0, $1_1 | 0) | 0;
     $0_1 = $0_1 + $6_1 | 0;
     $5_1 = $5_1 + $7_1 | 0;
     $4_1 = $4_1 + -1 | 0;
     if ($4_1) {
      continue label$7
     }
     break label$1;
    };
   }
   if (!$4_1) {
    break label$1
   }
   label$8 : while (1) {
    $535($0_1 | 0, $5_1 | 0, $1_1 | 0) | 0;
    $0_1 = $0_1 + $2_1 | 0;
    $5_1 = $5_1 + $3_1 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$8
    }
    break label$8;
   };
  }
 }
 
 function $593($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $3_1 = 0, $1_1 = 0, $35_1 = 0, $34_1 = 0, $16_1 = 0, $28_1 = 0, $4_1 = 0, $15_1 = 0, $2_1 = 0, $36_1 = 0, $8_1 = 0, $30_1 = 0, $31_1 = 0, $37_1 = 0, $7_1 = 0, $27_1 = 0, $33_1 = 0, $6_1 = 0, $20_1 = 0, $24_1 = 0, $26_1 = 0, $29_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $25_1 = 0, $32_1 = 0;
  $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $2_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  $6_1 = HEAPU8[($5_1 + 9 | 0) >> 0] | 0;
  $7_1 = HEAPU8[($1_1 + 9 | 0) >> 0] | 0;
  $8_1 = 1;
  label$1 : {
   if ((HEAP32[$5_1 >> 2] | 0 | 0) == (372711428 | 0)) {
    break label$1
   }
   $8_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0 ? 0 : -1;
  }
  $9_1 = $2_1 ^ -1 | 0;
  $10_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $11_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $12_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $13_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  $15_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $16_1 = $15_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $16_1;
  $17_1 = $3_1 & 48 | 0;
  $18_1 = $3_1 & 2 | 0;
  $19_1 = $3_1 & 1 | 0;
  $20_1 = $3_1 & 256 | 0;
  $21_1 = ($3_1 >>> 4 | 0) & 15 | 0;
  $3_1 = !$2_1;
  $22_1 = ($4_1 | 0) != (372711428 | 0) & $3_1 | 0;
  $23_1 = ($4_1 | 0) == (372711428 | 0) | $3_1 | 0;
  $24_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $25_1 = ($24_1 | 0) / (2 | 0) | 0;
  $26_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($15_1 | 0) | 0;
  $27_1 = ($26_1 | 0) / (2 | 0) | 0;
  $28_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $29_1 = $7_1 + -1 | 0;
  $30_1 = $6_1 + -1 | 0;
  label$2 : while (1) {
   label$3 : {
    label$4 : {
     $31_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if ($31_1) {
      break label$4
     }
     $3_1 = $16_1;
     break label$3;
    }
    $32_1 = $27_1 >>> 16 | 0;
    $33_1 = $25_1;
    label$5 : while (1) {
     $34_1 = ((HEAP32[$0_1 >> 2] | 0) + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $32_1) | 0) + Math_imul($33_1 >>> 16 | 0, $7_1) | 0;
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            if ($23_1) {
             break label$12
            }
            $16_1 = 0;
            $2_1 = 0;
            $4_1 = 0;
            $15_1 = 0;
            $3_1 = 0;
            label$13 : {
             switch ($29_1 | 0) {
             case 0:
              $3_1 = HEAPU8[$34_1 >> 0] | 0;
              $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($1_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 24 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
              $2_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
              $4_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
              $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
              break label$11;
             case 1:
              $3_1 = HEAPU16[$34_1 >> 1] | 0;
              $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($1_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 24 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
              $2_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
              $4_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
              $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
              break label$11;
             case 2:
              break label$10;
             case 3:
              break label$13;
             default:
              break label$11;
             };
            }
            $3_1 = HEAP32[$34_1 >> 2] | 0;
            $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($1_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 24 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $2_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $4_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$11;
           }
           label$16 : {
            if (!$22_1) {
             break label$16
            }
            $2_1 = 0;
            $4_1 = 0;
            $15_1 = 0;
            $3_1 = 0;
            label$17 : {
             label$18 : {
              label$19 : {
               switch ($29_1 | 0) {
               case 0:
                $3_1 = HEAPU8[$34_1 >> 0] | 0;
                $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
                $4_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
                $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
                break label$18;
               case 1:
                $3_1 = HEAPU16[$34_1 >> 1] | 0;
                $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
                $4_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
                $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
                break label$18;
               case 2:
                $16_1 = $34_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
                $4_1 = $34_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
                $15_1 = $34_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
                $3_1 = 0;
                break label$18;
               case 3:
                break label$19;
               default:
                break label$17;
               };
              }
              $3_1 = HEAP32[$34_1 >> 2] | 0;
              $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
              $4_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
              $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $3_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             }
             $2_1 = HEAPU8[$16_1 >> 0] | 0;
             $4_1 = HEAPU8[$4_1 >> 0] | 0;
             $15_1 = HEAPU8[$15_1 >> 0] | 0;
            }
            $16_1 = 255;
            $2_1 = $2_1 & 255 | 0;
            $4_1 = $4_1 & 255 | 0;
            $15_1 = $15_1 & 255 | 0;
            break label$11;
           }
           $3_1 = HEAP32[$34_1 >> 2] | 0;
           $2_1 = ($3_1 >>> 2 | 0) & 255 | 0;
           $4_1 = ($3_1 >>> 12 | 0) & 255 | 0;
           $15_1 = ($3_1 >>> 22 | 0) & 255 | 0;
           $16_1 = HEAPU8[((HEAP32[(117504 + 24 | 0) >> 2] | 0) + ($3_1 >>> 30 | 0) | 0) >> 0] | 0;
          }
          $16_1 = $16_1 & 255 | 0;
          if (!$20_1) {
           break label$7
          }
          if (($7_1 | 0) != (3 | 0)) {
           break label$8
          }
          $3_1 = HEAPU8[($1_1 + 34 | 0) >> 0] | 0;
          $35_1 = HEAPU8[($1_1 + 33 | 0) >> 0] | 0;
          $36_1 = HEAPU8[($1_1 + 32 | 0) >> 0] | 0;
          break label$9;
         }
         $3_1 = HEAPU8[($1_1 + 34 | 0) >> 0] | 0;
         $2_1 = HEAPU8[($34_1 + ($3_1 >>> 3 | 0) | 0) >> 0] | 0;
         $35_1 = HEAPU8[($1_1 + 33 | 0) >> 0] | 0;
         $4_1 = HEAPU8[($34_1 + ($35_1 >>> 3 | 0) | 0) >> 0] | 0;
         $36_1 = HEAPU8[($1_1 + 32 | 0) >> 0] | 0;
         $15_1 = HEAPU8[($34_1 + ($36_1 >>> 3 | 0) | 0) >> 0] | 0;
         $16_1 = 255;
         if (!$20_1) {
          break label$7
         }
        }
        $3_1 = $4_1 << ($35_1 & 255 | 0) | 0 | ($15_1 << ($36_1 & 255 | 0) | 0) | 0 | ($2_1 << ($3_1 & 255 | 0) | 0) | 0;
       }
       if (!(($3_1 ^ $10_1 | 0) & $9_1 | 0)) {
        break label$6
       }
      }
      label$23 : {
       label$24 : {
        if ($8_1) {
         break label$24
        }
        $36_1 = 0;
        $3_1 = 0;
        $34_1 = 0;
        $35_1 = 0;
        label$25 : {
         switch ($30_1 | 0) {
         case 0:
          $35_1 = HEAPU8[$28_1 >> 0] | 0;
          $36_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($5_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 24 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $3_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($5_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 20 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $34_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($5_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 16 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $35_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($5_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 12 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          break label$23;
         case 1:
          $35_1 = HEAPU16[$28_1 >> 1] | 0;
          $36_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($5_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 24 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $3_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($5_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 20 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $34_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($5_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 16 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $35_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($5_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 12 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          break label$23;
         case 2:
          $3_1 = HEAPU8[($28_1 + ((HEAPU8[($5_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $34_1 = HEAPU8[($28_1 + ((HEAPU8[($5_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $35_1 = HEAPU8[($28_1 + ((HEAPU8[($5_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $36_1 = 255;
          break label$23;
         case 3:
          break label$25;
         default:
          break label$23;
         };
        }
        $35_1 = HEAP32[$28_1 >> 2] | 0;
        $36_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($5_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 24 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $3_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($5_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 20 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $34_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($5_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 16 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $35_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($5_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 12 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        break label$23;
       }
       label$29 : {
        if (($8_1 | 0) > (-1 | 0)) {
         break label$29
        }
        $3_1 = 0;
        $34_1 = 0;
        $35_1 = 0;
        label$30 : {
         label$31 : {
          label$32 : {
           switch ($30_1 | 0) {
           case 0:
            $35_1 = HEAPU8[$28_1 >> 0] | 0;
            $3_1 = (HEAP32[(117504 + ((HEAPU8[($5_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 20 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $34_1 = (HEAP32[(117504 + ((HEAPU8[($5_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 16 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $35_1 = (HEAP32[(117504 + ((HEAPU8[($5_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 12 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$31;
           case 1:
            $35_1 = HEAPU16[$28_1 >> 1] | 0;
            $3_1 = (HEAP32[(117504 + ((HEAPU8[($5_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 20 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $34_1 = (HEAP32[(117504 + ((HEAPU8[($5_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 16 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $35_1 = (HEAP32[(117504 + ((HEAPU8[($5_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 12 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$31;
           case 2:
            $3_1 = $28_1 + ((HEAPU8[($5_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $34_1 = $28_1 + ((HEAPU8[($5_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $35_1 = $28_1 + ((HEAPU8[($5_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$31;
           case 3:
            break label$32;
           default:
            break label$30;
           };
          }
          $35_1 = HEAP32[$28_1 >> 2] | 0;
          $3_1 = (HEAP32[(117504 + ((HEAPU8[($5_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 20 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $34_1 = (HEAP32[(117504 + ((HEAPU8[($5_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 16 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $35_1 = (HEAP32[(117504 + ((HEAPU8[($5_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($5_1 + 12 | 0) >> 2] | 0) & $35_1 | 0) >>> (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $3_1 = HEAPU8[$3_1 >> 0] | 0;
         $34_1 = HEAPU8[$34_1 >> 0] | 0;
         $35_1 = HEAPU8[$35_1 >> 0] | 0;
        }
        $36_1 = 255;
        $3_1 = $3_1 & 255 | 0;
        $34_1 = $34_1 & 255 | 0;
        $35_1 = $35_1 & 255 | 0;
        break label$23;
       }
       $36_1 = HEAP32[$28_1 >> 2] | 0;
       $3_1 = ($36_1 >>> 2 | 0) & 255 | 0;
       $34_1 = ($36_1 >>> 12 | 0) & 255 | 0;
       $35_1 = ($36_1 >>> 22 | 0) & 255 | 0;
       $36_1 = HEAPU8[((HEAP32[(117504 + 24 | 0) >> 2] | 0) + ($36_1 >>> 30 | 0) | 0) >> 0] | 0;
      }
      label$36 : {
       if (!$19_1) {
        break label$36
       }
       $2_1 = (Math_imul($2_1, $12_1) >>> 0) / (255 >>> 0) | 0;
       $4_1 = (Math_imul($4_1, $13_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      }
      label$37 : {
       if (!$18_1) {
        break label$37
       }
       $16_1 = (Math_imul($16_1, $11_1) >>> 0) / (255 >>> 0) | 0;
      }
      label$38 : {
       if (!$17_1) {
        break label$38
       }
       if ($16_1 >>> 0 > 254 >>> 0) {
        break label$38
       }
       $2_1 = (Math_imul($16_1, $2_1) >>> 0) / (255 >>> 0) | 0;
       $4_1 = (Math_imul($16_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      }
      $36_1 = $36_1 & 255 | 0;
      label$39 : {
       label$40 : {
        switch ($21_1 | 0) {
        case 0:
         $36_1 = $16_1;
         $3_1 = $2_1;
         $34_1 = $4_1;
         $35_1 = $15_1;
         break label$39;
        case 1:
         $37_1 = 255 - $16_1 | 0;
         $36_1 = $16_1 + ((Math_imul($37_1, $36_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $3_1 = $2_1 + ((Math_imul($37_1, $3_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $34_1 = $4_1 + ((Math_imul($37_1, $34_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $35_1 = $15_1 + ((Math_imul($37_1, $35_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$39;
        case 2:
         $3_1 = $2_1 + $3_1 | 0;
         $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
         $16_1 = $4_1 + $34_1 | 0;
         $34_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
         $16_1 = $15_1 + $35_1 | 0;
         $35_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
         break label$39;
        case 4:
         $3_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
         $34_1 = (Math_imul($4_1, $34_1) >>> 0) / (255 >>> 0) | 0;
         $35_1 = (Math_imul($15_1, $35_1) >>> 0) / (255 >>> 0) | 0;
         break label$39;
        case 8:
         break label$40;
        default:
         break label$39;
        };
       }
       $16_1 = 255 - $16_1 | 0;
       $3_1 = (Math_imul($2_1 + $16_1 | 0, $3_1) >>> 0) / (255 >>> 0) | 0;
       $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
       $2_1 = (Math_imul($4_1 + $16_1 | 0, $34_1) >>> 0) / (255 >>> 0) | 0;
       $34_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $16_1 = (Math_imul($15_1 + $16_1 | 0, $35_1) >>> 0) / (255 >>> 0) | 0;
       $35_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
      }
      label$45 : {
       if ($8_1) {
        break label$45
       }
       label$46 : {
        switch ($30_1 | 0) {
        case 0:
         HEAP8[$28_1 >> 0] = ($34_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($35_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($3_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($36_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$6;
        case 1:
         HEAP16[$28_1 >> 1] = ($34_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($35_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($3_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($36_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$6;
        case 2:
         HEAP8[($28_1 + ((HEAPU8[($5_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $35_1;
         HEAP8[($28_1 + ((HEAPU8[($5_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $34_1;
         HEAP8[($28_1 + ((HEAPU8[($5_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $3_1;
         break label$6;
        case 3:
         break label$46;
        default:
         break label$6;
        };
       }
       HEAP32[$28_1 >> 2] = ($34_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($35_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($3_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($36_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
       break label$6;
      }
      label$50 : {
       if (($8_1 | 0) > (-1 | 0)) {
        break label$50
       }
       label$51 : {
        switch ($30_1 | 0) {
        case 0:
         HEAP8[$28_1 >> 0] = ($34_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($35_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (HEAP32[($5_1 + 24 | 0) >> 2] | 0) | 0 | (($3_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0;
         break label$6;
        case 1:
         HEAP16[$28_1 >> 1] = ($34_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($35_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (HEAP32[($5_1 + 24 | 0) >> 2] | 0) | 0 | (($3_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0;
         break label$6;
        case 2:
         HEAP8[($28_1 + ((HEAPU8[($5_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $35_1;
         HEAP8[($28_1 + ((HEAPU8[($5_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $34_1;
         HEAP8[($28_1 + ((HEAPU8[($5_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $3_1;
         break label$6;
        case 3:
         break label$51;
        default:
         break label$6;
        };
       }
       HEAP32[$28_1 >> 2] = ($34_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($35_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (HEAP32[($5_1 + 24 | 0) >> 2] | 0) | 0 | (($3_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0;
       break label$6;
      }
      HEAP32[$28_1 >> 2] = ($3_1 ? $3_1 << 2 | 0 | 3 | 0 : 0) | ((($36_1 >>> 0) / (85 >>> 0) | 0) << 30 | 0) | 0 | ($34_1 ? $34_1 << 12 | 0 | 3072 | 0 : 0) | 0 | ($35_1 ? $35_1 << 22 | 0 | 3145728 | 0 : 0) | 0;
     }
     $33_1 = $33_1 + $24_1 | 0;
     $28_1 = $28_1 + $6_1 | 0;
     $31_1 = $31_1 + -1 | 0;
     if ($31_1) {
      continue label$5
     }
     break label$5;
    };
    $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    $28_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   }
   $16_1 = $3_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $16_1;
   $28_1 = $28_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = $28_1;
   $27_1 = $27_1 + $26_1 | 0;
   if ($3_1) {
    continue label$2
   }
   break label$2;
  };
 }
 
 function $594($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : {
    switch ((HEAPU8[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) + -1 | 0 | 0) {
    case 3:
     $0_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     if ((HEAPU8[((HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0 | 0) != (4 | 0)) {
      break label$1
     }
     $0_1 = (HEAP32[($0_1 + 68 | 0) >> 2] | 0) & -28673 | 0;
     return ($0_1 ? (($0_1 | 0) == (256 | 0) ? 91 : 0) : 92) | 0;
    case 0:
     break label$2;
    default:
     break label$1;
    };
   }
   $1_1 = 0;
   $2_1 = 0;
   label$4 : {
    $0_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    $3_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0;
    if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0) >>> 0 < 8 >>> 0) {
     break label$4
    }
    $2_1 = HEAPU8[($3_1 + 9 | 0) >> 0] | 0;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        $0_1 = (HEAP32[($0_1 + 68 | 0) >> 2] | 0) & -28673 | 0;
        switch ($0_1 | 0) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
         break label$1;
        case 18:
         break label$6;
        case 0:
         break label$8;
        default:
         break label$9;
        };
       }
       switch ($0_1 + -256 | 0 | 0) {
       case 18:
        break label$5;
       case 0:
        break label$7;
       default:
        break label$1;
       };
      }
      return HEAP32[(($2_1 << 2 | 0) + 89968 | 0) >> 2] | 0 | 0;
     }
     return HEAP32[(($2_1 << 2 | 0) + 9e4 | 0) >> 2] | 0 | 0;
    }
    return ($2_1 >>> 0 > 1 >>> 0 ? 93 : 0) | 0;
   }
   $1_1 = $2_1 >>> 0 > 1 >>> 0 ? 94 : 0;
  }
  return $1_1 | 0;
 }
 
 function $595($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $8_1 = 0, $9_1 = 0, $1_1 = 0, $3_1 = 0, $11_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $2_1 = ($1_1 + 1 | 0 | 0) / (-2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $4_1 = ($2_1 + $1_1 | 0) + (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
   $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   $9_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $10_1 = ($1_1 | 0) < (1 | 0);
   label$2 : while (1) {
    $0_1 = 0;
    $2_1 = 0;
    label$3 : {
     if ($10_1) {
      break label$3
     }
     label$4 : while (1) {
      label$5 : {
       if ($2_1 & 1 | 0) {
        break label$5
       }
       $0_1 = HEAPU8[$8_1 >> 0] | 0;
       $8_1 = $8_1 + 1 | 0;
      }
      label$6 : {
       $11_1 = ($0_1 >>> 4 | 0) & 15 | 0;
       if (($6_1 | 0) == ($11_1 | 0)) {
        break label$6
       }
       HEAP32[$9_1 >> 2] = HEAP32[($5_1 + ($11_1 << 2 | 0) | 0) >> 2] | 0;
      }
      $9_1 = $9_1 + 4 | 0;
      $0_1 = $0_1 << 4 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    $9_1 = $9_1 + $7_1 | 0;
    $8_1 = $8_1 + $4_1 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $596($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $10_1 = 0, $3_1 = 0, $5_1 = 0, $9_1 = 0, $11_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $2_1 = ($1_1 + 1 | 0 | 0) / (-2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $4_1 = ($2_1 + $1_1 | 0) + (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
   $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $7_1 = $1_1 & 2147483646 | 0;
   $8_1 = $1_1 & 1 | 0;
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   label$2 : while (1) {
    label$3 : {
     if (($1_1 | 0) < (1 | 0)) {
      break label$3
     }
     $9_1 = 0;
     $10_1 = 0;
     label$4 : {
      if (($1_1 | 0) == (1 | 0)) {
       break label$4
      }
      label$5 : while (1) {
       $11_1 = HEAPU8[$2_1 >> 0] | 0;
       HEAP32[$0_1 >> 2] = HEAP32[($5_1 + (($11_1 >>> 2 | 0) & 60 | 0) | 0) >> 2] | 0;
       HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($5_1 + (($11_1 & 15 | 0) << 2 | 0) | 0) >> 2] | 0;
       $9_1 = $9_1 + 2 | 0;
       $0_1 = $0_1 + 8 | 0;
       $2_1 = $2_1 + 1 | 0;
       $10_1 = $10_1 + 2 | 0;
       if (($10_1 | 0) != ($7_1 | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     if (!$8_1) {
      break label$3
     }
     $10_1 = 0;
     label$6 : {
      if ($9_1 & 1 | 0) {
       break label$6
      }
      $10_1 = HEAPU8[$2_1 >> 0] | 0;
      $2_1 = $2_1 + 1 | 0;
     }
     HEAP32[$0_1 >> 2] = HEAP32[($5_1 + (($10_1 & 240 | 0) >>> 2 | 0) | 0) >> 2] | 0;
     $0_1 = $0_1 + 4 | 0;
    }
    $0_1 = $0_1 + $6_1 | 0;
    $2_1 = $2_1 + $4_1 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $597($0_1) {
  $0_1 = $0_1 | 0;
  var $8_1 = 0, $5_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $3_1 = 0, $6_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $7_1 = 0, $1_1 = 0, $12_1 = 0, $9_1 = 0, $11_1 = 0, $2_1 = 0, $4_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $2_1 = ((($1_1 + 7 | 0 | 0) / (-8 | 0) | 0) + $1_1 | 0) + (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
  $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = HEAP32[$0_1 >> 2] | 0;
  $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  $9_1 = HEAPU8[($8_1 + 9 | 0) >> 0] | 0;
  $0_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $10_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (286261504 | 0)) {
     break label$2
    }
    if (!$7_1) {
     break label$1
    }
    $11_1 = ($1_1 | 0) < (1 | 0);
    $12_1 = $9_1 + -1 | 0;
    label$3 : while (1) {
     $13_1 = 0;
     $14_1 = 0;
     label$4 : {
      if ($11_1) {
       break label$4
      }
      label$5 : while (1) {
       label$6 : {
        if ($14_1 & 7 | 0) {
         break label$6
        }
        $13_1 = HEAPU8[$6_1 >> 0] | 0;
        $6_1 = $6_1 + 1 | 0;
       }
       $0_1 = $10_1 + (($13_1 & 128 | 0) >>> 5 | 0) | 0;
       $15_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
       $16_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
       $17_1 = HEAPU8[$0_1 >> 0] | 0;
       $0_1 = 0;
       $18_1 = 0;
       $19_1 = 0;
       $20_1 = 0;
       label$7 : {
        label$8 : {
         switch ($12_1 | 0) {
         case 0:
          $0_1 = HEAPU8[$5_1 >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 24 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $0_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          break label$7;
         case 1:
          $0_1 = HEAPU16[$5_1 >> 1] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 24 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $0_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          break label$7;
         case 2:
          $19_1 = HEAPU8[($5_1 + ((HEAPU8[($8_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $18_1 = HEAPU8[($5_1 + ((HEAPU8[($8_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $0_1 = HEAPU8[($5_1 + ((HEAPU8[($8_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $20_1 = 255;
          break label$7;
         case 3:
          break label$8;
         default:
          break label$7;
         };
        }
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 24 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $0_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       }
       $20_1 = (($20_1 + $3_1 | 0) - ((Math_imul($20_1 & 255 | 0, $3_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
       $15_1 = $19_1 + ((Math_imul($15_1 - ($19_1 & 255 | 0) | 0, $3_1) | 0) / (255 | 0) | 0) | 0;
       $19_1 = $15_1 & 255 | 0;
       $16_1 = $18_1 + ((Math_imul($16_1 - ($18_1 & 255 | 0) | 0, $3_1) | 0) / (255 | 0) | 0) | 0;
       $18_1 = $16_1 & 255 | 0;
       $17_1 = $0_1 + ((Math_imul($17_1 - ($0_1 & 255 | 0) | 0, $3_1) | 0) / (255 | 0) | 0) | 0;
       $0_1 = $17_1 & 255 | 0;
       label$12 : {
        label$13 : {
         switch ($12_1 | 0) {
         case 0:
          HEAP8[$5_1 >> 0] = ($18_1 >>> (HEAPU8[($8_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($8_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($8_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($8_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$12;
         case 1:
          HEAP16[$5_1 >> 1] = ($18_1 >>> (HEAPU8[($8_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($8_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($8_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($8_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$12;
         case 2:
          HEAP8[($5_1 + ((HEAPU8[($8_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
          HEAP8[($5_1 + ((HEAPU8[($8_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
          HEAP8[($5_1 + ((HEAPU8[($8_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $15_1;
          break label$12;
         case 3:
          break label$13;
         default:
          break label$12;
         };
        }
        HEAP32[$5_1 >> 2] = ($18_1 >>> (HEAPU8[($8_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($8_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($8_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($8_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0) | 0;
       }
       $5_1 = $5_1 + $9_1 | 0;
       $13_1 = $13_1 << 1 | 0;
       $14_1 = $14_1 + 1 | 0;
       if (($14_1 | 0) != ($1_1 | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     $5_1 = $5_1 + $4_1 | 0;
     $6_1 = $6_1 + $2_1 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$7_1) {
    break label$1
   }
   $11_1 = ($1_1 | 0) < (1 | 0);
   $12_1 = $9_1 + -1 | 0;
   label$17 : while (1) {
    $14_1 = 0;
    $13_1 = 0;
    label$18 : {
     if ($11_1) {
      break label$18
     }
     label$19 : while (1) {
      label$20 : {
       if ($14_1 & 7 | 0) {
        break label$20
       }
       $13_1 = HEAPU8[$6_1 >> 0] | 0;
       $6_1 = $6_1 + 1 | 0;
      }
      $0_1 = $10_1 + (($13_1 & 1 | 0) << 2 | 0) | 0;
      $15_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
      $16_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
      $17_1 = HEAPU8[$0_1 >> 0] | 0;
      $0_1 = 0;
      $18_1 = 0;
      $19_1 = 0;
      $20_1 = 0;
      label$21 : {
       label$22 : {
        switch ($12_1 | 0) {
        case 0:
         $0_1 = HEAPU8[$5_1 >> 0] | 0;
         $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 24 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $0_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         break label$21;
        case 1:
         $0_1 = HEAPU16[$5_1 >> 1] | 0;
         $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 24 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $0_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         break label$21;
        case 2:
         $19_1 = HEAPU8[($5_1 + ((HEAPU8[($8_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[($5_1 + ((HEAPU8[($8_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $0_1 = HEAPU8[($5_1 + ((HEAPU8[($8_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $20_1 = 255;
         break label$21;
        case 3:
         break label$22;
        default:
         break label$21;
        };
       }
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 24 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $0_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($8_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($8_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($8_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
      }
      $20_1 = (($20_1 + $3_1 | 0) - ((Math_imul($20_1 & 255 | 0, $3_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
      $15_1 = $19_1 + ((Math_imul($15_1 - ($19_1 & 255 | 0) | 0, $3_1) | 0) / (255 | 0) | 0) | 0;
      $19_1 = $15_1 & 255 | 0;
      $16_1 = $18_1 + ((Math_imul($16_1 - ($18_1 & 255 | 0) | 0, $3_1) | 0) / (255 | 0) | 0) | 0;
      $18_1 = $16_1 & 255 | 0;
      $17_1 = $0_1 + ((Math_imul($17_1 - ($0_1 & 255 | 0) | 0, $3_1) | 0) / (255 | 0) | 0) | 0;
      $0_1 = $17_1 & 255 | 0;
      label$26 : {
       label$27 : {
        switch ($12_1 | 0) {
        case 0:
         HEAP8[$5_1 >> 0] = ($18_1 >>> (HEAPU8[($8_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($8_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($8_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($8_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$26;
        case 1:
         HEAP16[$5_1 >> 1] = ($18_1 >>> (HEAPU8[($8_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($8_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($8_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($8_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$26;
        case 2:
         HEAP8[($5_1 + ((HEAPU8[($8_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
         HEAP8[($5_1 + ((HEAPU8[($8_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
         HEAP8[($5_1 + ((HEAPU8[($8_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $15_1;
         break label$26;
        case 3:
         break label$27;
        default:
         break label$26;
        };
       }
       HEAP32[$5_1 >> 2] = ($18_1 >>> (HEAPU8[($8_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($8_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($8_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($8_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0) | 0;
      }
      $5_1 = $5_1 + $9_1 | 0;
      $13_1 = ($13_1 & 254 | 0) >>> 1 | 0;
      $14_1 = $14_1 + 1 | 0;
      if (($14_1 | 0) != ($1_1 | 0)) {
       continue label$19
      }
      break label$19;
     };
    }
    $5_1 = $5_1 + $4_1 | 0;
    $6_1 = $6_1 + $2_1 | 0;
    $7_1 = $7_1 + -1 | 0;
    if ($7_1) {
     continue label$17
    }
    break label$17;
   };
  }
 }
 
 function $598($0_1) {
  $0_1 = $0_1 | 0;
  var $9_1 = 0, $21_1 = 0, $15_1 = 0, $6_1 = 0, $19_1 = 0, $20_1 = 0, $4_1 = 0, $7_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $8_1 = 0, $1_1 = 0, $13_1 = 0, $10_1 = 0, $12_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $11_1 = 0;
  $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $2_1 = ((($1_1 + 7 | 0 | 0) / (-8 | 0) | 0) + $1_1 | 0) + (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
  $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $4_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $5_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $7_1 = HEAP32[$0_1 >> 2] | 0;
  $8_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $9_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  $10_1 = HEAPU8[($9_1 + 9 | 0) >> 0] | 0;
  $0_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $11_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (286261504 | 0)) {
     break label$2
    }
    if (!$8_1) {
     break label$1
    }
    $12_1 = ($1_1 | 0) < (1 | 0);
    $13_1 = $10_1 + -1 | 0;
    label$3 : while (1) {
     $0_1 = 0;
     $14_1 = 0;
     label$4 : {
      if ($12_1) {
       break label$4
      }
      label$5 : while (1) {
       label$6 : {
        if ($14_1 & 7 | 0) {
         break label$6
        }
        $0_1 = HEAPU8[$7_1 >> 0] | 0;
        $7_1 = $7_1 + 1 | 0;
       }
       label$7 : {
        $15_1 = ($0_1 >>> 7 | 0) & 1 | 0;
        if (($3_1 | 0) == ($15_1 | 0)) {
         break label$7
        }
        $15_1 = $11_1 + ($15_1 << 2 | 0) | 0;
        $16_1 = HEAPU8[($15_1 + 2 | 0) >> 0] | 0;
        $17_1 = HEAPU8[($15_1 + 1 | 0) >> 0] | 0;
        $18_1 = HEAPU8[$15_1 >> 0] | 0;
        $15_1 = 0;
        $19_1 = 0;
        $20_1 = 0;
        $21_1 = 0;
        label$8 : {
         label$9 : {
          switch ($13_1 | 0) {
          case 0:
           $21_1 = HEAPU8[$6_1 >> 0] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$8;
          case 1:
           $21_1 = HEAPU16[$6_1 >> 1] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$8;
          case 2:
           $19_1 = HEAPU8[($6_1 + ((HEAPU8[($9_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $15_1 = HEAPU8[($6_1 + ((HEAPU8[($9_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $21_1 = HEAPU8[($6_1 + ((HEAPU8[($9_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $20_1 = 255;
           break label$8;
          case 3:
           break label$9;
          default:
           break label$8;
          };
         }
         $21_1 = HEAP32[$6_1 >> 2] | 0;
         $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $20_1 = (($20_1 + $4_1 | 0) - ((Math_imul($20_1 & 255 | 0, $4_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
        $16_1 = $19_1 + ((Math_imul($16_1 - ($19_1 & 255 | 0) | 0, $4_1) | 0) / (255 | 0) | 0) | 0;
        $19_1 = $16_1 & 255 | 0;
        $17_1 = $15_1 + ((Math_imul($17_1 - ($15_1 & 255 | 0) | 0, $4_1) | 0) / (255 | 0) | 0) | 0;
        $15_1 = $17_1 & 255 | 0;
        $18_1 = $21_1 + ((Math_imul($18_1 - ($21_1 & 255 | 0) | 0, $4_1) | 0) / (255 | 0) | 0) | 0;
        $21_1 = $18_1 & 255 | 0;
        label$13 : {
         switch ($13_1 | 0) {
         case 0:
          HEAP8[$6_1 >> 0] = ($15_1 >>> (HEAPU8[($9_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 33 | 0) >> 0] | 0) | 0 | (($21_1 >>> (HEAPU8[($9_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($9_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($9_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$7;
         case 1:
          HEAP16[$6_1 >> 1] = ($15_1 >>> (HEAPU8[($9_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 33 | 0) >> 0] | 0) | 0 | (($21_1 >>> (HEAPU8[($9_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($9_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($9_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$7;
         case 2:
          HEAP8[($6_1 + ((HEAPU8[($9_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
          HEAP8[($6_1 + ((HEAPU8[($9_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
          HEAP8[($6_1 + ((HEAPU8[($9_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
          break label$7;
         case 3:
          break label$13;
         default:
          break label$7;
         };
        }
        HEAP32[$6_1 >> 2] = ($15_1 >>> (HEAPU8[($9_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 33 | 0) >> 0] | 0) | 0 | (($21_1 >>> (HEAPU8[($9_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($9_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($9_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 35 | 0) >> 0] | 0) | 0) | 0;
       }
       $6_1 = $6_1 + $10_1 | 0;
       $0_1 = $0_1 << 1 | 0;
       $14_1 = $14_1 + 1 | 0;
       if (($14_1 | 0) != ($1_1 | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     $6_1 = $6_1 + $5_1 | 0;
     $7_1 = $7_1 + $2_1 | 0;
     $8_1 = $8_1 + -1 | 0;
     if ($8_1) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$8_1) {
    break label$1
   }
   $12_1 = ($1_1 | 0) < (1 | 0);
   $13_1 = $10_1 + -1 | 0;
   label$17 : while (1) {
    $14_1 = 0;
    $0_1 = 0;
    label$18 : {
     if ($12_1) {
      break label$18
     }
     label$19 : while (1) {
      label$20 : {
       if ($14_1 & 7 | 0) {
        break label$20
       }
       $0_1 = HEAPU8[$7_1 >> 0] | 0;
       $7_1 = $7_1 + 1 | 0;
      }
      label$21 : {
       $15_1 = $0_1 & 1 | 0;
       if (($3_1 | 0) == ($15_1 | 0)) {
        break label$21
       }
       $15_1 = $11_1 + ($15_1 << 2 | 0) | 0;
       $16_1 = HEAPU8[($15_1 + 2 | 0) >> 0] | 0;
       $17_1 = HEAPU8[($15_1 + 1 | 0) >> 0] | 0;
       $18_1 = HEAPU8[$15_1 >> 0] | 0;
       $15_1 = 0;
       $19_1 = 0;
       $20_1 = 0;
       $21_1 = 0;
       label$22 : {
        label$23 : {
         switch ($13_1 | 0) {
         case 0:
          $21_1 = HEAPU8[$6_1 >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          break label$22;
         case 1:
          $21_1 = HEAPU16[$6_1 >> 1] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          break label$22;
         case 2:
          $19_1 = HEAPU8[($6_1 + ((HEAPU8[($9_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $15_1 = HEAPU8[($6_1 + ((HEAPU8[($9_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[($6_1 + ((HEAPU8[($9_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $20_1 = 255;
          break label$22;
         case 3:
          break label$23;
         default:
          break label$22;
         };
        }
        $21_1 = HEAP32[$6_1 >> 2] | 0;
        $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($9_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($9_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($9_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       }
       $20_1 = (($20_1 + $4_1 | 0) - ((Math_imul($20_1 & 255 | 0, $4_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
       $16_1 = $19_1 + ((Math_imul($16_1 - ($19_1 & 255 | 0) | 0, $4_1) | 0) / (255 | 0) | 0) | 0;
       $19_1 = $16_1 & 255 | 0;
       $17_1 = $15_1 + ((Math_imul($17_1 - ($15_1 & 255 | 0) | 0, $4_1) | 0) / (255 | 0) | 0) | 0;
       $15_1 = $17_1 & 255 | 0;
       $18_1 = $21_1 + ((Math_imul($18_1 - ($21_1 & 255 | 0) | 0, $4_1) | 0) / (255 | 0) | 0) | 0;
       $21_1 = $18_1 & 255 | 0;
       label$27 : {
        switch ($13_1 | 0) {
        case 0:
         HEAP8[$6_1 >> 0] = ($15_1 >>> (HEAPU8[($9_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 33 | 0) >> 0] | 0) | 0 | (($21_1 >>> (HEAPU8[($9_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($9_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($9_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$21;
        case 1:
         HEAP16[$6_1 >> 1] = ($15_1 >>> (HEAPU8[($9_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 33 | 0) >> 0] | 0) | 0 | (($21_1 >>> (HEAPU8[($9_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($9_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($9_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$21;
        case 2:
         HEAP8[($6_1 + ((HEAPU8[($9_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
         HEAP8[($6_1 + ((HEAPU8[($9_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
         HEAP8[($6_1 + ((HEAPU8[($9_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
         break label$21;
        case 3:
         break label$27;
        default:
         break label$21;
        };
       }
       HEAP32[$6_1 >> 2] = ($15_1 >>> (HEAPU8[($9_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 33 | 0) >> 0] | 0) | 0 | (($21_1 >>> (HEAPU8[($9_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($9_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($9_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($9_1 + 35 | 0) >> 0] | 0) | 0) | 0;
      }
      $6_1 = $6_1 + $10_1 | 0;
      $0_1 = ($0_1 & 254 | 0) >>> 1 | 0;
      $14_1 = $14_1 + 1 | 0;
      if (($14_1 | 0) != ($1_1 | 0)) {
       continue label$19
      }
      break label$19;
     };
    }
    $6_1 = $6_1 + $5_1 | 0;
    $7_1 = $7_1 + $2_1 | 0;
    $8_1 = $8_1 + -1 | 0;
    if ($8_1) {
     continue label$17
    }
    break label$17;
   };
  }
 }
 
 function $599($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $1_1 = 0, $8_1 = 0, $6_1 = 0, $11_1 = 0, $9_1 = 0, $2_1 = 0, $3_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $2_1 = ((($1_1 + 7 | 0 | 0) / (-8 | 0) | 0) + $1_1 | 0) + (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
  $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $7_1 = HEAP32[(HEAP32[($0_1 + 40 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $8_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$2
    }
    label$3 : {
     if (($7_1 | 0) == (286261504 | 0)) {
      break label$3
     }
     if (!$6_1) {
      break label$1
     }
     $9_1 = $1_1 & 2147483646 | 0;
     $10_1 = $1_1 & 1 | 0;
     label$4 : while (1) {
      label$5 : {
       if (($1_1 | 0) < (1 | 0)) {
        break label$5
       }
       $7_1 = 0;
       $0_1 = 0;
       $11_1 = 0;
       label$6 : {
        if (($1_1 | 0) == (1 | 0)) {
         break label$6
        }
        label$7 : while (1) {
         label$8 : {
          if ($7_1 & 6 | 0) {
           break label$8
          }
          $0_1 = HEAPU8[$5_1 >> 0] | 0;
          $5_1 = $5_1 + 1 | 0;
         }
         HEAP8[$4_1 >> 0] = HEAPU8[($8_1 + (($0_1 & 128 | 0) >>> 7 | 0) | 0) >> 0] | 0;
         HEAP8[($4_1 + 1 | 0) >> 0] = HEAPU8[($8_1 + (($0_1 >>> 6 | 0) & 1 | 0) | 0) >> 0] | 0;
         $7_1 = $7_1 + 2 | 0;
         $0_1 = $0_1 << 2 | 0;
         $4_1 = $4_1 + 2 | 0;
         $11_1 = $11_1 + 2 | 0;
         if (($11_1 | 0) != ($9_1 | 0)) {
          continue label$7
         }
         break label$7;
        };
       }
       if (!$10_1) {
        break label$5
       }
       label$9 : {
        if ($7_1 & 7 | 0) {
         break label$9
        }
        $0_1 = HEAPU8[$5_1 >> 0] | 0;
        $5_1 = $5_1 + 1 | 0;
       }
       HEAP8[$4_1 >> 0] = HEAPU8[($8_1 + (($0_1 & 128 | 0) >>> 7 | 0) | 0) >> 0] | 0;
       $4_1 = $4_1 + 1 | 0;
      }
      $4_1 = $4_1 + $3_1 | 0;
      $5_1 = $5_1 + $2_1 | 0;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue label$4
      }
      break label$1;
     };
    }
    if (!$6_1) {
     break label$1
    }
    $9_1 = $1_1 & 2147483646 | 0;
    $10_1 = $1_1 & 1 | 0;
    label$10 : while (1) {
     label$11 : {
      if (($1_1 | 0) < (1 | 0)) {
       break label$11
      }
      $7_1 = 0;
      $0_1 = 0;
      $11_1 = 0;
      label$12 : {
       if (($1_1 | 0) == (1 | 0)) {
        break label$12
       }
       label$13 : while (1) {
        label$14 : {
         if ($7_1 & 6 | 0) {
          break label$14
         }
         $0_1 = HEAPU8[$5_1 >> 0] | 0;
         $5_1 = $5_1 + 1 | 0;
        }
        HEAP8[$4_1 >> 0] = HEAPU8[($8_1 + ($0_1 & 1 | 0) | 0) >> 0] | 0;
        HEAP8[($4_1 + 1 | 0) >> 0] = HEAPU8[($8_1 + (($0_1 >>> 1 | 0) & 1 | 0) | 0) >> 0] | 0;
        $7_1 = $7_1 + 2 | 0;
        $4_1 = $4_1 + 2 | 0;
        $0_1 = ($0_1 & 252 | 0) >>> 2 | 0;
        $11_1 = $11_1 + 2 | 0;
        if (($11_1 | 0) != ($9_1 | 0)) {
         continue label$13
        }
        break label$13;
       };
      }
      if (!$10_1) {
       break label$11
      }
      label$15 : {
       if ($7_1 & 7 | 0) {
        break label$15
       }
       $0_1 = HEAPU8[$5_1 >> 0] | 0;
       $5_1 = $5_1 + 1 | 0;
      }
      HEAP8[$4_1 >> 0] = HEAPU8[($8_1 + ($0_1 & 1 | 0) | 0) >> 0] | 0;
      $4_1 = $4_1 + 1 | 0;
     }
     $4_1 = $4_1 + $3_1 | 0;
     $5_1 = $5_1 + $2_1 | 0;
     $6_1 = $6_1 + -1 | 0;
     if ($6_1) {
      continue label$10
     }
     break label$1;
    };
   }
   label$16 : {
    if (($7_1 | 0) == (286261504 | 0)) {
     break label$16
    }
    if (!$6_1) {
     break label$1
    }
    $11_1 = $1_1 & 2147483646 | 0;
    $9_1 = $1_1 & 1 | 0;
    label$17 : while (1) {
     label$18 : {
      if (($1_1 | 0) < (1 | 0)) {
       break label$18
      }
      $8_1 = 0;
      $0_1 = 0;
      $7_1 = 0;
      label$19 : {
       if (($1_1 | 0) == (1 | 0)) {
        break label$19
       }
       label$20 : while (1) {
        label$21 : {
         if ($8_1 & 6 | 0) {
          break label$21
         }
         $0_1 = HEAPU8[$5_1 >> 0] | 0;
         $5_1 = $5_1 + 1 | 0;
        }
        HEAP8[($4_1 + 1 | 0) >> 0] = ($0_1 >>> 6 | 0) & 1 | 0;
        HEAP8[$4_1 >> 0] = ($0_1 & 128 | 0) >>> 7 | 0;
        $8_1 = $8_1 + 2 | 0;
        $0_1 = $0_1 << 2 | 0;
        $4_1 = $4_1 + 2 | 0;
        $7_1 = $7_1 + 2 | 0;
        if (($7_1 | 0) != ($11_1 | 0)) {
         continue label$20
        }
        break label$20;
       };
      }
      if (!$9_1) {
       break label$18
      }
      label$22 : {
       if ($8_1 & 7 | 0) {
        break label$22
       }
       $0_1 = HEAPU8[$5_1 >> 0] | 0;
       $5_1 = $5_1 + 1 | 0;
      }
      HEAP8[$4_1 >> 0] = ($0_1 & 128 | 0) >>> 7 | 0;
      $4_1 = $4_1 + 1 | 0;
     }
     $4_1 = $4_1 + $3_1 | 0;
     $5_1 = $5_1 + $2_1 | 0;
     $6_1 = $6_1 + -1 | 0;
     if ($6_1) {
      continue label$17
     }
     break label$1;
    };
   }
   if (!$6_1) {
    break label$1
   }
   $11_1 = $1_1 & 2147483646 | 0;
   $9_1 = $1_1 & 1 | 0;
   label$23 : while (1) {
    label$24 : {
     if (($1_1 | 0) < (1 | 0)) {
      break label$24
     }
     $8_1 = 0;
     $0_1 = 0;
     $7_1 = 0;
     label$25 : {
      if (($1_1 | 0) == (1 | 0)) {
       break label$25
      }
      label$26 : while (1) {
       label$27 : {
        if ($8_1 & 6 | 0) {
         break label$27
        }
        $0_1 = HEAPU8[$5_1 >> 0] | 0;
        $5_1 = $5_1 + 1 | 0;
       }
       HEAP8[$4_1 >> 0] = $0_1 & 1 | 0;
       HEAP8[($4_1 + 1 | 0) >> 0] = ($0_1 >>> 1 | 0) & 1 | 0;
       $8_1 = $8_1 + 2 | 0;
       $4_1 = $4_1 + 2 | 0;
       $0_1 = ($0_1 & 252 | 0) >>> 2 | 0;
       $7_1 = $7_1 + 2 | 0;
       if (($7_1 | 0) != ($11_1 | 0)) {
        continue label$26
       }
       break label$26;
      };
     }
     if (!$9_1) {
      break label$24
     }
     label$28 : {
      if ($8_1 & 7 | 0) {
       break label$28
      }
      $0_1 = HEAPU8[$5_1 >> 0] | 0;
      $5_1 = $5_1 + 1 | 0;
     }
     HEAP8[$4_1 >> 0] = $0_1 & 1 | 0;
     $4_1 = $4_1 + 1 | 0;
    }
    $4_1 = $4_1 + $3_1 | 0;
    $5_1 = $5_1 + $2_1 | 0;
    $6_1 = $6_1 + -1 | 0;
    if ($6_1) {
     continue label$23
    }
    break label$23;
   };
  }
 }
 
 function $600($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $6_1 = 0, $2_1 = 0, $10_1 = 0, $7_1 = 0, $11_1 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
  $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $3_1 = ((($2_1 + 7 | 0 | 0) / (-8 | 0) | 0) + $2_1 | 0) + (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = HEAP32[$0_1 >> 2] | 0;
  $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[(HEAP32[($0_1 + 40 | 0) >> 2] | 0) >> 2] | 0 | 0) == (286261504 | 0)) {
     break label$2
    }
    if (!$7_1) {
     break label$1
    }
    $8_1 = $2_1 & 2147483646 | 0;
    $9_1 = $2_1 & 1 | 0;
    label$3 : while (1) {
     label$4 : {
      if (($2_1 | 0) < (1 | 0)) {
       break label$4
      }
      $10_1 = 0;
      $0_1 = 0;
      $11_1 = 0;
      label$5 : {
       if (($2_1 | 0) == (1 | 0)) {
        break label$5
       }
       label$6 : while (1) {
        label$7 : {
         if ($10_1 & 6 | 0) {
          break label$7
         }
         $0_1 = HEAPU8[$6_1 >> 0] | 0;
         $6_1 = $6_1 + 1 | 0;
        }
        HEAP16[$5_1 >> 1] = HEAPU16[($4_1 + (($0_1 & 128 | 0) >>> 6 | 0) | 0) >> 1] | 0;
        HEAP16[($5_1 + 2 | 0) >> 1] = HEAPU16[($4_1 + (($0_1 >>> 5 | 0) & 2 | 0) | 0) >> 1] | 0;
        $10_1 = $10_1 + 2 | 0;
        $5_1 = $5_1 + 4 | 0;
        $0_1 = $0_1 << 2 | 0;
        $11_1 = $11_1 + 2 | 0;
        if (($11_1 | 0) != ($8_1 | 0)) {
         continue label$6
        }
        break label$6;
       };
      }
      if (!$9_1) {
       break label$4
      }
      label$8 : {
       if ($10_1 & 7 | 0) {
        break label$8
       }
       $0_1 = HEAPU8[$6_1 >> 0] | 0;
       $6_1 = $6_1 + 1 | 0;
      }
      HEAP16[$5_1 >> 1] = HEAPU16[($4_1 + (($0_1 & 128 | 0) >>> 6 | 0) | 0) >> 1] | 0;
      $5_1 = $5_1 + 2 | 0;
     }
     $6_1 = $6_1 + $3_1 | 0;
     $5_1 = $5_1 + ($1_1 << 1 | 0) | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$7_1) {
    break label$1
   }
   $8_1 = $2_1 & 2147483646 | 0;
   $9_1 = $2_1 & 1 | 0;
   label$9 : while (1) {
    label$10 : {
     if (($2_1 | 0) < (1 | 0)) {
      break label$10
     }
     $10_1 = 0;
     $0_1 = 0;
     $11_1 = 0;
     label$11 : {
      if (($2_1 | 0) == (1 | 0)) {
       break label$11
      }
      label$12 : while (1) {
       label$13 : {
        if ($10_1 & 6 | 0) {
         break label$13
        }
        $0_1 = HEAPU8[$6_1 >> 0] | 0;
        $6_1 = $6_1 + 1 | 0;
       }
       HEAP16[$5_1 >> 1] = HEAPU16[($4_1 + (($0_1 & 1 | 0) << 1 | 0) | 0) >> 1] | 0;
       HEAP16[($5_1 + 2 | 0) >> 1] = HEAPU16[($4_1 + ($0_1 & 2 | 0) | 0) >> 1] | 0;
       $10_1 = $10_1 + 2 | 0;
       $5_1 = $5_1 + 4 | 0;
       $0_1 = ($0_1 & 252 | 0) >>> 2 | 0;
       $11_1 = $11_1 + 2 | 0;
       if (($11_1 | 0) != ($8_1 | 0)) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$9_1) {
      break label$10
     }
     label$14 : {
      if ($10_1 & 7 | 0) {
       break label$14
      }
      $0_1 = HEAPU8[$6_1 >> 0] | 0;
      $6_1 = $6_1 + 1 | 0;
     }
     HEAP16[$5_1 >> 1] = HEAPU16[($4_1 + (($0_1 & 1 | 0) << 1 | 0) | 0) >> 1] | 0;
     $5_1 = $5_1 + 2 | 0;
    }
    $6_1 = $6_1 + $3_1 | 0;
    $5_1 = $5_1 + ($1_1 << 1 | 0) | 0;
    $7_1 = $7_1 + -1 | 0;
    if ($7_1) {
     continue label$9
    }
    break label$9;
   };
  }
 }
 
 function $601($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $6_1 = 0, $9_1 = 0, $7_1 = 0, $10_1 = 0, $1_1 = 0, $8_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $2_1 = ((($1_1 + 7 | 0 | 0) / (-8 | 0) | 0) + $1_1 | 0) + (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
  $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = HEAP32[$0_1 >> 2] | 0;
  $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[(HEAP32[($0_1 + 40 | 0) >> 2] | 0) >> 2] | 0 | 0) == (286261504 | 0)) {
     break label$2
    }
    if (!$7_1) {
     break label$1
    }
    $8_1 = ($1_1 | 0) < (1 | 0);
    label$3 : while (1) {
     $9_1 = 0;
     $0_1 = 0;
     label$4 : {
      if ($8_1) {
       break label$4
      }
      label$5 : while (1) {
       label$6 : {
        if ($9_1 & 7 | 0) {
         break label$6
        }
        $0_1 = HEAPU8[$6_1 >> 0] | 0;
        $6_1 = $6_1 + 1 | 0;
       }
       $10_1 = $3_1 + (($0_1 >>> 5 | 0) & 4 | 0) | 0;
       HEAP8[$5_1 >> 0] = HEAPU8[$10_1 >> 0] | 0;
       HEAP8[($5_1 + 1 | 0) >> 0] = HEAPU8[($10_1 + 1 | 0) >> 0] | 0;
       HEAP8[($5_1 + 2 | 0) >> 0] = HEAPU8[($10_1 + 2 | 0) >> 0] | 0;
       $5_1 = $5_1 + 3 | 0;
       $0_1 = $0_1 << 1 | 0;
       $9_1 = $9_1 + 1 | 0;
       if (($9_1 | 0) != ($1_1 | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     $5_1 = $5_1 + $4_1 | 0;
     $6_1 = $6_1 + $2_1 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$7_1) {
    break label$1
   }
   $8_1 = ($1_1 | 0) < (1 | 0);
   label$7 : while (1) {
    $9_1 = 0;
    $0_1 = 0;
    label$8 : {
     if ($8_1) {
      break label$8
     }
     label$9 : while (1) {
      label$10 : {
       if ($9_1 & 7 | 0) {
        break label$10
       }
       $0_1 = HEAPU8[$6_1 >> 0] | 0;
       $6_1 = $6_1 + 1 | 0;
      }
      $10_1 = $3_1 + (($0_1 << 2 | 0) & 4 | 0) | 0;
      HEAP8[$5_1 >> 0] = HEAPU8[$10_1 >> 0] | 0;
      HEAP8[($5_1 + 1 | 0) >> 0] = HEAPU8[($10_1 + 1 | 0) >> 0] | 0;
      HEAP8[($5_1 + 2 | 0) >> 0] = HEAPU8[($10_1 + 2 | 0) >> 0] | 0;
      $5_1 = $5_1 + 3 | 0;
      $0_1 = ($0_1 & 254 | 0) >>> 1 | 0;
      $9_1 = $9_1 + 1 | 0;
      if (($9_1 | 0) != ($1_1 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    $5_1 = $5_1 + $4_1 | 0;
    $6_1 = $6_1 + $2_1 | 0;
    $7_1 = $7_1 + -1 | 0;
    if ($7_1) {
     continue label$7
    }
    break label$7;
   };
  }
 }
 
 function $602($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $6_1 = 0, $2_1 = 0, $10_1 = 0, $7_1 = 0, $11_1 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) / (4 | 0) | 0;
  $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $3_1 = ((($2_1 + 7 | 0 | 0) / (-8 | 0) | 0) + $2_1 | 0) + (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = HEAP32[$0_1 >> 2] | 0;
  $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[(HEAP32[($0_1 + 40 | 0) >> 2] | 0) >> 2] | 0 | 0) == (286261504 | 0)) {
     break label$2
    }
    if (!$7_1) {
     break label$1
    }
    $8_1 = $2_1 & 2147483646 | 0;
    $9_1 = $2_1 & 1 | 0;
    label$3 : while (1) {
     label$4 : {
      if (($2_1 | 0) < (1 | 0)) {
       break label$4
      }
      $0_1 = 0;
      $10_1 = 0;
      $11_1 = 0;
      label$5 : {
       if (($2_1 | 0) == (1 | 0)) {
        break label$5
       }
       label$6 : while (1) {
        label$7 : {
         if ($10_1 & 6 | 0) {
          break label$7
         }
         $0_1 = HEAPU8[$6_1 >> 0] | 0;
         $6_1 = $6_1 + 1 | 0;
        }
        HEAP32[$5_1 >> 2] = HEAP32[($4_1 + (($0_1 & 128 | 0) >>> 5 | 0) | 0) >> 2] | 0;
        HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + (($0_1 >>> 4 | 0) & 4 | 0) | 0) >> 2] | 0;
        $10_1 = $10_1 + 2 | 0;
        $5_1 = $5_1 + 8 | 0;
        $0_1 = $0_1 << 2 | 0;
        $11_1 = $11_1 + 2 | 0;
        if (($11_1 | 0) != ($8_1 | 0)) {
         continue label$6
        }
        break label$6;
       };
      }
      if (!$9_1) {
       break label$4
      }
      label$8 : {
       if ($10_1 & 7 | 0) {
        break label$8
       }
       $0_1 = HEAPU8[$6_1 >> 0] | 0;
       $6_1 = $6_1 + 1 | 0;
      }
      HEAP32[$5_1 >> 2] = HEAP32[($4_1 + (($0_1 & 128 | 0) >>> 5 | 0) | 0) >> 2] | 0;
      $5_1 = $5_1 + 4 | 0;
     }
     $6_1 = $6_1 + $3_1 | 0;
     $5_1 = $5_1 + ($1_1 << 2 | 0) | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$7_1) {
    break label$1
   }
   $8_1 = $2_1 & 2147483646 | 0;
   $9_1 = $2_1 & 1 | 0;
   label$9 : while (1) {
    label$10 : {
     if (($2_1 | 0) < (1 | 0)) {
      break label$10
     }
     $0_1 = 0;
     $10_1 = 0;
     $11_1 = 0;
     label$11 : {
      if (($2_1 | 0) == (1 | 0)) {
       break label$11
      }
      label$12 : while (1) {
       label$13 : {
        if ($10_1 & 6 | 0) {
         break label$13
        }
        $0_1 = HEAPU8[$6_1 >> 0] | 0;
        $6_1 = $6_1 + 1 | 0;
       }
       HEAP32[$5_1 >> 2] = HEAP32[($4_1 + (($0_1 & 1 | 0) << 2 | 0) | 0) >> 2] | 0;
       HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + (($0_1 << 1 | 0) & 4 | 0) | 0) >> 2] | 0;
       $10_1 = $10_1 + 2 | 0;
       $5_1 = $5_1 + 8 | 0;
       $0_1 = ($0_1 & 252 | 0) >>> 2 | 0;
       $11_1 = $11_1 + 2 | 0;
       if (($11_1 | 0) != ($8_1 | 0)) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$9_1) {
      break label$10
     }
     label$14 : {
      if ($10_1 & 7 | 0) {
       break label$14
      }
      $0_1 = HEAPU8[$6_1 >> 0] | 0;
      $6_1 = $6_1 + 1 | 0;
     }
     HEAP32[$5_1 >> 2] = HEAP32[($4_1 + (($0_1 & 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     $5_1 = $5_1 + 4 | 0;
    }
    $6_1 = $6_1 + $3_1 | 0;
    $5_1 = $5_1 + ($1_1 << 2 | 0) | 0;
    $7_1 = $7_1 + -1 | 0;
    if ($7_1) {
     continue label$9
    }
    break label$9;
   };
  }
 }
 
 function $603($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $1_1 = 0, $11_1 = 0, $3_1 = 0, $10_1 = 0, $2_1 = 0, $4_1 = 0, $12_1 = 0;
  $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $2_1 = ((($1_1 + 7 | 0 | 0) / (-8 | 0) | 0) + $1_1 | 0) + (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
  $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = HEAP32[$0_1 >> 2] | 0;
  $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $8_1 = HEAP32[(HEAP32[($0_1 + 40 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $9_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$9_1) {
     break label$2
    }
    label$3 : {
     if (($8_1 | 0) == (286261504 | 0)) {
      break label$3
     }
     if (!$7_1) {
      break label$1
     }
     $10_1 = ($1_1 | 0) < (1 | 0);
     label$4 : while (1) {
      $0_1 = 0;
      $8_1 = 0;
      label$5 : {
       if ($10_1) {
        break label$5
       }
       label$6 : while (1) {
        label$7 : {
         if ($8_1 & 7 | 0) {
          break label$7
         }
         $0_1 = HEAPU8[$6_1 >> 0] | 0;
         $6_1 = $6_1 + 1 | 0;
        }
        label$8 : {
         $11_1 = ($0_1 >>> 7 | 0) & 1 | 0;
         if (($3_1 | 0) == ($11_1 | 0)) {
          break label$8
         }
         HEAP8[$5_1 >> 0] = HEAPU8[($9_1 + $11_1 | 0) >> 0] | 0;
        }
        $0_1 = $0_1 << 1 | 0;
        $5_1 = $5_1 + 1 | 0;
        $8_1 = $8_1 + 1 | 0;
        if (($8_1 | 0) != ($1_1 | 0)) {
         continue label$6
        }
        break label$6;
       };
      }
      $5_1 = $5_1 + $4_1 | 0;
      $6_1 = $6_1 + $2_1 | 0;
      $7_1 = $7_1 + -1 | 0;
      if ($7_1) {
       continue label$4
      }
      break label$1;
     };
    }
    if (!$7_1) {
     break label$1
    }
    $10_1 = ($1_1 | 0) < (1 | 0);
    label$9 : while (1) {
     $0_1 = 0;
     $8_1 = 0;
     label$10 : {
      if ($10_1) {
       break label$10
      }
      label$11 : while (1) {
       label$12 : {
        if ($8_1 & 7 | 0) {
         break label$12
        }
        $0_1 = HEAPU8[$6_1 >> 0] | 0;
        $6_1 = $6_1 + 1 | 0;
       }
       label$13 : {
        $11_1 = $0_1 & 1 | 0;
        if (($3_1 | 0) == ($11_1 | 0)) {
         break label$13
        }
        HEAP8[$5_1 >> 0] = HEAPU8[($9_1 + $11_1 | 0) >> 0] | 0;
       }
       $5_1 = $5_1 + 1 | 0;
       $0_1 = ($0_1 & 254 | 0) >>> 1 | 0;
       $8_1 = $8_1 + 1 | 0;
       if (($8_1 | 0) != ($1_1 | 0)) {
        continue label$11
       }
       break label$11;
      };
     }
     $5_1 = $5_1 + $4_1 | 0;
     $6_1 = $6_1 + $2_1 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue label$9
     }
     break label$1;
    };
   }
   label$14 : {
    if (($8_1 | 0) == (286261504 | 0)) {
     break label$14
    }
    if (!$7_1) {
     break label$1
    }
    $10_1 = $1_1 & 2147483646 | 0;
    $12_1 = $1_1 & 1 | 0;
    label$15 : while (1) {
     label$16 : {
      if (($1_1 | 0) < (1 | 0)) {
       break label$16
      }
      $0_1 = 0;
      $8_1 = 0;
      $11_1 = 0;
      label$17 : {
       if (($1_1 | 0) == (1 | 0)) {
        break label$17
       }
       label$18 : while (1) {
        label$19 : {
         if ($8_1 & 6 | 0) {
          break label$19
         }
         $0_1 = HEAPU8[$6_1 >> 0] | 0;
         $6_1 = $6_1 + 1 | 0;
        }
        label$20 : {
         $9_1 = ($0_1 >>> 7 | 0) & 1 | 0;
         if (($3_1 | 0) == ($9_1 | 0)) {
          break label$20
         }
         HEAP8[$5_1 >> 0] = $9_1;
        }
        label$21 : {
         $9_1 = ($0_1 >>> 6 | 0) & 1 | 0;
         if (($3_1 | 0) == ($9_1 | 0)) {
          break label$21
         }
         HEAP8[($5_1 + 1 | 0) >> 0] = $9_1;
        }
        $8_1 = $8_1 + 2 | 0;
        $0_1 = $0_1 << 2 | 0;
        $5_1 = $5_1 + 2 | 0;
        $11_1 = $11_1 + 2 | 0;
        if (($11_1 | 0) != ($10_1 | 0)) {
         continue label$18
        }
        break label$18;
       };
      }
      if (!$12_1) {
       break label$16
      }
      label$22 : {
       if ($8_1 & 7 | 0) {
        break label$22
       }
       $0_1 = HEAPU8[$6_1 >> 0] | 0;
       $6_1 = $6_1 + 1 | 0;
      }
      label$23 : {
       $0_1 = ($0_1 >>> 7 | 0) & 1 | 0;
       if (($3_1 | 0) == ($0_1 | 0)) {
        break label$23
       }
       HEAP8[$5_1 >> 0] = $0_1;
      }
      $5_1 = $5_1 + 1 | 0;
     }
     $5_1 = $5_1 + $4_1 | 0;
     $6_1 = $6_1 + $2_1 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue label$15
     }
     break label$1;
    };
   }
   if (!$7_1) {
    break label$1
   }
   $10_1 = $1_1 & 2147483646 | 0;
   $12_1 = $1_1 & 1 | 0;
   label$24 : while (1) {
    label$25 : {
     if (($1_1 | 0) < (1 | 0)) {
      break label$25
     }
     $0_1 = 0;
     $8_1 = 0;
     $11_1 = 0;
     label$26 : {
      if (($1_1 | 0) == (1 | 0)) {
       break label$26
      }
      label$27 : while (1) {
       label$28 : {
        if ($8_1 & 6 | 0) {
         break label$28
        }
        $0_1 = HEAPU8[$6_1 >> 0] | 0;
        $6_1 = $6_1 + 1 | 0;
       }
       label$29 : {
        $9_1 = $0_1 & 1 | 0;
        if (($3_1 | 0) == ($9_1 | 0)) {
         break label$29
        }
        HEAP8[$5_1 >> 0] = $9_1;
       }
       label$30 : {
        $9_1 = ($0_1 >>> 1 | 0) & 1 | 0;
        if (($3_1 | 0) == ($9_1 | 0)) {
         break label$30
        }
        HEAP8[($5_1 + 1 | 0) >> 0] = $9_1;
       }
       $8_1 = $8_1 + 2 | 0;
       $5_1 = $5_1 + 2 | 0;
       $0_1 = ($0_1 & 252 | 0) >>> 2 | 0;
       $11_1 = $11_1 + 2 | 0;
       if (($11_1 | 0) != ($10_1 | 0)) {
        continue label$27
       }
       break label$27;
      };
     }
     if (!$12_1) {
      break label$25
     }
     label$31 : {
      if ($8_1 & 7 | 0) {
       break label$31
      }
      $0_1 = HEAPU8[$6_1 >> 0] | 0;
      $6_1 = $6_1 + 1 | 0;
     }
     label$32 : {
      $0_1 = $0_1 & 1 | 0;
      if (($3_1 | 0) == ($0_1 | 0)) {
       break label$32
      }
      HEAP8[$5_1 >> 0] = $0_1;
     }
     $5_1 = $5_1 + 1 | 0;
    }
    $5_1 = $5_1 + $4_1 | 0;
    $6_1 = $6_1 + $2_1 | 0;
    $7_1 = $7_1 + -1 | 0;
    if ($7_1) {
     continue label$24
    }
    break label$24;
   };
  }
 }
 
 function $604($0_1) {
  $0_1 = $0_1 | 0;
  var $6_1 = 0, $7_1 = 0, $10_1 = 0, $8_1 = 0, $2_1 = 0, $11_1 = 0, $9_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
  $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $3_1 = ((($2_1 + 7 | 0 | 0) / (-8 | 0) | 0) + $2_1 | 0) + (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $7_1 = HEAP32[$0_1 >> 2] | 0;
  $8_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[(HEAP32[($0_1 + 40 | 0) >> 2] | 0) >> 2] | 0 | 0) == (286261504 | 0)) {
     break label$2
    }
    if (!$8_1) {
     break label$1
    }
    $9_1 = ($2_1 | 0) < (1 | 0);
    label$3 : while (1) {
     $0_1 = 0;
     $10_1 = 0;
     label$4 : {
      if ($9_1) {
       break label$4
      }
      label$5 : while (1) {
       label$6 : {
        if ($10_1 & 7 | 0) {
         break label$6
        }
        $0_1 = HEAPU8[$7_1 >> 0] | 0;
        $7_1 = $7_1 + 1 | 0;
       }
       label$7 : {
        $11_1 = ($0_1 >>> 7 | 0) & 1 | 0;
        if (($5_1 | 0) == ($11_1 | 0)) {
         break label$7
        }
        HEAP16[$6_1 >> 1] = HEAPU16[($4_1 + ($11_1 << 1 | 0) | 0) >> 1] | 0;
       }
       $6_1 = $6_1 + 2 | 0;
       $0_1 = $0_1 << 1 | 0;
       $10_1 = $10_1 + 1 | 0;
       if (($10_1 | 0) != ($2_1 | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     $7_1 = $7_1 + $3_1 | 0;
     $6_1 = $6_1 + ($1_1 << 1 | 0) | 0;
     $8_1 = $8_1 + -1 | 0;
     if ($8_1) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$8_1) {
    break label$1
   }
   $9_1 = ($2_1 | 0) < (1 | 0);
   label$8 : while (1) {
    $0_1 = 0;
    $10_1 = 0;
    label$9 : {
     if ($9_1) {
      break label$9
     }
     label$10 : while (1) {
      label$11 : {
       if ($10_1 & 7 | 0) {
        break label$11
       }
       $0_1 = HEAPU8[$7_1 >> 0] | 0;
       $7_1 = $7_1 + 1 | 0;
      }
      label$12 : {
       $11_1 = $0_1 & 1 | 0;
       if (($5_1 | 0) == ($11_1 | 0)) {
        break label$12
       }
       HEAP16[$6_1 >> 1] = HEAPU16[($4_1 + ($11_1 << 1 | 0) | 0) >> 1] | 0;
      }
      $6_1 = $6_1 + 2 | 0;
      $0_1 = ($0_1 & 254 | 0) >>> 1 | 0;
      $10_1 = $10_1 + 1 | 0;
      if (($10_1 | 0) != ($2_1 | 0)) {
       continue label$10
      }
      break label$10;
     };
    }
    $7_1 = $7_1 + $3_1 | 0;
    $6_1 = $6_1 + ($1_1 << 1 | 0) | 0;
    $8_1 = $8_1 + -1 | 0;
    if ($8_1) {
     continue label$8
    }
    break label$8;
   };
  }
 }
 
 function $605($0_1) {
  $0_1 = $0_1 | 0;
  var $6_1 = 0, $7_1 = 0, $10_1 = 0, $8_1 = 0, $1_1 = 0, $11_1 = 0, $9_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $2_1 = ((($1_1 + 7 | 0 | 0) / (-8 | 0) | 0) + $1_1 | 0) + (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
  $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $7_1 = HEAP32[$0_1 >> 2] | 0;
  $8_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[(HEAP32[($0_1 + 40 | 0) >> 2] | 0) >> 2] | 0 | 0) == (286261504 | 0)) {
     break label$2
    }
    if (!$8_1) {
     break label$1
    }
    $9_1 = ($1_1 | 0) < (1 | 0);
    label$3 : while (1) {
     $0_1 = 0;
     $10_1 = 0;
     label$4 : {
      if ($9_1) {
       break label$4
      }
      label$5 : while (1) {
       label$6 : {
        if ($10_1 & 7 | 0) {
         break label$6
        }
        $0_1 = HEAPU8[$7_1 >> 0] | 0;
        $7_1 = $7_1 + 1 | 0;
       }
       label$7 : {
        $11_1 = ($0_1 >>> 7 | 0) & 1 | 0;
        if (($4_1 | 0) == ($11_1 | 0)) {
         break label$7
        }
        $535($6_1 | 0, $3_1 + ($11_1 << 2 | 0) | 0 | 0, 3 | 0) | 0;
       }
       $6_1 = $6_1 + 3 | 0;
       $0_1 = $0_1 << 1 | 0;
       $10_1 = $10_1 + 1 | 0;
       if (($10_1 | 0) != ($1_1 | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     $6_1 = $6_1 + $5_1 | 0;
     $7_1 = $7_1 + $2_1 | 0;
     $8_1 = $8_1 + -1 | 0;
     if ($8_1) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$8_1) {
    break label$1
   }
   $9_1 = ($1_1 | 0) < (1 | 0);
   label$8 : while (1) {
    $0_1 = 0;
    $10_1 = 0;
    label$9 : {
     if ($9_1) {
      break label$9
     }
     label$10 : while (1) {
      label$11 : {
       if ($10_1 & 7 | 0) {
        break label$11
       }
       $0_1 = HEAPU8[$7_1 >> 0] | 0;
       $7_1 = $7_1 + 1 | 0;
      }
      label$12 : {
       $11_1 = $0_1 & 1 | 0;
       if (($4_1 | 0) == ($11_1 | 0)) {
        break label$12
       }
       $535($6_1 | 0, $3_1 + ($11_1 << 2 | 0) | 0 | 0, 3 | 0) | 0;
      }
      $6_1 = $6_1 + 3 | 0;
      $0_1 = ($0_1 & 254 | 0) >>> 1 | 0;
      $10_1 = $10_1 + 1 | 0;
      if (($10_1 | 0) != ($1_1 | 0)) {
       continue label$10
      }
      break label$10;
     };
    }
    $6_1 = $6_1 + $5_1 | 0;
    $7_1 = $7_1 + $2_1 | 0;
    $8_1 = $8_1 + -1 | 0;
    if ($8_1) {
     continue label$8
    }
    break label$8;
   };
  }
 }
 
 function $606($0_1) {
  $0_1 = $0_1 | 0;
  var $6_1 = 0, $7_1 = 0, $10_1 = 0, $8_1 = 0, $2_1 = 0, $11_1 = 0, $9_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) / (4 | 0) | 0;
  $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $3_1 = ((($2_1 + 7 | 0 | 0) / (-8 | 0) | 0) + $2_1 | 0) + (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $7_1 = HEAP32[$0_1 >> 2] | 0;
  $8_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[(HEAP32[($0_1 + 40 | 0) >> 2] | 0) >> 2] | 0 | 0) == (286261504 | 0)) {
     break label$2
    }
    if (!$8_1) {
     break label$1
    }
    $9_1 = ($2_1 | 0) < (1 | 0);
    label$3 : while (1) {
     $0_1 = 0;
     $10_1 = 0;
     label$4 : {
      if ($9_1) {
       break label$4
      }
      label$5 : while (1) {
       label$6 : {
        if ($10_1 & 7 | 0) {
         break label$6
        }
        $0_1 = HEAPU8[$7_1 >> 0] | 0;
        $7_1 = $7_1 + 1 | 0;
       }
       label$7 : {
        $11_1 = ($0_1 >>> 7 | 0) & 1 | 0;
        if (($5_1 | 0) == ($11_1 | 0)) {
         break label$7
        }
        HEAP32[$6_1 >> 2] = HEAP32[($4_1 + ($11_1 << 2 | 0) | 0) >> 2] | 0;
       }
       $6_1 = $6_1 + 4 | 0;
       $0_1 = $0_1 << 1 | 0;
       $10_1 = $10_1 + 1 | 0;
       if (($10_1 | 0) != ($2_1 | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     $7_1 = $7_1 + $3_1 | 0;
     $6_1 = $6_1 + ($1_1 << 2 | 0) | 0;
     $8_1 = $8_1 + -1 | 0;
     if ($8_1) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$8_1) {
    break label$1
   }
   $9_1 = ($2_1 | 0) < (1 | 0);
   label$8 : while (1) {
    $0_1 = 0;
    $10_1 = 0;
    label$9 : {
     if ($9_1) {
      break label$9
     }
     label$10 : while (1) {
      label$11 : {
       if ($10_1 & 7 | 0) {
        break label$11
       }
       $0_1 = HEAPU8[$7_1 >> 0] | 0;
       $7_1 = $7_1 + 1 | 0;
      }
      label$12 : {
       $11_1 = $0_1 & 1 | 0;
       if (($5_1 | 0) == ($11_1 | 0)) {
        break label$12
       }
       HEAP32[$6_1 >> 2] = HEAP32[($4_1 + ($11_1 << 2 | 0) | 0) >> 2] | 0;
      }
      $6_1 = $6_1 + 4 | 0;
      $0_1 = ($0_1 & 254 | 0) >>> 1 | 0;
      $10_1 = $10_1 + 1 | 0;
      if (($10_1 | 0) != ($2_1 | 0)) {
       continue label$10
      }
      break label$10;
     };
    }
    $7_1 = $7_1 + $3_1 | 0;
    $6_1 = $6_1 + ($1_1 << 2 | 0) | 0;
    $8_1 = $8_1 + -1 | 0;
    if ($8_1) {
     continue label$8
    }
    break label$8;
   };
  }
 }
 
 function $607($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0;
  $1_1 = 0;
  $2_1 = 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $3_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0;
   if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0) >>> 0 < 8 >>> 0) {
    break label$1
   }
   $2_1 = HEAPU8[($3_1 + 9 | 0) >> 0] | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        $3_1 = (HEAP32[($0_1 + 68 | 0) >> 2] | 0) & -28673 | 0;
        switch ($3_1 + -256 | 0 | 0) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 17:
         break label$2;
        case 18:
         break label$3;
        case 16:
         break label$5;
        case 0:
         break label$6;
        default:
         break label$7;
        };
       }
       label$8 : {
        switch ($3_1 | 0) {
        case 18:
         break label$4;
        case 0:
         break label$8;
        default:
         break label$2;
        };
       }
       return HEAP32[(($2_1 << 2 | 0) + 90032 | 0) >> 2] | 0 | 0;
      }
      return HEAP32[(($2_1 << 2 | 0) + 90064 | 0) >> 2] | 0 | 0;
     }
     if ((HEAPU8[($0_1 + 79 | 0) >> 0] | 0 | 0) != (255 | 0)) {
      break label$2
     }
     return HEAP32[(($2_1 << 2 | 0) + 90064 | 0) >> 2] | 0 | 0;
    }
    return ($2_1 >>> 0 > 1 >>> 0 ? 103 : 0) | 0;
   }
   $1_1 = $2_1 >>> 0 > 1 >>> 0 ? 104 : 0;
  }
  return $1_1 | 0;
 }
 
 function $608($0_1) {
  $0_1 = $0_1 | 0;
  var $19_1 = 0, $13_1 = 0, $6_1 = 0, $17_1 = 0, $18_1 = 0, $2_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0, $1_1 = 0, $5_1 = 0, $12_1 = 0, $3_1 = 0, $4_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $5_1 = HEAP32[((HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $7_1 = $6_1 & 3 | 0;
   $8_1 = ($6_1 + 3 | 0 | 0) / (4 | 0) | 0;
   $9_1 = HEAP32[$0_1 >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   $10_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
   $11_1 = $10_1 + -1 | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $12_1 = $8_1;
    label$3 : {
     label$4 : {
      switch ($7_1 | 0) {
      default:
       $13_1 = 3;
       break label$3;
      case 1:
       $13_1 = 2;
       break label$3;
      case 2:
       $13_1 = 1;
       break label$3;
      case 3:
       break label$4;
      };
     }
     $13_1 = 0;
    }
    label$8 : {
     label$9 : while (1) {
      label$10 : {
       switch ($13_1 | 0) {
       case 0:
        $13_1 = $5_1 + ((HEAPU8[$9_1 >> 0] | 0) << 2 | 0) | 0;
        $14_1 = HEAPU8[($13_1 + 2 | 0) >> 0] | 0;
        $15_1 = HEAPU8[($13_1 + 1 | 0) >> 0] | 0;
        $16_1 = HEAPU8[$13_1 >> 0] | 0;
        $13_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        $19_1 = 0;
        label$14 : {
         label$15 : {
          switch ($11_1 | 0) {
          case 0:
           $19_1 = HEAPU8[$6_1 >> 0] | 0;
           $13_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$14;
          case 1:
           $19_1 = HEAPU16[$6_1 >> 1] | 0;
           $13_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$14;
          case 2:
           $17_1 = HEAPU8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $13_1 = 255;
           break label$14;
          case 3:
           break label$15;
          default:
           break label$14;
          };
         }
         $19_1 = HEAP32[$6_1 >> 2] | 0;
         $13_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $13_1 = (($13_1 + $2_1 | 0) - ((Math_imul($13_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
        $14_1 = $17_1 + ((Math_imul($14_1 - ($17_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $17_1 = $14_1 & 255 | 0;
        $15_1 = $18_1 + ((Math_imul($15_1 - ($18_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $18_1 = $15_1 & 255 | 0;
        $16_1 = $19_1 + ((Math_imul($16_1 - ($19_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $19_1 = $16_1 & 255 | 0;
        label$19 : {
         label$20 : {
          switch ($11_1 | 0) {
          case 0:
           HEAP8[$6_1 >> 0] = ($18_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$19;
          case 1:
           HEAP16[$6_1 >> 1] = ($18_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$19;
          case 2:
           HEAP8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
           HEAP8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $15_1;
           HEAP8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $14_1;
           break label$19;
          case 3:
           break label$20;
          default:
           break label$19;
          };
         }
         HEAP32[$6_1 >> 2] = ($18_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $6_1 = $6_1 + $10_1 | 0;
        $9_1 = $9_1 + 1 | 0;
        $13_1 = 1;
        continue label$9;
       case 1:
        $13_1 = $5_1 + ((HEAPU8[$9_1 >> 0] | 0) << 2 | 0) | 0;
        $14_1 = HEAPU8[($13_1 + 2 | 0) >> 0] | 0;
        $15_1 = HEAPU8[($13_1 + 1 | 0) >> 0] | 0;
        $16_1 = HEAPU8[$13_1 >> 0] | 0;
        $13_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        $19_1 = 0;
        label$24 : {
         label$25 : {
          switch ($11_1 | 0) {
          case 0:
           $19_1 = HEAPU8[$6_1 >> 0] | 0;
           $13_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$24;
          case 1:
           $19_1 = HEAPU16[$6_1 >> 1] | 0;
           $13_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$24;
          case 2:
           $17_1 = HEAPU8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $13_1 = 255;
           break label$24;
          case 3:
           break label$25;
          default:
           break label$24;
          };
         }
         $19_1 = HEAP32[$6_1 >> 2] | 0;
         $13_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $13_1 = (($13_1 + $2_1 | 0) - ((Math_imul($13_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
        $14_1 = $17_1 + ((Math_imul($14_1 - ($17_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $17_1 = $14_1 & 255 | 0;
        $15_1 = $18_1 + ((Math_imul($15_1 - ($18_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $18_1 = $15_1 & 255 | 0;
        $16_1 = $19_1 + ((Math_imul($16_1 - ($19_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $19_1 = $16_1 & 255 | 0;
        label$29 : {
         label$30 : {
          switch ($11_1 | 0) {
          case 0:
           HEAP8[$6_1 >> 0] = ($18_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$29;
          case 1:
           HEAP16[$6_1 >> 1] = ($18_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$29;
          case 2:
           HEAP8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
           HEAP8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $15_1;
           HEAP8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $14_1;
           break label$29;
          case 3:
           break label$30;
          default:
           break label$29;
          };
         }
         HEAP32[$6_1 >> 2] = ($18_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $6_1 = $6_1 + $10_1 | 0;
        $9_1 = $9_1 + 1 | 0;
        $13_1 = 2;
        continue label$9;
       case 2:
        $13_1 = $5_1 + ((HEAPU8[$9_1 >> 0] | 0) << 2 | 0) | 0;
        $14_1 = HEAPU8[($13_1 + 2 | 0) >> 0] | 0;
        $15_1 = HEAPU8[($13_1 + 1 | 0) >> 0] | 0;
        $16_1 = HEAPU8[$13_1 >> 0] | 0;
        $13_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        $19_1 = 0;
        label$34 : {
         label$35 : {
          switch ($11_1 | 0) {
          case 0:
           $19_1 = HEAPU8[$6_1 >> 0] | 0;
           $13_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$34;
          case 1:
           $19_1 = HEAPU16[$6_1 >> 1] | 0;
           $13_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$34;
          case 2:
           $17_1 = HEAPU8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $13_1 = 255;
           break label$34;
          case 3:
           break label$35;
          default:
           break label$34;
          };
         }
         $19_1 = HEAP32[$6_1 >> 2] | 0;
         $13_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $13_1 = (($13_1 + $2_1 | 0) - ((Math_imul($13_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
        $14_1 = $17_1 + ((Math_imul($14_1 - ($17_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $17_1 = $14_1 & 255 | 0;
        $15_1 = $18_1 + ((Math_imul($15_1 - ($18_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $18_1 = $15_1 & 255 | 0;
        $16_1 = $19_1 + ((Math_imul($16_1 - ($19_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $19_1 = $16_1 & 255 | 0;
        label$39 : {
         label$40 : {
          switch ($11_1 | 0) {
          case 0:
           HEAP8[$6_1 >> 0] = ($18_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$39;
          case 1:
           HEAP16[$6_1 >> 1] = ($18_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$39;
          case 2:
           HEAP8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
           HEAP8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $15_1;
           HEAP8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $14_1;
           break label$39;
          case 3:
           break label$40;
          default:
           break label$39;
          };
         }
         HEAP32[$6_1 >> 2] = ($18_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $13_1 = $12_1 + -1 | 0;
        $6_1 = $6_1 + $10_1 | 0;
        $9_1 = $9_1 + 1 | 0;
        if (($12_1 | 0) <= (1 | 0)) {
         break label$8
        }
        $12_1 = $13_1;
        $13_1 = 3;
        continue label$9;
       default:
        break label$10;
       };
      }
      $13_1 = $5_1 + ((HEAPU8[$9_1 >> 0] | 0) << 2 | 0) | 0;
      $16_1 = HEAPU8[($13_1 + 2 | 0) >> 0] | 0;
      $15_1 = HEAPU8[($13_1 + 1 | 0) >> 0] | 0;
      $14_1 = HEAPU8[$13_1 >> 0] | 0;
      $13_1 = 0;
      $17_1 = 0;
      $18_1 = 0;
      $19_1 = 0;
      label$44 : {
       label$45 : {
        switch ($11_1 | 0) {
        case 0:
         $19_1 = HEAPU8[$6_1 >> 0] | 0;
         $13_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         break label$44;
        case 1:
         $19_1 = HEAPU16[$6_1 >> 1] | 0;
         $13_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         break label$44;
        case 2:
         $17_1 = HEAPU8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $13_1 = 255;
         break label$44;
        case 3:
         break label$45;
        default:
         break label$44;
        };
       }
       $19_1 = HEAP32[$6_1 >> 2] | 0;
       $13_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $19_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
      }
      $13_1 = (($13_1 + $2_1 | 0) - ((Math_imul($13_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
      $16_1 = $17_1 + ((Math_imul($16_1 - ($17_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
      $17_1 = $16_1 & 255 | 0;
      $15_1 = $18_1 + ((Math_imul($15_1 - ($18_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
      $18_1 = $15_1 & 255 | 0;
      $14_1 = $19_1 + ((Math_imul($14_1 - ($19_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
      $19_1 = $14_1 & 255 | 0;
      label$49 : {
       label$50 : {
        switch ($11_1 | 0) {
        case 0:
         HEAP8[$6_1 >> 0] = ($18_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$49;
        case 1:
         HEAP16[$6_1 >> 1] = ($18_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$49;
        case 2:
         HEAP8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $14_1;
         HEAP8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $15_1;
         HEAP8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
         break label$49;
        case 3:
         break label$50;
        default:
         break label$49;
        };
       }
       HEAP32[$6_1 >> 2] = ($18_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
      }
      $6_1 = $6_1 + $10_1 | 0;
      $9_1 = $9_1 + 1 | 0;
      $13_1 = 0;
      continue label$9;
     };
    }
    $6_1 = $6_1 + $3_1 | 0;
    $9_1 = $9_1 + $4_1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $609($0_1) {
  $0_1 = $0_1 | 0;
  var $20_1 = 0, $14_1 = 0, $7_1 = 0, $18_1 = 0, $19_1 = 0, $2_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, $3_1 = 0, $6_1 = 0, $1_1 = 0, $13_1 = 0, $4_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $6_1 = HEAP32[((HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $8_1 = $7_1 & 7 | 0;
   $9_1 = ($7_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $10_1 = HEAP32[$0_1 >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   $11_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
   $12_1 = $11_1 + -1 | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $13_1 = $9_1;
    label$3 : {
     label$4 : {
      switch ($8_1 | 0) {
      default:
       $14_1 = 0;
       break label$3;
      case 1:
       $14_1 = 7;
       break label$3;
      case 2:
       $14_1 = 6;
       break label$3;
      case 3:
       $14_1 = 5;
       break label$3;
      case 4:
       $14_1 = 4;
       break label$3;
      case 5:
       $14_1 = 3;
       break label$3;
      case 6:
       $14_1 = 2;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $14_1 = 1;
    }
    label$12 : while (1) {
     label$13 : {
      switch ($14_1 | 0) {
      case 0:
       label$21 : {
        $14_1 = HEAPU8[$10_1 >> 0] | 0;
        if (($3_1 | 0) == ($14_1 | 0)) {
         break label$21
        }
        $14_1 = $6_1 + ($14_1 << 2 | 0) | 0;
        $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
        $16_1 = HEAPU8[($14_1 + 1 | 0) >> 0] | 0;
        $17_1 = HEAPU8[$14_1 >> 0] | 0;
        $14_1 = 0;
        $18_1 = 0;
        $19_1 = 0;
        $20_1 = 0;
        label$22 : {
         label$23 : {
          switch ($12_1 | 0) {
          case 0:
           $20_1 = HEAPU8[$7_1 >> 0] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$22;
          case 1:
           $20_1 = HEAPU16[$7_1 >> 1] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$22;
          case 2:
           $18_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $14_1 = 255;
           break label$22;
          case 3:
           break label$23;
          default:
           break label$22;
          };
         }
         $20_1 = HEAP32[$7_1 >> 2] | 0;
         $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $14_1 = (($14_1 + $2_1 | 0) - ((Math_imul($14_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
        $15_1 = $18_1 + ((Math_imul($15_1 - ($18_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $18_1 = $15_1 & 255 | 0;
        $16_1 = $19_1 + ((Math_imul($16_1 - ($19_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $19_1 = $16_1 & 255 | 0;
        $17_1 = $20_1 + ((Math_imul($17_1 - ($20_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $20_1 = $17_1 & 255 | 0;
        label$27 : {
         switch ($12_1 | 0) {
         case 0:
          HEAP8[$7_1 >> 0] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$21;
         case 1:
          HEAP16[$7_1 >> 1] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$21;
         case 2:
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $15_1;
          break label$21;
         case 3:
          break label$27;
         default:
          break label$21;
         };
        }
        HEAP32[$7_1 >> 2] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
       }
       $7_1 = $7_1 + $11_1 | 0;
       $10_1 = $10_1 + 1 | 0;
       $14_1 = 1;
       continue label$12;
      case 1:
       label$31 : {
        $14_1 = HEAPU8[$10_1 >> 0] | 0;
        if (($3_1 | 0) == ($14_1 | 0)) {
         break label$31
        }
        $14_1 = $6_1 + ($14_1 << 2 | 0) | 0;
        $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
        $16_1 = HEAPU8[($14_1 + 1 | 0) >> 0] | 0;
        $17_1 = HEAPU8[$14_1 >> 0] | 0;
        $14_1 = 0;
        $18_1 = 0;
        $19_1 = 0;
        $20_1 = 0;
        label$32 : {
         label$33 : {
          switch ($12_1 | 0) {
          case 0:
           $20_1 = HEAPU8[$7_1 >> 0] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$32;
          case 1:
           $20_1 = HEAPU16[$7_1 >> 1] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$32;
          case 2:
           $18_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $14_1 = 255;
           break label$32;
          case 3:
           break label$33;
          default:
           break label$32;
          };
         }
         $20_1 = HEAP32[$7_1 >> 2] | 0;
         $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $14_1 = (($14_1 + $2_1 | 0) - ((Math_imul($14_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
        $15_1 = $18_1 + ((Math_imul($15_1 - ($18_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $18_1 = $15_1 & 255 | 0;
        $16_1 = $19_1 + ((Math_imul($16_1 - ($19_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $19_1 = $16_1 & 255 | 0;
        $17_1 = $20_1 + ((Math_imul($17_1 - ($20_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $20_1 = $17_1 & 255 | 0;
        label$37 : {
         switch ($12_1 | 0) {
         case 0:
          HEAP8[$7_1 >> 0] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$31;
         case 1:
          HEAP16[$7_1 >> 1] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$31;
         case 2:
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $15_1;
          break label$31;
         case 3:
          break label$37;
         default:
          break label$31;
         };
        }
        HEAP32[$7_1 >> 2] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
       }
       $7_1 = $7_1 + $11_1 | 0;
       $10_1 = $10_1 + 1 | 0;
       $14_1 = 2;
       continue label$12;
      case 2:
       label$41 : {
        $14_1 = HEAPU8[$10_1 >> 0] | 0;
        if (($3_1 | 0) == ($14_1 | 0)) {
         break label$41
        }
        $14_1 = $6_1 + ($14_1 << 2 | 0) | 0;
        $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
        $16_1 = HEAPU8[($14_1 + 1 | 0) >> 0] | 0;
        $17_1 = HEAPU8[$14_1 >> 0] | 0;
        $14_1 = 0;
        $18_1 = 0;
        $19_1 = 0;
        $20_1 = 0;
        label$42 : {
         label$43 : {
          switch ($12_1 | 0) {
          case 0:
           $20_1 = HEAPU8[$7_1 >> 0] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$42;
          case 1:
           $20_1 = HEAPU16[$7_1 >> 1] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$42;
          case 2:
           $18_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $14_1 = 255;
           break label$42;
          case 3:
           break label$43;
          default:
           break label$42;
          };
         }
         $20_1 = HEAP32[$7_1 >> 2] | 0;
         $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $14_1 = (($14_1 + $2_1 | 0) - ((Math_imul($14_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
        $15_1 = $18_1 + ((Math_imul($15_1 - ($18_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $18_1 = $15_1 & 255 | 0;
        $16_1 = $19_1 + ((Math_imul($16_1 - ($19_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $19_1 = $16_1 & 255 | 0;
        $17_1 = $20_1 + ((Math_imul($17_1 - ($20_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $20_1 = $17_1 & 255 | 0;
        label$47 : {
         switch ($12_1 | 0) {
         case 0:
          HEAP8[$7_1 >> 0] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$41;
         case 1:
          HEAP16[$7_1 >> 1] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$41;
         case 2:
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $15_1;
          break label$41;
         case 3:
          break label$47;
         default:
          break label$41;
         };
        }
        HEAP32[$7_1 >> 2] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
       }
       $7_1 = $7_1 + $11_1 | 0;
       $10_1 = $10_1 + 1 | 0;
       $14_1 = 3;
       continue label$12;
      case 3:
       label$51 : {
        $14_1 = HEAPU8[$10_1 >> 0] | 0;
        if (($3_1 | 0) == ($14_1 | 0)) {
         break label$51
        }
        $14_1 = $6_1 + ($14_1 << 2 | 0) | 0;
        $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
        $16_1 = HEAPU8[($14_1 + 1 | 0) >> 0] | 0;
        $17_1 = HEAPU8[$14_1 >> 0] | 0;
        $14_1 = 0;
        $18_1 = 0;
        $19_1 = 0;
        $20_1 = 0;
        label$52 : {
         label$53 : {
          switch ($12_1 | 0) {
          case 0:
           $20_1 = HEAPU8[$7_1 >> 0] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$52;
          case 1:
           $20_1 = HEAPU16[$7_1 >> 1] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$52;
          case 2:
           $18_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $14_1 = 255;
           break label$52;
          case 3:
           break label$53;
          default:
           break label$52;
          };
         }
         $20_1 = HEAP32[$7_1 >> 2] | 0;
         $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $14_1 = (($14_1 + $2_1 | 0) - ((Math_imul($14_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
        $15_1 = $18_1 + ((Math_imul($15_1 - ($18_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $18_1 = $15_1 & 255 | 0;
        $16_1 = $19_1 + ((Math_imul($16_1 - ($19_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $19_1 = $16_1 & 255 | 0;
        $17_1 = $20_1 + ((Math_imul($17_1 - ($20_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $20_1 = $17_1 & 255 | 0;
        label$57 : {
         switch ($12_1 | 0) {
         case 0:
          HEAP8[$7_1 >> 0] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$51;
         case 1:
          HEAP16[$7_1 >> 1] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$51;
         case 2:
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $15_1;
          break label$51;
         case 3:
          break label$57;
         default:
          break label$51;
         };
        }
        HEAP32[$7_1 >> 2] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
       }
       $7_1 = $7_1 + $11_1 | 0;
       $10_1 = $10_1 + 1 | 0;
       $14_1 = 4;
       continue label$12;
      case 4:
       label$61 : {
        $14_1 = HEAPU8[$10_1 >> 0] | 0;
        if (($3_1 | 0) == ($14_1 | 0)) {
         break label$61
        }
        $14_1 = $6_1 + ($14_1 << 2 | 0) | 0;
        $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
        $16_1 = HEAPU8[($14_1 + 1 | 0) >> 0] | 0;
        $17_1 = HEAPU8[$14_1 >> 0] | 0;
        $14_1 = 0;
        $18_1 = 0;
        $19_1 = 0;
        $20_1 = 0;
        label$62 : {
         label$63 : {
          switch ($12_1 | 0) {
          case 0:
           $20_1 = HEAPU8[$7_1 >> 0] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$62;
          case 1:
           $20_1 = HEAPU16[$7_1 >> 1] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$62;
          case 2:
           $18_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $14_1 = 255;
           break label$62;
          case 3:
           break label$63;
          default:
           break label$62;
          };
         }
         $20_1 = HEAP32[$7_1 >> 2] | 0;
         $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $14_1 = (($14_1 + $2_1 | 0) - ((Math_imul($14_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
        $15_1 = $18_1 + ((Math_imul($15_1 - ($18_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $18_1 = $15_1 & 255 | 0;
        $16_1 = $19_1 + ((Math_imul($16_1 - ($19_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $19_1 = $16_1 & 255 | 0;
        $17_1 = $20_1 + ((Math_imul($17_1 - ($20_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $20_1 = $17_1 & 255 | 0;
        label$67 : {
         switch ($12_1 | 0) {
         case 0:
          HEAP8[$7_1 >> 0] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$61;
         case 1:
          HEAP16[$7_1 >> 1] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$61;
         case 2:
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $15_1;
          break label$61;
         case 3:
          break label$67;
         default:
          break label$61;
         };
        }
        HEAP32[$7_1 >> 2] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
       }
       $7_1 = $7_1 + $11_1 | 0;
       $10_1 = $10_1 + 1 | 0;
       $14_1 = 5;
       continue label$12;
      case 5:
       label$71 : {
        $14_1 = HEAPU8[$10_1 >> 0] | 0;
        if (($3_1 | 0) == ($14_1 | 0)) {
         break label$71
        }
        $14_1 = $6_1 + ($14_1 << 2 | 0) | 0;
        $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
        $16_1 = HEAPU8[($14_1 + 1 | 0) >> 0] | 0;
        $17_1 = HEAPU8[$14_1 >> 0] | 0;
        $14_1 = 0;
        $18_1 = 0;
        $19_1 = 0;
        $20_1 = 0;
        label$72 : {
         label$73 : {
          switch ($12_1 | 0) {
          case 0:
           $20_1 = HEAPU8[$7_1 >> 0] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$72;
          case 1:
           $20_1 = HEAPU16[$7_1 >> 1] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$72;
          case 2:
           $18_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $14_1 = 255;
           break label$72;
          case 3:
           break label$73;
          default:
           break label$72;
          };
         }
         $20_1 = HEAP32[$7_1 >> 2] | 0;
         $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $14_1 = (($14_1 + $2_1 | 0) - ((Math_imul($14_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
        $15_1 = $18_1 + ((Math_imul($15_1 - ($18_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $18_1 = $15_1 & 255 | 0;
        $16_1 = $19_1 + ((Math_imul($16_1 - ($19_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $19_1 = $16_1 & 255 | 0;
        $17_1 = $20_1 + ((Math_imul($17_1 - ($20_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $20_1 = $17_1 & 255 | 0;
        label$77 : {
         switch ($12_1 | 0) {
         case 0:
          HEAP8[$7_1 >> 0] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$71;
         case 1:
          HEAP16[$7_1 >> 1] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$71;
         case 2:
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $15_1;
          break label$71;
         case 3:
          break label$77;
         default:
          break label$71;
         };
        }
        HEAP32[$7_1 >> 2] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
       }
       $7_1 = $7_1 + $11_1 | 0;
       $10_1 = $10_1 + 1 | 0;
       $14_1 = 6;
       continue label$12;
      case 6:
       label$81 : {
        $14_1 = HEAPU8[$10_1 >> 0] | 0;
        if (($3_1 | 0) == ($14_1 | 0)) {
         break label$81
        }
        $14_1 = $6_1 + ($14_1 << 2 | 0) | 0;
        $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
        $16_1 = HEAPU8[($14_1 + 1 | 0) >> 0] | 0;
        $17_1 = HEAPU8[$14_1 >> 0] | 0;
        $14_1 = 0;
        $18_1 = 0;
        $19_1 = 0;
        $20_1 = 0;
        label$82 : {
         label$83 : {
          switch ($12_1 | 0) {
          case 0:
           $20_1 = HEAPU8[$7_1 >> 0] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$82;
          case 1:
           $20_1 = HEAPU16[$7_1 >> 1] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$82;
          case 2:
           $18_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $19_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $20_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $14_1 = 255;
           break label$82;
          case 3:
           break label$83;
          default:
           break label$82;
          };
         }
         $20_1 = HEAP32[$7_1 >> 2] | 0;
         $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $14_1 = (($14_1 + $2_1 | 0) - ((Math_imul($14_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
        $15_1 = $18_1 + ((Math_imul($15_1 - ($18_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $18_1 = $15_1 & 255 | 0;
        $16_1 = $19_1 + ((Math_imul($16_1 - ($19_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $19_1 = $16_1 & 255 | 0;
        $17_1 = $20_1 + ((Math_imul($17_1 - ($20_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
        $20_1 = $17_1 & 255 | 0;
        label$87 : {
         switch ($12_1 | 0) {
         case 0:
          HEAP8[$7_1 >> 0] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$81;
         case 1:
          HEAP16[$7_1 >> 1] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$81;
         case 2:
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
          HEAP8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $15_1;
          break label$81;
         case 3:
          break label$87;
         default:
          break label$81;
         };
        }
        HEAP32[$7_1 >> 2] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
       }
       $7_1 = $7_1 + $11_1 | 0;
       $10_1 = $10_1 + 1 | 0;
       $14_1 = 7;
       continue label$12;
      default:
       break label$13;
      };
     }
     label$91 : {
      $14_1 = HEAPU8[$10_1 >> 0] | 0;
      if (($3_1 | 0) == ($14_1 | 0)) {
       break label$91
      }
      $14_1 = $6_1 + ($14_1 << 2 | 0) | 0;
      $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
      $16_1 = HEAPU8[($14_1 + 1 | 0) >> 0] | 0;
      $17_1 = HEAPU8[$14_1 >> 0] | 0;
      $14_1 = 0;
      $18_1 = 0;
      $19_1 = 0;
      $20_1 = 0;
      label$92 : {
       label$93 : {
        switch ($12_1 | 0) {
        case 0:
         $20_1 = HEAPU8[$7_1 >> 0] | 0;
         $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         break label$92;
        case 1:
         $20_1 = HEAPU16[$7_1 >> 1] | 0;
         $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         break label$92;
        case 2:
         $18_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $20_1 = HEAPU8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $14_1 = 255;
         break label$92;
        case 3:
         break label$93;
        default:
         break label$92;
        };
       }
       $20_1 = HEAP32[$7_1 >> 2] | 0;
       $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $20_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
      }
      $14_1 = (($14_1 + $2_1 | 0) - ((Math_imul($14_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
      $15_1 = $18_1 + ((Math_imul($15_1 - ($18_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
      $18_1 = $15_1 & 255 | 0;
      $16_1 = $19_1 + ((Math_imul($16_1 - ($19_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
      $19_1 = $16_1 & 255 | 0;
      $17_1 = $20_1 + ((Math_imul($17_1 - ($20_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
      $20_1 = $17_1 & 255 | 0;
      label$97 : {
       switch ($12_1 | 0) {
       case 0:
        HEAP8[$7_1 >> 0] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        break label$91;
       case 1:
        HEAP16[$7_1 >> 1] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        break label$91;
       case 2:
        HEAP8[($7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
        HEAP8[($7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
        HEAP8[($7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $15_1;
        break label$91;
       case 3:
        break label$97;
       default:
        break label$91;
       };
      }
      HEAP32[$7_1 >> 2] = ($19_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
     }
     $14_1 = $13_1 + -1 | 0;
     $7_1 = $7_1 + $11_1 | 0;
     $10_1 = $10_1 + 1 | 0;
     label$101 : {
      label$102 : {
       if (($13_1 | 0) <= (1 | 0)) {
        break label$102
       }
       $13_1 = $14_1;
       break label$101;
      }
      $7_1 = $7_1 + $4_1 | 0;
      $10_1 = $10_1 + $5_1 | 0;
      if ($1_1) {
       continue label$2
      }
      break label$1;
     }
     $14_1 = 0;
     continue label$12;
    };
   };
  }
 }
 
 function $610($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $9_1 = 0, $2_1 = 0, $1_1 = 0, $8_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $6_1 = $5_1 & 7 | 0;
   $7_1 = ($5_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $5_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $8_1 = $7_1;
    label$3 : {
     label$4 : {
      switch ($6_1 | 0) {
      default:
       $9_1 = 0;
       break label$3;
      case 1:
       $9_1 = 7;
       break label$3;
      case 2:
       $9_1 = 6;
       break label$3;
      case 3:
       $9_1 = 5;
       break label$3;
      case 4:
       $9_1 = 4;
       break label$3;
      case 5:
       $9_1 = 3;
       break label$3;
      case 6:
       $9_1 = 2;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $9_1 = 1;
    }
    label$12 : while (1) {
     label$13 : {
      switch ($9_1 | 0) {
      case 0:
       HEAP8[$0_1 >> 0] = HEAPU8[($2_1 + (HEAPU8[$5_1 >> 0] | 0) | 0) >> 0] | 0;
       $5_1 = $5_1 + 1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $9_1 = 1;
       continue label$12;
      case 1:
       HEAP8[$0_1 >> 0] = HEAPU8[($2_1 + (HEAPU8[$5_1 >> 0] | 0) | 0) >> 0] | 0;
       $5_1 = $5_1 + 1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $9_1 = 2;
       continue label$12;
      case 2:
       HEAP8[$0_1 >> 0] = HEAPU8[($2_1 + (HEAPU8[$5_1 >> 0] | 0) | 0) >> 0] | 0;
       $5_1 = $5_1 + 1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $9_1 = 3;
       continue label$12;
      case 3:
       HEAP8[$0_1 >> 0] = HEAPU8[($2_1 + (HEAPU8[$5_1 >> 0] | 0) | 0) >> 0] | 0;
       $5_1 = $5_1 + 1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $9_1 = 4;
       continue label$12;
      case 4:
       HEAP8[$0_1 >> 0] = HEAPU8[($2_1 + (HEAPU8[$5_1 >> 0] | 0) | 0) >> 0] | 0;
       $5_1 = $5_1 + 1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $9_1 = 5;
       continue label$12;
      case 5:
       HEAP8[$0_1 >> 0] = HEAPU8[($2_1 + (HEAPU8[$5_1 >> 0] | 0) | 0) >> 0] | 0;
       $5_1 = $5_1 + 1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $9_1 = 6;
       continue label$12;
      case 6:
       HEAP8[$0_1 >> 0] = HEAPU8[($2_1 + (HEAPU8[$5_1 >> 0] | 0) | 0) >> 0] | 0;
       $5_1 = $5_1 + 1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $9_1 = 7;
       continue label$12;
      default:
       break label$13;
      };
     }
     HEAP8[$0_1 >> 0] = HEAPU8[($2_1 + (HEAPU8[$5_1 >> 0] | 0) | 0) >> 0] | 0;
     $9_1 = $8_1 + -1 | 0;
     $5_1 = $5_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     label$21 : {
      label$22 : {
       if (($8_1 | 0) <= (1 | 0)) {
        break label$22
       }
       $8_1 = $9_1;
       break label$21;
      }
      $0_1 = $0_1 + $3_1 | 0;
      $5_1 = $5_1 + $4_1 | 0;
      if ($1_1) {
       continue label$2
      }
      break label$1;
     }
     $9_1 = 0;
     continue label$12;
    };
   };
  }
 }
 
 function $611($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $9_1 = 0, $2_1 = 0, $1_1 = 0, $8_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $6_1 = $5_1 & 7 | 0;
   $7_1 = ($5_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $5_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $8_1 = $7_1;
    label$3 : {
     label$4 : {
      switch ($6_1 | 0) {
      default:
       $9_1 = 0;
       break label$3;
      case 1:
       $9_1 = 7;
       break label$3;
      case 2:
       $9_1 = 6;
       break label$3;
      case 3:
       $9_1 = 5;
       break label$3;
      case 4:
       $9_1 = 4;
       break label$3;
      case 5:
       $9_1 = 3;
       break label$3;
      case 6:
       $9_1 = 2;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $9_1 = 1;
    }
    label$12 : while (1) {
     label$13 : {
      switch ($9_1 | 0) {
      case 0:
       HEAP16[$0_1 >> 1] = HEAPU16[($2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 1 | 0) | 0) >> 1] | 0;
       $0_1 = $0_1 + 2 | 0;
       $5_1 = $5_1 + 1 | 0;
       $9_1 = 1;
       continue label$12;
      case 1:
       HEAP16[$0_1 >> 1] = HEAPU16[($2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 1 | 0) | 0) >> 1] | 0;
       $0_1 = $0_1 + 2 | 0;
       $5_1 = $5_1 + 1 | 0;
       $9_1 = 2;
       continue label$12;
      case 2:
       HEAP16[$0_1 >> 1] = HEAPU16[($2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 1 | 0) | 0) >> 1] | 0;
       $0_1 = $0_1 + 2 | 0;
       $5_1 = $5_1 + 1 | 0;
       $9_1 = 3;
       continue label$12;
      case 3:
       HEAP16[$0_1 >> 1] = HEAPU16[($2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 1 | 0) | 0) >> 1] | 0;
       $0_1 = $0_1 + 2 | 0;
       $5_1 = $5_1 + 1 | 0;
       $9_1 = 4;
       continue label$12;
      case 4:
       HEAP16[$0_1 >> 1] = HEAPU16[($2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 1 | 0) | 0) >> 1] | 0;
       $0_1 = $0_1 + 2 | 0;
       $5_1 = $5_1 + 1 | 0;
       $9_1 = 5;
       continue label$12;
      case 5:
       HEAP16[$0_1 >> 1] = HEAPU16[($2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 1 | 0) | 0) >> 1] | 0;
       $0_1 = $0_1 + 2 | 0;
       $5_1 = $5_1 + 1 | 0;
       $9_1 = 6;
       continue label$12;
      case 6:
       HEAP16[$0_1 >> 1] = HEAPU16[($2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 1 | 0) | 0) >> 1] | 0;
       $0_1 = $0_1 + 2 | 0;
       $5_1 = $5_1 + 1 | 0;
       $9_1 = 7;
       continue label$12;
      default:
       break label$13;
      };
     }
     HEAP16[$0_1 >> 1] = HEAPU16[($2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 1 | 0) | 0) >> 1] | 0;
     $9_1 = $8_1 + -1 | 0;
     $0_1 = $0_1 + 2 | 0;
     $5_1 = $5_1 + 1 | 0;
     label$21 : {
      label$22 : {
       if (($8_1 | 0) <= (1 | 0)) {
        break label$22
       }
       $8_1 = $9_1;
       break label$21;
      }
      $0_1 = $0_1 + $3_1 | 0;
      $5_1 = $5_1 + $4_1 | 0;
      if ($1_1) {
       continue label$2
      }
      break label$1;
     }
     $9_1 = 0;
     continue label$12;
    };
   };
  }
 }
 
 function $612($0_1) {
  $0_1 = $0_1 | 0;
  var $9_1 = 0, $5_1 = 0, $2_1 = 0, $1_1 = 0, $8_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $6_1 = $5_1 & 7 | 0;
   $7_1 = ($5_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $5_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $8_1 = $7_1;
    label$3 : {
     label$4 : {
      switch ($6_1 | 0) {
      default:
       $9_1 = 0;
       break label$3;
      case 1:
       $9_1 = 7;
       break label$3;
      case 2:
       $9_1 = 6;
       break label$3;
      case 3:
       $9_1 = 5;
       break label$3;
      case 4:
       $9_1 = 4;
       break label$3;
      case 5:
       $9_1 = 3;
       break label$3;
      case 6:
       $9_1 = 2;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $9_1 = 1;
    }
    label$12 : while (1) {
     label$13 : {
      switch ($9_1 | 0) {
      case 0:
       $9_1 = $2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0;
       HEAP8[$0_1 >> 0] = HEAPU8[$9_1 >> 0] | 0;
       HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + 1 | 0) >> 0] | 0;
       HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + 2 | 0) >> 0] | 0;
       $0_1 = $0_1 + 3 | 0;
       $5_1 = $5_1 + 1 | 0;
       $9_1 = 1;
       continue label$12;
      case 1:
       $9_1 = $2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0;
       HEAP8[$0_1 >> 0] = HEAPU8[$9_1 >> 0] | 0;
       HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + 1 | 0) >> 0] | 0;
       HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + 2 | 0) >> 0] | 0;
       $0_1 = $0_1 + 3 | 0;
       $5_1 = $5_1 + 1 | 0;
       $9_1 = 2;
       continue label$12;
      case 2:
       $9_1 = $2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0;
       HEAP8[$0_1 >> 0] = HEAPU8[$9_1 >> 0] | 0;
       HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + 1 | 0) >> 0] | 0;
       HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + 2 | 0) >> 0] | 0;
       $0_1 = $0_1 + 3 | 0;
       $5_1 = $5_1 + 1 | 0;
       $9_1 = 3;
       continue label$12;
      case 3:
       $9_1 = $2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0;
       HEAP8[$0_1 >> 0] = HEAPU8[$9_1 >> 0] | 0;
       HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + 1 | 0) >> 0] | 0;
       HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + 2 | 0) >> 0] | 0;
       $0_1 = $0_1 + 3 | 0;
       $5_1 = $5_1 + 1 | 0;
       $9_1 = 4;
       continue label$12;
      case 4:
       $9_1 = $2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0;
       HEAP8[$0_1 >> 0] = HEAPU8[$9_1 >> 0] | 0;
       HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + 1 | 0) >> 0] | 0;
       HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + 2 | 0) >> 0] | 0;
       $0_1 = $0_1 + 3 | 0;
       $5_1 = $5_1 + 1 | 0;
       $9_1 = 5;
       continue label$12;
      case 5:
       $9_1 = $2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0;
       HEAP8[$0_1 >> 0] = HEAPU8[$9_1 >> 0] | 0;
       HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + 1 | 0) >> 0] | 0;
       HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + 2 | 0) >> 0] | 0;
       $0_1 = $0_1 + 3 | 0;
       $5_1 = $5_1 + 1 | 0;
       $9_1 = 6;
       continue label$12;
      case 6:
       $9_1 = $2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0;
       HEAP8[$0_1 >> 0] = HEAPU8[$9_1 >> 0] | 0;
       HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + 1 | 0) >> 0] | 0;
       HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + 2 | 0) >> 0] | 0;
       $0_1 = $0_1 + 3 | 0;
       $5_1 = $5_1 + 1 | 0;
       $9_1 = 7;
       continue label$12;
      default:
       break label$13;
      };
     }
     $9_1 = $2_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0;
     HEAP8[$0_1 >> 0] = HEAPU8[$9_1 >> 0] | 0;
     HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + 1 | 0) >> 0] | 0;
     HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + 2 | 0) >> 0] | 0;
     $9_1 = $8_1 + -1 | 0;
     $0_1 = $0_1 + 3 | 0;
     $5_1 = $5_1 + 1 | 0;
     label$21 : {
      label$22 : {
       if (($8_1 | 0) <= (1 | 0)) {
        break label$22
       }
       $8_1 = $9_1;
       break label$21;
      }
      $0_1 = $0_1 + $3_1 | 0;
      $5_1 = $5_1 + $4_1 | 0;
      if ($1_1) {
       continue label$2
      }
      break label$1;
     }
     $9_1 = 0;
     continue label$12;
    };
   };
  }
 }
 
 function $613($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $1_1 = 0, $3_1 = 0, $2_1 = 0, $9_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) / (4 | 0) | 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $6_1 = $5_1 & 7 | 0;
   $7_1 = ($5_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $5_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $8_1 = $1_1 << 2 | 0;
   label$2 : while (1) {
    $2_1 = $2_1 + -1 | 0;
    $9_1 = $7_1;
    label$3 : {
     label$4 : {
      switch ($6_1 | 0) {
      default:
       $1_1 = 0;
       break label$3;
      case 1:
       $1_1 = 7;
       break label$3;
      case 2:
       $1_1 = 6;
       break label$3;
      case 3:
       $1_1 = 5;
       break label$3;
      case 4:
       $1_1 = 4;
       break label$3;
      case 5:
       $1_1 = 3;
       break label$3;
      case 6:
       $1_1 = 2;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $1_1 = 1;
    }
    label$12 : while (1) {
     label$13 : {
      switch ($1_1 | 0) {
      case 0:
       HEAP32[$0_1 >> 2] = HEAP32[($3_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
       $0_1 = $0_1 + 4 | 0;
       $5_1 = $5_1 + 1 | 0;
       $1_1 = 1;
       continue label$12;
      case 1:
       HEAP32[$0_1 >> 2] = HEAP32[($3_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
       $0_1 = $0_1 + 4 | 0;
       $5_1 = $5_1 + 1 | 0;
       $1_1 = 2;
       continue label$12;
      case 2:
       HEAP32[$0_1 >> 2] = HEAP32[($3_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
       $0_1 = $0_1 + 4 | 0;
       $5_1 = $5_1 + 1 | 0;
       $1_1 = 3;
       continue label$12;
      case 3:
       HEAP32[$0_1 >> 2] = HEAP32[($3_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
       $0_1 = $0_1 + 4 | 0;
       $5_1 = $5_1 + 1 | 0;
       $1_1 = 4;
       continue label$12;
      case 4:
       HEAP32[$0_1 >> 2] = HEAP32[($3_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
       $0_1 = $0_1 + 4 | 0;
       $5_1 = $5_1 + 1 | 0;
       $1_1 = 5;
       continue label$12;
      case 5:
       HEAP32[$0_1 >> 2] = HEAP32[($3_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
       $0_1 = $0_1 + 4 | 0;
       $5_1 = $5_1 + 1 | 0;
       $1_1 = 6;
       continue label$12;
      case 6:
       HEAP32[$0_1 >> 2] = HEAP32[($3_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
       $0_1 = $0_1 + 4 | 0;
       $5_1 = $5_1 + 1 | 0;
       $1_1 = 7;
       continue label$12;
      default:
       break label$13;
      };
     }
     HEAP32[$0_1 >> 2] = HEAP32[($3_1 + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
     $1_1 = $9_1 + -1 | 0;
     $0_1 = $0_1 + 4 | 0;
     $5_1 = $5_1 + 1 | 0;
     label$21 : {
      label$22 : {
       if (($9_1 | 0) <= (1 | 0)) {
        break label$22
       }
       $9_1 = $1_1;
       break label$21;
      }
      $5_1 = $5_1 + $4_1 | 0;
      $0_1 = $0_1 + $8_1 | 0;
      if ($2_1) {
       continue label$2
      }
      break label$1;
     }
     $1_1 = 0;
     continue label$12;
    };
   };
  }
 }
 
 function $614($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $1_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0, $9_1 = 0, $2_1 = 0, $4_1 = 0;
  $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $8_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$2
    }
    if (!$6_1) {
     break label$1
    }
    $9_1 = $7_1 & 7 | 0;
    $7_1 = ($7_1 + 7 | 0 | 0) / (8 | 0) | 0;
    label$3 : while (1) {
     $6_1 = $6_1 + -1 | 0;
     $10_1 = $7_1;
     label$4 : {
      label$5 : {
       switch ($9_1 | 0) {
       default:
        $0_1 = 0;
        break label$4;
       case 1:
        $0_1 = 7;
        break label$4;
       case 2:
        $0_1 = 6;
        break label$4;
       case 3:
        $0_1 = 5;
        break label$4;
       case 4:
        $0_1 = 4;
        break label$4;
       case 5:
        $0_1 = 3;
        break label$4;
       case 6:
        $0_1 = 2;
        break label$4;
       case 7:
        break label$5;
       };
      }
      $0_1 = 1;
     }
     label$13 : while (1) {
      label$14 : {
       switch ($0_1 | 0) {
       case 0:
        label$22 : {
         $0_1 = HEAPU8[$5_1 >> 0] | 0;
         if (($1_1 | 0) == ($0_1 | 0)) {
          break label$22
         }
         HEAP8[$3_1 >> 0] = HEAPU8[($8_1 + $0_1 | 0) >> 0] | 0;
        }
        $5_1 = $5_1 + 1 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 1;
        continue label$13;
       case 1:
        label$23 : {
         $0_1 = HEAPU8[$5_1 >> 0] | 0;
         if (($1_1 | 0) == ($0_1 | 0)) {
          break label$23
         }
         HEAP8[$3_1 >> 0] = HEAPU8[($8_1 + $0_1 | 0) >> 0] | 0;
        }
        $5_1 = $5_1 + 1 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 2;
        continue label$13;
       case 2:
        label$24 : {
         $0_1 = HEAPU8[$5_1 >> 0] | 0;
         if (($1_1 | 0) == ($0_1 | 0)) {
          break label$24
         }
         HEAP8[$3_1 >> 0] = HEAPU8[($8_1 + $0_1 | 0) >> 0] | 0;
        }
        $5_1 = $5_1 + 1 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 3;
        continue label$13;
       case 3:
        label$25 : {
         $0_1 = HEAPU8[$5_1 >> 0] | 0;
         if (($1_1 | 0) == ($0_1 | 0)) {
          break label$25
         }
         HEAP8[$3_1 >> 0] = HEAPU8[($8_1 + $0_1 | 0) >> 0] | 0;
        }
        $5_1 = $5_1 + 1 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 4;
        continue label$13;
       case 4:
        label$26 : {
         $0_1 = HEAPU8[$5_1 >> 0] | 0;
         if (($1_1 | 0) == ($0_1 | 0)) {
          break label$26
         }
         HEAP8[$3_1 >> 0] = HEAPU8[($8_1 + $0_1 | 0) >> 0] | 0;
        }
        $5_1 = $5_1 + 1 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 5;
        continue label$13;
       case 5:
        label$27 : {
         $0_1 = HEAPU8[$5_1 >> 0] | 0;
         if (($1_1 | 0) == ($0_1 | 0)) {
          break label$27
         }
         HEAP8[$3_1 >> 0] = HEAPU8[($8_1 + $0_1 | 0) >> 0] | 0;
        }
        $5_1 = $5_1 + 1 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 6;
        continue label$13;
       case 6:
        label$28 : {
         $0_1 = HEAPU8[$5_1 >> 0] | 0;
         if (($1_1 | 0) == ($0_1 | 0)) {
          break label$28
         }
         HEAP8[$3_1 >> 0] = HEAPU8[($8_1 + $0_1 | 0) >> 0] | 0;
        }
        $5_1 = $5_1 + 1 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 7;
        continue label$13;
       default:
        break label$14;
       };
      }
      label$29 : {
       $0_1 = HEAPU8[$5_1 >> 0] | 0;
       if (($1_1 | 0) == ($0_1 | 0)) {
        break label$29
       }
       HEAP8[$3_1 >> 0] = HEAPU8[($8_1 + $0_1 | 0) >> 0] | 0;
      }
      $0_1 = $10_1 + -1 | 0;
      $5_1 = $5_1 + 1 | 0;
      $3_1 = $3_1 + 1 | 0;
      label$30 : {
       label$31 : {
        if (($10_1 | 0) <= (1 | 0)) {
         break label$31
        }
        $10_1 = $0_1;
        break label$30;
       }
       $3_1 = $3_1 + $2_1 | 0;
       $5_1 = $5_1 + $4_1 | 0;
       if ($6_1) {
        continue label$3
       }
       break label$1;
      }
      $0_1 = 0;
      continue label$13;
     };
    };
   }
   if (!$6_1) {
    break label$1
   }
   $10_1 = $7_1 & 7 | 0;
   $9_1 = ($7_1 + 7 | 0 | 0) / (8 | 0) | 0;
   label$32 : while (1) {
    $6_1 = $6_1 + -1 | 0;
    $8_1 = $9_1;
    label$33 : {
     label$34 : {
      switch ($10_1 | 0) {
      default:
       $0_1 = 0;
       break label$33;
      case 1:
       $0_1 = 7;
       break label$33;
      case 2:
       $0_1 = 6;
       break label$33;
      case 3:
       $0_1 = 5;
       break label$33;
      case 4:
       $0_1 = 4;
       break label$33;
      case 5:
       $0_1 = 3;
       break label$33;
      case 6:
       $0_1 = 2;
       break label$33;
      case 7:
       break label$34;
      };
     }
     $0_1 = 1;
    }
    label$42 : while (1) {
     label$43 : {
      switch ($0_1 | 0) {
      case 0:
       label$51 : {
        $0_1 = HEAPU8[$5_1 >> 0] | 0;
        if (($1_1 | 0) == ($0_1 | 0)) {
         break label$51
        }
        HEAP8[$3_1 >> 0] = $0_1;
       }
       $5_1 = $5_1 + 1 | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 1;
       continue label$42;
      case 1:
       label$52 : {
        $0_1 = HEAPU8[$5_1 >> 0] | 0;
        if (($1_1 | 0) == ($0_1 | 0)) {
         break label$52
        }
        HEAP8[$3_1 >> 0] = $0_1;
       }
       $5_1 = $5_1 + 1 | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 2;
       continue label$42;
      case 2:
       label$53 : {
        $0_1 = HEAPU8[$5_1 >> 0] | 0;
        if (($1_1 | 0) == ($0_1 | 0)) {
         break label$53
        }
        HEAP8[$3_1 >> 0] = $0_1;
       }
       $5_1 = $5_1 + 1 | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 3;
       continue label$42;
      case 3:
       label$54 : {
        $0_1 = HEAPU8[$5_1 >> 0] | 0;
        if (($1_1 | 0) == ($0_1 | 0)) {
         break label$54
        }
        HEAP8[$3_1 >> 0] = $0_1;
       }
       $5_1 = $5_1 + 1 | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 4;
       continue label$42;
      case 4:
       label$55 : {
        $0_1 = HEAPU8[$5_1 >> 0] | 0;
        if (($1_1 | 0) == ($0_1 | 0)) {
         break label$55
        }
        HEAP8[$3_1 >> 0] = $0_1;
       }
       $5_1 = $5_1 + 1 | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 5;
       continue label$42;
      case 5:
       label$56 : {
        $0_1 = HEAPU8[$5_1 >> 0] | 0;
        if (($1_1 | 0) == ($0_1 | 0)) {
         break label$56
        }
        HEAP8[$3_1 >> 0] = $0_1;
       }
       $5_1 = $5_1 + 1 | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 6;
       continue label$42;
      case 6:
       label$57 : {
        $0_1 = HEAPU8[$5_1 >> 0] | 0;
        if (($1_1 | 0) == ($0_1 | 0)) {
         break label$57
        }
        HEAP8[$3_1 >> 0] = $0_1;
       }
       $5_1 = $5_1 + 1 | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 7;
       continue label$42;
      default:
       break label$43;
      };
     }
     label$58 : {
      $0_1 = HEAPU8[$5_1 >> 0] | 0;
      if (($1_1 | 0) == ($0_1 | 0)) {
       break label$58
      }
      HEAP8[$3_1 >> 0] = $0_1;
     }
     $0_1 = $8_1 + -1 | 0;
     $5_1 = $5_1 + 1 | 0;
     $3_1 = $3_1 + 1 | 0;
     label$59 : {
      label$60 : {
       if (($8_1 | 0) <= (1 | 0)) {
        break label$60
       }
       $8_1 = $0_1;
       break label$59;
      }
      $3_1 = $3_1 + $2_1 | 0;
      $5_1 = $5_1 + $4_1 | 0;
      if ($6_1) {
       continue label$32
      }
      break label$1;
     }
     $0_1 = 0;
     continue label$42;
    };
   };
  }
 }
 
 function $615($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0, $10_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $7_1 = $6_1 & 7 | 0;
   $8_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $9_1 = $1_1 << 1 | 0;
   label$2 : while (1) {
    $2_1 = $2_1 + -1 | 0;
    $10_1 = $8_1;
    label$3 : {
     label$4 : {
      switch ($7_1 | 0) {
      default:
       $1_1 = 0;
       break label$3;
      case 1:
       $1_1 = 7;
       break label$3;
      case 2:
       $1_1 = 6;
       break label$3;
      case 3:
       $1_1 = 5;
       break label$3;
      case 4:
       $1_1 = 4;
       break label$3;
      case 5:
       $1_1 = 3;
       break label$3;
      case 6:
       $1_1 = 2;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $1_1 = 1;
    }
    label$12 : while (1) {
     label$13 : {
      switch ($1_1 | 0) {
      case 0:
       label$21 : {
        $1_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$21
        }
        HEAP16[$0_1 >> 1] = HEAPU16[($4_1 + ($1_1 << 1 | 0) | 0) >> 1] | 0;
       }
       $0_1 = $0_1 + 2 | 0;
       $6_1 = $6_1 + 1 | 0;
       $1_1 = 1;
       continue label$12;
      case 1:
       label$22 : {
        $1_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$22
        }
        HEAP16[$0_1 >> 1] = HEAPU16[($4_1 + ($1_1 << 1 | 0) | 0) >> 1] | 0;
       }
       $0_1 = $0_1 + 2 | 0;
       $6_1 = $6_1 + 1 | 0;
       $1_1 = 2;
       continue label$12;
      case 2:
       label$23 : {
        $1_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$23
        }
        HEAP16[$0_1 >> 1] = HEAPU16[($4_1 + ($1_1 << 1 | 0) | 0) >> 1] | 0;
       }
       $0_1 = $0_1 + 2 | 0;
       $6_1 = $6_1 + 1 | 0;
       $1_1 = 3;
       continue label$12;
      case 3:
       label$24 : {
        $1_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$24
        }
        HEAP16[$0_1 >> 1] = HEAPU16[($4_1 + ($1_1 << 1 | 0) | 0) >> 1] | 0;
       }
       $0_1 = $0_1 + 2 | 0;
       $6_1 = $6_1 + 1 | 0;
       $1_1 = 4;
       continue label$12;
      case 4:
       label$25 : {
        $1_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$25
        }
        HEAP16[$0_1 >> 1] = HEAPU16[($4_1 + ($1_1 << 1 | 0) | 0) >> 1] | 0;
       }
       $0_1 = $0_1 + 2 | 0;
       $6_1 = $6_1 + 1 | 0;
       $1_1 = 5;
       continue label$12;
      case 5:
       label$26 : {
        $1_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$26
        }
        HEAP16[$0_1 >> 1] = HEAPU16[($4_1 + ($1_1 << 1 | 0) | 0) >> 1] | 0;
       }
       $0_1 = $0_1 + 2 | 0;
       $6_1 = $6_1 + 1 | 0;
       $1_1 = 6;
       continue label$12;
      case 6:
       label$27 : {
        $1_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$27
        }
        HEAP16[$0_1 >> 1] = HEAPU16[($4_1 + ($1_1 << 1 | 0) | 0) >> 1] | 0;
       }
       $0_1 = $0_1 + 2 | 0;
       $6_1 = $6_1 + 1 | 0;
       $1_1 = 7;
       continue label$12;
      default:
       break label$13;
      };
     }
     label$28 : {
      $1_1 = HEAPU8[$6_1 >> 0] | 0;
      if (($3_1 | 0) == ($1_1 | 0)) {
       break label$28
      }
      HEAP16[$0_1 >> 1] = HEAPU16[($4_1 + ($1_1 << 1 | 0) | 0) >> 1] | 0;
     }
     $1_1 = $10_1 + -1 | 0;
     $0_1 = $0_1 + 2 | 0;
     $6_1 = $6_1 + 1 | 0;
     label$29 : {
      label$30 : {
       if (($10_1 | 0) <= (1 | 0)) {
        break label$30
       }
       $10_1 = $1_1;
       break label$29;
      }
      $6_1 = $6_1 + $5_1 | 0;
      $0_1 = $0_1 + $9_1 | 0;
      if ($2_1) {
       continue label$2
      }
      break label$1;
     }
     $1_1 = 0;
     continue label$12;
    };
   };
  }
 }
 
 function $616($0_1) {
  $0_1 = $0_1 | 0;
  var $10_1 = 0, $6_1 = 0, $2_1 = 0, $3_1 = 0, $1_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $7_1 = $6_1 & 7 | 0;
   $8_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $9_1 = $8_1;
    label$3 : {
     label$4 : {
      switch ($7_1 | 0) {
      default:
       $10_1 = 0;
       break label$3;
      case 1:
       $10_1 = 7;
       break label$3;
      case 2:
       $10_1 = 6;
       break label$3;
      case 3:
       $10_1 = 5;
       break label$3;
      case 4:
       $10_1 = 4;
       break label$3;
      case 5:
       $10_1 = 3;
       break label$3;
      case 6:
       $10_1 = 2;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $10_1 = 1;
    }
    label$12 : while (1) {
     label$13 : {
      switch ($10_1 | 0) {
      case 0:
       label$21 : {
        $10_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($2_1 | 0) == ($10_1 | 0)) {
         break label$21
        }
        $10_1 = $3_1 + ($10_1 << 2 | 0) | 0;
        HEAP8[$0_1 >> 0] = HEAPU8[$10_1 >> 0] | 0;
        HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($10_1 + 1 | 0) >> 0] | 0;
        HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($10_1 + 2 | 0) >> 0] | 0;
       }
       $0_1 = $0_1 + 3 | 0;
       $6_1 = $6_1 + 1 | 0;
       $10_1 = 1;
       continue label$12;
      case 1:
       label$22 : {
        $10_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($2_1 | 0) == ($10_1 | 0)) {
         break label$22
        }
        $10_1 = $3_1 + ($10_1 << 2 | 0) | 0;
        HEAP8[$0_1 >> 0] = HEAPU8[$10_1 >> 0] | 0;
        HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($10_1 + 1 | 0) >> 0] | 0;
        HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($10_1 + 2 | 0) >> 0] | 0;
       }
       $0_1 = $0_1 + 3 | 0;
       $6_1 = $6_1 + 1 | 0;
       $10_1 = 2;
       continue label$12;
      case 2:
       label$23 : {
        $10_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($2_1 | 0) == ($10_1 | 0)) {
         break label$23
        }
        $10_1 = $3_1 + ($10_1 << 2 | 0) | 0;
        HEAP8[$0_1 >> 0] = HEAPU8[$10_1 >> 0] | 0;
        HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($10_1 + 1 | 0) >> 0] | 0;
        HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($10_1 + 2 | 0) >> 0] | 0;
       }
       $0_1 = $0_1 + 3 | 0;
       $6_1 = $6_1 + 1 | 0;
       $10_1 = 3;
       continue label$12;
      case 3:
       label$24 : {
        $10_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($2_1 | 0) == ($10_1 | 0)) {
         break label$24
        }
        $10_1 = $3_1 + ($10_1 << 2 | 0) | 0;
        HEAP8[$0_1 >> 0] = HEAPU8[$10_1 >> 0] | 0;
        HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($10_1 + 1 | 0) >> 0] | 0;
        HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($10_1 + 2 | 0) >> 0] | 0;
       }
       $0_1 = $0_1 + 3 | 0;
       $6_1 = $6_1 + 1 | 0;
       $10_1 = 4;
       continue label$12;
      case 4:
       label$25 : {
        $10_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($2_1 | 0) == ($10_1 | 0)) {
         break label$25
        }
        $10_1 = $3_1 + ($10_1 << 2 | 0) | 0;
        HEAP8[$0_1 >> 0] = HEAPU8[$10_1 >> 0] | 0;
        HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($10_1 + 1 | 0) >> 0] | 0;
        HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($10_1 + 2 | 0) >> 0] | 0;
       }
       $0_1 = $0_1 + 3 | 0;
       $6_1 = $6_1 + 1 | 0;
       $10_1 = 5;
       continue label$12;
      case 5:
       label$26 : {
        $10_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($2_1 | 0) == ($10_1 | 0)) {
         break label$26
        }
        $10_1 = $3_1 + ($10_1 << 2 | 0) | 0;
        HEAP8[$0_1 >> 0] = HEAPU8[$10_1 >> 0] | 0;
        HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($10_1 + 1 | 0) >> 0] | 0;
        HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($10_1 + 2 | 0) >> 0] | 0;
       }
       $0_1 = $0_1 + 3 | 0;
       $6_1 = $6_1 + 1 | 0;
       $10_1 = 6;
       continue label$12;
      case 6:
       label$27 : {
        $10_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($2_1 | 0) == ($10_1 | 0)) {
         break label$27
        }
        $10_1 = $3_1 + ($10_1 << 2 | 0) | 0;
        HEAP8[$0_1 >> 0] = HEAPU8[$10_1 >> 0] | 0;
        HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($10_1 + 1 | 0) >> 0] | 0;
        HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($10_1 + 2 | 0) >> 0] | 0;
       }
       $0_1 = $0_1 + 3 | 0;
       $6_1 = $6_1 + 1 | 0;
       $10_1 = 7;
       continue label$12;
      default:
       break label$13;
      };
     }
     label$28 : {
      $10_1 = HEAPU8[$6_1 >> 0] | 0;
      if (($2_1 | 0) == ($10_1 | 0)) {
       break label$28
      }
      $10_1 = $3_1 + ($10_1 << 2 | 0) | 0;
      HEAP8[$0_1 >> 0] = HEAPU8[$10_1 >> 0] | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($10_1 + 1 | 0) >> 0] | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($10_1 + 2 | 0) >> 0] | 0;
     }
     $10_1 = $9_1 + -1 | 0;
     $0_1 = $0_1 + 3 | 0;
     $6_1 = $6_1 + 1 | 0;
     label$29 : {
      label$30 : {
       if (($9_1 | 0) <= (1 | 0)) {
        break label$30
       }
       $9_1 = $10_1;
       break label$29;
      }
      $0_1 = $0_1 + $4_1 | 0;
      $6_1 = $6_1 + $5_1 | 0;
      if ($1_1) {
       continue label$2
      }
      break label$1;
     }
     $10_1 = 0;
     continue label$12;
    };
   };
  }
 }
 
 function $617($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0, $10_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) / (4 | 0) | 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $7_1 = $6_1 & 7 | 0;
   $8_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $9_1 = $1_1 << 2 | 0;
   label$2 : while (1) {
    $2_1 = $2_1 + -1 | 0;
    $10_1 = $8_1;
    label$3 : {
     label$4 : {
      switch ($7_1 | 0) {
      default:
       $1_1 = 0;
       break label$3;
      case 1:
       $1_1 = 7;
       break label$3;
      case 2:
       $1_1 = 6;
       break label$3;
      case 3:
       $1_1 = 5;
       break label$3;
      case 4:
       $1_1 = 4;
       break label$3;
      case 5:
       $1_1 = 3;
       break label$3;
      case 6:
       $1_1 = 2;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $1_1 = 1;
    }
    label$12 : while (1) {
     label$13 : {
      switch ($1_1 | 0) {
      case 0:
       label$21 : {
        $1_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$21
        }
        HEAP32[$0_1 >> 2] = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
       }
       $0_1 = $0_1 + 4 | 0;
       $6_1 = $6_1 + 1 | 0;
       $1_1 = 1;
       continue label$12;
      case 1:
       label$22 : {
        $1_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$22
        }
        HEAP32[$0_1 >> 2] = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
       }
       $0_1 = $0_1 + 4 | 0;
       $6_1 = $6_1 + 1 | 0;
       $1_1 = 2;
       continue label$12;
      case 2:
       label$23 : {
        $1_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$23
        }
        HEAP32[$0_1 >> 2] = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
       }
       $0_1 = $0_1 + 4 | 0;
       $6_1 = $6_1 + 1 | 0;
       $1_1 = 3;
       continue label$12;
      case 3:
       label$24 : {
        $1_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$24
        }
        HEAP32[$0_1 >> 2] = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
       }
       $0_1 = $0_1 + 4 | 0;
       $6_1 = $6_1 + 1 | 0;
       $1_1 = 4;
       continue label$12;
      case 4:
       label$25 : {
        $1_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$25
        }
        HEAP32[$0_1 >> 2] = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
       }
       $0_1 = $0_1 + 4 | 0;
       $6_1 = $6_1 + 1 | 0;
       $1_1 = 5;
       continue label$12;
      case 5:
       label$26 : {
        $1_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$26
        }
        HEAP32[$0_1 >> 2] = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
       }
       $0_1 = $0_1 + 4 | 0;
       $6_1 = $6_1 + 1 | 0;
       $1_1 = 6;
       continue label$12;
      case 6:
       label$27 : {
        $1_1 = HEAPU8[$6_1 >> 0] | 0;
        if (($3_1 | 0) == ($1_1 | 0)) {
         break label$27
        }
        HEAP32[$0_1 >> 2] = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
       }
       $0_1 = $0_1 + 4 | 0;
       $6_1 = $6_1 + 1 | 0;
       $1_1 = 7;
       continue label$12;
      default:
       break label$13;
      };
     }
     label$28 : {
      $1_1 = HEAPU8[$6_1 >> 0] | 0;
      if (($3_1 | 0) == ($1_1 | 0)) {
       break label$28
      }
      HEAP32[$0_1 >> 2] = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
     }
     $1_1 = $10_1 + -1 | 0;
     $0_1 = $0_1 + 4 | 0;
     $6_1 = $6_1 + 1 | 0;
     label$29 : {
      label$30 : {
       if (($10_1 | 0) <= (1 | 0)) {
        break label$30
       }
       $10_1 = $1_1;
       break label$29;
      }
      $6_1 = $6_1 + $5_1 | 0;
      $0_1 = $0_1 + $9_1 | 0;
      if ($2_1) {
       continue label$2
      }
      break label$1;
     }
     $1_1 = 0;
     continue label$12;
    };
   };
  }
 }
 
 function $618($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $3_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + 4 | 0) >> 2] | 0;
  $0_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $4_1 = (HEAP32[($2_1 + 68 | 0) >> 2] | 0) & -28673 | 0;
       switch ($4_1 + -16 | 0 | 0) {
       case 1:
        break label$1;
       case 2:
        break label$3;
       case 0:
        break label$4;
       default:
        break label$5;
       };
      }
      if (($4_1 | 0) != (274 | 0)) {
       break label$1
      }
      if (HEAP32[($1_1 + 24 | 0) >> 2] | 0) {
       break label$1
      }
      if ((HEAPU8[($3_1 + 9 | 0) >> 0] | 0 | 0) == (1 | 0)) {
       break label$2
      }
      return 113 | 0;
     }
     $0_1 = 114;
     label$6 : {
      switch ((HEAPU8[($3_1 + 9 | 0) >> 0] | 0) + -1 | 0 | 0) {
      case 0:
       return (HEAP32[($3_1 + 4 | 0) >> 2] | 0 ? 115 : 114) | 0;
      case 1:
       if ((HEAPU8[($1_1 + 9 | 0) >> 0] | 0 | 0) != (4 | 0)) {
        break label$1
       }
       if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (-16777216 | 0)) {
        break label$1
       }
       if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != (65280 | 0)) {
        break label$1
       }
       label$9 : {
        label$10 : {
         if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) != (255 | 0)) {
          break label$10
         }
         if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == (31 | 0)) {
          break label$9
         }
        }
        if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != (255 | 0)) {
         break label$1
        }
        if ((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) != (31 | 0)) {
         break label$1
        }
       }
       $0_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       return (($0_1 | 0) == (2016 | 0) ? 116 : ($0_1 | 0) == (992 | 0) ? 117 : 114) | 0;
      case 3:
       break label$6;
      default:
       break label$1;
      };
     }
     label$11 : {
      $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
      if (($2_1 | 0) != ($4_1 | 0)) {
       break label$11
      }
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0)) {
       break label$11
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0)) {
       break label$11
      }
      if ((HEAPU8[($1_1 + 9 | 0) >> 0] | 0 | 0) != (4 | 0)) {
       break label$11
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (-16777216 | 0)) {
       break label$1
      }
      return 118 | 0;
     }
     if (($2_1 | 0) != (HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0)) {
      break label$1
     }
     if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0)) {
      break label$1
     }
     if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
      break label$1
     }
     if ((HEAPU8[($1_1 + 9 | 0) >> 0] | 0 | 0) != (4 | 0)) {
      break label$1
     }
     if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (-16777216 | 0)) {
      break label$1
     }
     return 119 | 0;
    }
    if (HEAP32[($1_1 + 24 | 0) >> 2] | 0) {
     break label$1
    }
    $0_1 = 120;
    label$12 : {
     switch ((HEAPU8[($3_1 + 9 | 0) >> 0] | 0) + -1 | 0 | 0) {
     case 0:
      return (HEAP32[($3_1 + 4 | 0) >> 2] | 0 ? 121 : 120) | 0;
     case 1:
      if (!(HEAP32[($2_1 + 4 | 0) >> 2] | 0)) {
       break label$1
      }
      $0_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
      return (($0_1 | 0) == (2016 | 0) ? 122 : ($0_1 | 0) == (992 | 0) ? 123 : 120) | 0;
     case 3:
      break label$12;
     default:
      break label$1;
     };
    }
    $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    if (($2_1 | 0) != (HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    if (($4_1 | 0) != (HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (($5_1 | 0) != (HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    if ((HEAPU8[($1_1 + 9 | 0) >> 0] | 0 | 0) != (4 | 0)) {
     break label$1
    }
    if (($4_1 | $2_1 | 0 | $5_1 | 0 | 0) != (16777215 | 0)) {
     break label$1
    }
    return 124 | 0;
   }
   $0_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0 ? 125 : 113;
  }
  return $0_1 | 0;
 }
 
 function $619($0_1) {
  $0_1 = $0_1 | 0;
  var $22_1 = 0, $16_1 = 0, $10_1 = 0, $20_1 = 0, $21_1 = 0, $6_1 = 0, $9_1 = 0, $2_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $14_1 = 0, $11_1 = 0, $13_1 = 0, $1_1 = 0, $3_1 = 0, $12_1 = 0, $15_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $7_1 = $6_1 & 3 | 0;
   $8_1 = ($6_1 + 3 | 0 | 0) / (4 | 0) | 0;
   $9_1 = HEAP32[$0_1 >> 2] | 0;
   $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   $11_1 = HEAPU8[($6_1 + 9 | 0) >> 0] | 0;
   $12_1 = $11_1 + -1 | 0;
   $0_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   $13_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
   $14_1 = $13_1 + -1 | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $15_1 = $8_1;
    label$3 : {
     label$4 : {
      switch ($7_1 | 0) {
      default:
       $16_1 = 3;
       break label$3;
      case 1:
       $16_1 = 2;
       break label$3;
      case 2:
       $16_1 = 1;
       break label$3;
      case 3:
       break label$4;
      };
     }
     $16_1 = 0;
    }
    label$8 : {
     label$9 : while (1) {
      label$10 : {
       switch ($16_1 | 0) {
       case 0:
        $16_1 = 0;
        label$14 : {
         label$15 : {
          switch ($12_1 | 0) {
          case 0:
           $16_1 = HEAPU8[$9_1 >> 0] | 0;
           break label$14;
          case 1:
           $16_1 = HEAPU16[$9_1 >> 1] | 0;
           break label$14;
          case 2:
           $16_1 = HEAPU8[$9_1 >> 0] | 0 | ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($9_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0;
           break label$14;
          case 3:
           break label$15;
          default:
           break label$14;
          };
         }
         $16_1 = HEAP32[$9_1 >> 2] | 0;
        }
        label$19 : {
         if (!$2_1) {
          break label$19
         }
         if (($16_1 | 0) == ($3_1 | 0)) {
          break label$19
         }
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($6_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($6_1 + 20 | 0) >> 2] | 0) & $16_1 | 0) >>> (HEAPU8[($6_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($6_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($6_1 + 16 | 0) >> 2] | 0) & $16_1 | 0) >>> (HEAPU8[($6_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($6_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($6_1 + 12 | 0) >> 2] | 0) & $16_1 | 0) >>> (HEAPU8[($6_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $16_1 = 0;
         $20_1 = 0;
         $21_1 = 0;
         $22_1 = 0;
         label$20 : {
          label$21 : {
           switch ($14_1 | 0) {
           case 0:
            $22_1 = HEAPU8[$10_1 >> 0] | 0;
            $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $22_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$20;
           case 1:
            $22_1 = HEAPU16[$10_1 >> 1] | 0;
            $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $22_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$20;
           case 2:
            $20_1 = HEAPU8[($10_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[($10_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $22_1 = HEAPU8[($10_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $16_1 = 255;
            break label$20;
           case 3:
            break label$21;
           default:
            break label$20;
           };
          }
          $22_1 = HEAP32[$10_1 >> 2] | 0;
          $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $22_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         $16_1 = (($16_1 + $2_1 | 0) - ((Math_imul($16_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
         $17_1 = $20_1 + ((Math_imul($17_1 - ($20_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
         $20_1 = $17_1 & 255 | 0;
         $18_1 = $21_1 + ((Math_imul($18_1 - ($21_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
         $21_1 = $18_1 & 255 | 0;
         $19_1 = $22_1 + ((Math_imul($19_1 - ($22_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
         $22_1 = $19_1 & 255 | 0;
         label$25 : {
          switch ($14_1 | 0) {
          case 0:
           HEAP8[$10_1 >> 0] = ($21_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($22_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$19;
          case 1:
           HEAP16[$10_1 >> 1] = ($21_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($22_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$19;
          case 2:
           HEAP8[($10_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
           HEAP8[($10_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
           HEAP8[($10_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
           break label$19;
          case 3:
           break label$25;
          default:
           break label$19;
          };
         }
         HEAP32[$10_1 >> 2] = ($21_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($22_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $10_1 = $10_1 + $13_1 | 0;
        $9_1 = $9_1 + $11_1 | 0;
        $16_1 = 1;
        continue label$9;
       case 1:
        $16_1 = 0;
        label$29 : {
         label$30 : {
          switch ($12_1 | 0) {
          case 0:
           $16_1 = HEAPU8[$9_1 >> 0] | 0;
           break label$29;
          case 1:
           $16_1 = HEAPU16[$9_1 >> 1] | 0;
           break label$29;
          case 2:
           $16_1 = HEAPU8[$9_1 >> 0] | 0 | ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($9_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0;
           break label$29;
          case 3:
           break label$30;
          default:
           break label$29;
          };
         }
         $16_1 = HEAP32[$9_1 >> 2] | 0;
        }
        label$34 : {
         if (!$2_1) {
          break label$34
         }
         if (($16_1 | 0) == ($3_1 | 0)) {
          break label$34
         }
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($6_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($6_1 + 20 | 0) >> 2] | 0) & $16_1 | 0) >>> (HEAPU8[($6_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($6_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($6_1 + 16 | 0) >> 2] | 0) & $16_1 | 0) >>> (HEAPU8[($6_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($6_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($6_1 + 12 | 0) >> 2] | 0) & $16_1 | 0) >>> (HEAPU8[($6_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $16_1 = 0;
         $20_1 = 0;
         $21_1 = 0;
         $22_1 = 0;
         label$35 : {
          label$36 : {
           switch ($14_1 | 0) {
           case 0:
            $22_1 = HEAPU8[$10_1 >> 0] | 0;
            $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $22_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$35;
           case 1:
            $22_1 = HEAPU16[$10_1 >> 1] | 0;
            $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $22_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$35;
           case 2:
            $20_1 = HEAPU8[($10_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[($10_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $22_1 = HEAPU8[($10_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $16_1 = 255;
            break label$35;
           case 3:
            break label$36;
           default:
            break label$35;
           };
          }
          $22_1 = HEAP32[$10_1 >> 2] | 0;
          $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $22_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         $16_1 = (($16_1 + $2_1 | 0) - ((Math_imul($16_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
         $17_1 = $20_1 + ((Math_imul($17_1 - ($20_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
         $20_1 = $17_1 & 255 | 0;
         $18_1 = $21_1 + ((Math_imul($18_1 - ($21_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
         $21_1 = $18_1 & 255 | 0;
         $19_1 = $22_1 + ((Math_imul($19_1 - ($22_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
         $22_1 = $19_1 & 255 | 0;
         label$40 : {
          switch ($14_1 | 0) {
          case 0:
           HEAP8[$10_1 >> 0] = ($21_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($22_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$34;
          case 1:
           HEAP16[$10_1 >> 1] = ($21_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($22_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$34;
          case 2:
           HEAP8[($10_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
           HEAP8[($10_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
           HEAP8[($10_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
           break label$34;
          case 3:
           break label$40;
          default:
           break label$34;
          };
         }
         HEAP32[$10_1 >> 2] = ($21_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($22_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $10_1 = $10_1 + $13_1 | 0;
        $9_1 = $9_1 + $11_1 | 0;
        $16_1 = 2;
        continue label$9;
       case 2:
        $16_1 = 0;
        label$44 : {
         label$45 : {
          switch ($12_1 | 0) {
          case 0:
           $16_1 = HEAPU8[$9_1 >> 0] | 0;
           break label$44;
          case 1:
           $16_1 = HEAPU16[$9_1 >> 1] | 0;
           break label$44;
          case 2:
           $16_1 = HEAPU8[$9_1 >> 0] | 0 | ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($9_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0;
           break label$44;
          case 3:
           break label$45;
          default:
           break label$44;
          };
         }
         $16_1 = HEAP32[$9_1 >> 2] | 0;
        }
        label$49 : {
         if (!$2_1) {
          break label$49
         }
         if (($16_1 | 0) == ($3_1 | 0)) {
          break label$49
         }
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($6_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($6_1 + 20 | 0) >> 2] | 0) & $16_1 | 0) >>> (HEAPU8[($6_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($6_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($6_1 + 16 | 0) >> 2] | 0) & $16_1 | 0) >>> (HEAPU8[($6_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($6_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($6_1 + 12 | 0) >> 2] | 0) & $16_1 | 0) >>> (HEAPU8[($6_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $16_1 = 0;
         $20_1 = 0;
         $21_1 = 0;
         $22_1 = 0;
         label$50 : {
          label$51 : {
           switch ($14_1 | 0) {
           case 0:
            $22_1 = HEAPU8[$10_1 >> 0] | 0;
            $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $22_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$50;
           case 1:
            $22_1 = HEAPU16[$10_1 >> 1] | 0;
            $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $22_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$50;
           case 2:
            $20_1 = HEAPU8[($10_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[($10_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $22_1 = HEAPU8[($10_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $16_1 = 255;
            break label$50;
           case 3:
            break label$51;
           default:
            break label$50;
           };
          }
          $22_1 = HEAP32[$10_1 >> 2] | 0;
          $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $22_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         $16_1 = (($16_1 + $2_1 | 0) - ((Math_imul($16_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
         $17_1 = $20_1 + ((Math_imul($17_1 - ($20_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
         $20_1 = $17_1 & 255 | 0;
         $18_1 = $21_1 + ((Math_imul($18_1 - ($21_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
         $21_1 = $18_1 & 255 | 0;
         $19_1 = $22_1 + ((Math_imul($19_1 - ($22_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
         $22_1 = $19_1 & 255 | 0;
         label$55 : {
          switch ($14_1 | 0) {
          case 0:
           HEAP8[$10_1 >> 0] = ($21_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($22_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$49;
          case 1:
           HEAP16[$10_1 >> 1] = ($21_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($22_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$49;
          case 2:
           HEAP8[($10_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
           HEAP8[($10_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
           HEAP8[($10_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
           break label$49;
          case 3:
           break label$55;
          default:
           break label$49;
          };
         }
         HEAP32[$10_1 >> 2] = ($21_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($22_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $16_1 = $15_1 + -1 | 0;
        $10_1 = $10_1 + $13_1 | 0;
        $9_1 = $9_1 + $11_1 | 0;
        if (($15_1 | 0) <= (1 | 0)) {
         break label$8
        }
        $15_1 = $16_1;
        $16_1 = 3;
        continue label$9;
       default:
        break label$10;
       };
      }
      $16_1 = 0;
      label$59 : {
       label$60 : {
        switch ($12_1 | 0) {
        case 0:
         $16_1 = HEAPU8[$9_1 >> 0] | 0;
         break label$59;
        case 1:
         $16_1 = HEAPU16[$9_1 >> 1] | 0;
         break label$59;
        case 2:
         $16_1 = HEAPU8[$9_1 >> 0] | 0 | ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($9_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0;
         break label$59;
        case 3:
         break label$60;
        default:
         break label$59;
        };
       }
       $16_1 = HEAP32[$9_1 >> 2] | 0;
      }
      label$64 : {
       if (!$2_1) {
        break label$64
       }
       if (($16_1 | 0) == ($3_1 | 0)) {
        break label$64
       }
       $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($6_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($6_1 + 20 | 0) >> 2] | 0) & $16_1 | 0) >>> (HEAPU8[($6_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($6_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($6_1 + 16 | 0) >> 2] | 0) & $16_1 | 0) >>> (HEAPU8[($6_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($6_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($6_1 + 12 | 0) >> 2] | 0) & $16_1 | 0) >>> (HEAPU8[($6_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $16_1 = 0;
       $20_1 = 0;
       $21_1 = 0;
       $22_1 = 0;
       label$65 : {
        label$66 : {
         switch ($14_1 | 0) {
         case 0:
          $22_1 = HEAPU8[$10_1 >> 0] | 0;
          $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $22_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          break label$65;
         case 1:
          $22_1 = HEAPU16[$10_1 >> 1] | 0;
          $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $22_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          break label$65;
         case 2:
          $20_1 = HEAPU8[($10_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[($10_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $22_1 = HEAPU8[($10_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $16_1 = 255;
          break label$65;
         case 3:
          break label$66;
         default:
          break label$65;
         };
        }
        $22_1 = HEAP32[$10_1 >> 2] | 0;
        $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $22_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $22_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       }
       $16_1 = (($16_1 + $2_1 | 0) - ((Math_imul($16_1 & 255 | 0, $2_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
       $17_1 = $20_1 + ((Math_imul($17_1 - ($20_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
       $20_1 = $17_1 & 255 | 0;
       $18_1 = $21_1 + ((Math_imul($18_1 - ($21_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
       $21_1 = $18_1 & 255 | 0;
       $19_1 = $22_1 + ((Math_imul($19_1 - ($22_1 & 255 | 0) | 0, $2_1) | 0) / (255 | 0) | 0) | 0;
       $22_1 = $19_1 & 255 | 0;
       label$70 : {
        switch ($14_1 | 0) {
        case 0:
         HEAP8[$10_1 >> 0] = ($21_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($22_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$64;
        case 1:
         HEAP16[$10_1 >> 1] = ($21_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($22_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$64;
        case 2:
         HEAP8[($10_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
         HEAP8[($10_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
         HEAP8[($10_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
         break label$64;
        case 3:
         break label$70;
        default:
         break label$64;
        };
       }
       HEAP32[$10_1 >> 2] = ($21_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($22_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
      }
      $10_1 = $10_1 + $13_1 | 0;
      $9_1 = $9_1 + $11_1 | 0;
      $16_1 = 0;
      continue label$9;
     };
    }
    $10_1 = $10_1 + $4_1 | 0;
    $9_1 = $9_1 + $5_1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $620($0_1) {
  $0_1 = $0_1 | 0;
  var $21_1 = 0, $14_1 = 0, $4_1 = 0, $8_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $7_1 = 0, $18_1 = 0, $19_1 = 0, $12_1 = 0, $20_1 = 0, $9_1 = 0, $11_1 = 0, $1_1 = 0, $10_1 = 0, $13_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $5_1 = $4_1 & 3 | 0;
   $6_1 = ($4_1 + 3 | 0 | 0) / (4 | 0) | 0;
   $7_1 = HEAP32[$0_1 >> 2] | 0;
   $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   $9_1 = HEAPU8[($4_1 + 9 | 0) >> 0] | 0;
   $10_1 = $9_1 + -1 | 0;
   $0_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   $11_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
   $12_1 = $11_1 + -1 | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $13_1 = $6_1;
    label$3 : {
     label$4 : {
      switch ($5_1 | 0) {
      default:
       $14_1 = 3;
       break label$3;
      case 1:
       $14_1 = 2;
       break label$3;
      case 2:
       $14_1 = 1;
       break label$3;
      case 3:
       break label$4;
      };
     }
     $14_1 = 0;
    }
    label$8 : {
     label$9 : while (1) {
      label$10 : {
       switch ($14_1 | 0) {
       case 0:
        label$14 : {
         label$15 : {
          label$16 : {
           label$17 : {
            switch ($10_1 | 0) {
            case 0:
             $14_1 = HEAPU8[$7_1 >> 0] | 0;
             break label$16;
            case 1:
             $14_1 = HEAPU16[$7_1 >> 1] | 0;
             break label$16;
            case 2:
             $15_1 = $7_1 + ((HEAPU8[($4_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $16_1 = $7_1 + ((HEAPU8[($4_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $17_1 = $7_1 + ((HEAPU8[($4_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $14_1 = 255;
             break label$15;
            case 3:
             break label$17;
            default:
             break label$14;
            };
           }
           $14_1 = HEAP32[$7_1 >> 2] | 0;
          }
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($4_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($4_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($4_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($4_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 24 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          if (!$14_1) {
           break label$14
          }
         }
         $18_1 = HEAPU8[$15_1 >> 0] | 0;
         $19_1 = HEAPU8[$16_1 >> 0] | 0;
         $20_1 = HEAPU8[$17_1 >> 0] | 0;
         $15_1 = 0;
         $16_1 = 0;
         $17_1 = 0;
         $21_1 = 0;
         label$21 : {
          label$22 : {
           switch ($12_1 | 0) {
           case 0:
            $21_1 = HEAPU8[$8_1 >> 0] | 0;
            $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$21;
           case 1:
            $21_1 = HEAPU16[$8_1 >> 1] | 0;
            $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$21;
           case 2:
            $16_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $17_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $15_1 = 255;
            break label$21;
           case 3:
            break label$22;
           default:
            break label$21;
           };
          }
          $21_1 = HEAP32[$8_1 >> 2] | 0;
          $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         $15_1 = (($14_1 + $15_1 | 0) - ((Math_imul($14_1, $15_1 & 255 | 0) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
         $18_1 = $16_1 + ((Math_imul($18_1 - ($16_1 & 255 | 0) | 0, $14_1) | 0) / (255 | 0) | 0) | 0;
         $16_1 = $18_1 & 255 | 0;
         $19_1 = $17_1 + ((Math_imul($19_1 - ($17_1 & 255 | 0) | 0, $14_1) | 0) / (255 | 0) | 0) | 0;
         $17_1 = $19_1 & 255 | 0;
         $21_1 = $21_1 + ((Math_imul($20_1 - ($21_1 & 255 | 0) | 0, $14_1) | 0) / (255 | 0) | 0) | 0;
         $14_1 = $21_1 & 255 | 0;
         label$26 : {
          switch ($12_1 | 0) {
          case 0:
           HEAP8[$8_1 >> 0] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$14;
          case 1:
           HEAP16[$8_1 >> 1] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$14;
          case 2:
           HEAP8[($8_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
           HEAP8[($8_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
           HEAP8[($8_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
           break label$14;
          case 3:
           break label$26;
          default:
           break label$14;
          };
         }
         HEAP32[$8_1 >> 2] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $8_1 = $8_1 + $11_1 | 0;
        $7_1 = $7_1 + $9_1 | 0;
        $14_1 = 1;
        continue label$9;
       case 1:
        label$30 : {
         label$31 : {
          label$32 : {
           label$33 : {
            switch ($10_1 | 0) {
            case 0:
             $14_1 = HEAPU8[$7_1 >> 0] | 0;
             break label$32;
            case 1:
             $14_1 = HEAPU16[$7_1 >> 1] | 0;
             break label$32;
            case 2:
             $15_1 = $7_1 + ((HEAPU8[($4_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $16_1 = $7_1 + ((HEAPU8[($4_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $17_1 = $7_1 + ((HEAPU8[($4_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $14_1 = 255;
             break label$31;
            case 3:
             break label$33;
            default:
             break label$30;
            };
           }
           $14_1 = HEAP32[$7_1 >> 2] | 0;
          }
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($4_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($4_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($4_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($4_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 24 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          if (!$14_1) {
           break label$30
          }
         }
         $18_1 = HEAPU8[$15_1 >> 0] | 0;
         $19_1 = HEAPU8[$16_1 >> 0] | 0;
         $20_1 = HEAPU8[$17_1 >> 0] | 0;
         $15_1 = 0;
         $16_1 = 0;
         $17_1 = 0;
         $21_1 = 0;
         label$37 : {
          label$38 : {
           switch ($12_1 | 0) {
           case 0:
            $21_1 = HEAPU8[$8_1 >> 0] | 0;
            $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$37;
           case 1:
            $21_1 = HEAPU16[$8_1 >> 1] | 0;
            $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$37;
           case 2:
            $16_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $17_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $15_1 = 255;
            break label$37;
           case 3:
            break label$38;
           default:
            break label$37;
           };
          }
          $21_1 = HEAP32[$8_1 >> 2] | 0;
          $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         $15_1 = (($14_1 + $15_1 | 0) - ((Math_imul($14_1, $15_1 & 255 | 0) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
         $18_1 = $16_1 + ((Math_imul($18_1 - ($16_1 & 255 | 0) | 0, $14_1) | 0) / (255 | 0) | 0) | 0;
         $16_1 = $18_1 & 255 | 0;
         $19_1 = $17_1 + ((Math_imul($19_1 - ($17_1 & 255 | 0) | 0, $14_1) | 0) / (255 | 0) | 0) | 0;
         $17_1 = $19_1 & 255 | 0;
         $21_1 = $21_1 + ((Math_imul($20_1 - ($21_1 & 255 | 0) | 0, $14_1) | 0) / (255 | 0) | 0) | 0;
         $14_1 = $21_1 & 255 | 0;
         label$42 : {
          switch ($12_1 | 0) {
          case 0:
           HEAP8[$8_1 >> 0] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$30;
          case 1:
           HEAP16[$8_1 >> 1] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$30;
          case 2:
           HEAP8[($8_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
           HEAP8[($8_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
           HEAP8[($8_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
           break label$30;
          case 3:
           break label$42;
          default:
           break label$30;
          };
         }
         HEAP32[$8_1 >> 2] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $8_1 = $8_1 + $11_1 | 0;
        $7_1 = $7_1 + $9_1 | 0;
        $14_1 = 2;
        continue label$9;
       case 2:
        label$46 : {
         label$47 : {
          label$48 : {
           label$49 : {
            switch ($10_1 | 0) {
            case 0:
             $14_1 = HEAPU8[$7_1 >> 0] | 0;
             break label$48;
            case 1:
             $14_1 = HEAPU16[$7_1 >> 1] | 0;
             break label$48;
            case 2:
             $15_1 = $7_1 + ((HEAPU8[($4_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $16_1 = $7_1 + ((HEAPU8[($4_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $17_1 = $7_1 + ((HEAPU8[($4_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $14_1 = 255;
             break label$47;
            case 3:
             break label$49;
            default:
             break label$46;
            };
           }
           $14_1 = HEAP32[$7_1 >> 2] | 0;
          }
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($4_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($4_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($4_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($4_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 24 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          if (!$14_1) {
           break label$46
          }
         }
         $18_1 = HEAPU8[$15_1 >> 0] | 0;
         $19_1 = HEAPU8[$16_1 >> 0] | 0;
         $20_1 = HEAPU8[$17_1 >> 0] | 0;
         $15_1 = 0;
         $16_1 = 0;
         $17_1 = 0;
         $21_1 = 0;
         label$53 : {
          label$54 : {
           switch ($12_1 | 0) {
           case 0:
            $21_1 = HEAPU8[$8_1 >> 0] | 0;
            $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$53;
           case 1:
            $21_1 = HEAPU16[$8_1 >> 1] | 0;
            $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$53;
           case 2:
            $16_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $17_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $15_1 = 255;
            break label$53;
           case 3:
            break label$54;
           default:
            break label$53;
           };
          }
          $21_1 = HEAP32[$8_1 >> 2] | 0;
          $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         $15_1 = (($14_1 + $15_1 | 0) - ((Math_imul($14_1, $15_1 & 255 | 0) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
         $18_1 = $16_1 + ((Math_imul($18_1 - ($16_1 & 255 | 0) | 0, $14_1) | 0) / (255 | 0) | 0) | 0;
         $16_1 = $18_1 & 255 | 0;
         $19_1 = $17_1 + ((Math_imul($19_1 - ($17_1 & 255 | 0) | 0, $14_1) | 0) / (255 | 0) | 0) | 0;
         $17_1 = $19_1 & 255 | 0;
         $21_1 = $21_1 + ((Math_imul($20_1 - ($21_1 & 255 | 0) | 0, $14_1) | 0) / (255 | 0) | 0) | 0;
         $14_1 = $21_1 & 255 | 0;
         label$58 : {
          switch ($12_1 | 0) {
          case 0:
           HEAP8[$8_1 >> 0] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$46;
          case 1:
           HEAP16[$8_1 >> 1] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$46;
          case 2:
           HEAP8[($8_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
           HEAP8[($8_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
           HEAP8[($8_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
           break label$46;
          case 3:
           break label$58;
          default:
           break label$46;
          };
         }
         HEAP32[$8_1 >> 2] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $14_1 = $13_1 + -1 | 0;
        $8_1 = $8_1 + $11_1 | 0;
        $7_1 = $7_1 + $9_1 | 0;
        if (($13_1 | 0) <= (1 | 0)) {
         break label$8
        }
        $13_1 = $14_1;
        $14_1 = 3;
        continue label$9;
       default:
        break label$10;
       };
      }
      label$62 : {
       label$63 : {
        label$64 : {
         label$65 : {
          switch ($10_1 | 0) {
          case 0:
           $14_1 = HEAPU8[$7_1 >> 0] | 0;
           break label$64;
          case 1:
           $14_1 = HEAPU16[$7_1 >> 1] | 0;
           break label$64;
          case 2:
           $15_1 = $7_1 + ((HEAPU8[($4_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
           $16_1 = $7_1 + ((HEAPU8[($4_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
           $17_1 = $7_1 + ((HEAPU8[($4_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
           $14_1 = 255;
           break label$63;
          case 3:
           break label$65;
          default:
           break label$62;
          };
         }
         $14_1 = HEAP32[$7_1 >> 2] | 0;
        }
        $15_1 = (HEAP32[(117504 + ((HEAPU8[($4_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0;
        $16_1 = (HEAP32[(117504 + ((HEAPU8[($4_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0) | 0;
        $17_1 = (HEAP32[(117504 + ((HEAPU8[($4_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0;
        $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($4_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($4_1 + 24 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        if (!$14_1) {
         break label$62
        }
       }
       $18_1 = HEAPU8[$15_1 >> 0] | 0;
       $19_1 = HEAPU8[$16_1 >> 0] | 0;
       $20_1 = HEAPU8[$17_1 >> 0] | 0;
       $15_1 = 0;
       $16_1 = 0;
       $17_1 = 0;
       $21_1 = 0;
       label$69 : {
        label$70 : {
         switch ($12_1 | 0) {
         case 0:
          $21_1 = HEAPU8[$8_1 >> 0] | 0;
          $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          break label$69;
         case 1:
          $21_1 = HEAPU16[$8_1 >> 1] | 0;
          $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          break label$69;
         case 2:
          $16_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $17_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $15_1 = 255;
          break label$69;
         case 3:
          break label$70;
         default:
          break label$69;
         };
        }
        $21_1 = HEAP32[$8_1 >> 2] | 0;
        $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $21_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       }
       $15_1 = (($14_1 + $15_1 | 0) - ((Math_imul($14_1, $15_1 & 255 | 0) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
       $18_1 = $16_1 + ((Math_imul($18_1 - ($16_1 & 255 | 0) | 0, $14_1) | 0) / (255 | 0) | 0) | 0;
       $16_1 = $18_1 & 255 | 0;
       $19_1 = $17_1 + ((Math_imul($19_1 - ($17_1 & 255 | 0) | 0, $14_1) | 0) / (255 | 0) | 0) | 0;
       $17_1 = $19_1 & 255 | 0;
       $21_1 = $21_1 + ((Math_imul($20_1 - ($21_1 & 255 | 0) | 0, $14_1) | 0) / (255 | 0) | 0) | 0;
       $14_1 = $21_1 & 255 | 0;
       label$74 : {
        switch ($12_1 | 0) {
        case 0:
         HEAP8[$8_1 >> 0] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$62;
        case 1:
         HEAP16[$8_1 >> 1] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$62;
        case 2:
         HEAP8[($8_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
         HEAP8[($8_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
         HEAP8[($8_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
         break label$62;
        case 3:
         break label$74;
        default:
         break label$62;
        };
       }
       HEAP32[$8_1 >> 2] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($14_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
      }
      $8_1 = $8_1 + $11_1 | 0;
      $7_1 = $7_1 + $9_1 | 0;
      $14_1 = 0;
      continue label$9;
     };
    }
    $8_1 = $8_1 + $2_1 | 0;
    $7_1 = $7_1 + $3_1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $621($0_1) {
  $0_1 = $0_1 | 0;
  var $13_1 = 0, $15_1 = 0, $8_1 = 0, $17_1 = 0, $16_1 = 0, $14_1 = 0, $5_1 = 0, $18_1 = 0, $2_1 = 0, $10_1 = 0, $1_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $259_1 = 0, $515_1 = 0, $771_1 = 0, $1040_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $6_1 = $5_1 & 3 | 0;
   $7_1 = ($5_1 + 3 | 0 | 0) / (4 | 0) | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $9_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   $10_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
   $11_1 = $10_1 + -1 | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $12_1 = $7_1;
    label$3 : {
     label$4 : {
      switch ($6_1 | 0) {
      default:
       $13_1 = 3;
       break label$3;
      case 1:
       $13_1 = 2;
       break label$3;
      case 2:
       $13_1 = 1;
       break label$3;
      case 3:
       break label$4;
      };
     }
     $13_1 = 0;
    }
    label$8 : {
     label$9 : while (1) {
      label$10 : {
       switch ($13_1 | 0) {
       case 0:
        $14_1 = 0;
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        label$14 : {
         label$15 : {
          switch ($11_1 | 0) {
          case 0:
           $13_1 = HEAPU8[$8_1 >> 0] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$14;
          case 1:
           $13_1 = HEAPU16[$8_1 >> 1] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$14;
          case 2:
           $16_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $15_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $14_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $17_1 = 255;
           break label$14;
          case 3:
           break label$15;
          default:
           break label$14;
          };
         }
         $13_1 = HEAP32[$8_1 >> 2] | 0;
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $13_1 = (HEAP32[((HEAP32[($9_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0;
        $18_1 = HEAPU8[($13_1 + 1 | 0) >> 0] | 0;
        $259_1 = ($15_1 & 255 | 0) - $18_1 | 0;
        $15_1 = $17_1 & 255 | 0;
        $17_1 = HEAPU8[$13_1 >> 0] | 0;
        $13_1 = HEAPU8[($13_1 + 2 | 0) >> 0] | 0;
        $13_1 = (($18_1 + ((Math_imul($259_1, $15_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0 | (($17_1 + ((Math_imul(($14_1 & 255 | 0) - $17_1 | 0, $15_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($13_1 + ((Math_imul(($16_1 & 255 | 0) - $13_1 | 0, $15_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
        label$19 : {
         if (!$2_1) {
          break label$19
         }
         $13_1 = HEAPU8[($2_1 + ($13_1 & 255 | 0) | 0) >> 0] | 0;
        }
        HEAP8[$5_1 >> 0] = $13_1;
        $8_1 = $8_1 + $10_1 | 0;
        $5_1 = $5_1 + 1 | 0;
        $13_1 = 1;
        continue label$9;
       case 1:
        $14_1 = 0;
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        label$20 : {
         label$21 : {
          switch ($11_1 | 0) {
          case 0:
           $13_1 = HEAPU8[$8_1 >> 0] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$20;
          case 1:
           $13_1 = HEAPU16[$8_1 >> 1] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$20;
          case 2:
           $16_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $15_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $14_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $17_1 = 255;
           break label$20;
          case 3:
           break label$21;
          default:
           break label$20;
          };
         }
         $13_1 = HEAP32[$8_1 >> 2] | 0;
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $13_1 = (HEAP32[((HEAP32[($9_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0;
        $18_1 = HEAPU8[($13_1 + 1 | 0) >> 0] | 0;
        $515_1 = ($15_1 & 255 | 0) - $18_1 | 0;
        $15_1 = $17_1 & 255 | 0;
        $17_1 = HEAPU8[$13_1 >> 0] | 0;
        $13_1 = HEAPU8[($13_1 + 2 | 0) >> 0] | 0;
        $13_1 = (($18_1 + ((Math_imul($515_1, $15_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0 | (($17_1 + ((Math_imul(($14_1 & 255 | 0) - $17_1 | 0, $15_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($13_1 + ((Math_imul(($16_1 & 255 | 0) - $13_1 | 0, $15_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
        label$25 : {
         if (!$2_1) {
          break label$25
         }
         $13_1 = HEAPU8[($2_1 + ($13_1 & 255 | 0) | 0) >> 0] | 0;
        }
        HEAP8[$5_1 >> 0] = $13_1;
        $8_1 = $8_1 + $10_1 | 0;
        $5_1 = $5_1 + 1 | 0;
        $13_1 = 2;
        continue label$9;
       case 2:
        $14_1 = 0;
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        label$26 : {
         label$27 : {
          switch ($11_1 | 0) {
          case 0:
           $13_1 = HEAPU8[$8_1 >> 0] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$26;
          case 1:
           $13_1 = HEAPU16[$8_1 >> 1] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$26;
          case 2:
           $16_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $15_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $14_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $17_1 = 255;
           break label$26;
          case 3:
           break label$27;
          default:
           break label$26;
          };
         }
         $13_1 = HEAP32[$8_1 >> 2] | 0;
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $13_1 = (HEAP32[((HEAP32[($9_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0;
        $18_1 = HEAPU8[($13_1 + 1 | 0) >> 0] | 0;
        $771_1 = ($15_1 & 255 | 0) - $18_1 | 0;
        $15_1 = $17_1 & 255 | 0;
        $17_1 = HEAPU8[$13_1 >> 0] | 0;
        $13_1 = HEAPU8[($13_1 + 2 | 0) >> 0] | 0;
        $13_1 = (($18_1 + ((Math_imul($771_1, $15_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0 | (($17_1 + ((Math_imul(($14_1 & 255 | 0) - $17_1 | 0, $15_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($13_1 + ((Math_imul(($16_1 & 255 | 0) - $13_1 | 0, $15_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
        label$31 : {
         if (!$2_1) {
          break label$31
         }
         $13_1 = HEAPU8[($2_1 + ($13_1 & 255 | 0) | 0) >> 0] | 0;
        }
        HEAP8[$5_1 >> 0] = $13_1;
        $13_1 = $12_1 + -1 | 0;
        $8_1 = $8_1 + $10_1 | 0;
        $5_1 = $5_1 + 1 | 0;
        if (($12_1 | 0) <= (1 | 0)) {
         break label$8
        }
        $12_1 = $13_1;
        $13_1 = 3;
        continue label$9;
       default:
        break label$10;
       };
      }
      $17_1 = 0;
      $16_1 = 0;
      $14_1 = 0;
      $15_1 = 0;
      label$32 : {
       label$33 : {
        switch ($11_1 | 0) {
        case 0:
         $13_1 = HEAPU8[$8_1 >> 0] | 0;
         $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         break label$32;
        case 1:
         $13_1 = HEAPU16[$8_1 >> 1] | 0;
         $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         break label$32;
        case 2:
         $14_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $16_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $17_1 = HEAPU8[($8_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $15_1 = 255;
         break label$32;
        case 3:
         break label$33;
        default:
         break label$32;
        };
       }
       $13_1 = HEAP32[$8_1 >> 2] | 0;
       $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $14_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
      }
      $13_1 = (HEAP32[((HEAP32[($9_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$5_1 >> 0] | 0) << 2 | 0) | 0;
      $18_1 = HEAPU8[($13_1 + 1 | 0) >> 0] | 0;
      $15_1 = $15_1 & 255 | 0;
      $1040_1 = (($18_1 + ((Math_imul(($16_1 & 255 | 0) - $18_1 | 0, $15_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0;
      $16_1 = HEAPU8[$13_1 >> 0] | 0;
      $13_1 = HEAPU8[($13_1 + 2 | 0) >> 0] | 0;
      $13_1 = $1040_1 | (($16_1 + ((Math_imul(($17_1 & 255 | 0) - $16_1 | 0, $15_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($13_1 + ((Math_imul(($14_1 & 255 | 0) - $13_1 | 0, $15_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
      label$37 : {
       if (!$2_1) {
        break label$37
       }
       $13_1 = HEAPU8[($2_1 + ($13_1 & 255 | 0) | 0) >> 0] | 0;
      }
      HEAP8[$5_1 >> 0] = $13_1;
      $8_1 = $8_1 + $10_1 | 0;
      $5_1 = $5_1 + 1 | 0;
      $13_1 = 0;
      continue label$9;
     };
    }
    $5_1 = $5_1 + $3_1 | 0;
    $8_1 = $8_1 + $4_1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $622($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $2_1 = 0, $9_1 = 0, $1_1 = 0, $8_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $67_1 = 0, $122_1 = 0, $177_1 = 0, $232_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $3_1 = $2_1 & 3 | 0;
   $4_1 = ($2_1 + 3 | 0 | 0) / (4 | 0) | 0;
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = ((HEAP32[($0_1 + 36 | 0) >> 2] | 0) >> 1 | 0) << 1 | 0;
   $7_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) >> 2 | 0) << 2 | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $8_1 = $4_1;
    label$3 : {
     label$4 : {
      switch ($3_1 | 0) {
      default:
       $0_1 = 0;
       break label$3;
      case 1:
       $0_1 = 3;
       break label$3;
      case 2:
       $0_1 = 2;
       break label$3;
      case 3:
       break label$4;
      };
     }
     $0_1 = 1;
    }
    label$8 : while (1) {
     label$9 : {
      switch ($0_1 | 0) {
      case 0:
       label$13 : {
        $0_1 = HEAP32[$2_1 >> 2] | 0;
        if ($0_1 >>> 0 < 134217728 >>> 0) {
         break label$13
        }
        label$14 : {
         label$15 : {
          $9_1 = $0_1 >>> 27 | 0;
          if (($9_1 | 0) != (31 | 0)) {
           break label$15
          }
          $0_1 = ($0_1 >>> 8 | 0) & 63488 | 0 | (($0_1 >>> 5 | 0) & 2016 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
          break label$14;
         }
         $67_1 = ($0_1 << 11 | 0) & 132120576 | 0 | (($0_1 >>> 8 | 0) & 63488 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
         $0_1 = HEAPU16[$5_1 >> 1] | 0;
         $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 132184095 | 0;
         $0_1 = ((Math_imul($67_1 - $0_1 | 0, $9_1) >>> 5 | 0) + $0_1 | 0) & 132184095 | 0;
         $0_1 = $0_1 >>> 16 | 0 | $0_1 | 0;
        }
        HEAP16[$5_1 >> 1] = $0_1;
       }
       $5_1 = $5_1 + 2 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 1;
       continue label$8;
      case 1:
       label$16 : {
        $0_1 = HEAP32[$2_1 >> 2] | 0;
        if ($0_1 >>> 0 < 134217728 >>> 0) {
         break label$16
        }
        label$17 : {
         label$18 : {
          $9_1 = $0_1 >>> 27 | 0;
          if (($9_1 | 0) != (31 | 0)) {
           break label$18
          }
          $0_1 = ($0_1 >>> 8 | 0) & 63488 | 0 | (($0_1 >>> 5 | 0) & 2016 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
          break label$17;
         }
         $122_1 = ($0_1 << 11 | 0) & 132120576 | 0 | (($0_1 >>> 8 | 0) & 63488 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
         $0_1 = HEAPU16[$5_1 >> 1] | 0;
         $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 132184095 | 0;
         $0_1 = ((Math_imul($122_1 - $0_1 | 0, $9_1) >>> 5 | 0) + $0_1 | 0) & 132184095 | 0;
         $0_1 = $0_1 >>> 16 | 0 | $0_1 | 0;
        }
        HEAP16[$5_1 >> 1] = $0_1;
       }
       $5_1 = $5_1 + 2 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 2;
       continue label$8;
      case 2:
       label$19 : {
        $0_1 = HEAP32[$2_1 >> 2] | 0;
        if ($0_1 >>> 0 < 134217728 >>> 0) {
         break label$19
        }
        label$20 : {
         label$21 : {
          $9_1 = $0_1 >>> 27 | 0;
          if (($9_1 | 0) != (31 | 0)) {
           break label$21
          }
          $0_1 = ($0_1 >>> 8 | 0) & 63488 | 0 | (($0_1 >>> 5 | 0) & 2016 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
          break label$20;
         }
         $177_1 = ($0_1 << 11 | 0) & 132120576 | 0 | (($0_1 >>> 8 | 0) & 63488 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
         $0_1 = HEAPU16[$5_1 >> 1] | 0;
         $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 132184095 | 0;
         $0_1 = ((Math_imul($177_1 - $0_1 | 0, $9_1) >>> 5 | 0) + $0_1 | 0) & 132184095 | 0;
         $0_1 = $0_1 >>> 16 | 0 | $0_1 | 0;
        }
        HEAP16[$5_1 >> 1] = $0_1;
       }
       $5_1 = $5_1 + 2 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 3;
       continue label$8;
      default:
       break label$9;
      };
     }
     label$22 : {
      $0_1 = HEAP32[$2_1 >> 2] | 0;
      if ($0_1 >>> 0 < 134217728 >>> 0) {
       break label$22
      }
      label$23 : {
       label$24 : {
        $9_1 = $0_1 >>> 27 | 0;
        if (($9_1 | 0) != (31 | 0)) {
         break label$24
        }
        $0_1 = ($0_1 >>> 8 | 0) & 63488 | 0 | (($0_1 >>> 5 | 0) & 2016 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
        break label$23;
       }
       $232_1 = ($0_1 << 11 | 0) & 132120576 | 0 | (($0_1 >>> 8 | 0) & 63488 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = HEAPU16[$5_1 >> 1] | 0;
       $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 132184095 | 0;
       $0_1 = ((Math_imul($232_1 - $0_1 | 0, $9_1) >>> 5 | 0) + $0_1 | 0) & 132184095 | 0;
       $0_1 = $0_1 >>> 16 | 0 | $0_1 | 0;
      }
      HEAP16[$5_1 >> 1] = $0_1;
     }
     $0_1 = $8_1 + -1 | 0;
     $5_1 = $5_1 + 2 | 0;
     $2_1 = $2_1 + 4 | 0;
     label$25 : {
      label$26 : {
       if (($8_1 | 0) <= (1 | 0)) {
        break label$26
       }
       $8_1 = $0_1;
       break label$25;
      }
      $5_1 = $5_1 + $6_1 | 0;
      $2_1 = $2_1 + $7_1 | 0;
      if ($1_1) {
       continue label$2
      }
      break label$1;
     }
     $0_1 = 0;
     continue label$8;
    };
   };
  }
 }
 
 function $623($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $2_1 = 0, $9_1 = 0, $1_1 = 0, $8_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $67_1 = 0, $122_1 = 0, $177_1 = 0, $232_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $3_1 = $2_1 & 3 | 0;
   $4_1 = ($2_1 + 3 | 0 | 0) / (4 | 0) | 0;
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = ((HEAP32[($0_1 + 36 | 0) >> 2] | 0) >> 1 | 0) << 1 | 0;
   $7_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) >> 2 | 0) << 2 | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $8_1 = $4_1;
    label$3 : {
     label$4 : {
      switch ($3_1 | 0) {
      default:
       $0_1 = 0;
       break label$3;
      case 1:
       $0_1 = 3;
       break label$3;
      case 2:
       $0_1 = 2;
       break label$3;
      case 3:
       break label$4;
      };
     }
     $0_1 = 1;
    }
    label$8 : while (1) {
     label$9 : {
      switch ($0_1 | 0) {
      case 0:
       label$13 : {
        $0_1 = HEAP32[$2_1 >> 2] | 0;
        if ($0_1 >>> 0 < 134217728 >>> 0) {
         break label$13
        }
        label$14 : {
         label$15 : {
          $9_1 = $0_1 >>> 27 | 0;
          if (($9_1 | 0) != (31 | 0)) {
           break label$15
          }
          $0_1 = ($0_1 >>> 9 | 0) & 31744 | 0 | (($0_1 >>> 6 | 0) & 992 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
          break label$14;
         }
         $67_1 = ($0_1 << 10 | 0) & 65011712 | 0 | (($0_1 >>> 9 | 0) & 31744 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
         $0_1 = HEAPU16[$5_1 >> 1] | 0;
         $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 65043487 | 0;
         $0_1 = ((Math_imul($67_1 - $0_1 | 0, $9_1) >>> 5 | 0) + $0_1 | 0) & 65043487 | 0;
         $0_1 = $0_1 >>> 16 | 0 | $0_1 | 0;
        }
        HEAP16[$5_1 >> 1] = $0_1;
       }
       $5_1 = $5_1 + 2 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 1;
       continue label$8;
      case 1:
       label$16 : {
        $0_1 = HEAP32[$2_1 >> 2] | 0;
        if ($0_1 >>> 0 < 134217728 >>> 0) {
         break label$16
        }
        label$17 : {
         label$18 : {
          $9_1 = $0_1 >>> 27 | 0;
          if (($9_1 | 0) != (31 | 0)) {
           break label$18
          }
          $0_1 = ($0_1 >>> 9 | 0) & 31744 | 0 | (($0_1 >>> 6 | 0) & 992 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
          break label$17;
         }
         $122_1 = ($0_1 << 10 | 0) & 65011712 | 0 | (($0_1 >>> 9 | 0) & 31744 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
         $0_1 = HEAPU16[$5_1 >> 1] | 0;
         $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 65043487 | 0;
         $0_1 = ((Math_imul($122_1 - $0_1 | 0, $9_1) >>> 5 | 0) + $0_1 | 0) & 65043487 | 0;
         $0_1 = $0_1 >>> 16 | 0 | $0_1 | 0;
        }
        HEAP16[$5_1 >> 1] = $0_1;
       }
       $5_1 = $5_1 + 2 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 2;
       continue label$8;
      case 2:
       label$19 : {
        $0_1 = HEAP32[$2_1 >> 2] | 0;
        if ($0_1 >>> 0 < 134217728 >>> 0) {
         break label$19
        }
        label$20 : {
         label$21 : {
          $9_1 = $0_1 >>> 27 | 0;
          if (($9_1 | 0) != (31 | 0)) {
           break label$21
          }
          $0_1 = ($0_1 >>> 9 | 0) & 31744 | 0 | (($0_1 >>> 6 | 0) & 992 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
          break label$20;
         }
         $177_1 = ($0_1 << 10 | 0) & 65011712 | 0 | (($0_1 >>> 9 | 0) & 31744 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
         $0_1 = HEAPU16[$5_1 >> 1] | 0;
         $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 65043487 | 0;
         $0_1 = ((Math_imul($177_1 - $0_1 | 0, $9_1) >>> 5 | 0) + $0_1 | 0) & 65043487 | 0;
         $0_1 = $0_1 >>> 16 | 0 | $0_1 | 0;
        }
        HEAP16[$5_1 >> 1] = $0_1;
       }
       $5_1 = $5_1 + 2 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 3;
       continue label$8;
      default:
       break label$9;
      };
     }
     label$22 : {
      $0_1 = HEAP32[$2_1 >> 2] | 0;
      if ($0_1 >>> 0 < 134217728 >>> 0) {
       break label$22
      }
      label$23 : {
       label$24 : {
        $9_1 = $0_1 >>> 27 | 0;
        if (($9_1 | 0) != (31 | 0)) {
         break label$24
        }
        $0_1 = ($0_1 >>> 9 | 0) & 31744 | 0 | (($0_1 >>> 6 | 0) & 992 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
        break label$23;
       }
       $232_1 = ($0_1 << 10 | 0) & 65011712 | 0 | (($0_1 >>> 9 | 0) & 31744 | 0) | 0 | (($0_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = HEAPU16[$5_1 >> 1] | 0;
       $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 65043487 | 0;
       $0_1 = ((Math_imul($232_1 - $0_1 | 0, $9_1) >>> 5 | 0) + $0_1 | 0) & 65043487 | 0;
       $0_1 = $0_1 >>> 16 | 0 | $0_1 | 0;
      }
      HEAP16[$5_1 >> 1] = $0_1;
     }
     $0_1 = $8_1 + -1 | 0;
     $5_1 = $5_1 + 2 | 0;
     $2_1 = $2_1 + 4 | 0;
     label$25 : {
      label$26 : {
       if (($8_1 | 0) <= (1 | 0)) {
        break label$26
       }
       $8_1 = $0_1;
       break label$25;
      }
      $5_1 = $5_1 + $6_1 | 0;
      $2_1 = $2_1 + $7_1 | 0;
      if ($1_1) {
       continue label$2
      }
      break label$1;
     }
     $0_1 = 0;
     continue label$8;
    };
   };
  }
 }
 
 function $624($0_1) {
  $0_1 = $0_1 | 0;
  var $9_1 = 0, $5_1 = 0, $2_1 = 0, $10_1 = 0, $11_1 = 0, $1_1 = 0, $8_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $61_1 = 0, $63_1 = 0, $112_1 = 0, $114_1 = 0, $163_1 = 0, $165_1 = 0, $214_1 = 0, $216_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $3_1 = $2_1 & 3 | 0;
   $4_1 = ($2_1 + 3 | 0 | 0) / (4 | 0) | 0;
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = ((HEAP32[($0_1 + 36 | 0) >> 2] | 0) >> 2 | 0) << 2 | 0;
   $7_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) >> 2 | 0) << 2 | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $8_1 = $4_1;
    label$3 : {
     label$4 : {
      switch ($3_1 | 0) {
      default:
       $0_1 = 0;
       break label$3;
      case 1:
       $0_1 = 3;
       break label$3;
      case 2:
       $0_1 = 2;
       break label$3;
      case 3:
       break label$4;
      };
     }
     $0_1 = 1;
    }
    label$8 : while (1) {
     label$9 : {
      switch ($0_1 | 0) {
      case 0:
       label$13 : {
        $0_1 = HEAP32[$2_1 >> 2] | 0;
        if ($0_1 >>> 0 < 16777216 >>> 0) {
         break label$13
        }
        label$14 : {
         $9_1 = $0_1 >>> 24 | 0;
         if (($9_1 | 0) == (255 | 0)) {
          break label$14
         }
         $10_1 = HEAP32[$5_1 >> 2] | 0;
         $11_1 = $10_1 & 16711935 | 0;
         $61_1 = ((Math_imul(($0_1 & 16711935 | 0) - $11_1 | 0, $9_1) >>> 8 | 0) + $11_1 | 0) & 16711935 | 0;
         $63_1 = $0_1 & 65280 | 0;
         $0_1 = $10_1 & 65280 | 0;
         $0_1 = $61_1 | (((Math_imul($63_1 - $0_1 | 0, $9_1) >>> 8 | 0) + $0_1 | 0) & 65280 | 0) | 0 | (((Math_imul($10_1 >>> 24 | 0, $9_1 ^ 255 | 0) >>> 8 | 0) + $9_1 | 0) << 24 | 0) | 0;
        }
        HEAP32[$5_1 >> 2] = $0_1;
       }
       $5_1 = $5_1 + 4 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 1;
       continue label$8;
      case 1:
       label$15 : {
        $0_1 = HEAP32[$2_1 >> 2] | 0;
        if ($0_1 >>> 0 < 16777216 >>> 0) {
         break label$15
        }
        label$16 : {
         $9_1 = $0_1 >>> 24 | 0;
         if (($9_1 | 0) == (255 | 0)) {
          break label$16
         }
         $10_1 = HEAP32[$5_1 >> 2] | 0;
         $11_1 = $10_1 & 16711935 | 0;
         $112_1 = ((Math_imul(($0_1 & 16711935 | 0) - $11_1 | 0, $9_1) >>> 8 | 0) + $11_1 | 0) & 16711935 | 0;
         $114_1 = $0_1 & 65280 | 0;
         $0_1 = $10_1 & 65280 | 0;
         $0_1 = $112_1 | (((Math_imul($114_1 - $0_1 | 0, $9_1) >>> 8 | 0) + $0_1 | 0) & 65280 | 0) | 0 | (((Math_imul($10_1 >>> 24 | 0, $9_1 ^ 255 | 0) >>> 8 | 0) + $9_1 | 0) << 24 | 0) | 0;
        }
        HEAP32[$5_1 >> 2] = $0_1;
       }
       $5_1 = $5_1 + 4 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 2;
       continue label$8;
      case 2:
       label$17 : {
        $0_1 = HEAP32[$2_1 >> 2] | 0;
        if ($0_1 >>> 0 < 16777216 >>> 0) {
         break label$17
        }
        label$18 : {
         $9_1 = $0_1 >>> 24 | 0;
         if (($9_1 | 0) == (255 | 0)) {
          break label$18
         }
         $10_1 = HEAP32[$5_1 >> 2] | 0;
         $11_1 = $10_1 & 16711935 | 0;
         $163_1 = ((Math_imul(($0_1 & 16711935 | 0) - $11_1 | 0, $9_1) >>> 8 | 0) + $11_1 | 0) & 16711935 | 0;
         $165_1 = $0_1 & 65280 | 0;
         $0_1 = $10_1 & 65280 | 0;
         $0_1 = $163_1 | (((Math_imul($165_1 - $0_1 | 0, $9_1) >>> 8 | 0) + $0_1 | 0) & 65280 | 0) | 0 | (((Math_imul($10_1 >>> 24 | 0, $9_1 ^ 255 | 0) >>> 8 | 0) + $9_1 | 0) << 24 | 0) | 0;
        }
        HEAP32[$5_1 >> 2] = $0_1;
       }
       $5_1 = $5_1 + 4 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 3;
       continue label$8;
      default:
       break label$9;
      };
     }
     label$19 : {
      $0_1 = HEAP32[$2_1 >> 2] | 0;
      if ($0_1 >>> 0 < 16777216 >>> 0) {
       break label$19
      }
      label$20 : {
       $9_1 = $0_1 >>> 24 | 0;
       if (($9_1 | 0) == (255 | 0)) {
        break label$20
       }
       $10_1 = HEAP32[$5_1 >> 2] | 0;
       $11_1 = $10_1 & 16711935 | 0;
       $214_1 = ((Math_imul(($0_1 & 16711935 | 0) - $11_1 | 0, $9_1) >>> 8 | 0) + $11_1 | 0) & 16711935 | 0;
       $216_1 = $0_1 & 65280 | 0;
       $0_1 = $10_1 & 65280 | 0;
       $0_1 = $214_1 | (((Math_imul($216_1 - $0_1 | 0, $9_1) >>> 8 | 0) + $0_1 | 0) & 65280 | 0) | 0 | (((Math_imul($10_1 >>> 24 | 0, $9_1 ^ 255 | 0) >>> 8 | 0) + $9_1 | 0) << 24 | 0) | 0;
      }
      HEAP32[$5_1 >> 2] = $0_1;
     }
     $0_1 = $8_1 + -1 | 0;
     $5_1 = $5_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     label$21 : {
      label$22 : {
       if (($8_1 | 0) <= (1 | 0)) {
        break label$22
       }
       $8_1 = $0_1;
       break label$21;
      }
      $5_1 = $5_1 + $6_1 | 0;
      $2_1 = $2_1 + $7_1 | 0;
      if ($1_1) {
       continue label$2
      }
      break label$1;
     }
     $0_1 = 0;
     continue label$8;
    };
   };
  }
 }
 
 function $625($0_1) {
  $0_1 = $0_1 | 0;
  var $10_1 = 0, $5_1 = 0, $2_1 = 0, $11_1 = 0, $9_1 = 0, $12_1 = 0, $1_1 = 0, $8_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $70_1 = 0, $128_1 = 0, $186_1 = 0, $244_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $3_1 = $2_1 & 3 | 0;
   $4_1 = ($2_1 + 3 | 0 | 0) / (4 | 0) | 0;
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = ((HEAP32[($0_1 + 36 | 0) >> 2] | 0) >> 2 | 0) << 2 | 0;
   $7_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) >> 2 | 0) << 2 | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $8_1 = $4_1;
    label$3 : {
     label$4 : {
      switch ($3_1 | 0) {
      default:
       $0_1 = 0;
       break label$3;
      case 1:
       $0_1 = 3;
       break label$3;
      case 2:
       $0_1 = 2;
       break label$3;
      case 3:
       break label$4;
      };
     }
     $0_1 = 1;
    }
    label$8 : while (1) {
     label$9 : {
      switch ($0_1 | 0) {
      case 0:
       label$13 : {
        $0_1 = HEAP32[$2_1 >> 2] | 0;
        if ($0_1 >>> 0 < 16777216 >>> 0) {
         break label$13
        }
        $9_1 = $0_1 & 65280 | 0;
        $10_1 = __wasm_rotl_i32($0_1 & 16711935 | 0 | 0, 16 | 0) | 0;
        label$14 : {
         label$15 : {
          $0_1 = $0_1 >>> 24 | 0;
          if (($0_1 | 0) != (255 | 0)) {
           break label$15
          }
          $0_1 = $9_1 | $10_1 | 0 | -16777216 | 0;
          break label$14;
         }
         $11_1 = HEAP32[$5_1 >> 2] | 0;
         $12_1 = $11_1 & 16711935 | 0;
         $70_1 = ((Math_imul($10_1 - $12_1 | 0, $0_1) >>> 8 | 0) + $12_1 | 0) & 16711935 | 0;
         $10_1 = $11_1 & 65280 | 0;
         $0_1 = $70_1 | (((Math_imul($9_1 - $10_1 | 0, $0_1) >>> 8 | 0) + $10_1 | 0) & 65280 | 0) | 0 | (((Math_imul($11_1 >>> 24 | 0, $0_1 ^ 255 | 0) >>> 8 | 0) + $0_1 | 0) << 24 | 0) | 0;
        }
        HEAP32[$5_1 >> 2] = $0_1;
       }
       $5_1 = $5_1 + 4 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 1;
       continue label$8;
      case 1:
       label$16 : {
        $0_1 = HEAP32[$2_1 >> 2] | 0;
        if ($0_1 >>> 0 < 16777216 >>> 0) {
         break label$16
        }
        $9_1 = $0_1 & 65280 | 0;
        $10_1 = __wasm_rotl_i32($0_1 & 16711935 | 0 | 0, 16 | 0) | 0;
        label$17 : {
         label$18 : {
          $0_1 = $0_1 >>> 24 | 0;
          if (($0_1 | 0) != (255 | 0)) {
           break label$18
          }
          $0_1 = $9_1 | $10_1 | 0 | -16777216 | 0;
          break label$17;
         }
         $11_1 = HEAP32[$5_1 >> 2] | 0;
         $12_1 = $11_1 & 16711935 | 0;
         $128_1 = ((Math_imul($10_1 - $12_1 | 0, $0_1) >>> 8 | 0) + $12_1 | 0) & 16711935 | 0;
         $10_1 = $11_1 & 65280 | 0;
         $0_1 = $128_1 | (((Math_imul($9_1 - $10_1 | 0, $0_1) >>> 8 | 0) + $10_1 | 0) & 65280 | 0) | 0 | (((Math_imul($11_1 >>> 24 | 0, $0_1 ^ 255 | 0) >>> 8 | 0) + $0_1 | 0) << 24 | 0) | 0;
        }
        HEAP32[$5_1 >> 2] = $0_1;
       }
       $5_1 = $5_1 + 4 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 2;
       continue label$8;
      case 2:
       label$19 : {
        $0_1 = HEAP32[$2_1 >> 2] | 0;
        if ($0_1 >>> 0 < 16777216 >>> 0) {
         break label$19
        }
        $9_1 = $0_1 & 65280 | 0;
        $10_1 = __wasm_rotl_i32($0_1 & 16711935 | 0 | 0, 16 | 0) | 0;
        label$20 : {
         label$21 : {
          $0_1 = $0_1 >>> 24 | 0;
          if (($0_1 | 0) != (255 | 0)) {
           break label$21
          }
          $0_1 = $9_1 | $10_1 | 0 | -16777216 | 0;
          break label$20;
         }
         $11_1 = HEAP32[$5_1 >> 2] | 0;
         $12_1 = $11_1 & 16711935 | 0;
         $186_1 = ((Math_imul($10_1 - $12_1 | 0, $0_1) >>> 8 | 0) + $12_1 | 0) & 16711935 | 0;
         $10_1 = $11_1 & 65280 | 0;
         $0_1 = $186_1 | (((Math_imul($9_1 - $10_1 | 0, $0_1) >>> 8 | 0) + $10_1 | 0) & 65280 | 0) | 0 | (((Math_imul($11_1 >>> 24 | 0, $0_1 ^ 255 | 0) >>> 8 | 0) + $0_1 | 0) << 24 | 0) | 0;
        }
        HEAP32[$5_1 >> 2] = $0_1;
       }
       $5_1 = $5_1 + 4 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 3;
       continue label$8;
      default:
       break label$9;
      };
     }
     label$22 : {
      $0_1 = HEAP32[$2_1 >> 2] | 0;
      if ($0_1 >>> 0 < 16777216 >>> 0) {
       break label$22
      }
      $9_1 = $0_1 & 65280 | 0;
      $10_1 = __wasm_rotl_i32($0_1 & 16711935 | 0 | 0, 16 | 0) | 0;
      label$23 : {
       label$24 : {
        $0_1 = $0_1 >>> 24 | 0;
        if (($0_1 | 0) != (255 | 0)) {
         break label$24
        }
        $0_1 = $9_1 | $10_1 | 0 | -16777216 | 0;
        break label$23;
       }
       $11_1 = HEAP32[$5_1 >> 2] | 0;
       $12_1 = $11_1 & 16711935 | 0;
       $244_1 = ((Math_imul($10_1 - $12_1 | 0, $0_1) >>> 8 | 0) + $12_1 | 0) & 16711935 | 0;
       $10_1 = $11_1 & 65280 | 0;
       $0_1 = $244_1 | (((Math_imul($9_1 - $10_1 | 0, $0_1) >>> 8 | 0) + $10_1 | 0) & 65280 | 0) | 0 | (((Math_imul($11_1 >>> 24 | 0, $0_1 ^ 255 | 0) >>> 8 | 0) + $0_1 | 0) << 24 | 0) | 0;
      }
      HEAP32[$5_1 >> 2] = $0_1;
     }
     $0_1 = $8_1 + -1 | 0;
     $5_1 = $5_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     label$25 : {
      label$26 : {
       if (($8_1 | 0) <= (1 | 0)) {
        break label$26
       }
       $8_1 = $0_1;
       break label$25;
      }
      $5_1 = $5_1 + $6_1 | 0;
      $2_1 = $2_1 + $7_1 | 0;
      if ($1_1) {
       continue label$2
      }
      break label$1;
     }
     $0_1 = 0;
     continue label$8;
    };
   };
  }
 }
 
 function $626($0_1) {
  $0_1 = $0_1 | 0;
  var $18_1 = 0, $7_1 = 0, $16_1 = 0, $17_1 = 0, $4_1 = 0, $15_1 = 0, $6_1 = 0, $1_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $13_1 = 0, $10_1 = 0, $12_1 = 0, $2_1 = 0, $11_1 = 0, $14_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   $1_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $8_1 = $7_1 & 3 | 0;
   $9_1 = ($7_1 + 3 | 0 | 0) / (4 | 0) | 0;
   $7_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   $10_1 = HEAPU8[($7_1 + 9 | 0) >> 0] | 0;
   $11_1 = $10_1 + -1 | 0;
   $0_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   $12_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
   $13_1 = $12_1 + -1 | 0;
   label$2 : while (1) {
    $2_1 = $2_1 + -1 | 0;
    $14_1 = $9_1;
    label$3 : {
     label$4 : {
      switch ($8_1 | 0) {
      default:
       $15_1 = 3;
       break label$3;
      case 1:
       $15_1 = 2;
       break label$3;
      case 2:
       $15_1 = 1;
       break label$3;
      case 3:
       break label$4;
      };
     }
     $15_1 = 0;
    }
    label$8 : {
     label$9 : while (1) {
      label$10 : {
       switch ($15_1 | 0) {
       case 0:
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$14 : {
         label$15 : {
          label$16 : {
           switch ($11_1 | 0) {
           case 0:
            $18_1 = HEAPU8[$6_1 >> 0] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $18_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$15;
           case 1:
            $18_1 = HEAPU16[$6_1 >> 1] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $18_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$15;
           case 2:
            $16_1 = $6_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $6_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $18_1 = $6_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$15;
           case 3:
            break label$16;
           default:
            break label$14;
           };
          }
          $18_1 = HEAP32[$6_1 >> 2] | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $18_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $16_1 = HEAPU8[$16_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
         $18_1 = HEAPU8[$18_1 >> 0] | 0;
        }
        $19_1 = $16_1 & 255 | 0;
        $20_1 = $17_1 & 255 | 0;
        $21_1 = $18_1 & 255 | 0;
        $16_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$20 : {
         label$21 : {
          switch ($13_1 | 0) {
          case 0:
           $18_1 = HEAPU8[$4_1 >> 0] | 0;
           $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$20;
          case 1:
           $18_1 = HEAPU16[$4_1 >> 1] | 0;
           $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$20;
          case 2:
           $16_1 = HEAPU8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $17_1 = HEAPU8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $15_1 = 255;
           break label$20;
          case 3:
           break label$21;
          default:
           break label$20;
          };
         }
         $18_1 = HEAP32[$4_1 >> 2] | 0;
         $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $15_1 = (($15_1 + $1_1 | 0) - ((Math_imul($15_1 & 255 | 0, $1_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
        $19_1 = $16_1 + ((Math_imul($19_1 - ($16_1 & 255 | 0) | 0, $1_1) | 0) / (255 | 0) | 0) | 0;
        $16_1 = $19_1 & 255 | 0;
        $20_1 = $17_1 + ((Math_imul($20_1 - ($17_1 & 255 | 0) | 0, $1_1) | 0) / (255 | 0) | 0) | 0;
        $17_1 = $20_1 & 255 | 0;
        $21_1 = $18_1 + ((Math_imul($21_1 - ($18_1 & 255 | 0) | 0, $1_1) | 0) / (255 | 0) | 0) | 0;
        $18_1 = $21_1 & 255 | 0;
        label$25 : {
         label$26 : {
          switch ($13_1 | 0) {
          case 0:
           HEAP8[$4_1 >> 0] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$25;
          case 1:
           HEAP16[$4_1 >> 1] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$25;
          case 2:
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $20_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
           break label$25;
          case 3:
           break label$26;
          default:
           break label$25;
          };
         }
         HEAP32[$4_1 >> 2] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $4_1 = $4_1 + $12_1 | 0;
        $6_1 = $6_1 + $10_1 | 0;
        $15_1 = 1;
        continue label$9;
       case 1:
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$30 : {
         label$31 : {
          label$32 : {
           switch ($11_1 | 0) {
           case 0:
            $18_1 = HEAPU8[$6_1 >> 0] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $18_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$31;
           case 1:
            $18_1 = HEAPU16[$6_1 >> 1] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $18_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$31;
           case 2:
            $16_1 = $6_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $6_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $18_1 = $6_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$31;
           case 3:
            break label$32;
           default:
            break label$30;
           };
          }
          $18_1 = HEAP32[$6_1 >> 2] | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $18_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $16_1 = HEAPU8[$16_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
         $18_1 = HEAPU8[$18_1 >> 0] | 0;
        }
        $19_1 = $16_1 & 255 | 0;
        $20_1 = $17_1 & 255 | 0;
        $21_1 = $18_1 & 255 | 0;
        $16_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$36 : {
         label$37 : {
          switch ($13_1 | 0) {
          case 0:
           $18_1 = HEAPU8[$4_1 >> 0] | 0;
           $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$36;
          case 1:
           $18_1 = HEAPU16[$4_1 >> 1] | 0;
           $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$36;
          case 2:
           $16_1 = HEAPU8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $17_1 = HEAPU8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $15_1 = 255;
           break label$36;
          case 3:
           break label$37;
          default:
           break label$36;
          };
         }
         $18_1 = HEAP32[$4_1 >> 2] | 0;
         $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $15_1 = (($15_1 + $1_1 | 0) - ((Math_imul($15_1 & 255 | 0, $1_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
        $19_1 = $16_1 + ((Math_imul($19_1 - ($16_1 & 255 | 0) | 0, $1_1) | 0) / (255 | 0) | 0) | 0;
        $16_1 = $19_1 & 255 | 0;
        $20_1 = $17_1 + ((Math_imul($20_1 - ($17_1 & 255 | 0) | 0, $1_1) | 0) / (255 | 0) | 0) | 0;
        $17_1 = $20_1 & 255 | 0;
        $21_1 = $18_1 + ((Math_imul($21_1 - ($18_1 & 255 | 0) | 0, $1_1) | 0) / (255 | 0) | 0) | 0;
        $18_1 = $21_1 & 255 | 0;
        label$41 : {
         label$42 : {
          switch ($13_1 | 0) {
          case 0:
           HEAP8[$4_1 >> 0] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$41;
          case 1:
           HEAP16[$4_1 >> 1] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$41;
          case 2:
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $20_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
           break label$41;
          case 3:
           break label$42;
          default:
           break label$41;
          };
         }
         HEAP32[$4_1 >> 2] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $4_1 = $4_1 + $12_1 | 0;
        $6_1 = $6_1 + $10_1 | 0;
        $15_1 = 2;
        continue label$9;
       case 2:
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$46 : {
         label$47 : {
          label$48 : {
           switch ($11_1 | 0) {
           case 0:
            $18_1 = HEAPU8[$6_1 >> 0] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $18_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$47;
           case 1:
            $18_1 = HEAPU16[$6_1 >> 1] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $18_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$47;
           case 2:
            $16_1 = $6_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $6_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $18_1 = $6_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$47;
           case 3:
            break label$48;
           default:
            break label$46;
           };
          }
          $18_1 = HEAP32[$6_1 >> 2] | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $18_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $16_1 = HEAPU8[$16_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
         $18_1 = HEAPU8[$18_1 >> 0] | 0;
        }
        $19_1 = $16_1 & 255 | 0;
        $20_1 = $17_1 & 255 | 0;
        $21_1 = $18_1 & 255 | 0;
        $16_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$52 : {
         label$53 : {
          switch ($13_1 | 0) {
          case 0:
           $18_1 = HEAPU8[$4_1 >> 0] | 0;
           $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$52;
          case 1:
           $18_1 = HEAPU16[$4_1 >> 1] | 0;
           $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
           break label$52;
          case 2:
           $16_1 = HEAPU8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $17_1 = HEAPU8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $18_1 = HEAPU8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
           $15_1 = 255;
           break label$52;
          case 3:
           break label$53;
          default:
           break label$52;
          };
         }
         $18_1 = HEAP32[$4_1 >> 2] | 0;
         $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        }
        $15_1 = (($15_1 + $1_1 | 0) - ((Math_imul($15_1 & 255 | 0, $1_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
        $19_1 = $16_1 + ((Math_imul($19_1 - ($16_1 & 255 | 0) | 0, $1_1) | 0) / (255 | 0) | 0) | 0;
        $16_1 = $19_1 & 255 | 0;
        $20_1 = $17_1 + ((Math_imul($20_1 - ($17_1 & 255 | 0) | 0, $1_1) | 0) / (255 | 0) | 0) | 0;
        $17_1 = $20_1 & 255 | 0;
        $21_1 = $18_1 + ((Math_imul($21_1 - ($18_1 & 255 | 0) | 0, $1_1) | 0) / (255 | 0) | 0) | 0;
        $18_1 = $21_1 & 255 | 0;
        label$57 : {
         label$58 : {
          switch ($13_1 | 0) {
          case 0:
           HEAP8[$4_1 >> 0] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$57;
          case 1:
           HEAP16[$4_1 >> 1] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$57;
          case 2:
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $20_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
           break label$57;
          case 3:
           break label$58;
          default:
           break label$57;
          };
         }
         HEAP32[$4_1 >> 2] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $15_1 = $14_1 + -1 | 0;
        $4_1 = $4_1 + $12_1 | 0;
        $6_1 = $6_1 + $10_1 | 0;
        if (($14_1 | 0) <= (1 | 0)) {
         break label$8
        }
        $14_1 = $15_1;
        $15_1 = 3;
        continue label$9;
       default:
        break label$10;
       };
      }
      $15_1 = 0;
      $16_1 = 0;
      $17_1 = 0;
      $18_1 = 0;
      label$62 : {
       label$63 : {
        label$64 : {
         switch ($11_1 | 0) {
         case 0:
          $18_1 = HEAPU8[$6_1 >> 0] | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $18_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          break label$63;
         case 1:
          $18_1 = HEAPU16[$6_1 >> 1] | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $18_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          break label$63;
         case 2:
          $16_1 = $6_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $17_1 = $6_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $18_1 = $6_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          break label$63;
         case 3:
          break label$64;
         default:
          break label$62;
         };
        }
        $18_1 = HEAP32[$6_1 >> 2] | 0;
        $16_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
        $17_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
        $18_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
       }
       $16_1 = HEAPU8[$16_1 >> 0] | 0;
       $17_1 = HEAPU8[$17_1 >> 0] | 0;
       $18_1 = HEAPU8[$18_1 >> 0] | 0;
      }
      $19_1 = $16_1 & 255 | 0;
      $20_1 = $17_1 & 255 | 0;
      $21_1 = $18_1 & 255 | 0;
      $16_1 = 0;
      $17_1 = 0;
      $18_1 = 0;
      label$68 : {
       label$69 : {
        switch ($13_1 | 0) {
        case 0:
         $18_1 = HEAPU8[$4_1 >> 0] | 0;
         $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         break label$68;
        case 1:
         $18_1 = HEAPU16[$4_1 >> 1] | 0;
         $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         break label$68;
        case 2:
         $16_1 = HEAPU8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $17_1 = HEAPU8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $18_1 = HEAPU8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $15_1 = 255;
         break label$68;
        case 3:
         break label$69;
        default:
         break label$68;
        };
       }
       $18_1 = HEAP32[$4_1 >> 2] | 0;
       $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $17_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
      }
      $15_1 = (($15_1 + $1_1 | 0) - ((Math_imul($15_1 & 255 | 0, $1_1) >>> 0) / (255 >>> 0) | 0) | 0) & 255 | 0;
      $19_1 = $16_1 + ((Math_imul($19_1 - ($16_1 & 255 | 0) | 0, $1_1) | 0) / (255 | 0) | 0) | 0;
      $16_1 = $19_1 & 255 | 0;
      $20_1 = $17_1 + ((Math_imul($20_1 - ($17_1 & 255 | 0) | 0, $1_1) | 0) / (255 | 0) | 0) | 0;
      $17_1 = $20_1 & 255 | 0;
      $21_1 = $18_1 + ((Math_imul($21_1 - ($18_1 & 255 | 0) | 0, $1_1) | 0) / (255 | 0) | 0) | 0;
      $18_1 = $21_1 & 255 | 0;
      label$73 : {
       label$74 : {
        switch ($13_1 | 0) {
        case 0:
         HEAP8[$4_1 >> 0] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$73;
        case 1:
         HEAP16[$4_1 >> 1] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$73;
        case 2:
         HEAP8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
         HEAP8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $20_1;
         HEAP8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
         break label$73;
        case 3:
         break label$74;
        default:
         break label$73;
        };
       }
       HEAP32[$4_1 >> 2] = ($17_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($15_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
      }
      $4_1 = $4_1 + $12_1 | 0;
      $6_1 = $6_1 + $10_1 | 0;
      $15_1 = 0;
      continue label$9;
     };
    }
    $4_1 = $4_1 + $3_1 | 0;
    $6_1 = $6_1 + $5_1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $627($0_1) {
  $0_1 = $0_1 | 0;
  var $14_1 = 0, $15_1 = 0, $16_1 = 0, $9_1 = 0, $6_1 = 0, $17_1 = 0, $2_1 = 0, $18_1 = 0, $3_1 = 0, $11_1 = 0, $1_1 = 0, $10_1 = 0, $12_1 = 0, $13_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $219_1 = 0, $425_1 = 0, $631_1 = 0, $842_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $7_1 = $6_1 & 3 | 0;
   $8_1 = ($6_1 + 3 | 0 | 0) / (4 | 0) | 0;
   $9_1 = HEAP32[$0_1 >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $10_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   $11_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
   $12_1 = $11_1 + -1 | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $13_1 = $8_1;
    label$3 : {
     label$4 : {
      switch ($7_1 | 0) {
      default:
       $14_1 = 3;
       break label$3;
      case 1:
       $14_1 = 2;
       break label$3;
      case 2:
       $14_1 = 1;
       break label$3;
      case 3:
       break label$4;
      };
     }
     $14_1 = 0;
    }
    label$8 : {
     label$9 : while (1) {
      label$10 : {
       switch ($14_1 | 0) {
       case 0:
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        label$14 : {
         label$15 : {
          label$16 : {
           switch ($12_1 | 0) {
           case 0:
            $15_1 = HEAPU8[$9_1 >> 0] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$15;
           case 1:
            $15_1 = HEAPU16[$9_1 >> 1] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$15;
           case 2:
            $14_1 = $9_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $16_1 = $9_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $9_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$15;
           case 3:
            break label$16;
           default:
            break label$14;
           };
          }
          $15_1 = HEAP32[$9_1 >> 2] | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $17_1 = HEAPU8[$14_1 >> 0] | 0;
         $15_1 = HEAPU8[$15_1 >> 0] | 0;
         $16_1 = HEAPU8[$16_1 >> 0] | 0;
        }
        $14_1 = (HEAP32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$6_1 >> 0] | 0) << 2 | 0) | 0;
        $18_1 = HEAPU8[($14_1 + 1 | 0) >> 0] | 0;
        $219_1 = (($18_1 + ((Math_imul(($16_1 & 255 | 0) - $18_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0;
        $16_1 = HEAPU8[$14_1 >> 0] | 0;
        $14_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
        $14_1 = $219_1 | (($16_1 + ((Math_imul(($15_1 & 255 | 0) - $16_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($14_1 + ((Math_imul(($17_1 & 255 | 0) - $14_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
        label$20 : {
         if (!$3_1) {
          break label$20
         }
         $14_1 = HEAPU8[($3_1 + ($14_1 & 255 | 0) | 0) >> 0] | 0;
        }
        HEAP8[$6_1 >> 0] = $14_1;
        $9_1 = $9_1 + $11_1 | 0;
        $6_1 = $6_1 + 1 | 0;
        $14_1 = 1;
        continue label$9;
       case 1:
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        label$21 : {
         label$22 : {
          label$23 : {
           switch ($12_1 | 0) {
           case 0:
            $15_1 = HEAPU8[$9_1 >> 0] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$22;
           case 1:
            $15_1 = HEAPU16[$9_1 >> 1] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$22;
           case 2:
            $14_1 = $9_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $16_1 = $9_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $9_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$22;
           case 3:
            break label$23;
           default:
            break label$21;
           };
          }
          $15_1 = HEAP32[$9_1 >> 2] | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $17_1 = HEAPU8[$14_1 >> 0] | 0;
         $15_1 = HEAPU8[$15_1 >> 0] | 0;
         $16_1 = HEAPU8[$16_1 >> 0] | 0;
        }
        $14_1 = (HEAP32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$6_1 >> 0] | 0) << 2 | 0) | 0;
        $18_1 = HEAPU8[($14_1 + 1 | 0) >> 0] | 0;
        $425_1 = (($18_1 + ((Math_imul(($16_1 & 255 | 0) - $18_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0;
        $16_1 = HEAPU8[$14_1 >> 0] | 0;
        $14_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
        $14_1 = $425_1 | (($16_1 + ((Math_imul(($15_1 & 255 | 0) - $16_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($14_1 + ((Math_imul(($17_1 & 255 | 0) - $14_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
        label$27 : {
         if (!$3_1) {
          break label$27
         }
         $14_1 = HEAPU8[($3_1 + ($14_1 & 255 | 0) | 0) >> 0] | 0;
        }
        HEAP8[$6_1 >> 0] = $14_1;
        $9_1 = $9_1 + $11_1 | 0;
        $6_1 = $6_1 + 1 | 0;
        $14_1 = 2;
        continue label$9;
       case 2:
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        label$28 : {
         label$29 : {
          label$30 : {
           switch ($12_1 | 0) {
           case 0:
            $15_1 = HEAPU8[$9_1 >> 0] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$29;
           case 1:
            $15_1 = HEAPU16[$9_1 >> 1] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$29;
           case 2:
            $14_1 = $9_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $16_1 = $9_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $9_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$29;
           case 3:
            break label$30;
           default:
            break label$28;
           };
          }
          $15_1 = HEAP32[$9_1 >> 2] | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $17_1 = HEAPU8[$14_1 >> 0] | 0;
         $15_1 = HEAPU8[$15_1 >> 0] | 0;
         $16_1 = HEAPU8[$16_1 >> 0] | 0;
        }
        $14_1 = (HEAP32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$6_1 >> 0] | 0) << 2 | 0) | 0;
        $18_1 = HEAPU8[($14_1 + 1 | 0) >> 0] | 0;
        $631_1 = (($18_1 + ((Math_imul(($16_1 & 255 | 0) - $18_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0;
        $16_1 = HEAPU8[$14_1 >> 0] | 0;
        $14_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
        $14_1 = $631_1 | (($16_1 + ((Math_imul(($15_1 & 255 | 0) - $16_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($14_1 + ((Math_imul(($17_1 & 255 | 0) - $14_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
        label$34 : {
         if (!$3_1) {
          break label$34
         }
         $14_1 = HEAPU8[($3_1 + ($14_1 & 255 | 0) | 0) >> 0] | 0;
        }
        HEAP8[$6_1 >> 0] = $14_1;
        $14_1 = $13_1 + -1 | 0;
        $9_1 = $9_1 + $11_1 | 0;
        $6_1 = $6_1 + 1 | 0;
        if (($13_1 | 0) <= (1 | 0)) {
         break label$8
        }
        $13_1 = $14_1;
        $14_1 = 3;
        continue label$9;
       default:
        break label$10;
       };
      }
      $16_1 = 0;
      $17_1 = 0;
      $15_1 = 0;
      label$35 : {
       label$36 : {
        label$37 : {
         switch ($12_1 | 0) {
         case 0:
          $15_1 = HEAPU8[$9_1 >> 0] | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          break label$36;
         case 1:
          $15_1 = HEAPU16[$9_1 >> 1] | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          break label$36;
         case 2:
          $14_1 = $9_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $17_1 = $9_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $16_1 = $9_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          break label$36;
         case 3:
          break label$37;
         default:
          break label$35;
         };
        }
        $15_1 = HEAP32[$9_1 >> 2] | 0;
        $14_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
        $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
        $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
       }
       $15_1 = HEAPU8[$14_1 >> 0] | 0;
       $16_1 = HEAPU8[$16_1 >> 0] | 0;
       $17_1 = HEAPU8[$17_1 >> 0] | 0;
      }
      $14_1 = (HEAP32[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$6_1 >> 0] | 0) << 2 | 0) | 0;
      $18_1 = HEAPU8[($14_1 + 1 | 0) >> 0] | 0;
      $842_1 = (($18_1 + ((Math_imul(($17_1 & 255 | 0) - $18_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0;
      $17_1 = HEAPU8[$14_1 >> 0] | 0;
      $14_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
      $14_1 = $842_1 | (($17_1 + ((Math_imul(($16_1 & 255 | 0) - $17_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($14_1 + ((Math_imul(($15_1 & 255 | 0) - $14_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
      label$41 : {
       if (!$3_1) {
        break label$41
       }
       $14_1 = HEAPU8[($3_1 + ($14_1 & 255 | 0) | 0) >> 0] | 0;
      }
      HEAP8[$6_1 >> 0] = $14_1;
      $9_1 = $9_1 + $11_1 | 0;
      $6_1 = $6_1 + 1 | 0;
      $14_1 = 0;
      continue label$9;
     };
    }
    $6_1 = $6_1 + $4_1 | 0;
    $9_1 = $9_1 + $5_1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $628($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $6_1 = 0, $2_1 = 0, $3_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $52_1 = 0, $83_1 = 0, $114_1 = 0, $145_1 = 0;
  label$1 : {
   $1_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   if (($1_1 | 0) != (128 | 0)) {
    break label$1
   }
   $632($0_1 | 0, 63454 | 0);
   return;
  }
  label$2 : {
   $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$2
   }
   $3_1 = $1_1 >>> 3 | 0;
   $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $4_1 = $1_1 & 3 | 0;
   $5_1 = ($1_1 + 3 | 0 | 0) / (4 | 0) | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $7_1 = ((HEAP32[($0_1 + 36 | 0) >> 2] | 0) >> 1 | 0) << 1 | 0;
   $8_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) >> 1 | 0) << 1 | 0;
   label$3 : while (1) {
    $2_1 = $2_1 + -1 | 0;
    $9_1 = $5_1;
    label$4 : {
     label$5 : {
      switch ($4_1 | 0) {
      default:
       $0_1 = 0;
       break label$4;
      case 1:
       $0_1 = 3;
       break label$4;
      case 2:
       $0_1 = 2;
       break label$4;
      case 3:
       break label$5;
      };
     }
     $0_1 = 1;
    }
    label$9 : while (1) {
     label$10 : {
      switch ($0_1 | 0) {
      case 0:
       $0_1 = HEAPU16[$6_1 >> 1] | 0;
       $52_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 132184095 | 0;
       $0_1 = HEAPU16[$1_1 >> 1] | 0;
       $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 132184095 | 0;
       $0_1 = ((Math_imul($52_1 - $0_1 | 0, $3_1) >>> 5 | 0) + $0_1 | 0) & 132184095 | 0;
       HEAP16[$1_1 >> 1] = $0_1 >>> 16 | 0 | $0_1 | 0;
       $1_1 = $1_1 + 2 | 0;
       $6_1 = $6_1 + 2 | 0;
       $0_1 = 1;
       continue label$9;
      case 1:
       $0_1 = HEAPU16[$6_1 >> 1] | 0;
       $83_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 132184095 | 0;
       $0_1 = HEAPU16[$1_1 >> 1] | 0;
       $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 132184095 | 0;
       $0_1 = ((Math_imul($83_1 - $0_1 | 0, $3_1) >>> 5 | 0) + $0_1 | 0) & 132184095 | 0;
       HEAP16[$1_1 >> 1] = $0_1 >>> 16 | 0 | $0_1 | 0;
       $1_1 = $1_1 + 2 | 0;
       $6_1 = $6_1 + 2 | 0;
       $0_1 = 2;
       continue label$9;
      case 2:
       $0_1 = HEAPU16[$6_1 >> 1] | 0;
       $114_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 132184095 | 0;
       $0_1 = HEAPU16[$1_1 >> 1] | 0;
       $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 132184095 | 0;
       $0_1 = ((Math_imul($114_1 - $0_1 | 0, $3_1) >>> 5 | 0) + $0_1 | 0) & 132184095 | 0;
       HEAP16[$1_1 >> 1] = $0_1 >>> 16 | 0 | $0_1 | 0;
       $1_1 = $1_1 + 2 | 0;
       $6_1 = $6_1 + 2 | 0;
       $0_1 = 3;
       continue label$9;
      default:
       break label$10;
      };
     }
     $0_1 = HEAPU16[$6_1 >> 1] | 0;
     $145_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 132184095 | 0;
     $0_1 = HEAPU16[$1_1 >> 1] | 0;
     $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 132184095 | 0;
     $0_1 = ((Math_imul($145_1 - $0_1 | 0, $3_1) >>> 5 | 0) + $0_1 | 0) & 132184095 | 0;
     HEAP16[$1_1 >> 1] = $0_1 >>> 16 | 0 | $0_1 | 0;
     $0_1 = $9_1 + -1 | 0;
     $1_1 = $1_1 + 2 | 0;
     $6_1 = $6_1 + 2 | 0;
     label$14 : {
      label$15 : {
       if (($9_1 | 0) <= (1 | 0)) {
        break label$15
       }
       $9_1 = $0_1;
       break label$14;
      }
      $1_1 = $1_1 + $7_1 | 0;
      $6_1 = $6_1 + $8_1 | 0;
      if ($2_1) {
       continue label$3
      }
      break label$2;
     }
     $0_1 = 0;
     continue label$9;
    };
   };
  }
 }
 
 function $629($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $6_1 = 0, $2_1 = 0, $3_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $52_1 = 0, $83_1 = 0, $114_1 = 0, $145_1 = 0;
  label$1 : {
   $1_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   if (($1_1 | 0) != (128 | 0)) {
    break label$1
   }
   $632($0_1 | 0, 64478 | 0);
   return;
  }
  label$2 : {
   $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$2
   }
   $3_1 = $1_1 >>> 3 | 0;
   $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $4_1 = $1_1 & 3 | 0;
   $5_1 = ($1_1 + 3 | 0 | 0) / (4 | 0) | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $7_1 = ((HEAP32[($0_1 + 36 | 0) >> 2] | 0) >> 1 | 0) << 1 | 0;
   $8_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) >> 1 | 0) << 1 | 0;
   label$3 : while (1) {
    $2_1 = $2_1 + -1 | 0;
    $9_1 = $5_1;
    label$4 : {
     label$5 : {
      switch ($4_1 | 0) {
      default:
       $0_1 = 0;
       break label$4;
      case 1:
       $0_1 = 3;
       break label$4;
      case 2:
       $0_1 = 2;
       break label$4;
      case 3:
       break label$5;
      };
     }
     $0_1 = 1;
    }
    label$9 : while (1) {
     label$10 : {
      switch ($0_1 | 0) {
      case 0:
       $0_1 = HEAPU16[$6_1 >> 1] | 0;
       $52_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 65043487 | 0;
       $0_1 = HEAPU16[$1_1 >> 1] | 0;
       $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 65043487 | 0;
       $0_1 = ((Math_imul($52_1 - $0_1 | 0, $3_1) >>> 5 | 0) + $0_1 | 0) & 65043487 | 0;
       HEAP16[$1_1 >> 1] = $0_1 >>> 16 | 0 | $0_1 | 0;
       $1_1 = $1_1 + 2 | 0;
       $6_1 = $6_1 + 2 | 0;
       $0_1 = 1;
       continue label$9;
      case 1:
       $0_1 = HEAPU16[$6_1 >> 1] | 0;
       $83_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 65043487 | 0;
       $0_1 = HEAPU16[$1_1 >> 1] | 0;
       $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 65043487 | 0;
       $0_1 = ((Math_imul($83_1 - $0_1 | 0, $3_1) >>> 5 | 0) + $0_1 | 0) & 65043487 | 0;
       HEAP16[$1_1 >> 1] = $0_1 >>> 16 | 0 | $0_1 | 0;
       $1_1 = $1_1 + 2 | 0;
       $6_1 = $6_1 + 2 | 0;
       $0_1 = 2;
       continue label$9;
      case 2:
       $0_1 = HEAPU16[$6_1 >> 1] | 0;
       $114_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 65043487 | 0;
       $0_1 = HEAPU16[$1_1 >> 1] | 0;
       $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 65043487 | 0;
       $0_1 = ((Math_imul($114_1 - $0_1 | 0, $3_1) >>> 5 | 0) + $0_1 | 0) & 65043487 | 0;
       HEAP16[$1_1 >> 1] = $0_1 >>> 16 | 0 | $0_1 | 0;
       $1_1 = $1_1 + 2 | 0;
       $6_1 = $6_1 + 2 | 0;
       $0_1 = 3;
       continue label$9;
      default:
       break label$10;
      };
     }
     $0_1 = HEAPU16[$6_1 >> 1] | 0;
     $145_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 65043487 | 0;
     $0_1 = HEAPU16[$1_1 >> 1] | 0;
     $0_1 = ($0_1 << 16 | 0 | $0_1 | 0) & 65043487 | 0;
     $0_1 = ((Math_imul($145_1 - $0_1 | 0, $3_1) >>> 5 | 0) + $0_1 | 0) & 65043487 | 0;
     HEAP16[$1_1 >> 1] = $0_1 >>> 16 | 0 | $0_1 | 0;
     $0_1 = $9_1 + -1 | 0;
     $1_1 = $1_1 + 2 | 0;
     $6_1 = $6_1 + 2 | 0;
     label$14 : {
      label$15 : {
       if (($9_1 | 0) <= (1 | 0)) {
        break label$15
       }
       $9_1 = $0_1;
       break label$14;
      }
      $1_1 = $1_1 + $7_1 | 0;
      $6_1 = $6_1 + $8_1 | 0;
      if ($2_1) {
       continue label$3
      }
      break label$2;
     }
     $0_1 = 0;
     continue label$9;
    };
   };
  }
 }
 
 function $630($0_1) {
  $0_1 = $0_1 | 0;
  var $8_1 = 0, $5_1 = 0, $4_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0, $3_1 = 0, $1_1 = 0, $2_1 = 0, $10_1 = 0, $11_1 = 0, $174_1 = 0, $176_1 = 0, $209_1 = 0, $211_1 = 0, $244_1 = 0, $246_1 = 0, $279_1 = 0, $281_1 = 0;
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) >> 2 | 0;
  $2_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) >> 2 | 0;
  $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $4_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
    if (($4_1 | 0) != (128 | 0)) {
     break label$2
    }
    if (!$3_1) {
     break label$1
    }
    $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    $6_1 = $5_1 & 3 | 0;
    $7_1 = ($5_1 + 3 | 0 | 0) / (4 | 0) | 0;
    $5_1 = HEAP32[$0_1 >> 2] | 0;
    $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    label$3 : while (1) {
     $3_1 = $3_1 + -1 | 0;
     $8_1 = $7_1;
     label$4 : {
      label$5 : {
       switch ($6_1 | 0) {
       default:
        $4_1 = 0;
        break label$4;
       case 1:
        $4_1 = 3;
        break label$4;
       case 2:
        $4_1 = 2;
        break label$4;
       case 3:
        break label$5;
       };
      }
      $4_1 = 1;
     }
     label$9 : while (1) {
      label$10 : {
       switch ($4_1 | 0) {
       case 0:
        $4_1 = HEAP32[$0_1 >> 2] | 0;
        $9_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$0_1 >> 2] = ((($4_1 & 16711422 | 0) + ($9_1 & 16711422 | 0) | 0) >>> 1 | 0) + (($9_1 & $4_1 | 0) & 65793 | 0) | 0 | -16777216 | 0;
        $0_1 = $0_1 + 4 | 0;
        $5_1 = $5_1 + 4 | 0;
        $4_1 = 1;
        continue label$9;
       case 1:
        $4_1 = HEAP32[$0_1 >> 2] | 0;
        $9_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$0_1 >> 2] = ((($4_1 & 16711422 | 0) + ($9_1 & 16711422 | 0) | 0) >>> 1 | 0) + (($9_1 & $4_1 | 0) & 65793 | 0) | 0 | -16777216 | 0;
        $0_1 = $0_1 + 4 | 0;
        $5_1 = $5_1 + 4 | 0;
        $4_1 = 2;
        continue label$9;
       case 2:
        $4_1 = HEAP32[$0_1 >> 2] | 0;
        $9_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$0_1 >> 2] = ((($4_1 & 16711422 | 0) + ($9_1 & 16711422 | 0) | 0) >>> 1 | 0) + (($9_1 & $4_1 | 0) & 65793 | 0) | 0 | -16777216 | 0;
        $0_1 = $0_1 + 4 | 0;
        $5_1 = $5_1 + 4 | 0;
        $4_1 = 3;
        continue label$9;
       default:
        break label$10;
       };
      }
      $4_1 = HEAP32[$0_1 >> 2] | 0;
      $9_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$0_1 >> 2] = ((($4_1 & 16711422 | 0) + ($9_1 & 16711422 | 0) | 0) >>> 1 | 0) + (($9_1 & $4_1 | 0) & 65793 | 0) | 0 | -16777216 | 0;
      $4_1 = $8_1 + -1 | 0;
      $0_1 = $0_1 + 4 | 0;
      $5_1 = $5_1 + 4 | 0;
      label$14 : {
       label$15 : {
        if (($8_1 | 0) <= (1 | 0)) {
         break label$15
        }
        $8_1 = $4_1;
        break label$14;
       }
       $0_1 = $0_1 + ($1_1 << 2 | 0) | 0;
       $5_1 = $5_1 + ($2_1 << 2 | 0) | 0;
       if ($3_1) {
        continue label$3
       }
       break label$1;
      }
      $4_1 = 0;
      continue label$9;
     };
    };
   }
   if (!$3_1) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $10_1 = $5_1 & 3 | 0;
   $11_1 = ($5_1 + 3 | 0 | 0) / (4 | 0) | 0;
   $5_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   label$16 : while (1) {
    $3_1 = $3_1 + -1 | 0;
    $9_1 = $11_1;
    label$17 : {
     label$18 : {
      switch ($10_1 | 0) {
      default:
       $8_1 = 0;
       break label$17;
      case 1:
       $8_1 = 3;
       break label$17;
      case 2:
       $8_1 = 2;
       break label$17;
      case 3:
       break label$18;
      };
     }
     $8_1 = 1;
    }
    label$22 : while (1) {
     label$23 : {
      switch ($8_1 | 0) {
      case 0:
       $8_1 = HEAP32[$5_1 >> 2] | 0;
       $6_1 = HEAP32[$0_1 >> 2] | 0;
       $7_1 = $6_1 & 65280 | 0;
       $174_1 = ((Math_imul(($8_1 & 65280 | 0) - $7_1 | 0, $4_1) >>> 8 | 0) + $7_1 | 0) & 65280 | 0;
       $176_1 = $8_1 & 16711935 | 0;
       $8_1 = $6_1 & 16711935 | 0;
       HEAP32[$0_1 >> 2] = $174_1 | (((Math_imul($176_1 - $8_1 | 0, $4_1) >>> 8 | 0) + $8_1 | 0) & 16711935 | 0) | 0 | -16777216 | 0;
       $0_1 = $0_1 + 4 | 0;
       $5_1 = $5_1 + 4 | 0;
       $8_1 = 1;
       continue label$22;
      case 1:
       $8_1 = HEAP32[$5_1 >> 2] | 0;
       $6_1 = HEAP32[$0_1 >> 2] | 0;
       $7_1 = $6_1 & 65280 | 0;
       $209_1 = ((Math_imul(($8_1 & 65280 | 0) - $7_1 | 0, $4_1) >>> 8 | 0) + $7_1 | 0) & 65280 | 0;
       $211_1 = $8_1 & 16711935 | 0;
       $8_1 = $6_1 & 16711935 | 0;
       HEAP32[$0_1 >> 2] = $209_1 | (((Math_imul($211_1 - $8_1 | 0, $4_1) >>> 8 | 0) + $8_1 | 0) & 16711935 | 0) | 0 | -16777216 | 0;
       $0_1 = $0_1 + 4 | 0;
       $5_1 = $5_1 + 4 | 0;
       $8_1 = 2;
       continue label$22;
      case 2:
       $8_1 = HEAP32[$5_1 >> 2] | 0;
       $6_1 = HEAP32[$0_1 >> 2] | 0;
       $7_1 = $6_1 & 65280 | 0;
       $244_1 = ((Math_imul(($8_1 & 65280 | 0) - $7_1 | 0, $4_1) >>> 8 | 0) + $7_1 | 0) & 65280 | 0;
       $246_1 = $8_1 & 16711935 | 0;
       $8_1 = $6_1 & 16711935 | 0;
       HEAP32[$0_1 >> 2] = $244_1 | (((Math_imul($246_1 - $8_1 | 0, $4_1) >>> 8 | 0) + $8_1 | 0) & 16711935 | 0) | 0 | -16777216 | 0;
       $0_1 = $0_1 + 4 | 0;
       $5_1 = $5_1 + 4 | 0;
       $8_1 = 3;
       continue label$22;
      default:
       break label$23;
      };
     }
     $8_1 = HEAP32[$5_1 >> 2] | 0;
     $6_1 = HEAP32[$0_1 >> 2] | 0;
     $7_1 = $6_1 & 65280 | 0;
     $279_1 = ((Math_imul(($8_1 & 65280 | 0) - $7_1 | 0, $4_1) >>> 8 | 0) + $7_1 | 0) & 65280 | 0;
     $281_1 = $8_1 & 16711935 | 0;
     $8_1 = $6_1 & 16711935 | 0;
     HEAP32[$0_1 >> 2] = $279_1 | (((Math_imul($281_1 - $8_1 | 0, $4_1) >>> 8 | 0) + $8_1 | 0) & 16711935 | 0) | 0 | -16777216 | 0;
     $8_1 = $9_1 + -1 | 0;
     $0_1 = $0_1 + 4 | 0;
     $5_1 = $5_1 + 4 | 0;
     label$27 : {
      label$28 : {
       if (($9_1 | 0) <= (1 | 0)) {
        break label$28
       }
       $9_1 = $8_1;
       break label$27;
      }
      $0_1 = $0_1 + ($1_1 << 2 | 0) | 0;
      $5_1 = $5_1 + ($2_1 << 2 | 0) | 0;
      if ($3_1) {
       continue label$16
      }
      break label$1;
     }
     $8_1 = 0;
     continue label$22;
    };
   };
  }
 }
 
 function $631($0_1) {
  $0_1 = $0_1 | 0;
  var $15_1 = 0, $17_1 = 0, $7_1 = 0, $16_1 = 0, $19_1 = 0, $10_1 = 0, $18_1 = 0, $2_1 = 0, $4_1 = 0, $12_1 = 0, $3_1 = 0, $11_1 = 0, $13_1 = 0, $1_1 = 0, $14_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $225_1 = 0, $434_1 = 0, $643_1 = 0, $852_1 = 0, $1061_1 = 0, $1270_1 = 0, $1479 = 0, $1693 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $8_1 = $7_1 & 7 | 0;
   $9_1 = ($7_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $7_1 = HEAP32[$0_1 >> 2] | 0;
   $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $11_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   $12_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
   $13_1 = $12_1 + -1 | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $14_1 = $9_1;
    label$3 : {
     label$4 : {
      switch ($8_1 | 0) {
      default:
       $15_1 = 7;
       break label$3;
      case 1:
       $15_1 = 6;
       break label$3;
      case 2:
       $15_1 = 5;
       break label$3;
      case 3:
       $15_1 = 4;
       break label$3;
      case 4:
       $15_1 = 3;
       break label$3;
      case 5:
       $15_1 = 2;
       break label$3;
      case 6:
       $15_1 = 1;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $15_1 = 0;
    }
    label$12 : {
     label$13 : while (1) {
      label$14 : {
       switch ($15_1 | 0) {
       case 0:
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$22 : {
         label$23 : {
          label$24 : {
           switch ($13_1 | 0) {
           case 0:
            $15_1 = HEAPU8[$7_1 >> 0] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$23;
           case 1:
            $15_1 = HEAPU16[$7_1 >> 1] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$23;
           case 2:
            $16_1 = $7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $19_1 = $7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = 0;
            break label$23;
           case 3:
            break label$24;
           default:
            break label$22;
           };
          }
          $15_1 = HEAP32[$7_1 >> 2] | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $18_1 = HEAPU8[$16_1 >> 0] | 0;
         $16_1 = HEAPU8[$19_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
        }
        label$28 : {
         if (($15_1 | 0) == ($3_1 | 0)) {
          break label$28
         }
         $15_1 = (HEAP32[((HEAP32[($11_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$10_1 >> 0] | 0) << 2 | 0) | 0;
         $19_1 = HEAPU8[($15_1 + 1 | 0) >> 0] | 0;
         $225_1 = (($19_1 + ((Math_imul(($17_1 & 255 | 0) - $19_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0;
         $17_1 = HEAPU8[$15_1 >> 0] | 0;
         $15_1 = HEAPU8[($15_1 + 2 | 0) >> 0] | 0;
         $15_1 = $225_1 | (($17_1 + ((Math_imul(($16_1 & 255 | 0) - $17_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($15_1 + ((Math_imul(($18_1 & 255 | 0) - $15_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
         label$29 : {
          if (!$4_1) {
           break label$29
          }
          $15_1 = HEAPU8[($4_1 + ($15_1 & 255 | 0) | 0) >> 0] | 0;
         }
         HEAP8[$10_1 >> 0] = $15_1;
        }
        $7_1 = $7_1 + $12_1 | 0;
        $10_1 = $10_1 + 1 | 0;
        $15_1 = 1;
        continue label$13;
       case 1:
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$30 : {
         label$31 : {
          label$32 : {
           switch ($13_1 | 0) {
           case 0:
            $15_1 = HEAPU8[$7_1 >> 0] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$31;
           case 1:
            $15_1 = HEAPU16[$7_1 >> 1] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$31;
           case 2:
            $16_1 = $7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $19_1 = $7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = 0;
            break label$31;
           case 3:
            break label$32;
           default:
            break label$30;
           };
          }
          $15_1 = HEAP32[$7_1 >> 2] | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $18_1 = HEAPU8[$16_1 >> 0] | 0;
         $16_1 = HEAPU8[$19_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
        }
        label$36 : {
         if (($15_1 | 0) == ($3_1 | 0)) {
          break label$36
         }
         $15_1 = (HEAP32[((HEAP32[($11_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$10_1 >> 0] | 0) << 2 | 0) | 0;
         $19_1 = HEAPU8[($15_1 + 1 | 0) >> 0] | 0;
         $434_1 = (($19_1 + ((Math_imul(($17_1 & 255 | 0) - $19_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0;
         $17_1 = HEAPU8[$15_1 >> 0] | 0;
         $15_1 = HEAPU8[($15_1 + 2 | 0) >> 0] | 0;
         $15_1 = $434_1 | (($17_1 + ((Math_imul(($16_1 & 255 | 0) - $17_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($15_1 + ((Math_imul(($18_1 & 255 | 0) - $15_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
         label$37 : {
          if (!$4_1) {
           break label$37
          }
          $15_1 = HEAPU8[($4_1 + ($15_1 & 255 | 0) | 0) >> 0] | 0;
         }
         HEAP8[$10_1 >> 0] = $15_1;
        }
        $7_1 = $7_1 + $12_1 | 0;
        $10_1 = $10_1 + 1 | 0;
        $15_1 = 2;
        continue label$13;
       case 2:
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$38 : {
         label$39 : {
          label$40 : {
           switch ($13_1 | 0) {
           case 0:
            $15_1 = HEAPU8[$7_1 >> 0] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$39;
           case 1:
            $15_1 = HEAPU16[$7_1 >> 1] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$39;
           case 2:
            $16_1 = $7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $19_1 = $7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = 0;
            break label$39;
           case 3:
            break label$40;
           default:
            break label$38;
           };
          }
          $15_1 = HEAP32[$7_1 >> 2] | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $18_1 = HEAPU8[$16_1 >> 0] | 0;
         $16_1 = HEAPU8[$19_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
        }
        label$44 : {
         if (($15_1 | 0) == ($3_1 | 0)) {
          break label$44
         }
         $15_1 = (HEAP32[((HEAP32[($11_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$10_1 >> 0] | 0) << 2 | 0) | 0;
         $19_1 = HEAPU8[($15_1 + 1 | 0) >> 0] | 0;
         $643_1 = (($19_1 + ((Math_imul(($17_1 & 255 | 0) - $19_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0;
         $17_1 = HEAPU8[$15_1 >> 0] | 0;
         $15_1 = HEAPU8[($15_1 + 2 | 0) >> 0] | 0;
         $15_1 = $643_1 | (($17_1 + ((Math_imul(($16_1 & 255 | 0) - $17_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($15_1 + ((Math_imul(($18_1 & 255 | 0) - $15_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
         label$45 : {
          if (!$4_1) {
           break label$45
          }
          $15_1 = HEAPU8[($4_1 + ($15_1 & 255 | 0) | 0) >> 0] | 0;
         }
         HEAP8[$10_1 >> 0] = $15_1;
        }
        $7_1 = $7_1 + $12_1 | 0;
        $10_1 = $10_1 + 1 | 0;
        $15_1 = 3;
        continue label$13;
       case 3:
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$46 : {
         label$47 : {
          label$48 : {
           switch ($13_1 | 0) {
           case 0:
            $15_1 = HEAPU8[$7_1 >> 0] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$47;
           case 1:
            $15_1 = HEAPU16[$7_1 >> 1] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$47;
           case 2:
            $16_1 = $7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $19_1 = $7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = 0;
            break label$47;
           case 3:
            break label$48;
           default:
            break label$46;
           };
          }
          $15_1 = HEAP32[$7_1 >> 2] | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $18_1 = HEAPU8[$16_1 >> 0] | 0;
         $16_1 = HEAPU8[$19_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
        }
        label$52 : {
         if (($15_1 | 0) == ($3_1 | 0)) {
          break label$52
         }
         $15_1 = (HEAP32[((HEAP32[($11_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$10_1 >> 0] | 0) << 2 | 0) | 0;
         $19_1 = HEAPU8[($15_1 + 1 | 0) >> 0] | 0;
         $852_1 = (($19_1 + ((Math_imul(($17_1 & 255 | 0) - $19_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0;
         $17_1 = HEAPU8[$15_1 >> 0] | 0;
         $15_1 = HEAPU8[($15_1 + 2 | 0) >> 0] | 0;
         $15_1 = $852_1 | (($17_1 + ((Math_imul(($16_1 & 255 | 0) - $17_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($15_1 + ((Math_imul(($18_1 & 255 | 0) - $15_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
         label$53 : {
          if (!$4_1) {
           break label$53
          }
          $15_1 = HEAPU8[($4_1 + ($15_1 & 255 | 0) | 0) >> 0] | 0;
         }
         HEAP8[$10_1 >> 0] = $15_1;
        }
        $7_1 = $7_1 + $12_1 | 0;
        $10_1 = $10_1 + 1 | 0;
        $15_1 = 4;
        continue label$13;
       case 4:
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$54 : {
         label$55 : {
          label$56 : {
           switch ($13_1 | 0) {
           case 0:
            $15_1 = HEAPU8[$7_1 >> 0] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$55;
           case 1:
            $15_1 = HEAPU16[$7_1 >> 1] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$55;
           case 2:
            $16_1 = $7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $19_1 = $7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = 0;
            break label$55;
           case 3:
            break label$56;
           default:
            break label$54;
           };
          }
          $15_1 = HEAP32[$7_1 >> 2] | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $18_1 = HEAPU8[$16_1 >> 0] | 0;
         $16_1 = HEAPU8[$19_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
        }
        label$60 : {
         if (($15_1 | 0) == ($3_1 | 0)) {
          break label$60
         }
         $15_1 = (HEAP32[((HEAP32[($11_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$10_1 >> 0] | 0) << 2 | 0) | 0;
         $19_1 = HEAPU8[($15_1 + 1 | 0) >> 0] | 0;
         $1061_1 = (($19_1 + ((Math_imul(($17_1 & 255 | 0) - $19_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0;
         $17_1 = HEAPU8[$15_1 >> 0] | 0;
         $15_1 = HEAPU8[($15_1 + 2 | 0) >> 0] | 0;
         $15_1 = $1061_1 | (($17_1 + ((Math_imul(($16_1 & 255 | 0) - $17_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($15_1 + ((Math_imul(($18_1 & 255 | 0) - $15_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
         label$61 : {
          if (!$4_1) {
           break label$61
          }
          $15_1 = HEAPU8[($4_1 + ($15_1 & 255 | 0) | 0) >> 0] | 0;
         }
         HEAP8[$10_1 >> 0] = $15_1;
        }
        $7_1 = $7_1 + $12_1 | 0;
        $10_1 = $10_1 + 1 | 0;
        $15_1 = 5;
        continue label$13;
       case 5:
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$62 : {
         label$63 : {
          label$64 : {
           switch ($13_1 | 0) {
           case 0:
            $15_1 = HEAPU8[$7_1 >> 0] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$63;
           case 1:
            $15_1 = HEAPU16[$7_1 >> 1] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$63;
           case 2:
            $16_1 = $7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $19_1 = $7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = 0;
            break label$63;
           case 3:
            break label$64;
           default:
            break label$62;
           };
          }
          $15_1 = HEAP32[$7_1 >> 2] | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $18_1 = HEAPU8[$16_1 >> 0] | 0;
         $16_1 = HEAPU8[$19_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
        }
        label$68 : {
         if (($15_1 | 0) == ($3_1 | 0)) {
          break label$68
         }
         $15_1 = (HEAP32[((HEAP32[($11_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$10_1 >> 0] | 0) << 2 | 0) | 0;
         $19_1 = HEAPU8[($15_1 + 1 | 0) >> 0] | 0;
         $1270_1 = (($19_1 + ((Math_imul(($17_1 & 255 | 0) - $19_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0;
         $17_1 = HEAPU8[$15_1 >> 0] | 0;
         $15_1 = HEAPU8[($15_1 + 2 | 0) >> 0] | 0;
         $15_1 = $1270_1 | (($17_1 + ((Math_imul(($16_1 & 255 | 0) - $17_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($15_1 + ((Math_imul(($18_1 & 255 | 0) - $15_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
         label$69 : {
          if (!$4_1) {
           break label$69
          }
          $15_1 = HEAPU8[($4_1 + ($15_1 & 255 | 0) | 0) >> 0] | 0;
         }
         HEAP8[$10_1 >> 0] = $15_1;
        }
        $7_1 = $7_1 + $12_1 | 0;
        $10_1 = $10_1 + 1 | 0;
        $15_1 = 6;
        continue label$13;
       case 6:
        $15_1 = 0;
        $16_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$70 : {
         label$71 : {
          label$72 : {
           switch ($13_1 | 0) {
           case 0:
            $15_1 = HEAPU8[$7_1 >> 0] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$71;
           case 1:
            $15_1 = HEAPU16[$7_1 >> 1] | 0;
            $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$71;
           case 2:
            $16_1 = $7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $19_1 = $7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = 0;
            break label$71;
           case 3:
            break label$72;
           default:
            break label$70;
           };
          }
          $15_1 = HEAP32[$7_1 >> 2] | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $19_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $18_1 = HEAPU8[$16_1 >> 0] | 0;
         $16_1 = HEAPU8[$19_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
        }
        label$76 : {
         if (($15_1 | 0) == ($3_1 | 0)) {
          break label$76
         }
         $15_1 = (HEAP32[((HEAP32[($11_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$10_1 >> 0] | 0) << 2 | 0) | 0;
         $19_1 = HEAPU8[($15_1 + 1 | 0) >> 0] | 0;
         $1479 = (($19_1 + ((Math_imul(($17_1 & 255 | 0) - $19_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0;
         $17_1 = HEAPU8[$15_1 >> 0] | 0;
         $15_1 = HEAPU8[($15_1 + 2 | 0) >> 0] | 0;
         $15_1 = $1479 | (($17_1 + ((Math_imul(($16_1 & 255 | 0) - $17_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($15_1 + ((Math_imul(($18_1 & 255 | 0) - $15_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
         label$77 : {
          if (!$4_1) {
           break label$77
          }
          $15_1 = HEAPU8[($4_1 + ($15_1 & 255 | 0) | 0) >> 0] | 0;
         }
         HEAP8[$10_1 >> 0] = $15_1;
        }
        $15_1 = $14_1 + -1 | 0;
        $7_1 = $7_1 + $12_1 | 0;
        $10_1 = $10_1 + 1 | 0;
        if (($14_1 | 0) <= (1 | 0)) {
         break label$12
        }
        $14_1 = $15_1;
        $15_1 = 7;
        continue label$13;
       default:
        break label$14;
       };
      }
      $15_1 = 0;
      $17_1 = 0;
      $18_1 = 0;
      $16_1 = 0;
      label$78 : {
       label$79 : {
        label$80 : {
         switch ($13_1 | 0) {
         case 0:
          $15_1 = HEAPU8[$7_1 >> 0] | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $18_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          break label$79;
         case 1:
          $15_1 = HEAPU16[$7_1 >> 1] | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $18_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          break label$79;
         case 2:
          $16_1 = $7_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $18_1 = $7_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $17_1 = $7_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $15_1 = 0;
          break label$79;
         case 3:
          break label$80;
         default:
          break label$78;
         };
        }
        $15_1 = HEAP32[$7_1 >> 2] | 0;
        $16_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
        $18_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
        $17_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $15_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
       }
       $16_1 = HEAPU8[$16_1 >> 0] | 0;
       $17_1 = HEAPU8[$17_1 >> 0] | 0;
       $18_1 = HEAPU8[$18_1 >> 0] | 0;
      }
      label$84 : {
       if (($15_1 | 0) == ($3_1 | 0)) {
        break label$84
       }
       $15_1 = (HEAP32[((HEAP32[($11_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAPU8[$10_1 >> 0] | 0) << 2 | 0) | 0;
       $19_1 = HEAPU8[($15_1 + 1 | 0) >> 0] | 0;
       $1693 = (($19_1 + ((Math_imul(($18_1 & 255 | 0) - $19_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) >>> 3 | 0) & 28 | 0;
       $18_1 = HEAPU8[$15_1 >> 0] | 0;
       $15_1 = HEAPU8[($15_1 + 2 | 0) >> 0] | 0;
       $15_1 = $1693 | (($18_1 + ((Math_imul(($17_1 & 255 | 0) - $18_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & -32 | 0) | 0 | ((($15_1 + ((Math_imul(($16_1 & 255 | 0) - $15_1 | 0, $2_1) | 0) / (255 | 0) | 0) | 0) & 192 | 0) >>> 6 | 0) | 0;
       label$85 : {
        if (!$4_1) {
         break label$85
        }
        $15_1 = HEAPU8[($4_1 + ($15_1 & 255 | 0) | 0) >> 0] | 0;
       }
       HEAP8[$10_1 >> 0] = $15_1;
      }
      $7_1 = $7_1 + $12_1 | 0;
      $10_1 = $10_1 + 1 | 0;
      $15_1 = 0;
      continue label$13;
     };
    }
    $10_1 = $10_1 + $5_1 | 0;
    $7_1 = $7_1 + $6_1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $632($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $9_1 = 0, $8_1 = 0, $13_1 = 0, $14_1 = 0, $6_1 = 0, $2_1 = 0, $5_1 = 0, $7_1 = 0, $3_1 = 0, $4_1 = 0, $11_1 = 0, $15_1 = 0, $10_1 = 0, $12_1 = 0, $85_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $4_1 = $3_1 + -1 | 0;
   $5_1 = $1_1 ^ -1 | 0;
   $6_1 = Math_imul($1_1, 65537);
   $7_1 = $6_1 ^ -1 | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   $9_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $10_1 = ((HEAP32[($0_1 + 36 | 0) >> 2] | 0) >> 1 | 0) << 1 | 0;
   $11_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) >> 1 | 0;
   $12_1 = ($11_1 + -1 | 0) << 1 | 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (!(($8_1 ^ $9_1 | 0) & 2 | 0)) {
       break label$4
      }
      label$5 : {
       label$6 : {
        if ($9_1 & 2 | 0) {
         break label$6
        }
        $13_1 = $3_1;
        break label$5;
       }
       $0_1 = HEAPU16[$8_1 >> 1] | 0;
       $13_1 = HEAPU16[$9_1 >> 1] | 0;
       HEAP16[$9_1 >> 1] = ((($0_1 & $1_1 | 0) + ($13_1 & $1_1 | 0) | 0) >>> 1 | 0) + (($13_1 & $5_1 | 0) & $0_1 | 0) | 0;
       $8_1 = $8_1 + 2 | 0;
       $9_1 = $9_1 + 2 | 0;
       $13_1 = $4_1;
      }
      $0_1 = $8_1 + 2 | 0;
      $8_1 = HEAP32[($8_1 + -2 | 0) >> 2] | 0;
      label$7 : {
       if (($13_1 | 0) < (2 | 0)) {
        break label$7
       }
       label$8 : while (1) {
        $85_1 = $8_1 >>> 16 | 0;
        $8_1 = HEAP32[$0_1 >> 2] | 0;
        $14_1 = $85_1 | ($8_1 << 16 | 0) | 0;
        $15_1 = HEAP32[$9_1 >> 2] | 0;
        HEAP32[$9_1 >> 2] = ((($14_1 & $6_1 | 0) >>> 1 | 0) + (($15_1 & $6_1 | 0) >>> 1 | 0) | 0) + (($15_1 & $7_1 | 0) & $14_1 | 0) | 0;
        $0_1 = $0_1 + 4 | 0;
        $9_1 = $9_1 + 4 | 0;
        $14_1 = $13_1 >>> 0 > 3 >>> 0;
        $13_1 = $13_1 + -2 | 0;
        if ($14_1) {
         continue label$8
        }
        break label$8;
       };
      }
      label$9 : {
       if (!$13_1) {
        break label$9
       }
       $13_1 = HEAPU16[$9_1 >> 1] | 0;
       $8_1 = $8_1 >>> 16 | 0;
       HEAP16[$9_1 >> 1] = ((($13_1 & $1_1 | 0) + ($8_1 & $1_1 | 0) | 0) >>> 1 | 0) + (($8_1 & $5_1 | 0) & $13_1 | 0) | 0;
       $9_1 = $9_1 + 2 | 0;
       $0_1 = $0_1 + 2 | 0;
      }
      $8_1 = $0_1 + $12_1 | 0;
      break label$3;
     }
     label$10 : {
      label$11 : {
       if ($8_1 & 2 | 0) {
        break label$11
       }
       $0_1 = $3_1;
       break label$10;
      }
      $0_1 = HEAPU16[$8_1 >> 1] | 0;
      $13_1 = HEAPU16[$9_1 >> 1] | 0;
      HEAP16[$9_1 >> 1] = ((($0_1 & $1_1 | 0) + ($13_1 & $1_1 | 0) | 0) >>> 1 | 0) + (($13_1 & $5_1 | 0) & $0_1 | 0) | 0;
      $9_1 = $9_1 + 2 | 0;
      $8_1 = $8_1 + 2 | 0;
      $0_1 = $4_1;
     }
     label$12 : {
      label$13 : {
       if (($0_1 | 0) >= (2 | 0)) {
        break label$13
       }
       $14_1 = $0_1;
       break label$12;
      }
      label$14 : {
       $14_1 = $0_1 + -2 | 0;
       if ($14_1 & 2 | 0) {
        break label$14
       }
       $0_1 = HEAP32[$9_1 >> 2] | 0;
       $13_1 = HEAP32[$8_1 >> 2] | 0;
       HEAP32[$9_1 >> 2] = ((($0_1 & $6_1 | 0) >>> 1 | 0) + (($13_1 & $6_1 | 0) >>> 1 | 0) | 0) + (($13_1 & $7_1 | 0) & $0_1 | 0) | 0;
       $9_1 = $9_1 + 4 | 0;
       $8_1 = $8_1 + 4 | 0;
       $0_1 = $14_1;
      }
      if ($14_1 >>> 0 < 2 >>> 0) {
       break label$12
      }
      label$15 : while (1) {
       $13_1 = HEAP32[$9_1 >> 2] | 0;
       $14_1 = HEAP32[$8_1 >> 2] | 0;
       HEAP32[$9_1 >> 2] = ((($13_1 & $6_1 | 0) >>> 1 | 0) + (($14_1 & $6_1 | 0) >>> 1 | 0) | 0) + (($14_1 & $7_1 | 0) & $13_1 | 0) | 0;
       $13_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
       $14_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
       HEAP32[($9_1 + 4 | 0) >> 2] = ((($13_1 & $6_1 | 0) >>> 1 | 0) + (($14_1 & $6_1 | 0) >>> 1 | 0) | 0) + (($14_1 & $7_1 | 0) & $13_1 | 0) | 0;
       $9_1 = $9_1 + 8 | 0;
       $8_1 = $8_1 + 8 | 0;
       $13_1 = $0_1 + -6 | 0;
       $14_1 = $0_1 + -4 | 0;
       $0_1 = $14_1;
       if ($13_1 >>> 0 < -4 >>> 0) {
        continue label$15
       }
       break label$15;
      };
     }
     label$16 : {
      if (!$14_1) {
       break label$16
      }
      $0_1 = HEAPU16[$8_1 >> 1] | 0;
      $13_1 = HEAPU16[$9_1 >> 1] | 0;
      HEAP16[$9_1 >> 1] = ((($0_1 & $1_1 | 0) + ($13_1 & $1_1 | 0) | 0) >>> 1 | 0) + (($13_1 & $5_1 | 0) & $0_1 | 0) | 0;
      $9_1 = $9_1 + 2 | 0;
      $8_1 = $8_1 + 2 | 0;
     }
     $8_1 = $8_1 + ($11_1 << 1 | 0) | 0;
    }
    $9_1 = $9_1 + $10_1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $633($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $1_1 = 0, $2_1 = 0, $7_1 = 0, $6_1 = 0;
  $1_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $3_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + 4 | 0) >> 2] | 0;
   $4_1 = HEAPU8[($3_1 + 8 | 0) >> 0] | 0;
   if ($4_1 >>> 0 < 8 >>> 0) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   label$2 : {
    $0_1 = (HEAP32[($2_1 + 68 | 0) >> 2] | 0) & -28673 | 0;
    if (($0_1 | 0) == (256 | 0)) {
     break label$2
    }
    if ($0_1) {
     break label$1
    }
    label$3 : {
     if (($4_1 | 0) != (8 | 0)) {
      break label$3
     }
     label$4 : {
      if ((HEAPU8[($5_1 + 9 | 0) >> 0] | 0 | 0) != (4 | 0)) {
       break label$4
      }
      label$5 : {
       $0_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($0_1 | 0) == (1072693248 | 0)) {
        break label$5
       }
       if (($0_1 | 0) != (16711680 | 0)) {
        break label$4
       }
       if ((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) != (65280 | 0)) {
        break label$4
       }
       if ((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) != (255 | 0)) {
        break label$4
       }
       return 126 | 0;
      }
      if ((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) != (1047552 | 0)) {
       break label$4
      }
      if ((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) != (1023 | 0)) {
       break label$4
      }
      return 127 | 0;
     }
     return 128 | 0;
    }
    label$6 : {
     label$7 : {
      if (HEAP32[($3_1 + 24 | 0) >> 2] | 0) {
       break label$7
      }
      $6_1 = 1;
      break label$6;
     }
     $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0 ? 4 : 2;
    }
    label$8 : {
     label$9 : {
      $2_1 = HEAP32[(((HEAPU8[($5_1 + 9 | 0) >> 0] | 0) << 2 | 0) + 90092 | 0) >> 2] | 0;
      $7_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if ($7_1) {
       break label$9
      }
      $0_1 = $2_1;
      break label$8;
     }
     $1_1 = 0;
     label$10 : while (1) {
      label$11 : {
       label$12 : {
        $0_1 = $2_1 + Math_imul($1_1, 40) | 0;
        $4_1 = HEAP32[$0_1 >> 2] | 0;
        if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) == ($4_1 | 0)) {
         break label$12
        }
        if ($4_1) {
         break label$11
        }
       }
       label$13 : {
        $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) == ($4_1 | 0)) {
         break label$13
        }
        if ($4_1) {
         break label$11
        }
       }
       label$14 : {
        $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if ((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) == ($4_1 | 0)) {
         break label$14
        }
        if ($4_1) {
         break label$11
        }
       }
       label$15 : {
        $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
        if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($4_1 | 0)) {
         break label$15
        }
        if ($4_1) {
         break label$11
        }
       }
       label$16 : {
        $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        if ((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) == ($4_1 | 0)) {
         break label$16
        }
        if ($4_1) {
         break label$11
        }
       }
       label$17 : {
        $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
        if ((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) == ($4_1 | 0)) {
         break label$17
        }
        if ($4_1) {
         break label$11
        }
       }
       if (($7_1 | 0) != (HEAPU8[($3_1 + 9 | 0) >> 0] | 0 | 0)) {
        break label$11
       }
       if (!((HEAP32[($0_1 + 36 | 0) >> 2] | 0) & $6_1 | 0)) {
        break label$11
       }
       $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
       $7_1 = $562() | 0;
       if (($4_1 & ((($566() | 0 | 0) != (0 | 0)) << 3 | 0 | ($7_1 | 0) != (0 | 0) | 0) | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
        break label$8
       }
      }
      $1_1 = $1_1 + 1 | 0;
      $0_1 = $2_1 + Math_imul($1_1, 40) | 0;
      $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      if ($7_1) {
       continue label$10
      }
      break label$10;
     };
    }
    $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    if (($1_1 | 0) != (129 | 0)) {
     break label$1
    }
    label$18 : {
     if ((HEAP32[$5_1 >> 2] | 0 | 0) != (372711428 | 0)) {
      break label$18
     }
     return 130 | 0;
    }
    label$19 : {
     if ((HEAP32[$3_1 >> 2] | 0 | 0) != (372711428 | 0)) {
      break label$19
     }
     return 131 | 0;
    }
    label$20 : {
     if ((HEAPU8[($5_1 + 9 | 0) >> 0] | 0 | 0) != (4 | 0)) {
      break label$20
     }
     if ((HEAPU8[($3_1 + 9 | 0) >> 0] | 0 | 0) != (4 | 0)) {
      break label$20
     }
     if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0)) {
      break label$20
     }
     if ((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0)) {
      break label$20
     }
     if ((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0)) {
      break label$20
     }
     label$21 : {
      if (($6_1 | 0) == (4 | 0)) {
       break label$21
      }
      return 132 | 0;
     }
     return ((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) ? 133 : 134) | 0;
    }
    return (($6_1 | 0) == (4 | 0) ? 134 : 129) | 0;
   }
   label$22 : {
    if ((HEAPU8[($5_1 + 9 | 0) >> 0] | 0 | 0) != (2 | 0)) {
     break label$22
    }
    if (!(HEAP32[($2_1 + 4 | 0) >> 2] | 0)) {
     break label$22
    }
    return 135 | 0;
   }
   label$23 : {
    if ((HEAPU8[($3_1 + 9 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break label$23
    }
    return 136 | 0;
   }
   label$24 : {
    if (!(HEAP32[($5_1 + 24 | 0) >> 2] | 0)) {
     break label$24
    }
    if (!(HEAP32[($3_1 + 24 | 0) >> 2] | 0)) {
     break label$24
    }
    return 137 | 0;
   }
   $1_1 = 138;
  }
  return $1_1 | 0;
 }
 
 function $634($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $9_1 = 0, $1_1 = 0, $8_1 = 0, $2_1 = 0;
  $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) / (4 | 0) | 0;
  $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $4_1 = HEAP32[$0_1 >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$7_1) {
     break label$2
    }
    if (!$5_1) {
     break label$1
    }
    $8_1 = $6_1 & 7 | 0;
    $6_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
    $1_1 = $1_1 << 2 | 0;
    label$3 : while (1) {
     $5_1 = $5_1 + -1 | 0;
     $9_1 = $6_1;
     label$4 : {
      label$5 : {
       switch ($8_1 | 0) {
       default:
        $0_1 = 0;
        break label$4;
       case 1:
        $0_1 = 7;
        break label$4;
       case 2:
        $0_1 = 6;
        break label$4;
       case 3:
        $0_1 = 5;
        break label$4;
       case 4:
        $0_1 = 4;
        break label$4;
       case 5:
        $0_1 = 3;
        break label$4;
       case 6:
        $0_1 = 2;
        break label$4;
       case 7:
        break label$5;
       };
      }
      $0_1 = 1;
     }
     label$13 : while (1) {
      label$14 : {
       switch ($0_1 | 0) {
       case 0:
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 1;
        continue label$13;
       case 1:
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 2;
        continue label$13;
       case 2:
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 3;
        continue label$13;
       case 3:
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 4;
        continue label$13;
       case 4:
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 5;
        continue label$13;
       case 5:
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 6;
        continue label$13;
       case 6:
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 7;
        continue label$13;
       default:
        break label$14;
       };
      }
      $0_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
      $0_1 = $9_1 + -1 | 0;
      $4_1 = $4_1 + 4 | 0;
      $3_1 = $3_1 + 1 | 0;
      label$22 : {
       label$23 : {
        if (($9_1 | 0) <= (1 | 0)) {
         break label$23
        }
        $9_1 = $0_1;
        break label$22;
       }
       $3_1 = $3_1 + $2_1 | 0;
       $4_1 = $4_1 + $1_1 | 0;
       if ($5_1) {
        continue label$3
       }
       break label$1;
      }
      $0_1 = 0;
      continue label$13;
     };
    };
   }
   if (!$5_1) {
    break label$1
   }
   $9_1 = $6_1 & 7 | 0;
   $8_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $6_1 = $1_1 << 2 | 0;
   label$24 : while (1) {
    $5_1 = $5_1 + -1 | 0;
    $7_1 = $8_1;
    label$25 : {
     label$26 : {
      switch ($9_1 | 0) {
      default:
       $0_1 = 0;
       break label$25;
      case 1:
       $0_1 = 7;
       break label$25;
      case 2:
       $0_1 = 6;
       break label$25;
      case 3:
       $0_1 = 5;
       break label$25;
      case 4:
       $0_1 = 4;
       break label$25;
      case 5:
       $0_1 = 3;
       break label$25;
      case 6:
       $0_1 = 2;
       break label$25;
      case 7:
       break label$26;
      };
     }
     $0_1 = 1;
    }
    label$34 : while (1) {
     label$35 : {
      switch ($0_1 | 0) {
      case 0:
       $0_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 1;
       continue label$34;
      case 1:
       $0_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 2;
       continue label$34;
      case 2:
       $0_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 3;
       continue label$34;
      case 3:
       $0_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 4;
       continue label$34;
      case 4:
       $0_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 5;
       continue label$34;
      case 5:
       $0_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 6;
       continue label$34;
      case 6:
       $0_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 7;
       continue label$34;
      default:
       break label$35;
      };
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = ($0_1 >>> 16 | 0) & 224 | 0 | (($0_1 >>> 11 | 0) & 28 | 0) | 0 | (($0_1 >>> 6 | 0) & 3 | 0) | 0;
     $0_1 = $7_1 + -1 | 0;
     $3_1 = $3_1 + 1 | 0;
     label$43 : {
      label$44 : {
       if (($7_1 | 0) <= (1 | 0)) {
        break label$44
       }
       $7_1 = $0_1;
       break label$43;
      }
      $3_1 = $3_1 + $2_1 | 0;
      $4_1 = $4_1 + $6_1 | 0;
      if ($5_1) {
       continue label$24
      }
      break label$1;
     }
     $0_1 = 0;
     continue label$34;
    };
   };
  }
 }
 
 function $635($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $9_1 = 0, $1_1 = 0, $8_1 = 0, $2_1 = 0;
  $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) / (4 | 0) | 0;
  $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $4_1 = HEAP32[$0_1 >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$7_1) {
     break label$2
    }
    if (!$5_1) {
     break label$1
    }
    $8_1 = $6_1 & 7 | 0;
    $6_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
    $1_1 = $1_1 << 2 | 0;
    label$3 : while (1) {
     $5_1 = $5_1 + -1 | 0;
     $9_1 = $6_1;
     label$4 : {
      label$5 : {
       switch ($8_1 | 0) {
       default:
        $0_1 = 0;
        break label$4;
       case 1:
        $0_1 = 7;
        break label$4;
       case 2:
        $0_1 = 6;
        break label$4;
       case 3:
        $0_1 = 5;
        break label$4;
       case 4:
        $0_1 = 4;
        break label$4;
       case 5:
        $0_1 = 3;
        break label$4;
       case 6:
        $0_1 = 2;
        break label$4;
       case 7:
        break label$5;
       };
      }
      $0_1 = 1;
     }
     label$13 : while (1) {
      label$14 : {
       switch ($0_1 | 0) {
       case 0:
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 1;
        continue label$13;
       case 1:
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 2;
        continue label$13;
       case 2:
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 3;
        continue label$13;
       case 3:
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 4;
        continue label$13;
       case 4:
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 5;
        continue label$13;
       case 5:
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 6;
        continue label$13;
       case 6:
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
        $4_1 = $4_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        $0_1 = 7;
        continue label$13;
       default:
        break label$14;
       };
      }
      $0_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = HEAPU8[($7_1 + (($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0) | 0) >> 0] | 0;
      $0_1 = $9_1 + -1 | 0;
      $4_1 = $4_1 + 4 | 0;
      $3_1 = $3_1 + 1 | 0;
      label$22 : {
       label$23 : {
        if (($9_1 | 0) <= (1 | 0)) {
         break label$23
        }
        $9_1 = $0_1;
        break label$22;
       }
       $3_1 = $3_1 + $2_1 | 0;
       $4_1 = $4_1 + $1_1 | 0;
       if ($5_1) {
        continue label$3
       }
       break label$1;
      }
      $0_1 = 0;
      continue label$13;
     };
    };
   }
   if (!$5_1) {
    break label$1
   }
   $9_1 = $6_1 & 7 | 0;
   $8_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $6_1 = $1_1 << 2 | 0;
   label$24 : while (1) {
    $5_1 = $5_1 + -1 | 0;
    $7_1 = $8_1;
    label$25 : {
     label$26 : {
      switch ($9_1 | 0) {
      default:
       $0_1 = 0;
       break label$25;
      case 1:
       $0_1 = 7;
       break label$25;
      case 2:
       $0_1 = 6;
       break label$25;
      case 3:
       $0_1 = 5;
       break label$25;
      case 4:
       $0_1 = 4;
       break label$25;
      case 5:
       $0_1 = 3;
       break label$25;
      case 6:
       $0_1 = 2;
       break label$25;
      case 7:
       break label$26;
      };
     }
     $0_1 = 1;
    }
    label$34 : while (1) {
     label$35 : {
      switch ($0_1 | 0) {
      case 0:
       $0_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 1;
       continue label$34;
      case 1:
       $0_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 2;
       continue label$34;
      case 2:
       $0_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 3;
       continue label$34;
      case 3:
       $0_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 4;
       continue label$34;
      case 4:
       $0_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 5;
       continue label$34;
      case 5:
       $0_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 6;
       continue label$34;
      case 6:
       $0_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0;
       $3_1 = $3_1 + 1 | 0;
       $0_1 = 7;
       continue label$34;
      default:
       break label$35;
      };
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = ($0_1 >>> 22 | 0) & 224 | 0 | (($0_1 >>> 15 | 0) & 28 | 0) | 0 | (($0_1 >>> 8 | 0) & 3 | 0) | 0;
     $0_1 = $7_1 + -1 | 0;
     $3_1 = $3_1 + 1 | 0;
     label$43 : {
      label$44 : {
       if (($7_1 | 0) <= (1 | 0)) {
        break label$44
       }
       $7_1 = $0_1;
       break label$43;
      }
      $3_1 = $3_1 + $2_1 | 0;
      $4_1 = $4_1 + $6_1 | 0;
      if ($5_1) {
       continue label$24
      }
      break label$1;
     }
     $0_1 = 0;
     continue label$34;
    };
   };
  }
 }
 
 function $636($0_1) {
  $0_1 = $0_1 | 0;
  var $7_1 = 0, $13_1 = 0, $14_1 = 0, $4_1 = 0, $12_1 = 0, $2_1 = 0, $15_1 = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, $5_1 = 0, $10_1 = 0, $1_1 = 0, $3_1 = 0, $11_1 = 0;
  $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $4_1 = HEAP32[$0_1 >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $7_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $8_1 = HEAPU8[($7_1 + 9 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    $9_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$9_1) {
     break label$2
    }
    if (!$5_1) {
     break label$1
    }
    $10_1 = $6_1 & 7 | 0;
    $11_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
    $6_1 = $8_1 + -1 | 0;
    label$3 : while (1) {
     $5_1 = $5_1 + -1 | 0;
     $12_1 = $11_1;
     label$4 : {
      label$5 : {
       switch ($10_1 | 0) {
       default:
        $0_1 = 7;
        break label$4;
       case 1:
        $0_1 = 6;
        break label$4;
       case 2:
        $0_1 = 5;
        break label$4;
       case 3:
        $0_1 = 4;
        break label$4;
       case 4:
        $0_1 = 3;
        break label$4;
       case 5:
        $0_1 = 2;
        break label$4;
       case 6:
        $0_1 = 1;
        break label$4;
       case 7:
        break label$5;
       };
      }
      $0_1 = 0;
     }
     label$13 : {
      label$14 : while (1) {
       label$15 : {
        switch ($0_1 | 0) {
        case 0:
         $0_1 = 0;
         $13_1 = 0;
         $14_1 = 0;
         label$23 : {
          label$24 : {
           label$25 : {
            switch ($6_1 | 0) {
            case 0:
             $14_1 = HEAPU8[$4_1 >> 0] | 0;
             $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$24;
            case 1:
             $14_1 = HEAPU16[$4_1 >> 1] | 0;
             $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$24;
            case 2:
             $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $13_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $15_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             break label$24;
            case 3:
             break label$25;
            default:
             break label$23;
            };
           }
           $14_1 = HEAP32[$4_1 >> 2] | 0;
           $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          }
          $14_1 = HEAPU8[$0_1 >> 0] | 0;
          $0_1 = HEAPU8[$15_1 >> 0] | 0;
          $13_1 = HEAPU8[$13_1 >> 0] | 0;
         }
         HEAP8[$2_1 >> 0] = HEAPU8[($9_1 + (($13_1 >>> 3 | 0) & 28 | 0 | ($0_1 & 224 | 0) | 0 | (($14_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
         $4_1 = $4_1 + $8_1 | 0;
         $2_1 = $2_1 + 1 | 0;
         $0_1 = 1;
         continue label$14;
        case 1:
         $0_1 = 0;
         $13_1 = 0;
         $14_1 = 0;
         label$29 : {
          label$30 : {
           label$31 : {
            switch ($6_1 | 0) {
            case 0:
             $14_1 = HEAPU8[$4_1 >> 0] | 0;
             $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$30;
            case 1:
             $14_1 = HEAPU16[$4_1 >> 1] | 0;
             $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$30;
            case 2:
             $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $13_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $15_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             break label$30;
            case 3:
             break label$31;
            default:
             break label$29;
            };
           }
           $14_1 = HEAP32[$4_1 >> 2] | 0;
           $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          }
          $14_1 = HEAPU8[$0_1 >> 0] | 0;
          $0_1 = HEAPU8[$15_1 >> 0] | 0;
          $13_1 = HEAPU8[$13_1 >> 0] | 0;
         }
         HEAP8[$2_1 >> 0] = HEAPU8[($9_1 + (($13_1 >>> 3 | 0) & 28 | 0 | ($0_1 & 224 | 0) | 0 | (($14_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
         $4_1 = $4_1 + $8_1 | 0;
         $2_1 = $2_1 + 1 | 0;
         $0_1 = 2;
         continue label$14;
        case 2:
         $0_1 = 0;
         $13_1 = 0;
         $14_1 = 0;
         label$35 : {
          label$36 : {
           label$37 : {
            switch ($6_1 | 0) {
            case 0:
             $14_1 = HEAPU8[$4_1 >> 0] | 0;
             $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$36;
            case 1:
             $14_1 = HEAPU16[$4_1 >> 1] | 0;
             $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$36;
            case 2:
             $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $13_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $15_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             break label$36;
            case 3:
             break label$37;
            default:
             break label$35;
            };
           }
           $14_1 = HEAP32[$4_1 >> 2] | 0;
           $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          }
          $14_1 = HEAPU8[$0_1 >> 0] | 0;
          $0_1 = HEAPU8[$15_1 >> 0] | 0;
          $13_1 = HEAPU8[$13_1 >> 0] | 0;
         }
         HEAP8[$2_1 >> 0] = HEAPU8[($9_1 + (($13_1 >>> 3 | 0) & 28 | 0 | ($0_1 & 224 | 0) | 0 | (($14_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
         $4_1 = $4_1 + $8_1 | 0;
         $2_1 = $2_1 + 1 | 0;
         $0_1 = 3;
         continue label$14;
        case 3:
         $0_1 = 0;
         $13_1 = 0;
         $14_1 = 0;
         label$41 : {
          label$42 : {
           label$43 : {
            switch ($6_1 | 0) {
            case 0:
             $14_1 = HEAPU8[$4_1 >> 0] | 0;
             $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$42;
            case 1:
             $14_1 = HEAPU16[$4_1 >> 1] | 0;
             $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$42;
            case 2:
             $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $13_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $15_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             break label$42;
            case 3:
             break label$43;
            default:
             break label$41;
            };
           }
           $14_1 = HEAP32[$4_1 >> 2] | 0;
           $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          }
          $14_1 = HEAPU8[$0_1 >> 0] | 0;
          $0_1 = HEAPU8[$15_1 >> 0] | 0;
          $13_1 = HEAPU8[$13_1 >> 0] | 0;
         }
         HEAP8[$2_1 >> 0] = HEAPU8[($9_1 + (($13_1 >>> 3 | 0) & 28 | 0 | ($0_1 & 224 | 0) | 0 | (($14_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
         $4_1 = $4_1 + $8_1 | 0;
         $2_1 = $2_1 + 1 | 0;
         $0_1 = 4;
         continue label$14;
        case 4:
         $0_1 = 0;
         $13_1 = 0;
         $14_1 = 0;
         label$47 : {
          label$48 : {
           label$49 : {
            switch ($6_1 | 0) {
            case 0:
             $14_1 = HEAPU8[$4_1 >> 0] | 0;
             $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$48;
            case 1:
             $14_1 = HEAPU16[$4_1 >> 1] | 0;
             $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$48;
            case 2:
             $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $13_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $15_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             break label$48;
            case 3:
             break label$49;
            default:
             break label$47;
            };
           }
           $14_1 = HEAP32[$4_1 >> 2] | 0;
           $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          }
          $14_1 = HEAPU8[$0_1 >> 0] | 0;
          $0_1 = HEAPU8[$15_1 >> 0] | 0;
          $13_1 = HEAPU8[$13_1 >> 0] | 0;
         }
         HEAP8[$2_1 >> 0] = HEAPU8[($9_1 + (($13_1 >>> 3 | 0) & 28 | 0 | ($0_1 & 224 | 0) | 0 | (($14_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
         $4_1 = $4_1 + $8_1 | 0;
         $2_1 = $2_1 + 1 | 0;
         $0_1 = 5;
         continue label$14;
        case 5:
         $0_1 = 0;
         $13_1 = 0;
         $14_1 = 0;
         label$53 : {
          label$54 : {
           label$55 : {
            switch ($6_1 | 0) {
            case 0:
             $14_1 = HEAPU8[$4_1 >> 0] | 0;
             $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$54;
            case 1:
             $14_1 = HEAPU16[$4_1 >> 1] | 0;
             $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$54;
            case 2:
             $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $13_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $15_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             break label$54;
            case 3:
             break label$55;
            default:
             break label$53;
            };
           }
           $14_1 = HEAP32[$4_1 >> 2] | 0;
           $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          }
          $14_1 = HEAPU8[$0_1 >> 0] | 0;
          $0_1 = HEAPU8[$15_1 >> 0] | 0;
          $13_1 = HEAPU8[$13_1 >> 0] | 0;
         }
         HEAP8[$2_1 >> 0] = HEAPU8[($9_1 + (($13_1 >>> 3 | 0) & 28 | 0 | ($0_1 & 224 | 0) | 0 | (($14_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
         $4_1 = $4_1 + $8_1 | 0;
         $2_1 = $2_1 + 1 | 0;
         $0_1 = 6;
         continue label$14;
        case 6:
         $0_1 = 0;
         $13_1 = 0;
         $14_1 = 0;
         label$59 : {
          label$60 : {
           label$61 : {
            switch ($6_1 | 0) {
            case 0:
             $14_1 = HEAPU8[$4_1 >> 0] | 0;
             $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$60;
            case 1:
             $14_1 = HEAPU16[$4_1 >> 1] | 0;
             $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$60;
            case 2:
             $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $13_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $15_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             break label$60;
            case 3:
             break label$61;
            default:
             break label$59;
            };
           }
           $14_1 = HEAP32[$4_1 >> 2] | 0;
           $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $14_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          }
          $14_1 = HEAPU8[$0_1 >> 0] | 0;
          $0_1 = HEAPU8[$15_1 >> 0] | 0;
          $13_1 = HEAPU8[$13_1 >> 0] | 0;
         }
         HEAP8[$2_1 >> 0] = HEAPU8[($9_1 + (($13_1 >>> 3 | 0) & 28 | 0 | ($0_1 & 224 | 0) | 0 | (($14_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
         $0_1 = $12_1 + -1 | 0;
         $4_1 = $4_1 + $8_1 | 0;
         $2_1 = $2_1 + 1 | 0;
         if (($12_1 | 0) <= (1 | 0)) {
          break label$13
         }
         $12_1 = $0_1;
         $0_1 = 7;
         continue label$14;
        default:
         break label$15;
        };
       }
       $13_1 = 0;
       $14_1 = 0;
       $0_1 = 0;
       label$65 : {
        label$66 : {
         label$67 : {
          switch ($6_1 | 0) {
          case 0:
           $13_1 = HEAPU8[$4_1 >> 0] | 0;
           $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
           break label$66;
          case 1:
           $13_1 = HEAPU16[$4_1 >> 1] | 0;
           $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
           break label$66;
          case 2:
           $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
           $14_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
           $13_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
           break label$66;
          case 3:
           break label$67;
          default:
           break label$65;
          };
         }
         $13_1 = HEAP32[$4_1 >> 2] | 0;
         $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
         $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
         $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
        }
        $0_1 = HEAPU8[$0_1 >> 0] | 0;
        $13_1 = HEAPU8[$13_1 >> 0] | 0;
        $14_1 = HEAPU8[$14_1 >> 0] | 0;
       }
       HEAP8[$2_1 >> 0] = HEAPU8[($9_1 + (($14_1 >>> 3 | 0) & 28 | 0 | ($13_1 & 224 | 0) | 0 | (($0_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
       $4_1 = $4_1 + $8_1 | 0;
       $2_1 = $2_1 + 1 | 0;
       $0_1 = 0;
       continue label$14;
      };
     }
     $2_1 = $2_1 + $1_1 | 0;
     $4_1 = $4_1 + $3_1 | 0;
     if ($5_1) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$5_1) {
    break label$1
   }
   $15_1 = $6_1 & 7 | 0;
   $10_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $9_1 = $8_1 + -1 | 0;
   label$71 : while (1) {
    $5_1 = $5_1 + -1 | 0;
    $6_1 = $10_1;
    label$72 : {
     label$73 : {
      switch ($15_1 | 0) {
      default:
       $0_1 = 7;
       break label$72;
      case 1:
       $0_1 = 6;
       break label$72;
      case 2:
       $0_1 = 5;
       break label$72;
      case 3:
       $0_1 = 4;
       break label$72;
      case 4:
       $0_1 = 3;
       break label$72;
      case 5:
       $0_1 = 2;
       break label$72;
      case 6:
       $0_1 = 1;
       break label$72;
      case 7:
       break label$73;
      };
     }
     $0_1 = 0;
    }
    label$81 : {
     label$82 : while (1) {
      label$83 : {
       switch ($0_1 | 0) {
       case 0:
        $0_1 = 0;
        $12_1 = 0;
        $13_1 = 0;
        label$91 : {
         label$92 : {
          label$93 : {
           switch ($9_1 | 0) {
           case 0:
            $13_1 = HEAPU8[$4_1 >> 0] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$92;
           case 1:
            $13_1 = HEAPU16[$4_1 >> 1] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$92;
           case 2:
            $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $12_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $14_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$92;
           case 3:
            break label$93;
           default:
            break label$91;
           };
          }
          $13_1 = HEAP32[$4_1 >> 2] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $13_1 = HEAPU8[$0_1 >> 0] | 0;
         $0_1 = HEAPU8[$14_1 >> 0] | 0;
         $12_1 = HEAPU8[$12_1 >> 0] | 0;
        }
        HEAP8[$2_1 >> 0] = ($12_1 >>> 3 | 0) & 28 | 0 | ($0_1 & 224 | 0) | 0 | (($13_1 & 192 | 0) >>> 6 | 0) | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $2_1 = $2_1 + 1 | 0;
        $0_1 = 1;
        continue label$82;
       case 1:
        $0_1 = 0;
        $12_1 = 0;
        $13_1 = 0;
        label$97 : {
         label$98 : {
          label$99 : {
           switch ($9_1 | 0) {
           case 0:
            $13_1 = HEAPU8[$4_1 >> 0] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$98;
           case 1:
            $13_1 = HEAPU16[$4_1 >> 1] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$98;
           case 2:
            $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $12_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $14_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$98;
           case 3:
            break label$99;
           default:
            break label$97;
           };
          }
          $13_1 = HEAP32[$4_1 >> 2] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $13_1 = HEAPU8[$0_1 >> 0] | 0;
         $0_1 = HEAPU8[$14_1 >> 0] | 0;
         $12_1 = HEAPU8[$12_1 >> 0] | 0;
        }
        HEAP8[$2_1 >> 0] = ($12_1 >>> 3 | 0) & 28 | 0 | ($0_1 & 224 | 0) | 0 | (($13_1 & 192 | 0) >>> 6 | 0) | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $2_1 = $2_1 + 1 | 0;
        $0_1 = 2;
        continue label$82;
       case 2:
        $0_1 = 0;
        $12_1 = 0;
        $13_1 = 0;
        label$103 : {
         label$104 : {
          label$105 : {
           switch ($9_1 | 0) {
           case 0:
            $13_1 = HEAPU8[$4_1 >> 0] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$104;
           case 1:
            $13_1 = HEAPU16[$4_1 >> 1] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$104;
           case 2:
            $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $12_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $14_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$104;
           case 3:
            break label$105;
           default:
            break label$103;
           };
          }
          $13_1 = HEAP32[$4_1 >> 2] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $13_1 = HEAPU8[$0_1 >> 0] | 0;
         $0_1 = HEAPU8[$14_1 >> 0] | 0;
         $12_1 = HEAPU8[$12_1 >> 0] | 0;
        }
        HEAP8[$2_1 >> 0] = ($12_1 >>> 3 | 0) & 28 | 0 | ($0_1 & 224 | 0) | 0 | (($13_1 & 192 | 0) >>> 6 | 0) | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $2_1 = $2_1 + 1 | 0;
        $0_1 = 3;
        continue label$82;
       case 3:
        $0_1 = 0;
        $12_1 = 0;
        $13_1 = 0;
        label$109 : {
         label$110 : {
          label$111 : {
           switch ($9_1 | 0) {
           case 0:
            $13_1 = HEAPU8[$4_1 >> 0] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$110;
           case 1:
            $13_1 = HEAPU16[$4_1 >> 1] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$110;
           case 2:
            $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $12_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $14_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$110;
           case 3:
            break label$111;
           default:
            break label$109;
           };
          }
          $13_1 = HEAP32[$4_1 >> 2] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $13_1 = HEAPU8[$0_1 >> 0] | 0;
         $0_1 = HEAPU8[$14_1 >> 0] | 0;
         $12_1 = HEAPU8[$12_1 >> 0] | 0;
        }
        HEAP8[$2_1 >> 0] = ($12_1 >>> 3 | 0) & 28 | 0 | ($0_1 & 224 | 0) | 0 | (($13_1 & 192 | 0) >>> 6 | 0) | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $2_1 = $2_1 + 1 | 0;
        $0_1 = 4;
        continue label$82;
       case 4:
        $0_1 = 0;
        $12_1 = 0;
        $13_1 = 0;
        label$115 : {
         label$116 : {
          label$117 : {
           switch ($9_1 | 0) {
           case 0:
            $13_1 = HEAPU8[$4_1 >> 0] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$116;
           case 1:
            $13_1 = HEAPU16[$4_1 >> 1] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$116;
           case 2:
            $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $12_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $14_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$116;
           case 3:
            break label$117;
           default:
            break label$115;
           };
          }
          $13_1 = HEAP32[$4_1 >> 2] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $13_1 = HEAPU8[$0_1 >> 0] | 0;
         $0_1 = HEAPU8[$14_1 >> 0] | 0;
         $12_1 = HEAPU8[$12_1 >> 0] | 0;
        }
        HEAP8[$2_1 >> 0] = ($12_1 >>> 3 | 0) & 28 | 0 | ($0_1 & 224 | 0) | 0 | (($13_1 & 192 | 0) >>> 6 | 0) | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $2_1 = $2_1 + 1 | 0;
        $0_1 = 5;
        continue label$82;
       case 5:
        $0_1 = 0;
        $12_1 = 0;
        $13_1 = 0;
        label$121 : {
         label$122 : {
          label$123 : {
           switch ($9_1 | 0) {
           case 0:
            $13_1 = HEAPU8[$4_1 >> 0] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$122;
           case 1:
            $13_1 = HEAPU16[$4_1 >> 1] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$122;
           case 2:
            $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $12_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $14_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$122;
           case 3:
            break label$123;
           default:
            break label$121;
           };
          }
          $13_1 = HEAP32[$4_1 >> 2] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $13_1 = HEAPU8[$0_1 >> 0] | 0;
         $0_1 = HEAPU8[$14_1 >> 0] | 0;
         $12_1 = HEAPU8[$12_1 >> 0] | 0;
        }
        HEAP8[$2_1 >> 0] = ($12_1 >>> 3 | 0) & 28 | 0 | ($0_1 & 224 | 0) | 0 | (($13_1 & 192 | 0) >>> 6 | 0) | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $2_1 = $2_1 + 1 | 0;
        $0_1 = 6;
        continue label$82;
       case 6:
        $0_1 = 0;
        $12_1 = 0;
        $13_1 = 0;
        label$127 : {
         label$128 : {
          label$129 : {
           switch ($9_1 | 0) {
           case 0:
            $13_1 = HEAPU8[$4_1 >> 0] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$128;
           case 1:
            $13_1 = HEAPU16[$4_1 >> 1] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$128;
           case 2:
            $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $12_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $14_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$128;
           case 3:
            break label$129;
           default:
            break label$127;
           };
          }
          $13_1 = HEAP32[$4_1 >> 2] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $13_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $13_1 = HEAPU8[$0_1 >> 0] | 0;
         $0_1 = HEAPU8[$14_1 >> 0] | 0;
         $12_1 = HEAPU8[$12_1 >> 0] | 0;
        }
        HEAP8[$2_1 >> 0] = ($12_1 >>> 3 | 0) & 28 | 0 | ($0_1 & 224 | 0) | 0 | (($13_1 & 192 | 0) >>> 6 | 0) | 0;
        $0_1 = $6_1 + -1 | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $2_1 = $2_1 + 1 | 0;
        if (($6_1 | 0) <= (1 | 0)) {
         break label$81
        }
        $6_1 = $0_1;
        $0_1 = 7;
        continue label$82;
       default:
        break label$83;
       };
      }
      $12_1 = 0;
      $13_1 = 0;
      $0_1 = 0;
      label$133 : {
       label$134 : {
        label$135 : {
         switch ($9_1 | 0) {
         case 0:
          $12_1 = HEAPU8[$4_1 >> 0] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $12_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $12_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $12_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          break label$134;
         case 1:
          $12_1 = HEAPU16[$4_1 >> 1] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $12_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $12_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $12_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          break label$134;
         case 2:
          $0_1 = $4_1 + ((HEAPU8[($7_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $13_1 = $4_1 + ((HEAPU8[($7_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $12_1 = $4_1 + ((HEAPU8[($7_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          break label$134;
         case 3:
          break label$135;
         default:
          break label$133;
         };
        }
        $12_1 = HEAP32[$4_1 >> 2] | 0;
        $0_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) & $12_1 | 0) >>> (HEAPU8[($7_1 + 34 | 0) >> 0] | 0) | 0) | 0;
        $13_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) & $12_1 | 0) >>> (HEAPU8[($7_1 + 33 | 0) >> 0] | 0) | 0) | 0;
        $12_1 = (HEAP32[(117504 + ((HEAPU8[($7_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) & $12_1 | 0) >>> (HEAPU8[($7_1 + 32 | 0) >> 0] | 0) | 0) | 0;
       }
       $0_1 = HEAPU8[$0_1 >> 0] | 0;
       $12_1 = HEAPU8[$12_1 >> 0] | 0;
       $13_1 = HEAPU8[$13_1 >> 0] | 0;
      }
      HEAP8[$2_1 >> 0] = ($13_1 >>> 3 | 0) & 28 | 0 | ($12_1 & 224 | 0) | 0 | (($0_1 & 192 | 0) >>> 6 | 0) | 0;
      $4_1 = $4_1 + $8_1 | 0;
      $2_1 = $2_1 + 1 | 0;
      $0_1 = 0;
      continue label$82;
     };
    }
    $2_1 = $2_1 + $1_1 | 0;
    $4_1 = $4_1 + $3_1 | 0;
    if ($5_1) {
     continue label$71
    }
    break label$71;
   };
  }
 }
 
 function $637($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $4_1 = 0, $7_1 = 0, $9_1 = 0, $18_1 = 0, $1_1 = 0, $17_1 = 0, $19_1 = 0, $5_1 = 0, $20_1 = 0, $21_1 = 0, $12_1 = 0, $11_1 = 0, $10_1 = 0, $3_1 = 0, $15_1 = 0, $6_1 = 0, $8_1 = 0, $16_1 = 0, $13_1 = 0, $14_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $3_1 = HEAPU8[($2_1 + 9 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    if (HEAP32[($4_1 + 24 | 0) >> 2] | 0) {
     break label$2
    }
    $5_1 = 0;
    break label$1;
   }
   $5_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  }
  $6_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $8_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $9_1 = HEAP32[$0_1 >> 2] | 0;
  $10_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $12_1 = HEAPU8[($4_1 + 9 | 0) >> 0] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     $0_1 = ($3_1 | 0) != (4 | 0);
     if ($0_1) {
      break label$5
     }
     if (($12_1 | 0) != (4 | 0)) {
      break label$5
     }
     if ((HEAP32[$2_1 >> 2] | 0 | 0) == (372711428 | 0)) {
      break label$4
     }
     if ((HEAP32[$4_1 >> 2] | 0 | 0) == (372711428 | 0)) {
      break label$4
     }
     $646($2_1 | 0, $4_1 | 0, $1_1 + 24 | 0 | 0, $1_1 + 20 | 0 | 0, $1_1 + 16 | 0 | 0, $1_1 + 12 | 0 | 0, $1_1 + 28 | 0 | 0);
     if (!$10_1) {
      break label$3
     }
     $0_1 = $11_1 & 7 | 0;
     $12_1 = ($11_1 + 7 | 0 | 0) / (8 | 0) | 0;
     label$6 : while (1) {
      $10_1 = $10_1 + -1 | 0;
      $4_1 = $12_1;
      label$7 : {
       label$8 : {
        switch ($0_1 | 0) {
        default:
         $2_1 = 0;
         break label$7;
        case 1:
         $2_1 = 7;
         break label$7;
        case 2:
         $2_1 = 6;
         break label$7;
        case 3:
         $2_1 = 5;
         break label$7;
        case 4:
         $2_1 = 4;
         break label$7;
        case 5:
         $2_1 = 3;
         break label$7;
        case 6:
         $2_1 = 2;
         break label$7;
        case 7:
         break label$8;
        };
       }
       $2_1 = 1;
      }
      label$16 : while (1) {
       label$17 : {
        switch ($2_1 | 0) {
        case 0:
         HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
         $7_1 = $7_1 + 4 | 0;
         $9_1 = $9_1 + 4 | 0;
         $2_1 = 1;
         continue label$16;
        case 1:
         HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
         $7_1 = $7_1 + 4 | 0;
         $9_1 = $9_1 + 4 | 0;
         $2_1 = 2;
         continue label$16;
        case 2:
         HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
         $7_1 = $7_1 + 4 | 0;
         $9_1 = $9_1 + 4 | 0;
         $2_1 = 3;
         continue label$16;
        case 3:
         HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
         $7_1 = $7_1 + 4 | 0;
         $9_1 = $9_1 + 4 | 0;
         $2_1 = 4;
         continue label$16;
        case 4:
         HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
         $7_1 = $7_1 + 4 | 0;
         $9_1 = $9_1 + 4 | 0;
         $2_1 = 5;
         continue label$16;
        case 5:
         HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
         $7_1 = $7_1 + 4 | 0;
         $9_1 = $9_1 + 4 | 0;
         $2_1 = 6;
         continue label$16;
        case 6:
         HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
         $7_1 = $7_1 + 4 | 0;
         $9_1 = $9_1 + 4 | 0;
         $2_1 = 7;
         continue label$16;
        default:
         break label$17;
        };
       }
       HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
       HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
       HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
       HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
       HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
       $2_1 = $4_1 + -1 | 0;
       $7_1 = $7_1 + 4 | 0;
       $9_1 = $9_1 + 4 | 0;
       label$25 : {
        label$26 : {
         if (($4_1 | 0) <= (1 | 0)) {
          break label$26
         }
         $4_1 = $2_1;
         break label$25;
        }
        $7_1 = $7_1 + $6_1 | 0;
        $9_1 = $9_1 + $8_1 | 0;
        if ($10_1) {
         continue label$6
        }
        break label$3;
       }
       $2_1 = 0;
       continue label$16;
      };
     };
    }
    label$27 : {
     if ($0_1) {
      break label$27
     }
     if (($12_1 | 0) != (3 | 0)) {
      break label$27
     }
     if ((HEAP32[$2_1 >> 2] | 0 | 0) == (372711428 | 0)) {
      break label$4
     }
     $646($2_1 | 0, $4_1 | 0, $1_1 + 28 | 0 | 0, $1_1 + 24 | 0 | 0, $1_1 + 20 | 0 | 0, $1_1 + 16 | 0 | 0, 0 | 0);
     if (!$10_1) {
      break label$3
     }
     $0_1 = $11_1 & 7 | 0;
     $12_1 = ($11_1 + 7 | 0 | 0) / (8 | 0) | 0;
     label$28 : while (1) {
      $10_1 = $10_1 + -1 | 0;
      $4_1 = $12_1;
      label$29 : {
       label$30 : {
        switch ($0_1 | 0) {
        default:
         $2_1 = 0;
         break label$29;
        case 1:
         $2_1 = 7;
         break label$29;
        case 2:
         $2_1 = 6;
         break label$29;
        case 3:
         $2_1 = 5;
         break label$29;
        case 4:
         $2_1 = 4;
         break label$29;
        case 5:
         $2_1 = 3;
         break label$29;
        case 6:
         $2_1 = 2;
         break label$29;
        case 7:
         break label$30;
        };
       }
       $2_1 = 1;
      }
      label$38 : while (1) {
       label$39 : {
        switch ($2_1 | 0) {
        case 0:
         HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         $7_1 = $7_1 + 3 | 0;
         $9_1 = $9_1 + 4 | 0;
         $2_1 = 1;
         continue label$38;
        case 1:
         HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         $7_1 = $7_1 + 3 | 0;
         $9_1 = $9_1 + 4 | 0;
         $2_1 = 2;
         continue label$38;
        case 2:
         HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         $7_1 = $7_1 + 3 | 0;
         $9_1 = $9_1 + 4 | 0;
         $2_1 = 3;
         continue label$38;
        case 3:
         HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         $7_1 = $7_1 + 3 | 0;
         $9_1 = $9_1 + 4 | 0;
         $2_1 = 4;
         continue label$38;
        case 4:
         HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         $7_1 = $7_1 + 3 | 0;
         $9_1 = $9_1 + 4 | 0;
         $2_1 = 5;
         continue label$38;
        case 5:
         HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         $7_1 = $7_1 + 3 | 0;
         $9_1 = $9_1 + 4 | 0;
         $2_1 = 6;
         continue label$38;
        case 6:
         HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         $7_1 = $7_1 + 3 | 0;
         $9_1 = $9_1 + 4 | 0;
         $2_1 = 7;
         continue label$38;
        default:
         break label$39;
        };
       }
       HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
       HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
       HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
       $2_1 = $4_1 + -1 | 0;
       $7_1 = $7_1 + 3 | 0;
       $9_1 = $9_1 + 4 | 0;
       label$47 : {
        label$48 : {
         if (($4_1 | 0) <= (1 | 0)) {
          break label$48
         }
         $4_1 = $2_1;
         break label$47;
        }
        $7_1 = $7_1 + $6_1 | 0;
        $9_1 = $9_1 + $8_1 | 0;
        if ($10_1) {
         continue label$28
        }
        break label$3;
       }
       $2_1 = 0;
       continue label$38;
      };
     };
    }
    if (($3_1 | 0) != (3 | 0)) {
     break label$4
    }
    if (($12_1 | 0) != (4 | 0)) {
     break label$4
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (372711428 | 0)) {
     break label$4
    }
    $646($2_1 | 0, $4_1 | 0, $1_1 + 24 | 0 | 0, $1_1 + 20 | 0 | 0, $1_1 + 16 | 0 | 0, $1_1 + 12 | 0 | 0, $1_1 + 28 | 0 | 0);
    if (!$10_1) {
     break label$3
    }
    $0_1 = $11_1 & 7 | 0;
    $12_1 = ($11_1 + 7 | 0 | 0) / (8 | 0) | 0;
    label$49 : while (1) {
     $10_1 = $10_1 + -1 | 0;
     $4_1 = $12_1;
     label$50 : {
      label$51 : {
       switch ($0_1 | 0) {
       default:
        $2_1 = 0;
        break label$50;
       case 1:
        $2_1 = 7;
        break label$50;
       case 2:
        $2_1 = 6;
        break label$50;
       case 3:
        $2_1 = 5;
        break label$50;
       case 4:
        $2_1 = 4;
        break label$50;
       case 5:
        $2_1 = 3;
        break label$50;
       case 6:
        $2_1 = 2;
        break label$50;
       case 7:
        break label$51;
       };
      }
      $2_1 = 1;
     }
     label$59 : while (1) {
      label$60 : {
       switch ($2_1 | 0) {
       case 0:
        HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
        $7_1 = $7_1 + 4 | 0;
        $9_1 = $9_1 + 3 | 0;
        $2_1 = 1;
        continue label$59;
       case 1:
        HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
        $7_1 = $7_1 + 4 | 0;
        $9_1 = $9_1 + 3 | 0;
        $2_1 = 2;
        continue label$59;
       case 2:
        HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
        $7_1 = $7_1 + 4 | 0;
        $9_1 = $9_1 + 3 | 0;
        $2_1 = 3;
        continue label$59;
       case 3:
        HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
        $7_1 = $7_1 + 4 | 0;
        $9_1 = $9_1 + 3 | 0;
        $2_1 = 4;
        continue label$59;
       case 4:
        HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
        $7_1 = $7_1 + 4 | 0;
        $9_1 = $9_1 + 3 | 0;
        $2_1 = 5;
        continue label$59;
       case 5:
        HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
        $7_1 = $7_1 + 4 | 0;
        $9_1 = $9_1 + 3 | 0;
        $2_1 = 6;
        continue label$59;
       case 6:
        HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
        $7_1 = $7_1 + 4 | 0;
        $9_1 = $9_1 + 3 | 0;
        $2_1 = 7;
        continue label$59;
       default:
        break label$60;
       };
      }
      HEAP8[$7_1 >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
      HEAP8[($7_1 + 1 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
      HEAP8[($7_1 + 2 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
      HEAP8[($7_1 + 3 | 0) >> 0] = HEAPU8[($9_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
      HEAP8[($7_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $5_1;
      $2_1 = $4_1 + -1 | 0;
      $7_1 = $7_1 + 4 | 0;
      $9_1 = $9_1 + 3 | 0;
      label$68 : {
       label$69 : {
        if (($4_1 | 0) <= (1 | 0)) {
         break label$69
        }
        $4_1 = $2_1;
        break label$68;
       }
       $7_1 = $7_1 + $6_1 | 0;
       $9_1 = $9_1 + $8_1 | 0;
       if ($10_1) {
        continue label$49
       }
       break label$3;
      }
      $2_1 = 0;
      continue label$59;
     };
    };
   }
   if (!$10_1) {
    break label$3
   }
   $13_1 = $11_1 & 7 | 0;
   $14_1 = ($11_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $11_1 = $3_1 + -1 | 0;
   $15_1 = $12_1 + -1 | 0;
   label$70 : while (1) {
    $10_1 = $10_1 + -1 | 0;
    $16_1 = $14_1;
    label$71 : {
     label$72 : {
      switch ($13_1 | 0) {
      default:
       $0_1 = 7;
       break label$71;
      case 1:
       $0_1 = 6;
       break label$71;
      case 2:
       $0_1 = 5;
       break label$71;
      case 3:
       $0_1 = 4;
       break label$71;
      case 4:
       $0_1 = 3;
       break label$71;
      case 5:
       $0_1 = 2;
       break label$71;
      case 6:
       $0_1 = 1;
       break label$71;
      case 7:
       break label$72;
      };
     }
     $0_1 = 0;
    }
    label$80 : {
     label$81 : while (1) {
      label$82 : {
       switch ($0_1 | 0) {
       case 0:
        $0_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$90 : {
         label$91 : {
          label$92 : {
           switch ($11_1 | 0) {
           case 0:
            $18_1 = HEAPU8[$9_1 >> 0] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $18_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$91;
           case 1:
            $18_1 = HEAPU16[$9_1 >> 1] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $18_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$91;
           case 2:
            $0_1 = $9_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $9_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $18_1 = $9_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$91;
           case 3:
            break label$92;
           default:
            break label$90;
           };
          }
          $18_1 = HEAP32[$9_1 >> 2] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $18_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $0_1 = HEAPU8[$0_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
         $18_1 = HEAPU8[$18_1 >> 0] | 0;
        }
        $19_1 = $0_1 & 255 | 0;
        $20_1 = $17_1 & 255 | 0;
        $21_1 = $18_1 & 255 | 0;
        label$96 : {
         label$97 : {
          switch ($15_1 | 0) {
          case 0:
           HEAP8[$7_1 >> 0] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$96;
          case 1:
           HEAP16[$7_1 >> 1] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$96;
          case 2:
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
           break label$96;
          case 3:
           break label$97;
          default:
           break label$96;
          };
         }
         HEAP32[$7_1 >> 2] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $9_1 = $9_1 + $3_1 | 0;
        $7_1 = $7_1 + $12_1 | 0;
        $0_1 = 1;
        continue label$81;
       case 1:
        $0_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$101 : {
         label$102 : {
          label$103 : {
           switch ($11_1 | 0) {
           case 0:
            $17_1 = HEAPU8[$9_1 >> 0] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $17_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $18_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $17_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $17_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$102;
           case 1:
            $17_1 = HEAPU16[$9_1 >> 1] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $17_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $18_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $17_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $17_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$102;
           case 2:
            $0_1 = $9_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $18_1 = $9_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $19_1 = $9_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$102;
           case 3:
            break label$103;
           default:
            break label$101;
           };
          }
          $17_1 = HEAP32[$9_1 >> 2] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $17_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $18_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $17_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $17_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $17_1 = HEAPU8[$0_1 >> 0] | 0;
         $0_1 = HEAPU8[$18_1 >> 0] | 0;
         $18_1 = HEAPU8[$19_1 >> 0] | 0;
        }
        $19_1 = $0_1 & 255 | 0;
        $20_1 = $17_1 & 255 | 0;
        $21_1 = $18_1 & 255 | 0;
        label$107 : {
         label$108 : {
          switch ($15_1 | 0) {
          case 0:
           HEAP8[$7_1 >> 0] = ($19_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$107;
          case 1:
           HEAP16[$7_1 >> 1] = ($19_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$107;
          case 2:
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
           break label$107;
          case 3:
           break label$108;
          default:
           break label$107;
          };
         }
         HEAP32[$7_1 >> 2] = ($19_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($20_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $9_1 = $9_1 + $3_1 | 0;
        $7_1 = $7_1 + $12_1 | 0;
        $0_1 = 2;
        continue label$81;
       case 2:
        $0_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$112 : {
         label$113 : {
          label$114 : {
           switch ($11_1 | 0) {
           case 0:
            $18_1 = HEAPU8[$9_1 >> 0] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$113;
           case 1:
            $18_1 = HEAPU16[$9_1 >> 1] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$113;
           case 2:
            $0_1 = $9_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $9_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $19_1 = $9_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$113;
           case 3:
            break label$114;
           default:
            break label$112;
           };
          }
          $18_1 = HEAP32[$9_1 >> 2] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $18_1 = HEAPU8[$0_1 >> 0] | 0;
         $0_1 = HEAPU8[$19_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
        }
        $19_1 = $0_1 & 255 | 0;
        $20_1 = $17_1 & 255 | 0;
        $21_1 = $18_1 & 255 | 0;
        label$118 : {
         label$119 : {
          switch ($15_1 | 0) {
          case 0:
           HEAP8[$7_1 >> 0] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$118;
          case 1:
           HEAP16[$7_1 >> 1] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$118;
          case 2:
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
           break label$118;
          case 3:
           break label$119;
          default:
           break label$118;
          };
         }
         HEAP32[$7_1 >> 2] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $9_1 = $9_1 + $3_1 | 0;
        $7_1 = $7_1 + $12_1 | 0;
        $0_1 = 3;
        continue label$81;
       case 3:
        $0_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$123 : {
         label$124 : {
          label$125 : {
           switch ($11_1 | 0) {
           case 0:
            $18_1 = HEAPU8[$9_1 >> 0] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$124;
           case 1:
            $18_1 = HEAPU16[$9_1 >> 1] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$124;
           case 2:
            $0_1 = $9_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $9_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $19_1 = $9_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$124;
           case 3:
            break label$125;
           default:
            break label$123;
           };
          }
          $18_1 = HEAP32[$9_1 >> 2] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $18_1 = HEAPU8[$0_1 >> 0] | 0;
         $0_1 = HEAPU8[$19_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
        }
        $19_1 = $0_1 & 255 | 0;
        $20_1 = $17_1 & 255 | 0;
        $21_1 = $18_1 & 255 | 0;
        label$129 : {
         label$130 : {
          switch ($15_1 | 0) {
          case 0:
           HEAP8[$7_1 >> 0] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$129;
          case 1:
           HEAP16[$7_1 >> 1] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$129;
          case 2:
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
           break label$129;
          case 3:
           break label$130;
          default:
           break label$129;
          };
         }
         HEAP32[$7_1 >> 2] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $9_1 = $9_1 + $3_1 | 0;
        $7_1 = $7_1 + $12_1 | 0;
        $0_1 = 4;
        continue label$81;
       case 4:
        $0_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$134 : {
         label$135 : {
          label$136 : {
           switch ($11_1 | 0) {
           case 0:
            $18_1 = HEAPU8[$9_1 >> 0] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$135;
           case 1:
            $18_1 = HEAPU16[$9_1 >> 1] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$135;
           case 2:
            $0_1 = $9_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $9_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $19_1 = $9_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$135;
           case 3:
            break label$136;
           default:
            break label$134;
           };
          }
          $18_1 = HEAP32[$9_1 >> 2] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $18_1 = HEAPU8[$0_1 >> 0] | 0;
         $0_1 = HEAPU8[$19_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
        }
        $19_1 = $0_1 & 255 | 0;
        $20_1 = $17_1 & 255 | 0;
        $21_1 = $18_1 & 255 | 0;
        label$140 : {
         label$141 : {
          switch ($15_1 | 0) {
          case 0:
           HEAP8[$7_1 >> 0] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$140;
          case 1:
           HEAP16[$7_1 >> 1] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$140;
          case 2:
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
           break label$140;
          case 3:
           break label$141;
          default:
           break label$140;
          };
         }
         HEAP32[$7_1 >> 2] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $9_1 = $9_1 + $3_1 | 0;
        $7_1 = $7_1 + $12_1 | 0;
        $0_1 = 5;
        continue label$81;
       case 5:
        $0_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$145 : {
         label$146 : {
          label$147 : {
           switch ($11_1 | 0) {
           case 0:
            $18_1 = HEAPU8[$9_1 >> 0] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$146;
           case 1:
            $18_1 = HEAPU16[$9_1 >> 1] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$146;
           case 2:
            $0_1 = $9_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $9_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $19_1 = $9_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$146;
           case 3:
            break label$147;
           default:
            break label$145;
           };
          }
          $18_1 = HEAP32[$9_1 >> 2] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $18_1 = HEAPU8[$0_1 >> 0] | 0;
         $0_1 = HEAPU8[$19_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
        }
        $19_1 = $0_1 & 255 | 0;
        $20_1 = $17_1 & 255 | 0;
        $21_1 = $18_1 & 255 | 0;
        label$151 : {
         label$152 : {
          switch ($15_1 | 0) {
          case 0:
           HEAP8[$7_1 >> 0] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$151;
          case 1:
           HEAP16[$7_1 >> 1] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$151;
          case 2:
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
           break label$151;
          case 3:
           break label$152;
          default:
           break label$151;
          };
         }
         HEAP32[$7_1 >> 2] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $9_1 = $9_1 + $3_1 | 0;
        $7_1 = $7_1 + $12_1 | 0;
        $0_1 = 6;
        continue label$81;
       case 6:
        $0_1 = 0;
        $17_1 = 0;
        $18_1 = 0;
        label$156 : {
         label$157 : {
          label$158 : {
           switch ($11_1 | 0) {
           case 0:
            $18_1 = HEAPU8[$9_1 >> 0] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$157;
           case 1:
            $18_1 = HEAPU16[$9_1 >> 1] | 0;
            $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$157;
           case 2:
            $0_1 = $9_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $9_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $19_1 = $9_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            break label$157;
           case 3:
            break label$158;
           default:
            break label$156;
           };
          }
          $18_1 = HEAP32[$9_1 >> 2] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $19_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $18_1 = HEAPU8[$0_1 >> 0] | 0;
         $0_1 = HEAPU8[$19_1 >> 0] | 0;
         $17_1 = HEAPU8[$17_1 >> 0] | 0;
        }
        $19_1 = $0_1 & 255 | 0;
        $20_1 = $17_1 & 255 | 0;
        $21_1 = $18_1 & 255 | 0;
        label$162 : {
         label$163 : {
          switch ($15_1 | 0) {
          case 0:
           HEAP8[$7_1 >> 0] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$162;
          case 1:
           HEAP16[$7_1 >> 1] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$162;
          case 2:
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
           HEAP8[($7_1 + ((HEAPU8[($4_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
           break label$162;
          case 3:
           break label$163;
          default:
           break label$162;
          };
         }
         HEAP32[$7_1 >> 2] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $0_1 = $16_1 + -1 | 0;
        $9_1 = $9_1 + $3_1 | 0;
        $7_1 = $7_1 + $12_1 | 0;
        if (($16_1 | 0) <= (1 | 0)) {
         break label$80
        }
        $16_1 = $0_1;
        $0_1 = 7;
        continue label$81;
       default:
        break label$82;
       };
      }
      $0_1 = 0;
      $17_1 = 0;
      $18_1 = 0;
      label$167 : {
       label$168 : {
        label$169 : {
         switch ($11_1 | 0) {
         case 0:
          $18_1 = HEAPU8[$9_1 >> 0] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $18_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          break label$168;
         case 1:
          $18_1 = HEAPU16[$9_1 >> 1] | 0;
          $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $18_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          break label$168;
         case 2:
          $0_1 = $9_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $17_1 = $9_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $18_1 = $9_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          break label$168;
         case 3:
          break label$169;
         default:
          break label$167;
         };
        }
        $18_1 = HEAP32[$9_1 >> 2] | 0;
        $0_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0;
        $17_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0;
        $18_1 = (HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $18_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0;
       }
       $0_1 = HEAPU8[$0_1 >> 0] | 0;
       $17_1 = HEAPU8[$17_1 >> 0] | 0;
       $18_1 = HEAPU8[$18_1 >> 0] | 0;
      }
      $19_1 = $0_1 & 255 | 0;
      $20_1 = $17_1 & 255 | 0;
      $21_1 = $18_1 & 255 | 0;
      label$173 : {
       label$174 : {
        switch ($15_1 | 0) {
        case 0:
         HEAP8[$7_1 >> 0] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$173;
        case 1:
         HEAP16[$7_1 >> 1] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$173;
        case 2:
         HEAP8[($7_1 + ((HEAPU8[($4_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
         HEAP8[($7_1 + ((HEAPU8[($4_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
         HEAP8[($7_1 + ((HEAPU8[($4_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
         break label$173;
        case 3:
         break label$174;
        default:
         break label$173;
        };
       }
       HEAP32[$7_1 >> 2] = ($20_1 >>> (HEAPU8[($4_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 33 | 0) >> 0] | 0) | 0 | (($21_1 >>> (HEAPU8[($4_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0) | 0;
      }
      $9_1 = $9_1 + $3_1 | 0;
      $7_1 = $7_1 + $12_1 | 0;
      $0_1 = 0;
      continue label$81;
     };
    }
    $7_1 = $7_1 + $6_1 | 0;
    $9_1 = $9_1 + $8_1 | 0;
    if ($10_1) {
     continue label$70
    }
    break label$70;
   };
  }
  global$0 = $1_1 + 32 | 0;
 }
 
 function $638($0_1) {
  $0_1 = $0_1 | 0;
  var $11_1 = 0, $4_1 = 0, $13_1 = 0, $15_1 = 0, $17_1 = 0, $7_1 = 0, $12_1 = 0, $14_1 = 0, $16_1 = 0, $8_1 = 0, $9_1 = 0, $1_1 = 0, $10_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $5_1 = $4_1 & 7 | 0;
   $6_1 = ($4_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $7_1 = HEAP32[$0_1 >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   $8_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
   $9_1 = $8_1 + -1 | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $10_1 = $6_1;
    label$3 : {
     label$4 : {
      switch ($5_1 | 0) {
      default:
       $11_1 = 7;
       break label$3;
      case 1:
       $11_1 = 6;
       break label$3;
      case 2:
       $11_1 = 5;
       break label$3;
      case 3:
       $11_1 = 4;
       break label$3;
      case 4:
       $11_1 = 3;
       break label$3;
      case 5:
       $11_1 = 2;
       break label$3;
      case 6:
       $11_1 = 1;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $11_1 = 0;
    }
    label$12 : {
     label$13 : while (1) {
      label$14 : {
       switch ($11_1 | 0) {
       case 0:
        $11_1 = HEAP32[$7_1 >> 2] | 0;
        $12_1 = $11_1 >>> 2 | 0;
        $13_1 = $12_1 & 255 | 0;
        $14_1 = $11_1 >>> 12 | 0;
        $15_1 = $14_1 & 255 | 0;
        $16_1 = $11_1 >>> 22 | 0;
        $17_1 = $16_1 & 255 | 0;
        $11_1 = HEAPU8[((HEAP32[(117504 + 24 | 0) >> 2] | 0) + ($11_1 >>> 30 | 0) | 0) >> 0] | 0;
        label$22 : {
         label$23 : {
          switch ($9_1 | 0) {
          case 0:
           HEAP8[$4_1 >> 0] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$22;
          case 1:
           HEAP16[$4_1 >> 1] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$22;
          case 2:
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $14_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $12_1;
           break label$22;
          case 3:
           break label$23;
          default:
           break label$22;
          };
         }
         HEAP32[$4_1 >> 2] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $7_1 = $7_1 + 4 | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $11_1 = 1;
        continue label$13;
       case 1:
        $11_1 = HEAP32[$7_1 >> 2] | 0;
        $12_1 = $11_1 >>> 2 | 0;
        $13_1 = $12_1 & 255 | 0;
        $14_1 = $11_1 >>> 12 | 0;
        $15_1 = $14_1 & 255 | 0;
        $16_1 = $11_1 >>> 22 | 0;
        $17_1 = $16_1 & 255 | 0;
        $11_1 = HEAPU8[((HEAP32[(117504 + 24 | 0) >> 2] | 0) + ($11_1 >>> 30 | 0) | 0) >> 0] | 0;
        label$27 : {
         label$28 : {
          switch ($9_1 | 0) {
          case 0:
           HEAP8[$4_1 >> 0] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$27;
          case 1:
           HEAP16[$4_1 >> 1] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$27;
          case 2:
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $14_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $12_1;
           break label$27;
          case 3:
           break label$28;
          default:
           break label$27;
          };
         }
         HEAP32[$4_1 >> 2] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $7_1 = $7_1 + 4 | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $11_1 = 2;
        continue label$13;
       case 2:
        $11_1 = HEAP32[$7_1 >> 2] | 0;
        $12_1 = $11_1 >>> 2 | 0;
        $13_1 = $12_1 & 255 | 0;
        $14_1 = $11_1 >>> 12 | 0;
        $15_1 = $14_1 & 255 | 0;
        $16_1 = $11_1 >>> 22 | 0;
        $17_1 = $16_1 & 255 | 0;
        $11_1 = HEAPU8[((HEAP32[(117504 + 24 | 0) >> 2] | 0) + ($11_1 >>> 30 | 0) | 0) >> 0] | 0;
        label$32 : {
         label$33 : {
          switch ($9_1 | 0) {
          case 0:
           HEAP8[$4_1 >> 0] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$32;
          case 1:
           HEAP16[$4_1 >> 1] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$32;
          case 2:
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $14_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $12_1;
           break label$32;
          case 3:
           break label$33;
          default:
           break label$32;
          };
         }
         HEAP32[$4_1 >> 2] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $7_1 = $7_1 + 4 | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $11_1 = 3;
        continue label$13;
       case 3:
        $11_1 = HEAP32[$7_1 >> 2] | 0;
        $12_1 = $11_1 >>> 2 | 0;
        $13_1 = $12_1 & 255 | 0;
        $14_1 = $11_1 >>> 12 | 0;
        $15_1 = $14_1 & 255 | 0;
        $16_1 = $11_1 >>> 22 | 0;
        $17_1 = $16_1 & 255 | 0;
        $11_1 = HEAPU8[((HEAP32[(117504 + 24 | 0) >> 2] | 0) + ($11_1 >>> 30 | 0) | 0) >> 0] | 0;
        label$37 : {
         label$38 : {
          switch ($9_1 | 0) {
          case 0:
           HEAP8[$4_1 >> 0] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$37;
          case 1:
           HEAP16[$4_1 >> 1] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$37;
          case 2:
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $14_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $12_1;
           break label$37;
          case 3:
           break label$38;
          default:
           break label$37;
          };
         }
         HEAP32[$4_1 >> 2] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $7_1 = $7_1 + 4 | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $11_1 = 4;
        continue label$13;
       case 4:
        $11_1 = HEAP32[$7_1 >> 2] | 0;
        $12_1 = $11_1 >>> 2 | 0;
        $13_1 = $12_1 & 255 | 0;
        $14_1 = $11_1 >>> 12 | 0;
        $15_1 = $14_1 & 255 | 0;
        $16_1 = $11_1 >>> 22 | 0;
        $17_1 = $16_1 & 255 | 0;
        $11_1 = HEAPU8[((HEAP32[(117504 + 24 | 0) >> 2] | 0) + ($11_1 >>> 30 | 0) | 0) >> 0] | 0;
        label$42 : {
         label$43 : {
          switch ($9_1 | 0) {
          case 0:
           HEAP8[$4_1 >> 0] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$42;
          case 1:
           HEAP16[$4_1 >> 1] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$42;
          case 2:
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $14_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $12_1;
           break label$42;
          case 3:
           break label$43;
          default:
           break label$42;
          };
         }
         HEAP32[$4_1 >> 2] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $7_1 = $7_1 + 4 | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $11_1 = 5;
        continue label$13;
       case 5:
        $11_1 = HEAP32[$7_1 >> 2] | 0;
        $12_1 = $11_1 >>> 2 | 0;
        $13_1 = $12_1 & 255 | 0;
        $14_1 = $11_1 >>> 12 | 0;
        $15_1 = $14_1 & 255 | 0;
        $16_1 = $11_1 >>> 22 | 0;
        $17_1 = $16_1 & 255 | 0;
        $11_1 = HEAPU8[((HEAP32[(117504 + 24 | 0) >> 2] | 0) + ($11_1 >>> 30 | 0) | 0) >> 0] | 0;
        label$47 : {
         label$48 : {
          switch ($9_1 | 0) {
          case 0:
           HEAP8[$4_1 >> 0] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$47;
          case 1:
           HEAP16[$4_1 >> 1] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$47;
          case 2:
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $14_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $12_1;
           break label$47;
          case 3:
           break label$48;
          default:
           break label$47;
          };
         }
         HEAP32[$4_1 >> 2] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $7_1 = $7_1 + 4 | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $11_1 = 6;
        continue label$13;
       case 6:
        $11_1 = HEAP32[$7_1 >> 2] | 0;
        $12_1 = $11_1 >>> 2 | 0;
        $13_1 = $12_1 & 255 | 0;
        $14_1 = $11_1 >>> 12 | 0;
        $15_1 = $14_1 & 255 | 0;
        $16_1 = $11_1 >>> 22 | 0;
        $17_1 = $16_1 & 255 | 0;
        $11_1 = HEAPU8[((HEAP32[(117504 + 24 | 0) >> 2] | 0) + ($11_1 >>> 30 | 0) | 0) >> 0] | 0;
        label$52 : {
         label$53 : {
          switch ($9_1 | 0) {
          case 0:
           HEAP8[$4_1 >> 0] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$52;
          case 1:
           HEAP16[$4_1 >> 1] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
           break label$52;
          case 2:
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $14_1;
           HEAP8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $12_1;
           break label$52;
          case 3:
           break label$53;
          default:
           break label$52;
          };
         }
         HEAP32[$4_1 >> 2] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
        }
        $11_1 = $10_1 + -1 | 0;
        $7_1 = $7_1 + 4 | 0;
        $4_1 = $4_1 + $8_1 | 0;
        if (($10_1 | 0) <= (1 | 0)) {
         break label$12
        }
        $10_1 = $11_1;
        $11_1 = 7;
        continue label$13;
       default:
        break label$14;
       };
      }
      $11_1 = HEAP32[$7_1 >> 2] | 0;
      $16_1 = $11_1 >>> 2 | 0;
      $17_1 = $16_1 & 255 | 0;
      $14_1 = $11_1 >>> 12 | 0;
      $15_1 = $14_1 & 255 | 0;
      $12_1 = $11_1 >>> 22 | 0;
      $13_1 = $12_1 & 255 | 0;
      $11_1 = HEAPU8[((HEAP32[(117504 + 24 | 0) >> 2] | 0) + ($11_1 >>> 30 | 0) | 0) >> 0] | 0;
      label$57 : {
       label$58 : {
        switch ($9_1 | 0) {
        case 0:
         HEAP8[$4_1 >> 0] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$57;
        case 1:
         HEAP16[$4_1 >> 1] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$57;
        case 2:
         HEAP8[($4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $12_1;
         HEAP8[($4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $14_1;
         HEAP8[($4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $16_1;
         break label$57;
        case 3:
         break label$58;
        default:
         break label$57;
        };
       }
       HEAP32[$4_1 >> 2] = ($15_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($13_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($17_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
      }
      $7_1 = $7_1 + 4 | 0;
      $4_1 = $4_1 + $8_1 | 0;
      $11_1 = 0;
      continue label$13;
     };
    }
    $4_1 = $4_1 + $2_1 | 0;
    $7_1 = $7_1 + $3_1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $639($0_1) {
  $0_1 = $0_1 | 0;
  var $11_1 = 0, $12_1 = 0, $13_1 = 0, $4_1 = 0, $15_1 = 0, $14_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $1_1 = 0, $10_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $5_1 = $4_1 & 7 | 0;
   $6_1 = ($4_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $4_1 = HEAP32[$0_1 >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   $8_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
   $9_1 = $8_1 + -1 | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $10_1 = $6_1;
    label$3 : {
     label$4 : {
      switch ($5_1 | 0) {
      default:
       $11_1 = 7;
       break label$3;
      case 1:
       $11_1 = 6;
       break label$3;
      case 2:
       $11_1 = 5;
       break label$3;
      case 3:
       $11_1 = 4;
       break label$3;
      case 4:
       $11_1 = 3;
       break label$3;
      case 5:
       $11_1 = 2;
       break label$3;
      case 6:
       $11_1 = 1;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $11_1 = 0;
    }
    label$12 : {
     label$13 : while (1) {
      label$14 : {
       switch ($11_1 | 0) {
       case 0:
        $12_1 = 0;
        $11_1 = 0;
        $13_1 = 0;
        $14_1 = 0;
        label$22 : {
         label$23 : {
          label$24 : {
           switch ($9_1 | 0) {
           case 0:
            $11_1 = HEAPU8[$4_1 >> 0] | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$23;
           case 1:
            $11_1 = HEAPU16[$4_1 >> 1] | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$23;
           case 2:
            $12_1 = $4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $13_1 = $4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $11_1 = 255;
            break label$23;
           case 3:
            break label$24;
           default:
            break label$22;
           };
          }
          $11_1 = HEAP32[$4_1 >> 2] | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         $12_1 = (HEAPU8[$12_1 >> 0] | 0) & 255 | 0;
         $14_1 = $12_1 ? $12_1 << 2 | 0 | 3 | 0 : 0;
         $12_1 = (HEAPU8[$13_1 >> 0] | 0) & 255 | 0;
         $12_1 = $12_1 ? $12_1 << 12 | 0 | 3072 | 0 : 0;
         $13_1 = (HEAPU8[$15_1 >> 0] | 0) & 255 | 0;
         $13_1 = $13_1 ? $13_1 << 22 | 0 | 3145728 | 0 : 0;
        }
        HEAP32[$7_1 >> 2] = ((((($11_1 & 255 | 0) >>> 0) / (85 >>> 0) | 0) << 30 | 0 | $13_1 | 0) + $12_1 | 0) + $14_1 | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $7_1 = $7_1 + 4 | 0;
        $11_1 = 1;
        continue label$13;
       case 1:
        $12_1 = 0;
        $11_1 = 0;
        $13_1 = 0;
        $14_1 = 0;
        label$28 : {
         label$29 : {
          label$30 : {
           switch ($9_1 | 0) {
           case 0:
            $11_1 = HEAPU8[$4_1 >> 0] | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$29;
           case 1:
            $11_1 = HEAPU16[$4_1 >> 1] | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$29;
           case 2:
            $12_1 = $4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $13_1 = $4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $11_1 = 255;
            break label$29;
           case 3:
            break label$30;
           default:
            break label$28;
           };
          }
          $11_1 = HEAP32[$4_1 >> 2] | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         $12_1 = (HEAPU8[$12_1 >> 0] | 0) & 255 | 0;
         $14_1 = $12_1 ? $12_1 << 2 | 0 | 3 | 0 : 0;
         $12_1 = (HEAPU8[$13_1 >> 0] | 0) & 255 | 0;
         $12_1 = $12_1 ? $12_1 << 12 | 0 | 3072 | 0 : 0;
         $13_1 = (HEAPU8[$15_1 >> 0] | 0) & 255 | 0;
         $13_1 = $13_1 ? $13_1 << 22 | 0 | 3145728 | 0 : 0;
        }
        HEAP32[$7_1 >> 2] = ((((($11_1 & 255 | 0) >>> 0) / (85 >>> 0) | 0) << 30 | 0 | $13_1 | 0) + $12_1 | 0) + $14_1 | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $7_1 = $7_1 + 4 | 0;
        $11_1 = 2;
        continue label$13;
       case 2:
        $12_1 = 0;
        $11_1 = 0;
        $13_1 = 0;
        $14_1 = 0;
        label$34 : {
         label$35 : {
          label$36 : {
           switch ($9_1 | 0) {
           case 0:
            $11_1 = HEAPU8[$4_1 >> 0] | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$35;
           case 1:
            $11_1 = HEAPU16[$4_1 >> 1] | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$35;
           case 2:
            $12_1 = $4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $13_1 = $4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $11_1 = 255;
            break label$35;
           case 3:
            break label$36;
           default:
            break label$34;
           };
          }
          $11_1 = HEAP32[$4_1 >> 2] | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         $12_1 = (HEAPU8[$12_1 >> 0] | 0) & 255 | 0;
         $14_1 = $12_1 ? $12_1 << 2 | 0 | 3 | 0 : 0;
         $12_1 = (HEAPU8[$13_1 >> 0] | 0) & 255 | 0;
         $12_1 = $12_1 ? $12_1 << 12 | 0 | 3072 | 0 : 0;
         $13_1 = (HEAPU8[$15_1 >> 0] | 0) & 255 | 0;
         $13_1 = $13_1 ? $13_1 << 22 | 0 | 3145728 | 0 : 0;
        }
        HEAP32[$7_1 >> 2] = ((((($11_1 & 255 | 0) >>> 0) / (85 >>> 0) | 0) << 30 | 0 | $13_1 | 0) + $12_1 | 0) + $14_1 | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $7_1 = $7_1 + 4 | 0;
        $11_1 = 3;
        continue label$13;
       case 3:
        $12_1 = 0;
        $11_1 = 0;
        $13_1 = 0;
        $14_1 = 0;
        label$40 : {
         label$41 : {
          label$42 : {
           switch ($9_1 | 0) {
           case 0:
            $11_1 = HEAPU8[$4_1 >> 0] | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$41;
           case 1:
            $11_1 = HEAPU16[$4_1 >> 1] | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$41;
           case 2:
            $12_1 = $4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $13_1 = $4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $11_1 = 255;
            break label$41;
           case 3:
            break label$42;
           default:
            break label$40;
           };
          }
          $11_1 = HEAP32[$4_1 >> 2] | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         $12_1 = (HEAPU8[$12_1 >> 0] | 0) & 255 | 0;
         $14_1 = $12_1 ? $12_1 << 2 | 0 | 3 | 0 : 0;
         $12_1 = (HEAPU8[$13_1 >> 0] | 0) & 255 | 0;
         $12_1 = $12_1 ? $12_1 << 12 | 0 | 3072 | 0 : 0;
         $13_1 = (HEAPU8[$15_1 >> 0] | 0) & 255 | 0;
         $13_1 = $13_1 ? $13_1 << 22 | 0 | 3145728 | 0 : 0;
        }
        HEAP32[$7_1 >> 2] = ((((($11_1 & 255 | 0) >>> 0) / (85 >>> 0) | 0) << 30 | 0 | $13_1 | 0) + $12_1 | 0) + $14_1 | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $7_1 = $7_1 + 4 | 0;
        $11_1 = 4;
        continue label$13;
       case 4:
        $12_1 = 0;
        $11_1 = 0;
        $13_1 = 0;
        $14_1 = 0;
        label$46 : {
         label$47 : {
          label$48 : {
           switch ($9_1 | 0) {
           case 0:
            $11_1 = HEAPU8[$4_1 >> 0] | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$47;
           case 1:
            $11_1 = HEAPU16[$4_1 >> 1] | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$47;
           case 2:
            $12_1 = $4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $13_1 = $4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $11_1 = 255;
            break label$47;
           case 3:
            break label$48;
           default:
            break label$46;
           };
          }
          $11_1 = HEAP32[$4_1 >> 2] | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         $12_1 = (HEAPU8[$12_1 >> 0] | 0) & 255 | 0;
         $14_1 = $12_1 ? $12_1 << 2 | 0 | 3 | 0 : 0;
         $12_1 = (HEAPU8[$13_1 >> 0] | 0) & 255 | 0;
         $12_1 = $12_1 ? $12_1 << 12 | 0 | 3072 | 0 : 0;
         $13_1 = (HEAPU8[$15_1 >> 0] | 0) & 255 | 0;
         $13_1 = $13_1 ? $13_1 << 22 | 0 | 3145728 | 0 : 0;
        }
        HEAP32[$7_1 >> 2] = ((((($11_1 & 255 | 0) >>> 0) / (85 >>> 0) | 0) << 30 | 0 | $13_1 | 0) + $12_1 | 0) + $14_1 | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $7_1 = $7_1 + 4 | 0;
        $11_1 = 5;
        continue label$13;
       case 5:
        $12_1 = 0;
        $11_1 = 0;
        $13_1 = 0;
        $14_1 = 0;
        label$52 : {
         label$53 : {
          label$54 : {
           switch ($9_1 | 0) {
           case 0:
            $11_1 = HEAPU8[$4_1 >> 0] | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$53;
           case 1:
            $11_1 = HEAPU16[$4_1 >> 1] | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$53;
           case 2:
            $12_1 = $4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $13_1 = $4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $11_1 = 255;
            break label$53;
           case 3:
            break label$54;
           default:
            break label$52;
           };
          }
          $11_1 = HEAP32[$4_1 >> 2] | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         $12_1 = (HEAPU8[$12_1 >> 0] | 0) & 255 | 0;
         $14_1 = $12_1 ? $12_1 << 2 | 0 | 3 | 0 : 0;
         $12_1 = (HEAPU8[$13_1 >> 0] | 0) & 255 | 0;
         $12_1 = $12_1 ? $12_1 << 12 | 0 | 3072 | 0 : 0;
         $13_1 = (HEAPU8[$15_1 >> 0] | 0) & 255 | 0;
         $13_1 = $13_1 ? $13_1 << 22 | 0 | 3145728 | 0 : 0;
        }
        HEAP32[$7_1 >> 2] = ((((($11_1 & 255 | 0) >>> 0) / (85 >>> 0) | 0) << 30 | 0 | $13_1 | 0) + $12_1 | 0) + $14_1 | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $7_1 = $7_1 + 4 | 0;
        $11_1 = 6;
        continue label$13;
       case 6:
        $12_1 = 0;
        $11_1 = 0;
        $13_1 = 0;
        $14_1 = 0;
        label$58 : {
         label$59 : {
          label$60 : {
           switch ($9_1 | 0) {
           case 0:
            $11_1 = HEAPU8[$4_1 >> 0] | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$59;
           case 1:
            $11_1 = HEAPU16[$4_1 >> 1] | 0;
            $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$59;
           case 2:
            $12_1 = $4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $13_1 = $4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $11_1 = 255;
            break label$59;
           case 3:
            break label$60;
           default:
            break label$58;
           };
          }
          $11_1 = HEAP32[$4_1 >> 2] | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         $12_1 = (HEAPU8[$12_1 >> 0] | 0) & 255 | 0;
         $14_1 = $12_1 ? $12_1 << 2 | 0 | 3 | 0 : 0;
         $12_1 = (HEAPU8[$13_1 >> 0] | 0) & 255 | 0;
         $12_1 = $12_1 ? $12_1 << 12 | 0 | 3072 | 0 : 0;
         $13_1 = (HEAPU8[$15_1 >> 0] | 0) & 255 | 0;
         $13_1 = $13_1 ? $13_1 << 22 | 0 | 3145728 | 0 : 0;
        }
        HEAP32[$7_1 >> 2] = ((((($11_1 & 255 | 0) >>> 0) / (85 >>> 0) | 0) << 30 | 0 | $13_1 | 0) + $12_1 | 0) + $14_1 | 0;
        $11_1 = $10_1 + -1 | 0;
        $4_1 = $4_1 + $8_1 | 0;
        $7_1 = $7_1 + 4 | 0;
        if (($10_1 | 0) <= (1 | 0)) {
         break label$12
        }
        $10_1 = $11_1;
        $11_1 = 7;
        continue label$13;
       default:
        break label$14;
       };
      }
      $13_1 = 0;
      $11_1 = 0;
      $14_1 = 0;
      $12_1 = 0;
      label$64 : {
       label$65 : {
        label$66 : {
         switch ($9_1 | 0) {
         case 0:
          $11_1 = HEAPU8[$4_1 >> 0] | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          break label$65;
         case 1:
          $11_1 = HEAPU16[$4_1 >> 1] | 0;
          $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          break label$65;
         case 2:
          $12_1 = $4_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $13_1 = $4_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $14_1 = $4_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $11_1 = 255;
          break label$65;
         case 3:
          break label$66;
         default:
          break label$64;
         };
        }
        $11_1 = HEAP32[$4_1 >> 2] | 0;
        $12_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0;
        $13_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0;
        $14_1 = (HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0;
        $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       }
       $12_1 = (HEAPU8[$12_1 >> 0] | 0) & 255 | 0;
       $12_1 = $12_1 ? $12_1 << 2 | 0 | 3 | 0 : 0;
       $13_1 = (HEAPU8[$13_1 >> 0] | 0) & 255 | 0;
       $13_1 = $13_1 ? $13_1 << 12 | 0 | 3072 | 0 : 0;
       $14_1 = (HEAPU8[$14_1 >> 0] | 0) & 255 | 0;
       $14_1 = $14_1 ? $14_1 << 22 | 0 | 3145728 | 0 : 0;
      }
      HEAP32[$7_1 >> 2] = ((((($11_1 & 255 | 0) >>> 0) / (85 >>> 0) | 0) << 30 | 0 | $14_1 | 0) + $13_1 | 0) + $12_1 | 0;
      $4_1 = $4_1 + $8_1 | 0;
      $7_1 = $7_1 + 4 | 0;
      $11_1 = 0;
      continue label$13;
     };
    }
    $7_1 = $7_1 + $2_1 | 0;
    $4_1 = $4_1 + $3_1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $640($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $4_1 = HEAP32[$0_1 >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    if (!(HEAP32[($7_1 + 24 | 0) >> 2] | 0)) {
     break label$2
    }
    if (!$5_1) {
     break label$1
    }
    $7_1 = ((HEAPU8[($0_1 + 63 | 0) >> 0] | 0) >>> (HEAPU8[($7_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($7_1 + 35 | 0) >> 0] | 0) | 0;
    $8_1 = $6_1 & 7 | 0;
    $9_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
    label$3 : while (1) {
     $5_1 = $5_1 + -1 | 0;
     $6_1 = $9_1;
     label$4 : {
      label$5 : {
       switch ($8_1 | 0) {
       default:
        $0_1 = 0;
        break label$4;
       case 1:
        $0_1 = 7;
        break label$4;
       case 2:
        $0_1 = 6;
        break label$4;
       case 3:
        $0_1 = 5;
        break label$4;
       case 4:
        $0_1 = 4;
        break label$4;
       case 5:
        $0_1 = 3;
        break label$4;
       case 6:
        $0_1 = 2;
        break label$4;
       case 7:
        break label$5;
       };
      }
      $0_1 = 1;
     }
     label$13 : while (1) {
      label$14 : {
       switch ($0_1 | 0) {
       case 0:
        HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | $7_1 | 0;
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $0_1 = 1;
        continue label$13;
       case 1:
        HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | $7_1 | 0;
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $0_1 = 2;
        continue label$13;
       case 2:
        HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | $7_1 | 0;
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $0_1 = 3;
        continue label$13;
       case 3:
        HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | $7_1 | 0;
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $0_1 = 4;
        continue label$13;
       case 4:
        HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | $7_1 | 0;
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $0_1 = 5;
        continue label$13;
       case 5:
        HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | $7_1 | 0;
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $0_1 = 6;
        continue label$13;
       case 6:
        HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | $7_1 | 0;
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $0_1 = 7;
        continue label$13;
       default:
        break label$14;
       };
      }
      HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | $7_1 | 0;
      $0_1 = $6_1 + -1 | 0;
      $4_1 = $4_1 + 4 | 0;
      $2_1 = $2_1 + 4 | 0;
      label$22 : {
       label$23 : {
        if (($6_1 | 0) <= (1 | 0)) {
         break label$23
        }
        $6_1 = $0_1;
        break label$22;
       }
       $2_1 = $2_1 + $1_1 | 0;
       $4_1 = $4_1 + $3_1 | 0;
       if ($5_1) {
        continue label$3
       }
       break label$1;
      }
      $0_1 = 0;
      continue label$13;
     };
    };
   }
   if (!$5_1) {
    break label$1
   }
   $0_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0 | (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0 | (HEAP32[($0_1 + 20 | 0) >> 2] | 0) | 0;
   $8_1 = $6_1 & 7 | 0;
   $9_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
   label$24 : while (1) {
    $5_1 = $5_1 + -1 | 0;
    $6_1 = $9_1;
    label$25 : {
     label$26 : {
      switch ($8_1 | 0) {
      default:
       $0_1 = 0;
       break label$25;
      case 1:
       $0_1 = 7;
       break label$25;
      case 2:
       $0_1 = 6;
       break label$25;
      case 3:
       $0_1 = 5;
       break label$25;
      case 4:
       $0_1 = 4;
       break label$25;
      case 5:
       $0_1 = 3;
       break label$25;
      case 6:
       $0_1 = 2;
       break label$25;
      case 7:
       break label$26;
      };
     }
     $0_1 = 1;
    }
    label$34 : while (1) {
     label$35 : {
      switch ($0_1 | 0) {
      case 0:
       HEAP32[$2_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) & $7_1 | 0;
       $4_1 = $4_1 + 4 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 1;
       continue label$34;
      case 1:
       HEAP32[$2_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) & $7_1 | 0;
       $4_1 = $4_1 + 4 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 2;
       continue label$34;
      case 2:
       HEAP32[$2_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) & $7_1 | 0;
       $4_1 = $4_1 + 4 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 3;
       continue label$34;
      case 3:
       HEAP32[$2_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) & $7_1 | 0;
       $4_1 = $4_1 + 4 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 4;
       continue label$34;
      case 4:
       HEAP32[$2_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) & $7_1 | 0;
       $4_1 = $4_1 + 4 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 5;
       continue label$34;
      case 5:
       HEAP32[$2_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) & $7_1 | 0;
       $4_1 = $4_1 + 4 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 6;
       continue label$34;
      case 6:
       HEAP32[$2_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) & $7_1 | 0;
       $4_1 = $4_1 + 4 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 7;
       continue label$34;
      default:
       break label$35;
      };
     }
     HEAP32[$2_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) & $7_1 | 0;
     $0_1 = $6_1 + -1 | 0;
     $4_1 = $4_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     label$43 : {
      label$44 : {
       if (($6_1 | 0) <= (1 | 0)) {
        break label$44
       }
       $6_1 = $0_1;
       break label$43;
      }
      $2_1 = $2_1 + $1_1 | 0;
      $4_1 = $4_1 + $3_1 | 0;
      if ($5_1) {
       continue label$24
      }
      break label$1;
     }
     $0_1 = 0;
     continue label$34;
    };
   };
  }
 }
 
 function $641($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $1_1 = 0, $8_1 = 0, $11_1 = 0, $16_1 = 0, $6_1 = 0, $12_1 = 0, $15_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $14_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $2_1 = 0, $4_1 = 0, $13_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  $9_1 = HEAPU8[($8_1 + 9 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    $0_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
    $10_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
    if (($10_1 | 0) != (4 | 0)) {
     break label$2
    }
    if (($9_1 | 0) != (4 | 0)) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (372711428 | 0)) {
     break label$2
    }
    if ((HEAP32[$8_1 >> 2] | 0 | 0) == (372711428 | 0)) {
     break label$2
    }
    $646($0_1 | 0, $8_1 | 0, $1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0, $1_1 + 4 | 0 | 0, $1_1 | 0, 0 | 0);
    if (!$6_1) {
     break label$1
    }
    $11_1 = $7_1 & 7 | 0;
    $12_1 = ($7_1 + 7 | 0 | 0) / (8 | 0) | 0;
    label$3 : while (1) {
     $6_1 = $6_1 + -1 | 0;
     $8_1 = $12_1;
     label$4 : {
      label$5 : {
       switch ($11_1 | 0) {
       default:
        $0_1 = 0;
        break label$4;
       case 1:
        $0_1 = 7;
        break label$4;
       case 2:
        $0_1 = 6;
        break label$4;
       case 3:
        $0_1 = 5;
        break label$4;
       case 4:
        $0_1 = 4;
        break label$4;
       case 5:
        $0_1 = 3;
        break label$4;
       case 6:
        $0_1 = 2;
        break label$4;
       case 7:
        break label$5;
       };
      }
      $0_1 = 1;
     }
     label$13 : while (1) {
      label$14 : {
       switch ($0_1 | 0) {
       case 0:
        HEAP8[$3_1 >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 1 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 2 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 3 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
        $3_1 = $3_1 + 4 | 0;
        $5_1 = $5_1 + 4 | 0;
        $0_1 = 1;
        continue label$13;
       case 1:
        HEAP8[$3_1 >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 1 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 2 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 3 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
        $3_1 = $3_1 + 4 | 0;
        $5_1 = $5_1 + 4 | 0;
        $0_1 = 2;
        continue label$13;
       case 2:
        HEAP8[$3_1 >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 1 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 2 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 3 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
        $3_1 = $3_1 + 4 | 0;
        $5_1 = $5_1 + 4 | 0;
        $0_1 = 3;
        continue label$13;
       case 3:
        HEAP8[$3_1 >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 1 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 2 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 3 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
        $3_1 = $3_1 + 4 | 0;
        $5_1 = $5_1 + 4 | 0;
        $0_1 = 4;
        continue label$13;
       case 4:
        HEAP8[$3_1 >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 1 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 2 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 3 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
        $3_1 = $3_1 + 4 | 0;
        $5_1 = $5_1 + 4 | 0;
        $0_1 = 5;
        continue label$13;
       case 5:
        HEAP8[$3_1 >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 1 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 2 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 3 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
        $3_1 = $3_1 + 4 | 0;
        $5_1 = $5_1 + 4 | 0;
        $0_1 = 6;
        continue label$13;
       case 6:
        HEAP8[$3_1 >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 1 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 2 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($3_1 + 3 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
        $3_1 = $3_1 + 4 | 0;
        $5_1 = $5_1 + 4 | 0;
        $0_1 = 7;
        continue label$13;
       default:
        break label$14;
       };
      }
      HEAP8[$3_1 >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
      HEAP8[($3_1 + 1 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = HEAPU8[($5_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
      $0_1 = $8_1 + -1 | 0;
      $3_1 = $3_1 + 4 | 0;
      $5_1 = $5_1 + 4 | 0;
      label$22 : {
       label$23 : {
        if (($8_1 | 0) <= (1 | 0)) {
         break label$23
        }
        $8_1 = $0_1;
        break label$22;
       }
       $3_1 = $3_1 + $2_1 | 0;
       $5_1 = $5_1 + $4_1 | 0;
       if ($6_1) {
        continue label$3
       }
       break label$1;
      }
      $0_1 = 0;
      continue label$13;
     };
    };
   }
   if (!$6_1) {
    break label$1
   }
   $13_1 = $9_1 + -1 | 0;
   label$24 : while (1) {
    $14_1 = $7_1;
    label$25 : {
     if (!$7_1) {
      break label$25
     }
     label$26 : while (1) {
      $11_1 = 0;
      $12_1 = 0;
      $15_1 = 0;
      $16_1 = 0;
      label$27 : {
       label$28 : {
        switch ($10_1 + -1 | 0 | 0) {
        case 0:
         $11_1 = HEAPU8[$5_1 >> 0] | 0;
         $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $12_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         break label$27;
        case 1:
         $11_1 = HEAPU16[$5_1 >> 1] | 0;
         $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $12_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         break label$27;
        case 2:
         $15_1 = HEAPU8[($5_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $12_1 = HEAPU8[($5_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $11_1 = HEAPU8[($5_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
         $16_1 = 255;
         break label$27;
        case 3:
         break label$28;
        default:
         break label$27;
        };
       }
       $11_1 = HEAP32[$5_1 >> 2] | 0;
       $16_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $15_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $12_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       $11_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
      }
      $17_1 = $11_1 & 255 | 0;
      $18_1 = $12_1 & 255 | 0;
      $19_1 = $15_1 & 255 | 0;
      $16_1 = $16_1 & 255 | 0;
      label$32 : {
       label$33 : {
        switch ($13_1 | 0) {
        case 0:
         HEAP8[$3_1 >> 0] = ($18_1 >>> (HEAPU8[($8_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($8_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($8_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($8_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$32;
        case 1:
         HEAP16[$3_1 >> 1] = ($18_1 >>> (HEAPU8[($8_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($8_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($8_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($8_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         break label$32;
        case 2:
         HEAP8[($3_1 + ((HEAPU8[($8_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $11_1;
         HEAP8[($3_1 + ((HEAPU8[($8_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $12_1;
         HEAP8[($3_1 + ((HEAPU8[($8_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $15_1;
         break label$32;
        case 3:
         break label$33;
        default:
         break label$32;
        };
       }
       HEAP32[$3_1 >> 2] = ($18_1 >>> (HEAPU8[($8_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 33 | 0) >> 0] | 0) | 0 | (($17_1 >>> (HEAPU8[($8_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($19_1 >>> (HEAPU8[($8_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($8_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0) | 0;
      }
      $5_1 = $5_1 + $10_1 | 0;
      $3_1 = $3_1 + $9_1 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$26
      }
      break label$26;
     };
    }
    $3_1 = $3_1 + $2_1 | 0;
    $5_1 = $5_1 + $4_1 | 0;
    $6_1 = $6_1 + -1 | 0;
    if ($6_1) {
     continue label$24
    }
    break label$24;
   };
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $642($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
  $2_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $4_1 = (HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) ^ -1 | 0;
   $5_1 = (HEAP32[($0_1 + 56 | 0) >> 2] | 0) & $4_1 | 0;
   $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $7_1 = $6_1 & 7 | 0;
   $8_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $9_1 = $1_1 << 1 | 0;
   $10_1 = $2_1 << 1 | 0;
   label$2 : while (1) {
    $3_1 = $3_1 + -1 | 0;
    $2_1 = $8_1;
    label$3 : {
     label$4 : {
      switch ($7_1 | 0) {
      default:
       $1_1 = 0;
       break label$3;
      case 1:
       $1_1 = 7;
       break label$3;
      case 2:
       $1_1 = 6;
       break label$3;
      case 3:
       $1_1 = 5;
       break label$3;
      case 4:
       $1_1 = 4;
       break label$3;
      case 5:
       $1_1 = 3;
       break label$3;
      case 6:
       $1_1 = 2;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $1_1 = 1;
    }
    label$12 : while (1) {
     label$13 : {
      switch ($1_1 | 0) {
      case 0:
       label$21 : {
        $1_1 = HEAPU16[$6_1 >> 1] | 0;
        if (($1_1 & $4_1 | 0 | 0) == ($5_1 | 0)) {
         break label$21
        }
        HEAP16[$0_1 >> 1] = $1_1;
       }
       $6_1 = $6_1 + 2 | 0;
       $0_1 = $0_1 + 2 | 0;
       $1_1 = 1;
       continue label$12;
      case 1:
       label$22 : {
        $1_1 = HEAPU16[$6_1 >> 1] | 0;
        if (($1_1 & $4_1 | 0 | 0) == ($5_1 | 0)) {
         break label$22
        }
        HEAP16[$0_1 >> 1] = $1_1;
       }
       $6_1 = $6_1 + 2 | 0;
       $0_1 = $0_1 + 2 | 0;
       $1_1 = 2;
       continue label$12;
      case 2:
       label$23 : {
        $1_1 = HEAPU16[$6_1 >> 1] | 0;
        if (($1_1 & $4_1 | 0 | 0) == ($5_1 | 0)) {
         break label$23
        }
        HEAP16[$0_1 >> 1] = $1_1;
       }
       $6_1 = $6_1 + 2 | 0;
       $0_1 = $0_1 + 2 | 0;
       $1_1 = 3;
       continue label$12;
      case 3:
       label$24 : {
        $1_1 = HEAPU16[$6_1 >> 1] | 0;
        if (($1_1 & $4_1 | 0 | 0) == ($5_1 | 0)) {
         break label$24
        }
        HEAP16[$0_1 >> 1] = $1_1;
       }
       $6_1 = $6_1 + 2 | 0;
       $0_1 = $0_1 + 2 | 0;
       $1_1 = 4;
       continue label$12;
      case 4:
       label$25 : {
        $1_1 = HEAPU16[$6_1 >> 1] | 0;
        if (($1_1 & $4_1 | 0 | 0) == ($5_1 | 0)) {
         break label$25
        }
        HEAP16[$0_1 >> 1] = $1_1;
       }
       $6_1 = $6_1 + 2 | 0;
       $0_1 = $0_1 + 2 | 0;
       $1_1 = 5;
       continue label$12;
      case 5:
       label$26 : {
        $1_1 = HEAPU16[$6_1 >> 1] | 0;
        if (($1_1 & $4_1 | 0 | 0) == ($5_1 | 0)) {
         break label$26
        }
        HEAP16[$0_1 >> 1] = $1_1;
       }
       $6_1 = $6_1 + 2 | 0;
       $0_1 = $0_1 + 2 | 0;
       $1_1 = 6;
       continue label$12;
      case 6:
       label$27 : {
        $1_1 = HEAPU16[$6_1 >> 1] | 0;
        if (($1_1 & $4_1 | 0 | 0) == ($5_1 | 0)) {
         break label$27
        }
        HEAP16[$0_1 >> 1] = $1_1;
       }
       $6_1 = $6_1 + 2 | 0;
       $0_1 = $0_1 + 2 | 0;
       $1_1 = 7;
       continue label$12;
      default:
       break label$13;
      };
     }
     label$28 : {
      $1_1 = HEAPU16[$6_1 >> 1] | 0;
      if (($1_1 & $4_1 | 0 | 0) == ($5_1 | 0)) {
       break label$28
      }
      HEAP16[$0_1 >> 1] = $1_1;
     }
     $1_1 = $2_1 + -1 | 0;
     $6_1 = $6_1 + 2 | 0;
     $0_1 = $0_1 + 2 | 0;
     label$29 : {
      label$30 : {
       if (($2_1 | 0) <= (1 | 0)) {
        break label$30
       }
       $2_1 = $1_1;
       break label$29;
      }
      $0_1 = $0_1 + $9_1 | 0;
      $6_1 = $6_1 + $10_1 | 0;
      if ($3_1) {
       continue label$2
      }
      break label$1;
     }
     $1_1 = 0;
     continue label$12;
    };
   };
  }
 }
 
 function $643($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0, $15_1 = 0, $16_1 = 0, $14_1 = 0, $17_1 = 0, $5_1 = 0, $18_1 = 0, $9_1 = 0, $10_1 = 0, $2_1 = 0, $3_1 = 0, $11_1 = 0, $8_1 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $2_1 = (HEAP32[($1_1 + 24 | 0) >> 2] | 0) ^ -1 | 0;
  $3_1 = (HEAP32[($0_1 + 56 | 0) >> 2] | 0) & $2_1 | 0;
  $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $7_1 = HEAP32[$0_1 >> 2] | 0;
  $8_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $9_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $10_1 = HEAPU8[($1_1 + 9 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    if (!$8_1) {
     break label$1
    }
    $12_1 = $9_1 & 7 | 0;
    $13_1 = ($9_1 + 7 | 0 | 0) / (8 | 0) | 0;
    $9_1 = $10_1 + -1 | 0;
    label$3 : while (1) {
     $8_1 = $8_1 + -1 | 0;
     $14_1 = $13_1;
     label$4 : {
      label$5 : {
       switch ($12_1 | 0) {
       default:
        $0_1 = 7;
        break label$4;
       case 1:
        $0_1 = 6;
        break label$4;
       case 2:
        $0_1 = 5;
        break label$4;
       case 3:
        $0_1 = 4;
        break label$4;
       case 4:
        $0_1 = 3;
        break label$4;
       case 5:
        $0_1 = 2;
        break label$4;
       case 6:
        $0_1 = 1;
        break label$4;
       case 7:
        break label$5;
       };
      }
      $0_1 = 0;
     }
     label$13 : {
      label$14 : while (1) {
       label$15 : {
        switch ($0_1 | 0) {
        case 0:
         $0_1 = 0;
         $15_1 = 0;
         $16_1 = 0;
         $17_1 = 0;
         label$23 : {
          label$24 : {
           label$25 : {
            switch ($9_1 | 0) {
            case 0:
             $0_1 = HEAPU8[$7_1 >> 0] | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$24;
            case 1:
             $0_1 = HEAPU16[$7_1 >> 1] | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$24;
            case 2:
             $15_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $16_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $18_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $0_1 = 0;
             break label$24;
            case 3:
             break label$25;
            default:
             break label$23;
            };
           }
           $0_1 = HEAP32[$7_1 >> 2] | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          }
          $17_1 = HEAPU8[$15_1 >> 0] | 0;
          $15_1 = HEAPU8[$18_1 >> 0] | 0;
          $16_1 = HEAPU8[$16_1 >> 0] | 0;
         }
         label$29 : {
          if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
           break label$29
          }
          HEAP8[$5_1 >> 0] = HEAPU8[($11_1 + (($16_1 >>> 3 | 0) & 28 | 0 | ($15_1 & 224 | 0) | 0 | (($17_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
         }
         $7_1 = $7_1 + $10_1 | 0;
         $5_1 = $5_1 + 1 | 0;
         $0_1 = 1;
         continue label$14;
        case 1:
         $0_1 = 0;
         $15_1 = 0;
         $16_1 = 0;
         $17_1 = 0;
         label$30 : {
          label$31 : {
           label$32 : {
            switch ($9_1 | 0) {
            case 0:
             $0_1 = HEAPU8[$7_1 >> 0] | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$31;
            case 1:
             $0_1 = HEAPU16[$7_1 >> 1] | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$31;
            case 2:
             $15_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $16_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $18_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $0_1 = 0;
             break label$31;
            case 3:
             break label$32;
            default:
             break label$30;
            };
           }
           $0_1 = HEAP32[$7_1 >> 2] | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          }
          $17_1 = HEAPU8[$15_1 >> 0] | 0;
          $15_1 = HEAPU8[$18_1 >> 0] | 0;
          $16_1 = HEAPU8[$16_1 >> 0] | 0;
         }
         label$36 : {
          if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
           break label$36
          }
          HEAP8[$5_1 >> 0] = HEAPU8[($11_1 + (($16_1 >>> 3 | 0) & 28 | 0 | ($15_1 & 224 | 0) | 0 | (($17_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
         }
         $7_1 = $7_1 + $10_1 | 0;
         $5_1 = $5_1 + 1 | 0;
         $0_1 = 2;
         continue label$14;
        case 2:
         $0_1 = 0;
         $15_1 = 0;
         $16_1 = 0;
         $17_1 = 0;
         label$37 : {
          label$38 : {
           label$39 : {
            switch ($9_1 | 0) {
            case 0:
             $0_1 = HEAPU8[$7_1 >> 0] | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$38;
            case 1:
             $0_1 = HEAPU16[$7_1 >> 1] | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$38;
            case 2:
             $15_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $16_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $18_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $0_1 = 0;
             break label$38;
            case 3:
             break label$39;
            default:
             break label$37;
            };
           }
           $0_1 = HEAP32[$7_1 >> 2] | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          }
          $17_1 = HEAPU8[$15_1 >> 0] | 0;
          $15_1 = HEAPU8[$18_1 >> 0] | 0;
          $16_1 = HEAPU8[$16_1 >> 0] | 0;
         }
         label$43 : {
          if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
           break label$43
          }
          HEAP8[$5_1 >> 0] = HEAPU8[($11_1 + (($16_1 >>> 3 | 0) & 28 | 0 | ($15_1 & 224 | 0) | 0 | (($17_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
         }
         $7_1 = $7_1 + $10_1 | 0;
         $5_1 = $5_1 + 1 | 0;
         $0_1 = 3;
         continue label$14;
        case 3:
         $0_1 = 0;
         $15_1 = 0;
         $16_1 = 0;
         $17_1 = 0;
         label$44 : {
          label$45 : {
           label$46 : {
            switch ($9_1 | 0) {
            case 0:
             $0_1 = HEAPU8[$7_1 >> 0] | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$45;
            case 1:
             $0_1 = HEAPU16[$7_1 >> 1] | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$45;
            case 2:
             $15_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $16_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $18_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $0_1 = 0;
             break label$45;
            case 3:
             break label$46;
            default:
             break label$44;
            };
           }
           $0_1 = HEAP32[$7_1 >> 2] | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          }
          $17_1 = HEAPU8[$15_1 >> 0] | 0;
          $15_1 = HEAPU8[$18_1 >> 0] | 0;
          $16_1 = HEAPU8[$16_1 >> 0] | 0;
         }
         label$50 : {
          if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
           break label$50
          }
          HEAP8[$5_1 >> 0] = HEAPU8[($11_1 + (($16_1 >>> 3 | 0) & 28 | 0 | ($15_1 & 224 | 0) | 0 | (($17_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
         }
         $7_1 = $7_1 + $10_1 | 0;
         $5_1 = $5_1 + 1 | 0;
         $0_1 = 4;
         continue label$14;
        case 4:
         $0_1 = 0;
         $15_1 = 0;
         $16_1 = 0;
         $17_1 = 0;
         label$51 : {
          label$52 : {
           label$53 : {
            switch ($9_1 | 0) {
            case 0:
             $0_1 = HEAPU8[$7_1 >> 0] | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$52;
            case 1:
             $0_1 = HEAPU16[$7_1 >> 1] | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$52;
            case 2:
             $15_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $16_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $18_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $0_1 = 0;
             break label$52;
            case 3:
             break label$53;
            default:
             break label$51;
            };
           }
           $0_1 = HEAP32[$7_1 >> 2] | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          }
          $17_1 = HEAPU8[$15_1 >> 0] | 0;
          $15_1 = HEAPU8[$18_1 >> 0] | 0;
          $16_1 = HEAPU8[$16_1 >> 0] | 0;
         }
         label$57 : {
          if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
           break label$57
          }
          HEAP8[$5_1 >> 0] = HEAPU8[($11_1 + (($16_1 >>> 3 | 0) & 28 | 0 | ($15_1 & 224 | 0) | 0 | (($17_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
         }
         $7_1 = $7_1 + $10_1 | 0;
         $5_1 = $5_1 + 1 | 0;
         $0_1 = 5;
         continue label$14;
        case 5:
         $0_1 = 0;
         $15_1 = 0;
         $16_1 = 0;
         $17_1 = 0;
         label$58 : {
          label$59 : {
           label$60 : {
            switch ($9_1 | 0) {
            case 0:
             $0_1 = HEAPU8[$7_1 >> 0] | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$59;
            case 1:
             $0_1 = HEAPU16[$7_1 >> 1] | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$59;
            case 2:
             $15_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $16_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $18_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $0_1 = 0;
             break label$59;
            case 3:
             break label$60;
            default:
             break label$58;
            };
           }
           $0_1 = HEAP32[$7_1 >> 2] | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          }
          $17_1 = HEAPU8[$15_1 >> 0] | 0;
          $15_1 = HEAPU8[$18_1 >> 0] | 0;
          $16_1 = HEAPU8[$16_1 >> 0] | 0;
         }
         label$64 : {
          if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
           break label$64
          }
          HEAP8[$5_1 >> 0] = HEAPU8[($11_1 + (($16_1 >>> 3 | 0) & 28 | 0 | ($15_1 & 224 | 0) | 0 | (($17_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
         }
         $7_1 = $7_1 + $10_1 | 0;
         $5_1 = $5_1 + 1 | 0;
         $0_1 = 6;
         continue label$14;
        case 6:
         $0_1 = 0;
         $15_1 = 0;
         $16_1 = 0;
         $17_1 = 0;
         label$65 : {
          label$66 : {
           label$67 : {
            switch ($9_1 | 0) {
            case 0:
             $0_1 = HEAPU8[$7_1 >> 0] | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$66;
            case 1:
             $0_1 = HEAPU16[$7_1 >> 1] | 0;
             $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
             $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
             $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
             break label$66;
            case 2:
             $15_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $16_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $18_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
             $0_1 = 0;
             break label$66;
            case 3:
             break label$67;
            default:
             break label$65;
            };
           }
           $0_1 = HEAP32[$7_1 >> 2] | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $18_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          }
          $17_1 = HEAPU8[$15_1 >> 0] | 0;
          $15_1 = HEAPU8[$18_1 >> 0] | 0;
          $16_1 = HEAPU8[$16_1 >> 0] | 0;
         }
         label$71 : {
          if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
           break label$71
          }
          HEAP8[$5_1 >> 0] = HEAPU8[($11_1 + (($16_1 >>> 3 | 0) & 28 | 0 | ($15_1 & 224 | 0) | 0 | (($17_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
         }
         $0_1 = $14_1 + -1 | 0;
         $7_1 = $7_1 + $10_1 | 0;
         $5_1 = $5_1 + 1 | 0;
         if (($14_1 | 0) <= (1 | 0)) {
          break label$13
         }
         $14_1 = $0_1;
         $0_1 = 7;
         continue label$14;
        default:
         break label$15;
        };
       }
       $0_1 = 0;
       $16_1 = 0;
       $17_1 = 0;
       $15_1 = 0;
       label$72 : {
        label$73 : {
         label$74 : {
          switch ($9_1 | 0) {
          case 0:
           $0_1 = HEAPU8[$7_1 >> 0] | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
           break label$73;
          case 1:
           $0_1 = HEAPU16[$7_1 >> 1] | 0;
           $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
           $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
           $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
           break label$73;
          case 2:
           $15_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
           $17_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
           $16_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
           $0_1 = 0;
           break label$73;
          case 3:
           break label$74;
          default:
           break label$72;
          };
         }
         $0_1 = HEAP32[$7_1 >> 2] | 0;
         $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
         $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
         $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
        }
        $15_1 = HEAPU8[$15_1 >> 0] | 0;
        $16_1 = HEAPU8[$16_1 >> 0] | 0;
        $17_1 = HEAPU8[$17_1 >> 0] | 0;
       }
       label$78 : {
        if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
         break label$78
        }
        HEAP8[$5_1 >> 0] = HEAPU8[($11_1 + (($17_1 >>> 3 | 0) & 28 | 0 | ($16_1 & 224 | 0) | 0 | (($15_1 & 192 | 0) >>> 6 | 0) | 0) | 0) >> 0] | 0;
       }
       $7_1 = $7_1 + $10_1 | 0;
       $5_1 = $5_1 + 1 | 0;
       $0_1 = 0;
       continue label$14;
      };
     }
     $5_1 = $5_1 + $4_1 | 0;
     $7_1 = $7_1 + $6_1 | 0;
     if ($8_1) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$8_1) {
    break label$1
   }
   $18_1 = $9_1 & 7 | 0;
   $12_1 = ($9_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $9_1 = $10_1 + -1 | 0;
   label$79 : while (1) {
    $8_1 = $8_1 + -1 | 0;
    $11_1 = $12_1;
    label$80 : {
     label$81 : {
      switch ($18_1 | 0) {
      default:
       $0_1 = 7;
       break label$80;
      case 1:
       $0_1 = 6;
       break label$80;
      case 2:
       $0_1 = 5;
       break label$80;
      case 3:
       $0_1 = 4;
       break label$80;
      case 4:
       $0_1 = 3;
       break label$80;
      case 5:
       $0_1 = 2;
       break label$80;
      case 6:
       $0_1 = 1;
       break label$80;
      case 7:
       break label$81;
      };
     }
     $0_1 = 0;
    }
    label$89 : {
     label$90 : while (1) {
      label$91 : {
       switch ($0_1 | 0) {
       case 0:
        $0_1 = 0;
        $14_1 = 0;
        $15_1 = 0;
        $16_1 = 0;
        label$99 : {
         label$100 : {
          label$101 : {
           switch ($9_1 | 0) {
           case 0:
            $0_1 = HEAPU8[$7_1 >> 0] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$100;
           case 1:
            $0_1 = HEAPU16[$7_1 >> 1] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$100;
           case 2:
            $14_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $0_1 = 0;
            break label$100;
           case 3:
            break label$101;
           default:
            break label$99;
           };
          }
          $0_1 = HEAP32[$7_1 >> 2] | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $16_1 = HEAPU8[$14_1 >> 0] | 0;
         $14_1 = HEAPU8[$17_1 >> 0] | 0;
         $15_1 = HEAPU8[$15_1 >> 0] | 0;
        }
        label$105 : {
         if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
          break label$105
         }
         HEAP8[$5_1 >> 0] = ($15_1 >>> 3 | 0) & 28 | 0 | ($14_1 & 224 | 0) | 0 | (($16_1 & 192 | 0) >>> 6 | 0) | 0;
        }
        $7_1 = $7_1 + $10_1 | 0;
        $5_1 = $5_1 + 1 | 0;
        $0_1 = 1;
        continue label$90;
       case 1:
        $0_1 = 0;
        $14_1 = 0;
        $15_1 = 0;
        $16_1 = 0;
        label$106 : {
         label$107 : {
          label$108 : {
           switch ($9_1 | 0) {
           case 0:
            $0_1 = HEAPU8[$7_1 >> 0] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$107;
           case 1:
            $0_1 = HEAPU16[$7_1 >> 1] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$107;
           case 2:
            $14_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $0_1 = 0;
            break label$107;
           case 3:
            break label$108;
           default:
            break label$106;
           };
          }
          $0_1 = HEAP32[$7_1 >> 2] | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $16_1 = HEAPU8[$14_1 >> 0] | 0;
         $14_1 = HEAPU8[$17_1 >> 0] | 0;
         $15_1 = HEAPU8[$15_1 >> 0] | 0;
        }
        label$112 : {
         if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
          break label$112
         }
         HEAP8[$5_1 >> 0] = ($15_1 >>> 3 | 0) & 28 | 0 | ($14_1 & 224 | 0) | 0 | (($16_1 & 192 | 0) >>> 6 | 0) | 0;
        }
        $7_1 = $7_1 + $10_1 | 0;
        $5_1 = $5_1 + 1 | 0;
        $0_1 = 2;
        continue label$90;
       case 2:
        $0_1 = 0;
        $14_1 = 0;
        $15_1 = 0;
        $16_1 = 0;
        label$113 : {
         label$114 : {
          label$115 : {
           switch ($9_1 | 0) {
           case 0:
            $0_1 = HEAPU8[$7_1 >> 0] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$114;
           case 1:
            $0_1 = HEAPU16[$7_1 >> 1] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$114;
           case 2:
            $14_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $0_1 = 0;
            break label$114;
           case 3:
            break label$115;
           default:
            break label$113;
           };
          }
          $0_1 = HEAP32[$7_1 >> 2] | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $16_1 = HEAPU8[$14_1 >> 0] | 0;
         $14_1 = HEAPU8[$17_1 >> 0] | 0;
         $15_1 = HEAPU8[$15_1 >> 0] | 0;
        }
        label$119 : {
         if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
          break label$119
         }
         HEAP8[$5_1 >> 0] = ($15_1 >>> 3 | 0) & 28 | 0 | ($14_1 & 224 | 0) | 0 | (($16_1 & 192 | 0) >>> 6 | 0) | 0;
        }
        $7_1 = $7_1 + $10_1 | 0;
        $5_1 = $5_1 + 1 | 0;
        $0_1 = 3;
        continue label$90;
       case 3:
        $0_1 = 0;
        $14_1 = 0;
        $15_1 = 0;
        $16_1 = 0;
        label$120 : {
         label$121 : {
          label$122 : {
           switch ($9_1 | 0) {
           case 0:
            $0_1 = HEAPU8[$7_1 >> 0] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$121;
           case 1:
            $0_1 = HEAPU16[$7_1 >> 1] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$121;
           case 2:
            $14_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $0_1 = 0;
            break label$121;
           case 3:
            break label$122;
           default:
            break label$120;
           };
          }
          $0_1 = HEAP32[$7_1 >> 2] | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $16_1 = HEAPU8[$14_1 >> 0] | 0;
         $14_1 = HEAPU8[$17_1 >> 0] | 0;
         $15_1 = HEAPU8[$15_1 >> 0] | 0;
        }
        label$126 : {
         if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
          break label$126
         }
         HEAP8[$5_1 >> 0] = ($15_1 >>> 3 | 0) & 28 | 0 | ($14_1 & 224 | 0) | 0 | (($16_1 & 192 | 0) >>> 6 | 0) | 0;
        }
        $7_1 = $7_1 + $10_1 | 0;
        $5_1 = $5_1 + 1 | 0;
        $0_1 = 4;
        continue label$90;
       case 4:
        $0_1 = 0;
        $14_1 = 0;
        $15_1 = 0;
        $16_1 = 0;
        label$127 : {
         label$128 : {
          label$129 : {
           switch ($9_1 | 0) {
           case 0:
            $0_1 = HEAPU8[$7_1 >> 0] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$128;
           case 1:
            $0_1 = HEAPU16[$7_1 >> 1] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$128;
           case 2:
            $14_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $0_1 = 0;
            break label$128;
           case 3:
            break label$129;
           default:
            break label$127;
           };
          }
          $0_1 = HEAP32[$7_1 >> 2] | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $16_1 = HEAPU8[$14_1 >> 0] | 0;
         $14_1 = HEAPU8[$17_1 >> 0] | 0;
         $15_1 = HEAPU8[$15_1 >> 0] | 0;
        }
        label$133 : {
         if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
          break label$133
         }
         HEAP8[$5_1 >> 0] = ($15_1 >>> 3 | 0) & 28 | 0 | ($14_1 & 224 | 0) | 0 | (($16_1 & 192 | 0) >>> 6 | 0) | 0;
        }
        $7_1 = $7_1 + $10_1 | 0;
        $5_1 = $5_1 + 1 | 0;
        $0_1 = 5;
        continue label$90;
       case 5:
        $0_1 = 0;
        $14_1 = 0;
        $15_1 = 0;
        $16_1 = 0;
        label$134 : {
         label$135 : {
          label$136 : {
           switch ($9_1 | 0) {
           case 0:
            $0_1 = HEAPU8[$7_1 >> 0] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$135;
           case 1:
            $0_1 = HEAPU16[$7_1 >> 1] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$135;
           case 2:
            $14_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $0_1 = 0;
            break label$135;
           case 3:
            break label$136;
           default:
            break label$134;
           };
          }
          $0_1 = HEAP32[$7_1 >> 2] | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $16_1 = HEAPU8[$14_1 >> 0] | 0;
         $14_1 = HEAPU8[$17_1 >> 0] | 0;
         $15_1 = HEAPU8[$15_1 >> 0] | 0;
        }
        label$140 : {
         if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
          break label$140
         }
         HEAP8[$5_1 >> 0] = ($15_1 >>> 3 | 0) & 28 | 0 | ($14_1 & 224 | 0) | 0 | (($16_1 & 192 | 0) >>> 6 | 0) | 0;
        }
        $7_1 = $7_1 + $10_1 | 0;
        $5_1 = $5_1 + 1 | 0;
        $0_1 = 6;
        continue label$90;
       case 6:
        $0_1 = 0;
        $14_1 = 0;
        $15_1 = 0;
        $16_1 = 0;
        label$141 : {
         label$142 : {
          label$143 : {
           switch ($9_1 | 0) {
           case 0:
            $0_1 = HEAPU8[$7_1 >> 0] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$142;
           case 1:
            $0_1 = HEAPU16[$7_1 >> 1] | 0;
            $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
            $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
            $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
            break label$142;
           case 2:
            $14_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $15_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $17_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
            $0_1 = 0;
            break label$142;
           case 3:
            break label$143;
           default:
            break label$141;
           };
          }
          $0_1 = HEAP32[$7_1 >> 2] | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $17_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
         }
         $16_1 = HEAPU8[$14_1 >> 0] | 0;
         $14_1 = HEAPU8[$17_1 >> 0] | 0;
         $15_1 = HEAPU8[$15_1 >> 0] | 0;
        }
        label$147 : {
         if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
          break label$147
         }
         HEAP8[$5_1 >> 0] = ($15_1 >>> 3 | 0) & 28 | 0 | ($14_1 & 224 | 0) | 0 | (($16_1 & 192 | 0) >>> 6 | 0) | 0;
        }
        $0_1 = $11_1 + -1 | 0;
        $7_1 = $7_1 + $10_1 | 0;
        $5_1 = $5_1 + 1 | 0;
        if (($11_1 | 0) <= (1 | 0)) {
         break label$89
        }
        $11_1 = $0_1;
        $0_1 = 7;
        continue label$90;
       default:
        break label$91;
       };
      }
      $0_1 = 0;
      $15_1 = 0;
      $16_1 = 0;
      $14_1 = 0;
      label$148 : {
       label$149 : {
        label$150 : {
         switch ($9_1 | 0) {
         case 0:
          $0_1 = HEAPU8[$7_1 >> 0] | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          break label$149;
         case 1:
          $0_1 = HEAPU16[$7_1 >> 1] | 0;
          $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
          $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
          $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
          break label$149;
         case 2:
          $14_1 = $7_1 + ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $16_1 = $7_1 + ((HEAPU8[($1_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $15_1 = $7_1 + ((HEAPU8[($1_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0;
          $0_1 = 0;
          break label$149;
         case 3:
          break label$150;
         default:
          break label$148;
         };
        }
        $0_1 = HEAP32[$7_1 >> 2] | 0;
        $14_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
        $16_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0) | 0;
        $15_1 = (HEAP32[(117504 + ((HEAPU8[($1_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($1_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
       }
       $14_1 = HEAPU8[$14_1 >> 0] | 0;
       $15_1 = HEAPU8[$15_1 >> 0] | 0;
       $16_1 = HEAPU8[$16_1 >> 0] | 0;
      }
      label$154 : {
       if (($0_1 & $2_1 | 0 | 0) == ($3_1 | 0)) {
        break label$154
       }
       HEAP8[$5_1 >> 0] = ($16_1 >>> 3 | 0) & 28 | 0 | ($15_1 & 224 | 0) | 0 | (($14_1 & 192 | 0) >>> 6 | 0) | 0;
      }
      $7_1 = $7_1 + $10_1 | 0;
      $5_1 = $5_1 + 1 | 0;
      $0_1 = 0;
      continue label$90;
     };
    }
    $5_1 = $5_1 + $4_1 | 0;
    $7_1 = $7_1 + $6_1 | 0;
    if ($8_1) {
     continue label$79
    }
    break label$79;
   };
  }
 }
 
 function $644($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $11_1 = 0, $8_1 = 0, $6_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $1_1 = 0, $22_1 = 0, $23_1 = 0, $3_1 = 0, $4_1 = 0, $10_1 = 0, $13_1 = 0, $9_1 = 0, $12_1 = 0, $14_1 = 0, $5_1 = 0, $7_1 = 0, $17_1 = 0, $15_1 = 0, $16_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $3_1 = (HEAP32[($2_1 + 24 | 0) >> 2] | 0) ^ -1 | 0;
  $4_1 = (HEAP32[($0_1 + 56 | 0) >> 2] | 0) & $3_1 | 0;
  $5_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $8_1 = HEAP32[$0_1 >> 2] | 0;
  $9_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $11_1 = HEAP32[$2_1 >> 2] | 0;
    $0_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    $12_1 = HEAP32[$0_1 >> 2] | 0;
    if (($11_1 | 0) != ($12_1 | 0)) {
     break label$2
    }
    $2_1 = __wasm_rotl_i32($11_1 + -372645892 | 0 | 0, 12 | 0) | 0;
    if ($2_1 >>> 0 > 5 >>> 0) {
     break label$1
    }
    if (!((1 << $2_1 | 0) & 51 | 0)) {
     break label$1
    }
    if (!$9_1) {
     break label$1
    }
    $11_1 = $10_1 & 7 | 0;
    $13_1 = ($10_1 + 7 | 0 | 0) / (8 | 0) | 0;
    label$3 : while (1) {
     $9_1 = $9_1 + -1 | 0;
     $0_1 = $13_1;
     label$4 : {
      label$5 : {
       switch ($11_1 | 0) {
       default:
        $2_1 = 0;
        break label$4;
       case 1:
        $2_1 = 7;
        break label$4;
       case 2:
        $2_1 = 6;
        break label$4;
       case 3:
        $2_1 = 5;
        break label$4;
       case 4:
        $2_1 = 4;
        break label$4;
       case 5:
        $2_1 = 3;
        break label$4;
       case 6:
        $2_1 = 2;
        break label$4;
       case 7:
        break label$5;
       };
      }
      $2_1 = 1;
     }
     label$13 : while (1) {
      label$14 : {
       switch ($2_1 | 0) {
       case 0:
        label$22 : {
         $2_1 = HEAP32[$8_1 >> 2] | 0;
         if (($2_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
          break label$22
         }
         HEAP32[$6_1 >> 2] = $2_1;
        }
        $6_1 = $6_1 + 4 | 0;
        $8_1 = $8_1 + 4 | 0;
        $2_1 = 1;
        continue label$13;
       case 1:
        label$23 : {
         $2_1 = HEAP32[$8_1 >> 2] | 0;
         if (($2_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
          break label$23
         }
         HEAP32[$6_1 >> 2] = $2_1;
        }
        $6_1 = $6_1 + 4 | 0;
        $8_1 = $8_1 + 4 | 0;
        $2_1 = 2;
        continue label$13;
       case 2:
        label$24 : {
         $2_1 = HEAP32[$8_1 >> 2] | 0;
         if (($2_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
          break label$24
         }
         HEAP32[$6_1 >> 2] = $2_1;
        }
        $6_1 = $6_1 + 4 | 0;
        $8_1 = $8_1 + 4 | 0;
        $2_1 = 3;
        continue label$13;
       case 3:
        label$25 : {
         $2_1 = HEAP32[$8_1 >> 2] | 0;
         if (($2_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
          break label$25
         }
         HEAP32[$6_1 >> 2] = $2_1;
        }
        $6_1 = $6_1 + 4 | 0;
        $8_1 = $8_1 + 4 | 0;
        $2_1 = 4;
        continue label$13;
       case 4:
        label$26 : {
         $2_1 = HEAP32[$8_1 >> 2] | 0;
         if (($2_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
          break label$26
         }
         HEAP32[$6_1 >> 2] = $2_1;
        }
        $6_1 = $6_1 + 4 | 0;
        $8_1 = $8_1 + 4 | 0;
        $2_1 = 5;
        continue label$13;
       case 5:
        label$27 : {
         $2_1 = HEAP32[$8_1 >> 2] | 0;
         if (($2_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
          break label$27
         }
         HEAP32[$6_1 >> 2] = $2_1;
        }
        $6_1 = $6_1 + 4 | 0;
        $8_1 = $8_1 + 4 | 0;
        $2_1 = 6;
        continue label$13;
       case 6:
        label$28 : {
         $2_1 = HEAP32[$8_1 >> 2] | 0;
         if (($2_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
          break label$28
         }
         HEAP32[$6_1 >> 2] = $2_1;
        }
        $6_1 = $6_1 + 4 | 0;
        $8_1 = $8_1 + 4 | 0;
        $2_1 = 7;
        continue label$13;
       default:
        break label$14;
       };
      }
      label$29 : {
       $2_1 = HEAP32[$8_1 >> 2] | 0;
       if (($2_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
        break label$29
       }
       HEAP32[$6_1 >> 2] = $2_1;
      }
      $2_1 = $0_1 + -1 | 0;
      $6_1 = $6_1 + 4 | 0;
      $8_1 = $8_1 + 4 | 0;
      label$30 : {
       label$31 : {
        if (($0_1 | 0) <= (1 | 0)) {
         break label$31
        }
        $0_1 = $2_1;
        break label$30;
       }
       $6_1 = $6_1 + $5_1 | 0;
       $8_1 = $8_1 + $7_1 | 0;
       if ($9_1) {
        continue label$3
       }
       break label$1;
      }
      $2_1 = 0;
      continue label$13;
     };
    };
   }
   $14_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
   $13_1 = HEAPU8[($2_1 + 9 | 0) >> 0] | 0;
   label$32 : {
    label$33 : {
     if (($12_1 | 0) == (372711428 | 0)) {
      break label$33
     }
     if (($11_1 | 0) == (372711428 | 0)) {
      break label$33
     }
     if (($13_1 | 0) != (4 | 0)) {
      break label$33
     }
     if (($14_1 | 0) == (4 | 0)) {
      break label$32
     }
    }
    if (!$9_1) {
     break label$1
    }
    $15_1 = $10_1 & 7 | 0;
    $16_1 = ($10_1 + 7 | 0 | 0) / (8 | 0) | 0;
    $10_1 = $13_1 + -1 | 0;
    $12_1 = $14_1 + -1 | 0;
    label$34 : while (1) {
     $9_1 = $9_1 + -1 | 0;
     $17_1 = $16_1;
     label$35 : {
      label$36 : {
       switch ($15_1 | 0) {
       default:
        $11_1 = 7;
        break label$35;
       case 1:
        $11_1 = 6;
        break label$35;
       case 2:
        $11_1 = 5;
        break label$35;
       case 3:
        $11_1 = 4;
        break label$35;
       case 4:
        $11_1 = 3;
        break label$35;
       case 5:
        $11_1 = 2;
        break label$35;
       case 6:
        $11_1 = 1;
        break label$35;
       case 7:
        break label$36;
       };
      }
      $11_1 = 0;
     }
     label$44 : {
      label$45 : while (1) {
       label$46 : {
        switch ($11_1 | 0) {
        case 0:
         $11_1 = 0;
         $18_1 = 0;
         $19_1 = 0;
         $20_1 = 0;
         $21_1 = 0;
         label$54 : {
          label$55 : {
           switch ($10_1 | 0) {
           case 0:
            $11_1 = HEAPU8[$8_1 >> 0] | 0;
            $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$54;
           case 1:
            $11_1 = HEAPU16[$8_1 >> 1] | 0;
            $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$54;
           case 2:
            $19_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $18_1 = 255;
            break label$54;
           case 3:
            break label$55;
           default:
            break label$54;
           };
          }
          $11_1 = HEAP32[$8_1 >> 2] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         label$59 : {
          if (($11_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
           break label$59
          }
          $11_1 = $18_1 & 255 | 0;
          $18_1 = $19_1 & 255 | 0;
          $22_1 = $20_1 & 255 | 0;
          $23_1 = $21_1 & 255 | 0;
          label$60 : {
           switch ($12_1 | 0) {
           case 0:
            HEAP8[$6_1 >> 0] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$59;
           case 1:
            HEAP16[$6_1 >> 1] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$59;
           case 2:
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $20_1;
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
            break label$59;
           case 3:
            break label$60;
           default:
            break label$59;
           };
          }
          HEAP32[$6_1 >> 2] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         }
         $8_1 = $8_1 + $13_1 | 0;
         $6_1 = $6_1 + $14_1 | 0;
         $11_1 = 1;
         continue label$45;
        case 1:
         $11_1 = 0;
         $18_1 = 0;
         $19_1 = 0;
         $20_1 = 0;
         $21_1 = 0;
         label$64 : {
          label$65 : {
           switch ($10_1 | 0) {
           case 0:
            $11_1 = HEAPU8[$8_1 >> 0] | 0;
            $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$64;
           case 1:
            $11_1 = HEAPU16[$8_1 >> 1] | 0;
            $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$64;
           case 2:
            $19_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $18_1 = 255;
            break label$64;
           case 3:
            break label$65;
           default:
            break label$64;
           };
          }
          $11_1 = HEAP32[$8_1 >> 2] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         label$69 : {
          if (($11_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
           break label$69
          }
          $11_1 = $18_1 & 255 | 0;
          $18_1 = $19_1 & 255 | 0;
          $22_1 = $20_1 & 255 | 0;
          $23_1 = $21_1 & 255 | 0;
          label$70 : {
           switch ($12_1 | 0) {
           case 0:
            HEAP8[$6_1 >> 0] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$69;
           case 1:
            HEAP16[$6_1 >> 1] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$69;
           case 2:
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $20_1;
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
            break label$69;
           case 3:
            break label$70;
           default:
            break label$69;
           };
          }
          HEAP32[$6_1 >> 2] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         }
         $8_1 = $8_1 + $13_1 | 0;
         $6_1 = $6_1 + $14_1 | 0;
         $11_1 = 2;
         continue label$45;
        case 2:
         $11_1 = 0;
         $18_1 = 0;
         $19_1 = 0;
         $20_1 = 0;
         $21_1 = 0;
         label$74 : {
          label$75 : {
           switch ($10_1 | 0) {
           case 0:
            $11_1 = HEAPU8[$8_1 >> 0] | 0;
            $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$74;
           case 1:
            $11_1 = HEAPU16[$8_1 >> 1] | 0;
            $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$74;
           case 2:
            $19_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $18_1 = 255;
            break label$74;
           case 3:
            break label$75;
           default:
            break label$74;
           };
          }
          $11_1 = HEAP32[$8_1 >> 2] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         label$79 : {
          if (($11_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
           break label$79
          }
          $11_1 = $18_1 & 255 | 0;
          $18_1 = $19_1 & 255 | 0;
          $22_1 = $20_1 & 255 | 0;
          $23_1 = $21_1 & 255 | 0;
          label$80 : {
           switch ($12_1 | 0) {
           case 0:
            HEAP8[$6_1 >> 0] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$79;
           case 1:
            HEAP16[$6_1 >> 1] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$79;
           case 2:
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $20_1;
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
            break label$79;
           case 3:
            break label$80;
           default:
            break label$79;
           };
          }
          HEAP32[$6_1 >> 2] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         }
         $8_1 = $8_1 + $13_1 | 0;
         $6_1 = $6_1 + $14_1 | 0;
         $11_1 = 3;
         continue label$45;
        case 3:
         $11_1 = 0;
         $18_1 = 0;
         $19_1 = 0;
         $20_1 = 0;
         $21_1 = 0;
         label$84 : {
          label$85 : {
           switch ($10_1 | 0) {
           case 0:
            $11_1 = HEAPU8[$8_1 >> 0] | 0;
            $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$84;
           case 1:
            $11_1 = HEAPU16[$8_1 >> 1] | 0;
            $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$84;
           case 2:
            $19_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $18_1 = 255;
            break label$84;
           case 3:
            break label$85;
           default:
            break label$84;
           };
          }
          $11_1 = HEAP32[$8_1 >> 2] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         label$89 : {
          if (($11_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
           break label$89
          }
          $11_1 = $18_1 & 255 | 0;
          $18_1 = $19_1 & 255 | 0;
          $22_1 = $20_1 & 255 | 0;
          $23_1 = $21_1 & 255 | 0;
          label$90 : {
           switch ($12_1 | 0) {
           case 0:
            HEAP8[$6_1 >> 0] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$89;
           case 1:
            HEAP16[$6_1 >> 1] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$89;
           case 2:
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $20_1;
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
            break label$89;
           case 3:
            break label$90;
           default:
            break label$89;
           };
          }
          HEAP32[$6_1 >> 2] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         }
         $8_1 = $8_1 + $13_1 | 0;
         $6_1 = $6_1 + $14_1 | 0;
         $11_1 = 4;
         continue label$45;
        case 4:
         $11_1 = 0;
         $18_1 = 0;
         $19_1 = 0;
         $20_1 = 0;
         $21_1 = 0;
         label$94 : {
          label$95 : {
           switch ($10_1 | 0) {
           case 0:
            $11_1 = HEAPU8[$8_1 >> 0] | 0;
            $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$94;
           case 1:
            $11_1 = HEAPU16[$8_1 >> 1] | 0;
            $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$94;
           case 2:
            $19_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $18_1 = 255;
            break label$94;
           case 3:
            break label$95;
           default:
            break label$94;
           };
          }
          $11_1 = HEAP32[$8_1 >> 2] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         label$99 : {
          if (($11_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
           break label$99
          }
          $11_1 = $18_1 & 255 | 0;
          $18_1 = $19_1 & 255 | 0;
          $22_1 = $20_1 & 255 | 0;
          $23_1 = $21_1 & 255 | 0;
          label$100 : {
           switch ($12_1 | 0) {
           case 0:
            HEAP8[$6_1 >> 0] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$99;
           case 1:
            HEAP16[$6_1 >> 1] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$99;
           case 2:
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $20_1;
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
            break label$99;
           case 3:
            break label$100;
           default:
            break label$99;
           };
          }
          HEAP32[$6_1 >> 2] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         }
         $8_1 = $8_1 + $13_1 | 0;
         $6_1 = $6_1 + $14_1 | 0;
         $11_1 = 5;
         continue label$45;
        case 5:
         $11_1 = 0;
         $18_1 = 0;
         $19_1 = 0;
         $20_1 = 0;
         $21_1 = 0;
         label$104 : {
          label$105 : {
           switch ($10_1 | 0) {
           case 0:
            $11_1 = HEAPU8[$8_1 >> 0] | 0;
            $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$104;
           case 1:
            $11_1 = HEAPU16[$8_1 >> 1] | 0;
            $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$104;
           case 2:
            $19_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $18_1 = 255;
            break label$104;
           case 3:
            break label$105;
           default:
            break label$104;
           };
          }
          $11_1 = HEAP32[$8_1 >> 2] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         label$109 : {
          if (($11_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
           break label$109
          }
          $11_1 = $18_1 & 255 | 0;
          $18_1 = $19_1 & 255 | 0;
          $22_1 = $20_1 & 255 | 0;
          $23_1 = $21_1 & 255 | 0;
          label$110 : {
           switch ($12_1 | 0) {
           case 0:
            HEAP8[$6_1 >> 0] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$109;
           case 1:
            HEAP16[$6_1 >> 1] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$109;
           case 2:
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $20_1;
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
            break label$109;
           case 3:
            break label$110;
           default:
            break label$109;
           };
          }
          HEAP32[$6_1 >> 2] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         }
         $8_1 = $8_1 + $13_1 | 0;
         $6_1 = $6_1 + $14_1 | 0;
         $11_1 = 6;
         continue label$45;
        case 6:
         $11_1 = 0;
         $18_1 = 0;
         $19_1 = 0;
         $20_1 = 0;
         $21_1 = 0;
         label$114 : {
          label$115 : {
           switch ($10_1 | 0) {
           case 0:
            $11_1 = HEAPU8[$8_1 >> 0] | 0;
            $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$114;
           case 1:
            $11_1 = HEAPU16[$8_1 >> 1] | 0;
            $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
            break label$114;
           case 2:
            $19_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $20_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $21_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
            $18_1 = 255;
            break label$114;
           case 3:
            break label$115;
           default:
            break label$114;
           };
          }
          $11_1 = HEAP32[$8_1 >> 2] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
         }
         label$119 : {
          if (($11_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
           break label$119
          }
          $11_1 = $18_1 & 255 | 0;
          $18_1 = $19_1 & 255 | 0;
          $22_1 = $20_1 & 255 | 0;
          $23_1 = $21_1 & 255 | 0;
          label$120 : {
           switch ($12_1 | 0) {
           case 0:
            HEAP8[$6_1 >> 0] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$119;
           case 1:
            HEAP16[$6_1 >> 1] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$119;
           case 2:
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $20_1;
            HEAP8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
            break label$119;
           case 3:
            break label$120;
           default:
            break label$119;
           };
          }
          HEAP32[$6_1 >> 2] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         }
         $11_1 = $17_1 + -1 | 0;
         $8_1 = $8_1 + $13_1 | 0;
         $6_1 = $6_1 + $14_1 | 0;
         if (($17_1 | 0) <= (1 | 0)) {
          break label$44
         }
         $17_1 = $11_1;
         $11_1 = 7;
         continue label$45;
        default:
         break label$46;
        };
       }
       $11_1 = 0;
       $18_1 = 0;
       $19_1 = 0;
       $20_1 = 0;
       $21_1 = 0;
       label$124 : {
        label$125 : {
         switch ($10_1 | 0) {
         case 0:
          $11_1 = HEAPU8[$8_1 >> 0] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          break label$124;
         case 1:
          $11_1 = HEAPU16[$8_1 >> 1] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          break label$124;
         case 2:
          $19_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $20_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $21_1 = HEAPU8[($8_1 + ((HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] | 0;
          $18_1 = 255;
          break label$124;
         case 3:
          break label$125;
         default:
          break label$124;
         };
        }
        $11_1 = HEAP32[$8_1 >> 2] | 0;
        $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 24 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $19_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 20 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $20_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 16 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $21_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($2_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $11_1 | 0) >>> (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
       }
       label$129 : {
        if (($11_1 & $3_1 | 0 | 0) == ($4_1 | 0)) {
         break label$129
        }
        $11_1 = $18_1 & 255 | 0;
        $18_1 = $19_1 & 255 | 0;
        $22_1 = $20_1 & 255 | 0;
        $23_1 = $21_1 & 255 | 0;
        label$130 : {
         switch ($12_1 | 0) {
         case 0:
          HEAP8[$6_1 >> 0] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$129;
         case 1:
          HEAP16[$6_1 >> 1] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$129;
         case 2:
          HEAP8[($6_1 + ((HEAPU8[($0_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $21_1;
          HEAP8[($6_1 + ((HEAPU8[($0_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $20_1;
          HEAP8[($6_1 + ((HEAPU8[($0_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $19_1;
          break label$129;
         case 3:
          break label$130;
         default:
          break label$129;
         };
        }
        HEAP32[$6_1 >> 2] = ($22_1 >>> (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0 | (($23_1 >>> (HEAPU8[($0_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($18_1 >>> (HEAPU8[($0_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($11_1 >>> (HEAPU8[($0_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0;
       }
       $8_1 = $8_1 + $13_1 | 0;
       $6_1 = $6_1 + $14_1 | 0;
       $11_1 = 0;
       continue label$45;
      };
     }
     $6_1 = $6_1 + $5_1 | 0;
     $8_1 = $8_1 + $7_1 | 0;
     if ($9_1) {
      continue label$34
     }
     break label$1;
    };
   }
   $646($2_1 | 0, $0_1 | 0, $1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0, $1_1 + 4 | 0 | 0, $1_1 | 0, 0 | 0);
   if (!$9_1) {
    break label$1
   }
   $11_1 = $10_1 & 7 | 0;
   $13_1 = ($10_1 + 7 | 0 | 0) / (8 | 0) | 0;
   label$134 : while (1) {
    $9_1 = $9_1 + -1 | 0;
    $0_1 = $13_1;
    label$135 : {
     label$136 : {
      switch ($11_1 | 0) {
      default:
       $2_1 = 0;
       break label$135;
      case 1:
       $2_1 = 7;
       break label$135;
      case 2:
       $2_1 = 6;
       break label$135;
      case 3:
       $2_1 = 5;
       break label$135;
      case 4:
       $2_1 = 4;
       break label$135;
      case 5:
       $2_1 = 3;
       break label$135;
      case 6:
       $2_1 = 2;
       break label$135;
      case 7:
       break label$136;
      };
     }
     $2_1 = 1;
    }
    label$144 : while (1) {
     label$145 : {
      switch ($2_1 | 0) {
      case 0:
       label$153 : {
        if (((HEAP32[$8_1 >> 2] | 0) & $3_1 | 0 | 0) == ($4_1 | 0)) {
         break label$153
        }
        HEAP8[$6_1 >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 1 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 2 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 3 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
       }
       $6_1 = $6_1 + 4 | 0;
       $8_1 = $8_1 + 4 | 0;
       $2_1 = 1;
       continue label$144;
      case 1:
       label$154 : {
        if (((HEAP32[$8_1 >> 2] | 0) & $3_1 | 0 | 0) == ($4_1 | 0)) {
         break label$154
        }
        HEAP8[$6_1 >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 1 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 2 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 3 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
       }
       $6_1 = $6_1 + 4 | 0;
       $8_1 = $8_1 + 4 | 0;
       $2_1 = 2;
       continue label$144;
      case 2:
       label$155 : {
        if (((HEAP32[$8_1 >> 2] | 0) & $3_1 | 0 | 0) == ($4_1 | 0)) {
         break label$155
        }
        HEAP8[$6_1 >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 1 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 2 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 3 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
       }
       $6_1 = $6_1 + 4 | 0;
       $8_1 = $8_1 + 4 | 0;
       $2_1 = 3;
       continue label$144;
      case 3:
       label$156 : {
        if (((HEAP32[$8_1 >> 2] | 0) & $3_1 | 0 | 0) == ($4_1 | 0)) {
         break label$156
        }
        HEAP8[$6_1 >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 1 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 2 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 3 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
       }
       $6_1 = $6_1 + 4 | 0;
       $8_1 = $8_1 + 4 | 0;
       $2_1 = 4;
       continue label$144;
      case 4:
       label$157 : {
        if (((HEAP32[$8_1 >> 2] | 0) & $3_1 | 0 | 0) == ($4_1 | 0)) {
         break label$157
        }
        HEAP8[$6_1 >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 1 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 2 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 3 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
       }
       $6_1 = $6_1 + 4 | 0;
       $8_1 = $8_1 + 4 | 0;
       $2_1 = 5;
       continue label$144;
      case 5:
       label$158 : {
        if (((HEAP32[$8_1 >> 2] | 0) & $3_1 | 0 | 0) == ($4_1 | 0)) {
         break label$158
        }
        HEAP8[$6_1 >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 1 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 2 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 3 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
       }
       $6_1 = $6_1 + 4 | 0;
       $8_1 = $8_1 + 4 | 0;
       $2_1 = 6;
       continue label$144;
      case 6:
       label$159 : {
        if (((HEAP32[$8_1 >> 2] | 0) & $3_1 | 0 | 0) == ($4_1 | 0)) {
         break label$159
        }
        HEAP8[$6_1 >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 1 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 2 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($6_1 + 3 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
       }
       $6_1 = $6_1 + 4 | 0;
       $8_1 = $8_1 + 4 | 0;
       $2_1 = 7;
       continue label$144;
      default:
       break label$145;
      };
     }
     label$160 : {
      if (((HEAP32[$8_1 >> 2] | 0) & $3_1 | 0 | 0) == ($4_1 | 0)) {
       break label$160
      }
      HEAP8[$6_1 >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
      HEAP8[($6_1 + 1 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0;
      HEAP8[($6_1 + 2 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0;
      HEAP8[($6_1 + 3 | 0) >> 0] = HEAPU8[($8_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 0] | 0;
     }
     $2_1 = $0_1 + -1 | 0;
     $6_1 = $6_1 + 4 | 0;
     $8_1 = $8_1 + 4 | 0;
     label$161 : {
      label$162 : {
       if (($0_1 | 0) <= (1 | 0)) {
        break label$162
       }
       $0_1 = $2_1;
       break label$161;
      }
      $6_1 = $6_1 + $5_1 | 0;
      $8_1 = $8_1 + $7_1 | 0;
      if ($9_1) {
       continue label$134
      }
      break label$1;
     }
     $2_1 = 0;
     continue label$144;
    };
   };
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $645($0_1) {
  $0_1 = $0_1 | 0;
  var $11_1 = 0, $9_1 = 0, $3_1 = 0, $5_1 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0, $15_1 = 0, $7_1 = 0, $6_1 = 0, $18_1 = 0, $12_1 = 0, $13_1 = 0, $17_1 = 0, $14_1 = 0, $16_1 = 0, $8_1 = 0, $10_1 = 0, $19_1 = 0, $20_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $4_1 = HEAPU8[($3_1 + 9 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    if ($6_1) {
     break label$2
    }
    $7_1 = 0;
    break label$1;
   }
   $7_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  }
  $8_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $9_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $10_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $11_1 = HEAP32[$0_1 >> 2] | 0;
  $12_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $13_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $14_1 = HEAPU8[($5_1 + 9 | 0) >> 0] | 0;
  $15_1 = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) ^ -1 | 0;
  $2_1 = $2_1 & $15_1 | 0;
  $16_1 = HEAP32[$5_1 >> 2] | 0;
  $17_1 = HEAP32[$3_1 >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         if (($4_1 | 0) != (4 | 0)) {
          break label$9
         }
         if (($14_1 | 0) != (4 | 0)) {
          break label$9
         }
         $18_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
         if (($18_1 | 0) != (HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0)) {
          break label$8
         }
         $19_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if (($19_1 | 0) != (HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0)) {
          break label$8
         }
         $20_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
         if (($20_1 | 0) != (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0)) {
          break label$8
         }
         if (!$6_1) {
          break label$4
         }
         if (!$12_1) {
          break label$3
         }
         $5_1 = (HEAPU8[($0_1 + 63 | 0) >> 0] | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0;
         $0_1 = $13_1 & 7 | 0;
         $4_1 = ($13_1 + 7 | 0 | 0) / (8 | 0) | 0;
         label$10 : while (1) {
          $12_1 = $12_1 + -1 | 0;
          $7_1 = $4_1;
          label$11 : {
           label$12 : {
            switch ($0_1 | 0) {
            default:
             $3_1 = 0;
             break label$11;
            case 1:
             $3_1 = 7;
             break label$11;
            case 2:
             $3_1 = 6;
             break label$11;
            case 3:
             $3_1 = 5;
             break label$11;
            case 4:
             $3_1 = 4;
             break label$11;
            case 5:
             $3_1 = 3;
             break label$11;
            case 6:
             $3_1 = 2;
             break label$11;
            case 7:
             break label$12;
            };
           }
           $3_1 = 1;
          }
          label$20 : while (1) {
           label$21 : {
            switch ($3_1 | 0) {
            case 0:
             label$29 : {
              $3_1 = HEAP32[$11_1 >> 2] | 0;
              if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
               break label$29
              }
              HEAP32[$9_1 >> 2] = $3_1 | $5_1 | 0;
             }
             $11_1 = $11_1 + 4 | 0;
             $9_1 = $9_1 + 4 | 0;
             $3_1 = 1;
             continue label$20;
            case 1:
             label$30 : {
              $3_1 = HEAP32[$11_1 >> 2] | 0;
              if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
               break label$30
              }
              HEAP32[$9_1 >> 2] = $3_1 | $5_1 | 0;
             }
             $11_1 = $11_1 + 4 | 0;
             $9_1 = $9_1 + 4 | 0;
             $3_1 = 2;
             continue label$20;
            case 2:
             label$31 : {
              $3_1 = HEAP32[$11_1 >> 2] | 0;
              if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
               break label$31
              }
              HEAP32[$9_1 >> 2] = $3_1 | $5_1 | 0;
             }
             $11_1 = $11_1 + 4 | 0;
             $9_1 = $9_1 + 4 | 0;
             $3_1 = 3;
             continue label$20;
            case 3:
             label$32 : {
              $3_1 = HEAP32[$11_1 >> 2] | 0;
              if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
               break label$32
              }
              HEAP32[$9_1 >> 2] = $3_1 | $5_1 | 0;
             }
             $11_1 = $11_1 + 4 | 0;
             $9_1 = $9_1 + 4 | 0;
             $3_1 = 4;
             continue label$20;
            case 4:
             label$33 : {
              $3_1 = HEAP32[$11_1 >> 2] | 0;
              if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
               break label$33
              }
              HEAP32[$9_1 >> 2] = $3_1 | $5_1 | 0;
             }
             $11_1 = $11_1 + 4 | 0;
             $9_1 = $9_1 + 4 | 0;
             $3_1 = 5;
             continue label$20;
            case 5:
             label$34 : {
              $3_1 = HEAP32[$11_1 >> 2] | 0;
              if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
               break label$34
              }
              HEAP32[$9_1 >> 2] = $3_1 | $5_1 | 0;
             }
             $11_1 = $11_1 + 4 | 0;
             $9_1 = $9_1 + 4 | 0;
             $3_1 = 6;
             continue label$20;
            case 6:
             label$35 : {
              $3_1 = HEAP32[$11_1 >> 2] | 0;
              if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
               break label$35
              }
              HEAP32[$9_1 >> 2] = $3_1 | $5_1 | 0;
             }
             $11_1 = $11_1 + 4 | 0;
             $9_1 = $9_1 + 4 | 0;
             $3_1 = 7;
             continue label$20;
            default:
             break label$21;
            };
           }
           label$36 : {
            $3_1 = HEAP32[$11_1 >> 2] | 0;
            if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
             break label$36
            }
            HEAP32[$9_1 >> 2] = $3_1 | $5_1 | 0;
           }
           $3_1 = $7_1 + -1 | 0;
           $11_1 = $11_1 + 4 | 0;
           $9_1 = $9_1 + 4 | 0;
           label$37 : {
            label$38 : {
             if (($7_1 | 0) <= (1 | 0)) {
              break label$38
             }
             $7_1 = $3_1;
             break label$37;
            }
            $9_1 = $9_1 + $8_1 | 0;
            $11_1 = $11_1 + $10_1 | 0;
            if ($12_1) {
             continue label$10
            }
            break label$3;
           }
           $3_1 = 0;
           continue label$20;
          };
         };
        }
        $6_1 = ($16_1 | 0) == (386930691 | 0);
        $0_1 = ($17_1 | 0) == (386930691 | 0);
        if (($17_1 | 0) != (386930691 | 0)) {
         break label$7
        }
        if (($16_1 | 0) == (386930691 | 0)) {
         break label$6
        }
        break label$7;
       }
       label$39 : {
        if (($17_1 | 0) == (372711428 | 0)) {
         break label$39
        }
        if (($16_1 | 0) == (372711428 | 0)) {
         break label$39
        }
        $646($3_1 | 0, $5_1 | 0, $1_1 + 24 | 0 | 0, $1_1 + 20 | 0 | 0, $1_1 + 16 | 0 | 0, $1_1 + 12 | 0 | 0, $1_1 + 28 | 0 | 0);
        if (!$12_1) {
         break label$3
        }
        $0_1 = $13_1 & 7 | 0;
        $4_1 = ($13_1 + 7 | 0 | 0) / (8 | 0) | 0;
        label$40 : while (1) {
         $12_1 = $12_1 + -1 | 0;
         $5_1 = $4_1;
         label$41 : {
          label$42 : {
           switch ($0_1 | 0) {
           default:
            $3_1 = 0;
            break label$41;
           case 1:
            $3_1 = 7;
            break label$41;
           case 2:
            $3_1 = 6;
            break label$41;
           case 3:
            $3_1 = 5;
            break label$41;
           case 4:
            $3_1 = 4;
            break label$41;
           case 5:
            $3_1 = 3;
            break label$41;
           case 6:
            $3_1 = 2;
            break label$41;
           case 7:
            break label$42;
           };
          }
          $3_1 = 1;
         }
         label$50 : while (1) {
          label$51 : {
           switch ($3_1 | 0) {
           case 0:
            label$59 : {
             if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
              break label$59
             }
             HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
            }
            $9_1 = $9_1 + 4 | 0;
            $11_1 = $11_1 + 4 | 0;
            $3_1 = 1;
            continue label$50;
           case 1:
            label$60 : {
             if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
              break label$60
             }
             HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
            }
            $9_1 = $9_1 + 4 | 0;
            $11_1 = $11_1 + 4 | 0;
            $3_1 = 2;
            continue label$50;
           case 2:
            label$61 : {
             if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
              break label$61
             }
             HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
            }
            $9_1 = $9_1 + 4 | 0;
            $11_1 = $11_1 + 4 | 0;
            $3_1 = 3;
            continue label$50;
           case 3:
            label$62 : {
             if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
              break label$62
             }
             HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
            }
            $9_1 = $9_1 + 4 | 0;
            $11_1 = $11_1 + 4 | 0;
            $3_1 = 4;
            continue label$50;
           case 4:
            label$63 : {
             if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
              break label$63
             }
             HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
            }
            $9_1 = $9_1 + 4 | 0;
            $11_1 = $11_1 + 4 | 0;
            $3_1 = 5;
            continue label$50;
           case 5:
            label$64 : {
             if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
              break label$64
             }
             HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
            }
            $9_1 = $9_1 + 4 | 0;
            $11_1 = $11_1 + 4 | 0;
            $3_1 = 6;
            continue label$50;
           case 6:
            label$65 : {
             if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
              break label$65
             }
             HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
             HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
            }
            $9_1 = $9_1 + 4 | 0;
            $11_1 = $11_1 + 4 | 0;
            $3_1 = 7;
            continue label$50;
           default:
            break label$51;
           };
          }
          label$66 : {
           if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
            break label$66
           }
           HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
          }
          $3_1 = $5_1 + -1 | 0;
          $9_1 = $9_1 + 4 | 0;
          $11_1 = $11_1 + 4 | 0;
          label$67 : {
           label$68 : {
            if (($5_1 | 0) <= (1 | 0)) {
             break label$68
            }
            $5_1 = $3_1;
            break label$67;
           }
           $9_1 = $9_1 + $8_1 | 0;
           $11_1 = $11_1 + $10_1 | 0;
           if ($12_1) {
            continue label$40
           }
           break label$3;
          }
          $3_1 = 0;
          continue label$50;
         };
        };
       }
       $6_1 = ($16_1 | 0) == (386930691 | 0);
       $0_1 = ($17_1 | 0) == (386930691 | 0);
      }
      if (($17_1 | 0) != (390076419 | 0)) {
       break label$5
      }
      if (($16_1 | 0) != (390076419 | 0)) {
       break label$5
      }
     }
     if (!$12_1) {
      break label$3
     }
     $14_1 = $13_1 & 7 | 0;
     $15_1 = $2_1 >>> 8 | 0;
     $5_1 = $2_1 >>> 16 | 0;
     $17_1 = ($13_1 + 7 | 0 | 0) / (8 | 0) | 0;
     $2_1 = $2_1 & 255 | 0;
     label$69 : while (1) {
      $12_1 = $12_1 + -1 | 0;
      $7_1 = $17_1;
      label$70 : {
       label$71 : {
        switch ($14_1 | 0) {
        default:
         $3_1 = 0;
         break label$70;
        case 1:
         $3_1 = 7;
         break label$70;
        case 2:
         $3_1 = 6;
         break label$70;
        case 3:
         $3_1 = 5;
         break label$70;
        case 4:
         $3_1 = 4;
         break label$70;
        case 5:
         $3_1 = 3;
         break label$70;
        case 6:
         $3_1 = 2;
         break label$70;
        case 7:
         break label$71;
        };
       }
       $3_1 = 1;
      }
      label$79 : while (1) {
       label$80 : {
        switch ($3_1 | 0) {
        case 0:
         $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
         label$88 : {
          label$89 : {
           $4_1 = HEAPU8[$11_1 >> 0] | 0;
           if (($4_1 | 0) != ($2_1 | 0)) {
            break label$89
           }
           if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$89
           }
           if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$88
           }
          }
          HEAP8[($9_1 + 2 | 0) >> 0] = $0_1;
          HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
          HEAP8[$9_1 >> 0] = $4_1;
         }
         $9_1 = $9_1 + 3 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 1;
         continue label$79;
        case 1:
         $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
         label$90 : {
          label$91 : {
           $4_1 = HEAPU8[$11_1 >> 0] | 0;
           if (($4_1 | 0) != ($2_1 | 0)) {
            break label$91
           }
           if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$91
           }
           if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$90
           }
          }
          HEAP8[($9_1 + 2 | 0) >> 0] = $0_1;
          HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
          HEAP8[$9_1 >> 0] = $4_1;
         }
         $9_1 = $9_1 + 3 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 2;
         continue label$79;
        case 2:
         $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
         label$92 : {
          label$93 : {
           $4_1 = HEAPU8[$11_1 >> 0] | 0;
           if (($4_1 | 0) != ($2_1 | 0)) {
            break label$93
           }
           if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$93
           }
           if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$92
           }
          }
          HEAP8[($9_1 + 2 | 0) >> 0] = $0_1;
          HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
          HEAP8[$9_1 >> 0] = $4_1;
         }
         $9_1 = $9_1 + 3 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 3;
         continue label$79;
        case 3:
         $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
         label$94 : {
          label$95 : {
           $4_1 = HEAPU8[$11_1 >> 0] | 0;
           if (($4_1 | 0) != ($2_1 | 0)) {
            break label$95
           }
           if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$95
           }
           if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$94
           }
          }
          HEAP8[($9_1 + 2 | 0) >> 0] = $0_1;
          HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
          HEAP8[$9_1 >> 0] = $4_1;
         }
         $9_1 = $9_1 + 3 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 4;
         continue label$79;
        case 4:
         $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
         label$96 : {
          label$97 : {
           $4_1 = HEAPU8[$11_1 >> 0] | 0;
           if (($4_1 | 0) != ($2_1 | 0)) {
            break label$97
           }
           if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$97
           }
           if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$96
           }
          }
          HEAP8[($9_1 + 2 | 0) >> 0] = $0_1;
          HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
          HEAP8[$9_1 >> 0] = $4_1;
         }
         $9_1 = $9_1 + 3 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 5;
         continue label$79;
        case 5:
         $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
         label$98 : {
          label$99 : {
           $4_1 = HEAPU8[$11_1 >> 0] | 0;
           if (($4_1 | 0) != ($2_1 | 0)) {
            break label$99
           }
           if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$99
           }
           if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$98
           }
          }
          HEAP8[($9_1 + 2 | 0) >> 0] = $0_1;
          HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
          HEAP8[$9_1 >> 0] = $4_1;
         }
         $9_1 = $9_1 + 3 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 6;
         continue label$79;
        case 6:
         $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
         label$100 : {
          label$101 : {
           $4_1 = HEAPU8[$11_1 >> 0] | 0;
           if (($4_1 | 0) != ($2_1 | 0)) {
            break label$101
           }
           if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$101
           }
           if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$100
           }
          }
          HEAP8[($9_1 + 2 | 0) >> 0] = $0_1;
          HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
          HEAP8[$9_1 >> 0] = $4_1;
         }
         $9_1 = $9_1 + 3 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 7;
         continue label$79;
        default:
         break label$80;
        };
       }
       $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
       $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
       label$102 : {
        label$103 : {
         $4_1 = HEAPU8[$11_1 >> 0] | 0;
         if (($4_1 | 0) != ($2_1 | 0)) {
          break label$103
         }
         if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
          break label$103
         }
         if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
          break label$102
         }
        }
        HEAP8[($9_1 + 2 | 0) >> 0] = $0_1;
        HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
        HEAP8[$9_1 >> 0] = $4_1;
       }
       $3_1 = $7_1 + -1 | 0;
       $9_1 = $9_1 + 3 | 0;
       $11_1 = $11_1 + 3 | 0;
       label$104 : {
        label$105 : {
         if (($7_1 | 0) <= (1 | 0)) {
          break label$105
         }
         $7_1 = $3_1;
         break label$104;
        }
        $9_1 = $9_1 + $8_1 | 0;
        $11_1 = $11_1 + $10_1 | 0;
        if ($12_1) {
         continue label$69
        }
        break label$3;
       }
       $3_1 = 0;
       continue label$79;
      };
     };
    }
    label$106 : {
     label$107 : {
      if ($0_1 & ($16_1 | 0) == (390076419 | 0) | 0) {
       break label$107
      }
      if (!(($17_1 | 0) == (390076419 | 0) & $6_1 | 0)) {
       break label$106
      }
     }
     if (!$12_1) {
      break label$3
     }
     $14_1 = $13_1 & 7 | 0;
     $15_1 = $2_1 >>> 8 | 0;
     $5_1 = $2_1 >>> 16 | 0;
     $17_1 = ($13_1 + 7 | 0 | 0) / (8 | 0) | 0;
     $2_1 = $2_1 & 255 | 0;
     label$108 : while (1) {
      $12_1 = $12_1 + -1 | 0;
      $7_1 = $17_1;
      label$109 : {
       label$110 : {
        switch ($14_1 | 0) {
        default:
         $3_1 = 0;
         break label$109;
        case 1:
         $3_1 = 7;
         break label$109;
        case 2:
         $3_1 = 6;
         break label$109;
        case 3:
         $3_1 = 5;
         break label$109;
        case 4:
         $3_1 = 4;
         break label$109;
        case 5:
         $3_1 = 3;
         break label$109;
        case 6:
         $3_1 = 2;
         break label$109;
        case 7:
         break label$110;
        };
       }
       $3_1 = 1;
      }
      label$118 : while (1) {
       label$119 : {
        switch ($3_1 | 0) {
        case 0:
         $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
         label$127 : {
          label$128 : {
           $4_1 = HEAPU8[$11_1 >> 0] | 0;
           if (($4_1 | 0) != ($2_1 | 0)) {
            break label$128
           }
           if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$128
           }
           if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$127
           }
          }
          HEAP8[($9_1 + 2 | 0) >> 0] = $4_1;
          HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
          HEAP8[$9_1 >> 0] = $0_1;
         }
         $9_1 = $9_1 + 3 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 1;
         continue label$118;
        case 1:
         $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
         label$129 : {
          label$130 : {
           $4_1 = HEAPU8[$11_1 >> 0] | 0;
           if (($4_1 | 0) != ($2_1 | 0)) {
            break label$130
           }
           if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$130
           }
           if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$129
           }
          }
          HEAP8[($9_1 + 2 | 0) >> 0] = $4_1;
          HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
          HEAP8[$9_1 >> 0] = $0_1;
         }
         $9_1 = $9_1 + 3 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 2;
         continue label$118;
        case 2:
         $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
         label$131 : {
          label$132 : {
           $4_1 = HEAPU8[$11_1 >> 0] | 0;
           if (($4_1 | 0) != ($2_1 | 0)) {
            break label$132
           }
           if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$132
           }
           if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$131
           }
          }
          HEAP8[($9_1 + 2 | 0) >> 0] = $4_1;
          HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
          HEAP8[$9_1 >> 0] = $0_1;
         }
         $9_1 = $9_1 + 3 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 3;
         continue label$118;
        case 3:
         $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
         label$133 : {
          label$134 : {
           $4_1 = HEAPU8[$11_1 >> 0] | 0;
           if (($4_1 | 0) != ($2_1 | 0)) {
            break label$134
           }
           if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$134
           }
           if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$133
           }
          }
          HEAP8[($9_1 + 2 | 0) >> 0] = $4_1;
          HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
          HEAP8[$9_1 >> 0] = $0_1;
         }
         $9_1 = $9_1 + 3 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 4;
         continue label$118;
        case 4:
         $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
         label$135 : {
          label$136 : {
           $4_1 = HEAPU8[$11_1 >> 0] | 0;
           if (($4_1 | 0) != ($2_1 | 0)) {
            break label$136
           }
           if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$136
           }
           if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$135
           }
          }
          HEAP8[($9_1 + 2 | 0) >> 0] = $4_1;
          HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
          HEAP8[$9_1 >> 0] = $0_1;
         }
         $9_1 = $9_1 + 3 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 5;
         continue label$118;
        case 5:
         $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
         label$137 : {
          label$138 : {
           $4_1 = HEAPU8[$11_1 >> 0] | 0;
           if (($4_1 | 0) != ($2_1 | 0)) {
            break label$138
           }
           if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$138
           }
           if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$137
           }
          }
          HEAP8[($9_1 + 2 | 0) >> 0] = $4_1;
          HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
          HEAP8[$9_1 >> 0] = $0_1;
         }
         $9_1 = $9_1 + 3 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 6;
         continue label$118;
        case 6:
         $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
         label$139 : {
          label$140 : {
           $4_1 = HEAPU8[$11_1 >> 0] | 0;
           if (($4_1 | 0) != ($2_1 | 0)) {
            break label$140
           }
           if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$140
           }
           if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$139
           }
          }
          HEAP8[($9_1 + 2 | 0) >> 0] = $4_1;
          HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
          HEAP8[$9_1 >> 0] = $0_1;
         }
         $9_1 = $9_1 + 3 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 7;
         continue label$118;
        default:
         break label$119;
        };
       }
       $0_1 = HEAPU8[($11_1 + 2 | 0) >> 0] | 0;
       $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
       label$141 : {
        label$142 : {
         $4_1 = HEAPU8[$11_1 >> 0] | 0;
         if (($4_1 | 0) != ($2_1 | 0)) {
          break label$142
         }
         if (($3_1 & 255 | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
          break label$142
         }
         if (($0_1 & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
          break label$141
         }
        }
        HEAP8[($9_1 + 2 | 0) >> 0] = $4_1;
        HEAP8[($9_1 + 1 | 0) >> 0] = $3_1;
        HEAP8[$9_1 >> 0] = $0_1;
       }
       $3_1 = $7_1 + -1 | 0;
       $9_1 = $9_1 + 3 | 0;
       $11_1 = $11_1 + 3 | 0;
       label$143 : {
        label$144 : {
         if (($7_1 | 0) <= (1 | 0)) {
          break label$144
         }
         $7_1 = $3_1;
         break label$143;
        }
        $9_1 = $9_1 + $8_1 | 0;
        $11_1 = $11_1 + $10_1 | 0;
        if ($12_1) {
         continue label$108
        }
        break label$3;
       }
       $3_1 = 0;
       continue label$118;
      };
     };
    }
    label$145 : {
     label$146 : {
      if (($4_1 | 0) != (4 | 0)) {
       break label$146
      }
      if (($14_1 | 0) != (3 | 0)) {
       break label$146
      }
      if (($17_1 | 0) == (372711428 | 0)) {
       break label$145
      }
      $646($3_1 | 0, $5_1 | 0, $1_1 + 28 | 0 | 0, $1_1 + 24 | 0 | 0, $1_1 + 20 | 0 | 0, $1_1 + 16 | 0 | 0, 0 | 0);
      if (!$12_1) {
       break label$3
      }
      $7_1 = $13_1 & 7 | 0;
      $0_1 = ($13_1 + 7 | 0 | 0) / (8 | 0) | 0;
      label$147 : while (1) {
       $12_1 = $12_1 + -1 | 0;
       $5_1 = $0_1;
       label$148 : {
        label$149 : {
         switch ($7_1 | 0) {
         default:
          $3_1 = 0;
          break label$148;
         case 1:
          $3_1 = 7;
          break label$148;
         case 2:
          $3_1 = 6;
          break label$148;
         case 3:
          $3_1 = 5;
          break label$148;
         case 4:
          $3_1 = 4;
          break label$148;
         case 5:
          $3_1 = 3;
          break label$148;
         case 6:
          $3_1 = 2;
          break label$148;
         case 7:
          break label$149;
         };
        }
        $3_1 = 1;
       }
       label$157 : while (1) {
        label$158 : {
         switch ($3_1 | 0) {
         case 0:
          label$166 : {
           if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
            break label$166
           }
           HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
          }
          $9_1 = $9_1 + 3 | 0;
          $11_1 = $11_1 + 4 | 0;
          $3_1 = 1;
          continue label$157;
         case 1:
          label$167 : {
           if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
            break label$167
           }
           HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
          }
          $9_1 = $9_1 + 3 | 0;
          $11_1 = $11_1 + 4 | 0;
          $3_1 = 2;
          continue label$157;
         case 2:
          label$168 : {
           if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
            break label$168
           }
           HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
          }
          $9_1 = $9_1 + 3 | 0;
          $11_1 = $11_1 + 4 | 0;
          $3_1 = 3;
          continue label$157;
         case 3:
          label$169 : {
           if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
            break label$169
           }
           HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
          }
          $9_1 = $9_1 + 3 | 0;
          $11_1 = $11_1 + 4 | 0;
          $3_1 = 4;
          continue label$157;
         case 4:
          label$170 : {
           if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
            break label$170
           }
           HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
          }
          $9_1 = $9_1 + 3 | 0;
          $11_1 = $11_1 + 4 | 0;
          $3_1 = 5;
          continue label$157;
         case 5:
          label$171 : {
           if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
            break label$171
           }
           HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
          }
          $9_1 = $9_1 + 3 | 0;
          $11_1 = $11_1 + 4 | 0;
          $3_1 = 6;
          continue label$157;
         case 6:
          label$172 : {
           if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
            break label$172
           }
           HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
           HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
          }
          $9_1 = $9_1 + 3 | 0;
          $11_1 = $11_1 + 4 | 0;
          $3_1 = 7;
          continue label$157;
         default:
          break label$158;
         };
        }
        label$173 : {
         if (((HEAP32[$11_1 >> 2] | 0) & $15_1 | 0 | 0) == ($2_1 | 0)) {
          break label$173
         }
         HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
        }
        $3_1 = $5_1 + -1 | 0;
        $9_1 = $9_1 + 3 | 0;
        $11_1 = $11_1 + 4 | 0;
        label$174 : {
         label$175 : {
          if (($5_1 | 0) <= (1 | 0)) {
           break label$175
          }
          $5_1 = $3_1;
          break label$174;
         }
         $9_1 = $9_1 + $8_1 | 0;
         $11_1 = $11_1 + $10_1 | 0;
         if ($12_1) {
          continue label$147
         }
         break label$3;
        }
        $3_1 = 0;
        continue label$157;
       };
      };
     }
     if (($4_1 | 0) != (3 | 0)) {
      break label$145
     }
     if (($14_1 | 0) != (4 | 0)) {
      break label$145
     }
     if (($16_1 | 0) == (372711428 | 0)) {
      break label$145
     }
     $646($3_1 | 0, $5_1 | 0, $1_1 + 24 | 0 | 0, $1_1 + 20 | 0 | 0, $1_1 + 16 | 0 | 0, $1_1 + 12 | 0 | 0, $1_1 + 28 | 0 | 0);
     if (!$12_1) {
      break label$3
     }
     $4_1 = $13_1 & 7 | 0;
     $15_1 = $2_1 >>> 8 | 0;
     $5_1 = $2_1 >>> 16 | 0;
     $14_1 = ($13_1 + 7 | 0 | 0) / (8 | 0) | 0;
     $2_1 = $2_1 & 255 | 0;
     label$176 : while (1) {
      $12_1 = $12_1 + -1 | 0;
      $0_1 = $14_1;
      label$177 : {
       label$178 : {
        switch ($4_1 | 0) {
        default:
         $3_1 = 0;
         break label$177;
        case 1:
         $3_1 = 7;
         break label$177;
        case 2:
         $3_1 = 6;
         break label$177;
        case 3:
         $3_1 = 5;
         break label$177;
        case 4:
         $3_1 = 4;
         break label$177;
        case 5:
         $3_1 = 3;
         break label$177;
        case 6:
         $3_1 = 2;
         break label$177;
        case 7:
         break label$178;
        };
       }
       $3_1 = 1;
      }
      label$186 : while (1) {
       label$187 : {
        switch ($3_1 | 0) {
        case 0:
         label$195 : {
          label$196 : {
           if ((HEAPU8[$11_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
            break label$196
           }
           if ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$196
           }
           if (((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$195
           }
          }
          HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
         }
         $9_1 = $9_1 + 4 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 1;
         continue label$186;
        case 1:
         label$197 : {
          label$198 : {
           if ((HEAPU8[$11_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
            break label$198
           }
           if ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$198
           }
           if (((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$197
           }
          }
          HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
         }
         $9_1 = $9_1 + 4 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 2;
         continue label$186;
        case 2:
         label$199 : {
          label$200 : {
           if ((HEAPU8[$11_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
            break label$200
           }
           if ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$200
           }
           if (((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$199
           }
          }
          HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
         }
         $9_1 = $9_1 + 4 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 3;
         continue label$186;
        case 3:
         label$201 : {
          label$202 : {
           if ((HEAPU8[$11_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
            break label$202
           }
           if ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$202
           }
           if (((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$201
           }
          }
          HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
         }
         $9_1 = $9_1 + 4 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 4;
         continue label$186;
        case 4:
         label$203 : {
          label$204 : {
           if ((HEAPU8[$11_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
            break label$204
           }
           if ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$204
           }
           if (((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$203
           }
          }
          HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
         }
         $9_1 = $9_1 + 4 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 5;
         continue label$186;
        case 5:
         label$205 : {
          label$206 : {
           if ((HEAPU8[$11_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
            break label$206
           }
           if ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$206
           }
           if (((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$205
           }
          }
          HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
         }
         $9_1 = $9_1 + 4 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 6;
         continue label$186;
        case 6:
         label$207 : {
          label$208 : {
           if ((HEAPU8[$11_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
            break label$208
           }
           if ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
            break label$208
           }
           if (((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
            break label$207
           }
          }
          HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
          HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
         }
         $9_1 = $9_1 + 4 | 0;
         $11_1 = $11_1 + 3 | 0;
         $3_1 = 7;
         continue label$186;
        default:
         break label$187;
        };
       }
       label$209 : {
        label$210 : {
         if ((HEAPU8[$11_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
          break label$210
         }
         if ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) != ($15_1 & 255 | 0 | 0)) {
          break label$210
         }
         if (((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) & 255 | 0 | 0) == ($5_1 & 255 | 0 | 0)) {
          break label$209
         }
        }
        HEAP8[$9_1 >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($9_1 + 1 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($9_1 + 2 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($9_1 + 3 | 0) >> 0] = HEAPU8[($11_1 + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP8[($9_1 + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = $7_1;
       }
       $3_1 = $0_1 + -1 | 0;
       $9_1 = $9_1 + 4 | 0;
       $11_1 = $11_1 + 3 | 0;
       label$211 : {
        label$212 : {
         if (($0_1 | 0) <= (1 | 0)) {
          break label$212
         }
         $0_1 = $3_1;
         break label$211;
        }
        $9_1 = $9_1 + $8_1 | 0;
        $11_1 = $11_1 + $10_1 | 0;
        if ($12_1) {
         continue label$176
        }
        break label$3;
       }
       $3_1 = 0;
       continue label$186;
      };
     };
    }
    if (!$12_1) {
     break label$3
    }
    $19_1 = $13_1 & 7 | 0;
    $20_1 = ($13_1 + 7 | 0 | 0) / (8 | 0) | 0;
    $17_1 = $4_1 + -1 | 0;
    $16_1 = $14_1 + -1 | 0;
    label$213 : while (1) {
     $12_1 = $12_1 + -1 | 0;
     $13_1 = $20_1;
     label$214 : {
      label$215 : {
       switch ($19_1 | 0) {
       default:
        $0_1 = 7;
        break label$214;
       case 1:
        $0_1 = 6;
        break label$214;
       case 2:
        $0_1 = 5;
        break label$214;
       case 3:
        $0_1 = 4;
        break label$214;
       case 4:
        $0_1 = 3;
        break label$214;
       case 5:
        $0_1 = 2;
        break label$214;
       case 6:
        $0_1 = 1;
        break label$214;
       case 7:
        break label$215;
       };
      }
      $0_1 = 0;
     }
     label$223 : {
      label$224 : while (1) {
       label$225 : {
        switch ($0_1 | 0) {
        case 0:
         $0_1 = 0;
         label$233 : {
          label$234 : {
           switch ($17_1 | 0) {
           case 0:
            $0_1 = HEAPU8[$11_1 >> 0] | 0;
            break label$233;
           case 1:
            $0_1 = HEAPU16[$11_1 >> 1] | 0;
            break label$233;
           case 2:
            $0_1 = HEAPU8[$11_1 >> 0] | 0 | ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0;
            break label$233;
           case 3:
            break label$234;
           default:
            break label$233;
           };
          }
          $0_1 = HEAP32[$11_1 >> 2] | 0;
         }
         label$238 : {
          if (($0_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
           break label$238
          }
          $6_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $0_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          label$239 : {
           switch ($16_1 | 0) {
           case 0:
            HEAP8[$9_1 >> 0] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$238;
           case 1:
            HEAP16[$9_1 >> 1] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$238;
           case 2:
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $6_1;
            break label$238;
           case 3:
            break label$239;
           default:
            break label$238;
           };
          }
          HEAP32[$9_1 >> 2] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         }
         $11_1 = $11_1 + $4_1 | 0;
         $9_1 = $9_1 + $14_1 | 0;
         $0_1 = 1;
         continue label$224;
        case 1:
         $0_1 = 0;
         label$243 : {
          label$244 : {
           switch ($17_1 | 0) {
           case 0:
            $0_1 = HEAPU8[$11_1 >> 0] | 0;
            break label$243;
           case 1:
            $0_1 = HEAPU16[$11_1 >> 1] | 0;
            break label$243;
           case 2:
            $0_1 = HEAPU8[$11_1 >> 0] | 0 | ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0;
            break label$243;
           case 3:
            break label$244;
           default:
            break label$243;
           };
          }
          $0_1 = HEAP32[$11_1 >> 2] | 0;
         }
         label$248 : {
          if (($0_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
           break label$248
          }
          $6_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $0_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          label$249 : {
           switch ($16_1 | 0) {
           case 0:
            HEAP8[$9_1 >> 0] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$248;
           case 1:
            HEAP16[$9_1 >> 1] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$248;
           case 2:
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $6_1;
            break label$248;
           case 3:
            break label$249;
           default:
            break label$248;
           };
          }
          HEAP32[$9_1 >> 2] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         }
         $11_1 = $11_1 + $4_1 | 0;
         $9_1 = $9_1 + $14_1 | 0;
         $0_1 = 2;
         continue label$224;
        case 2:
         $0_1 = 0;
         label$253 : {
          label$254 : {
           switch ($17_1 | 0) {
           case 0:
            $0_1 = HEAPU8[$11_1 >> 0] | 0;
            break label$253;
           case 1:
            $0_1 = HEAPU16[$11_1 >> 1] | 0;
            break label$253;
           case 2:
            $0_1 = HEAPU8[$11_1 >> 0] | 0 | ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0;
            break label$253;
           case 3:
            break label$254;
           default:
            break label$253;
           };
          }
          $0_1 = HEAP32[$11_1 >> 2] | 0;
         }
         label$258 : {
          if (($0_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
           break label$258
          }
          $6_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $0_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          label$259 : {
           switch ($16_1 | 0) {
           case 0:
            HEAP8[$9_1 >> 0] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$258;
           case 1:
            HEAP16[$9_1 >> 1] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$258;
           case 2:
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $6_1;
            break label$258;
           case 3:
            break label$259;
           default:
            break label$258;
           };
          }
          HEAP32[$9_1 >> 2] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         }
         $11_1 = $11_1 + $4_1 | 0;
         $9_1 = $9_1 + $14_1 | 0;
         $0_1 = 3;
         continue label$224;
        case 3:
         $0_1 = 0;
         label$263 : {
          label$264 : {
           switch ($17_1 | 0) {
           case 0:
            $0_1 = HEAPU8[$11_1 >> 0] | 0;
            break label$263;
           case 1:
            $0_1 = HEAPU16[$11_1 >> 1] | 0;
            break label$263;
           case 2:
            $0_1 = HEAPU8[$11_1 >> 0] | 0 | ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0;
            break label$263;
           case 3:
            break label$264;
           default:
            break label$263;
           };
          }
          $0_1 = HEAP32[$11_1 >> 2] | 0;
         }
         label$268 : {
          if (($0_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
           break label$268
          }
          $6_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $0_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          label$269 : {
           switch ($16_1 | 0) {
           case 0:
            HEAP8[$9_1 >> 0] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$268;
           case 1:
            HEAP16[$9_1 >> 1] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$268;
           case 2:
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $6_1;
            break label$268;
           case 3:
            break label$269;
           default:
            break label$268;
           };
          }
          HEAP32[$9_1 >> 2] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         }
         $11_1 = $11_1 + $4_1 | 0;
         $9_1 = $9_1 + $14_1 | 0;
         $0_1 = 4;
         continue label$224;
        case 4:
         $0_1 = 0;
         label$273 : {
          label$274 : {
           switch ($17_1 | 0) {
           case 0:
            $0_1 = HEAPU8[$11_1 >> 0] | 0;
            break label$273;
           case 1:
            $0_1 = HEAPU16[$11_1 >> 1] | 0;
            break label$273;
           case 2:
            $0_1 = HEAPU8[$11_1 >> 0] | 0 | ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0;
            break label$273;
           case 3:
            break label$274;
           default:
            break label$273;
           };
          }
          $0_1 = HEAP32[$11_1 >> 2] | 0;
         }
         label$278 : {
          if (($0_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
           break label$278
          }
          $6_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $0_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          label$279 : {
           switch ($16_1 | 0) {
           case 0:
            HEAP8[$9_1 >> 0] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$278;
           case 1:
            HEAP16[$9_1 >> 1] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$278;
           case 2:
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $6_1;
            break label$278;
           case 3:
            break label$279;
           default:
            break label$278;
           };
          }
          HEAP32[$9_1 >> 2] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         }
         $11_1 = $11_1 + $4_1 | 0;
         $9_1 = $9_1 + $14_1 | 0;
         $0_1 = 5;
         continue label$224;
        case 5:
         $0_1 = 0;
         label$283 : {
          label$284 : {
           switch ($17_1 | 0) {
           case 0:
            $0_1 = HEAPU8[$11_1 >> 0] | 0;
            break label$283;
           case 1:
            $0_1 = HEAPU16[$11_1 >> 1] | 0;
            break label$283;
           case 2:
            $0_1 = HEAPU8[$11_1 >> 0] | 0 | ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0;
            break label$283;
           case 3:
            break label$284;
           default:
            break label$283;
           };
          }
          $0_1 = HEAP32[$11_1 >> 2] | 0;
         }
         label$288 : {
          if (($0_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
           break label$288
          }
          $6_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $0_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          label$289 : {
           switch ($16_1 | 0) {
           case 0:
            HEAP8[$9_1 >> 0] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$288;
           case 1:
            HEAP16[$9_1 >> 1] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$288;
           case 2:
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $6_1;
            break label$288;
           case 3:
            break label$289;
           default:
            break label$288;
           };
          }
          HEAP32[$9_1 >> 2] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         }
         $11_1 = $11_1 + $4_1 | 0;
         $9_1 = $9_1 + $14_1 | 0;
         $0_1 = 6;
         continue label$224;
        case 6:
         $0_1 = 0;
         label$293 : {
          label$294 : {
           switch ($17_1 | 0) {
           case 0:
            $0_1 = HEAPU8[$11_1 >> 0] | 0;
            break label$293;
           case 1:
            $0_1 = HEAPU16[$11_1 >> 1] | 0;
            break label$293;
           case 2:
            $0_1 = HEAPU8[$11_1 >> 0] | 0 | ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0;
            break label$293;
           case 3:
            break label$294;
           default:
            break label$293;
           };
          }
          $0_1 = HEAP32[$11_1 >> 2] | 0;
         }
         label$298 : {
          if (($0_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
           break label$298
          }
          $6_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          $0_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
          label$299 : {
           switch ($16_1 | 0) {
           case 0:
            HEAP8[$9_1 >> 0] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$298;
           case 1:
            HEAP16[$9_1 >> 1] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
            break label$298;
           case 2:
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
            HEAP8[($9_1 + ((HEAPU8[($5_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $6_1;
            break label$298;
           case 3:
            break label$299;
           default:
            break label$298;
           };
          }
          HEAP32[$9_1 >> 2] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
         }
         $0_1 = $13_1 + -1 | 0;
         $11_1 = $11_1 + $4_1 | 0;
         $9_1 = $9_1 + $14_1 | 0;
         if (($13_1 | 0) <= (1 | 0)) {
          break label$223
         }
         $13_1 = $0_1;
         $0_1 = 7;
         continue label$224;
        default:
         break label$225;
        };
       }
       $0_1 = 0;
       label$303 : {
        label$304 : {
         switch ($17_1 | 0) {
         case 0:
          $0_1 = HEAPU8[$11_1 >> 0] | 0;
          break label$303;
         case 1:
          $0_1 = HEAPU16[$11_1 >> 1] | 0;
          break label$303;
         case 2:
          $0_1 = HEAPU8[$11_1 >> 0] | 0 | ((HEAPU8[($11_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0;
          break label$303;
         case 3:
          break label$304;
         default:
          break label$303;
         };
        }
        $0_1 = HEAP32[$11_1 >> 2] | 0;
       }
       label$308 : {
        if (($0_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
         break label$308
        }
        $6_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 20 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $18_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 16 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        $0_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($3_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & $0_1 | 0) >>> (HEAPU8[($3_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
        label$309 : {
         switch ($16_1 | 0) {
         case 0:
          HEAP8[$9_1 >> 0] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$308;
         case 1:
          HEAP16[$9_1 >> 1] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          break label$308;
         case 2:
          HEAP8[($9_1 + ((HEAPU8[($5_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $0_1;
          HEAP8[($9_1 + ((HEAPU8[($5_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $18_1;
          HEAP8[($9_1 + ((HEAPU8[($5_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $6_1;
          break label$308;
         case 3:
          break label$309;
         default:
          break label$308;
         };
        }
        HEAP32[$9_1 >> 2] = ($18_1 >>> (HEAPU8[($5_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 33 | 0) >> 0] | 0) | 0 | (($0_1 >>> (HEAPU8[($5_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($6_1 >>> (HEAPU8[($5_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($7_1 >>> (HEAPU8[($5_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($5_1 + 35 | 0) >> 0] | 0) | 0) | 0;
       }
       $11_1 = $11_1 + $4_1 | 0;
       $9_1 = $9_1 + $14_1 | 0;
       $0_1 = 0;
       continue label$224;
      };
     }
     $9_1 = $9_1 + $8_1 | 0;
     $11_1 = $11_1 + $10_1 | 0;
     if ($12_1) {
      continue label$213
     }
     break label$3;
    };
   }
   if (!$12_1) {
    break label$3
   }
   $5_1 = $19_1 | $18_1 | 0 | $20_1 | 0;
   $0_1 = $13_1 & 7 | 0;
   $4_1 = ($13_1 + 7 | 0 | 0) / (8 | 0) | 0;
   label$313 : while (1) {
    $12_1 = $12_1 + -1 | 0;
    $7_1 = $4_1;
    label$314 : {
     label$315 : {
      switch ($0_1 | 0) {
      default:
       $3_1 = 0;
       break label$314;
      case 1:
       $3_1 = 7;
       break label$314;
      case 2:
       $3_1 = 6;
       break label$314;
      case 3:
       $3_1 = 5;
       break label$314;
      case 4:
       $3_1 = 4;
       break label$314;
      case 5:
       $3_1 = 3;
       break label$314;
      case 6:
       $3_1 = 2;
       break label$314;
      case 7:
       break label$315;
      };
     }
     $3_1 = 1;
    }
    label$323 : while (1) {
     label$324 : {
      switch ($3_1 | 0) {
      case 0:
       label$332 : {
        $3_1 = HEAP32[$11_1 >> 2] | 0;
        if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
         break label$332
        }
        HEAP32[$9_1 >> 2] = $3_1 & $5_1 | 0;
       }
       $11_1 = $11_1 + 4 | 0;
       $9_1 = $9_1 + 4 | 0;
       $3_1 = 1;
       continue label$323;
      case 1:
       label$333 : {
        $3_1 = HEAP32[$11_1 >> 2] | 0;
        if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
         break label$333
        }
        HEAP32[$9_1 >> 2] = $3_1 & $5_1 | 0;
       }
       $11_1 = $11_1 + 4 | 0;
       $9_1 = $9_1 + 4 | 0;
       $3_1 = 2;
       continue label$323;
      case 2:
       label$334 : {
        $3_1 = HEAP32[$11_1 >> 2] | 0;
        if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
         break label$334
        }
        HEAP32[$9_1 >> 2] = $3_1 & $5_1 | 0;
       }
       $11_1 = $11_1 + 4 | 0;
       $9_1 = $9_1 + 4 | 0;
       $3_1 = 3;
       continue label$323;
      case 3:
       label$335 : {
        $3_1 = HEAP32[$11_1 >> 2] | 0;
        if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
         break label$335
        }
        HEAP32[$9_1 >> 2] = $3_1 & $5_1 | 0;
       }
       $11_1 = $11_1 + 4 | 0;
       $9_1 = $9_1 + 4 | 0;
       $3_1 = 4;
       continue label$323;
      case 4:
       label$336 : {
        $3_1 = HEAP32[$11_1 >> 2] | 0;
        if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
         break label$336
        }
        HEAP32[$9_1 >> 2] = $3_1 & $5_1 | 0;
       }
       $11_1 = $11_1 + 4 | 0;
       $9_1 = $9_1 + 4 | 0;
       $3_1 = 5;
       continue label$323;
      case 5:
       label$337 : {
        $3_1 = HEAP32[$11_1 >> 2] | 0;
        if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
         break label$337
        }
        HEAP32[$9_1 >> 2] = $3_1 & $5_1 | 0;
       }
       $11_1 = $11_1 + 4 | 0;
       $9_1 = $9_1 + 4 | 0;
       $3_1 = 6;
       continue label$323;
      case 6:
       label$338 : {
        $3_1 = HEAP32[$11_1 >> 2] | 0;
        if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
         break label$338
        }
        HEAP32[$9_1 >> 2] = $3_1 & $5_1 | 0;
       }
       $11_1 = $11_1 + 4 | 0;
       $9_1 = $9_1 + 4 | 0;
       $3_1 = 7;
       continue label$323;
      default:
       break label$324;
      };
     }
     label$339 : {
      $3_1 = HEAP32[$11_1 >> 2] | 0;
      if (($3_1 & $15_1 | 0 | 0) == ($2_1 | 0)) {
       break label$339
      }
      HEAP32[$9_1 >> 2] = $3_1 & $5_1 | 0;
     }
     $3_1 = $7_1 + -1 | 0;
     $11_1 = $11_1 + 4 | 0;
     $9_1 = $9_1 + 4 | 0;
     label$340 : {
      label$341 : {
       if (($7_1 | 0) <= (1 | 0)) {
        break label$341
       }
       $7_1 = $3_1;
       break label$340;
      }
      $9_1 = $9_1 + $8_1 | 0;
      $11_1 = $11_1 + $10_1 | 0;
      if ($12_1) {
       continue label$313
      }
      break label$3;
     }
     $3_1 = 0;
     continue label$323;
    };
   };
  }
  global$0 = $1_1 + 32 | 0;
 }
 
 function $646($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $7_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & 67305985 | 0) >>> (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
  $8_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 29 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & 67305985 | 0) >>> (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
  $9_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 30 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & 67305985 | 0) >>> (HEAPU8[($0_1 + 34 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
  $10_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      if ($11_1) {
       break label$4
      }
      if (!$10_1) {
       break label$3
      }
      $7_1 = ($8_1 >>> (HEAPU8[($1_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0 | (($7_1 >>> (HEAPU8[($1_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
      $0_1 = $1_1 + 30 | 0;
      break label$2;
     }
     if (!$10_1) {
      break label$3
     }
     $7_1 = ($8_1 >>> (HEAPU8[($1_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0 | (($7_1 >>> (HEAPU8[($1_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($9_1 >>> (HEAPU8[($1_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) | 0) | 0;
     $9_1 = HEAPU8[((HEAP32[(117504 + ((HEAPU8[($0_1 + 31 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (($11_1 & 67305985 | 0) >>> (HEAPU8[($0_1 + 35 | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
     $0_1 = $1_1 + 31 | 0;
     $8_1 = 35;
     break label$1;
    }
    $7_1 = ($8_1 >>> (HEAPU8[($1_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($1_1 + 33 | 0) >> 0] | 0) | 0 | (($7_1 >>> (HEAPU8[($1_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) | 0) | 0;
    $0_1 = $1_1 + 30 | 0;
   }
   $8_1 = 34;
  }
  $0_1 = $7_1 | (($9_1 >>> (HEAPU8[$0_1 >> 0] | 0) | 0) << (HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0) | 0) | 0;
  $7_1 = $0_1 >>> 24 | 0;
  $9_1 = ($0_1 >>> 16 | 0) & 255 | 0;
  $1_1 = ($0_1 >>> 8 | 0) & 255 | 0;
  label$5 : {
   label$6 : {
    $8_1 = $0_1 & 255 | 0;
    if ($8_1) {
     break label$6
    }
    $8_1 = 1;
    $0_1 = 0;
    break label$5;
   }
   label$7 : {
    if ($1_1) {
     break label$7
    }
    $0_1 = 1;
    $1_1 = 1;
    break label$5;
   }
   label$8 : {
    if ($9_1) {
     break label$8
    }
    $9_1 = 1;
    $0_1 = 2;
    break label$5;
   }
   $0_1 = $0_1 >>> 0 < 16777216 >>> 0;
   $7_1 = $0_1 ? 1 : $7_1;
   $0_1 = $0_1 ? 3 : 0;
  }
  HEAP32[$2_1 >> 2] = $8_1 + -1 | 0;
  HEAP32[$3_1 >> 2] = $1_1 + -1 | 0;
  HEAP32[$4_1 >> 2] = $9_1 + -1 | 0;
  HEAP32[$5_1 >> 2] = $7_1 + -1 | 0;
  label$9 : {
   if (!$6_1) {
    break label$9
   }
   HEAP32[$6_1 >> 2] = $0_1;
  }
 }
 
 function $647($0_1) {
  $0_1 = $0_1 | 0;
  $648($0_1 | 0, 91104 | 0);
 }
 
 function $648($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, $3_1 = 0, $9_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $2_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) / (4 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $6_1 = $5_1 & 7 | 0;
   $7_1 = ($5_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $5_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $8_1 = $2_1 << 2 | 0;
   label$2 : while (1) {
    $3_1 = $3_1 + -1 | 0;
    $9_1 = $7_1;
    label$3 : {
     label$4 : {
      switch ($6_1 | 0) {
      default:
       $2_1 = 0;
       break label$3;
      case 1:
       $2_1 = 7;
       break label$3;
      case 2:
       $2_1 = 6;
       break label$3;
      case 3:
       $2_1 = 5;
       break label$3;
      case 4:
       $2_1 = 4;
       break label$3;
      case 5:
       $2_1 = 3;
       break label$3;
      case 6:
       $2_1 = 2;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $2_1 = 1;
    }
    label$12 : while (1) {
     label$13 : {
      switch ($2_1 | 0) {
      case 0:
       HEAP32[$0_1 >> 2] = (HEAP32[(($1_1 + ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] | 0) + (HEAP32[($1_1 + ((HEAPU8[$5_1 >> 0] | 0) << 3 | 0) | 0) >> 2] | 0) | 0;
       $5_1 = $5_1 + 2 | 0;
       $0_1 = $0_1 + 4 | 0;
       $2_1 = 1;
       continue label$12;
      case 1:
       HEAP32[$0_1 >> 2] = (HEAP32[(($1_1 + ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] | 0) + (HEAP32[($1_1 + ((HEAPU8[$5_1 >> 0] | 0) << 3 | 0) | 0) >> 2] | 0) | 0;
       $5_1 = $5_1 + 2 | 0;
       $0_1 = $0_1 + 4 | 0;
       $2_1 = 2;
       continue label$12;
      case 2:
       HEAP32[$0_1 >> 2] = (HEAP32[(($1_1 + ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] | 0) + (HEAP32[($1_1 + ((HEAPU8[$5_1 >> 0] | 0) << 3 | 0) | 0) >> 2] | 0) | 0;
       $5_1 = $5_1 + 2 | 0;
       $0_1 = $0_1 + 4 | 0;
       $2_1 = 3;
       continue label$12;
      case 3:
       HEAP32[$0_1 >> 2] = (HEAP32[(($1_1 + ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] | 0) + (HEAP32[($1_1 + ((HEAPU8[$5_1 >> 0] | 0) << 3 | 0) | 0) >> 2] | 0) | 0;
       $5_1 = $5_1 + 2 | 0;
       $0_1 = $0_1 + 4 | 0;
       $2_1 = 4;
       continue label$12;
      case 4:
       HEAP32[$0_1 >> 2] = (HEAP32[(($1_1 + ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] | 0) + (HEAP32[($1_1 + ((HEAPU8[$5_1 >> 0] | 0) << 3 | 0) | 0) >> 2] | 0) | 0;
       $5_1 = $5_1 + 2 | 0;
       $0_1 = $0_1 + 4 | 0;
       $2_1 = 5;
       continue label$12;
      case 5:
       HEAP32[$0_1 >> 2] = (HEAP32[(($1_1 + ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] | 0) + (HEAP32[($1_1 + ((HEAPU8[$5_1 >> 0] | 0) << 3 | 0) | 0) >> 2] | 0) | 0;
       $5_1 = $5_1 + 2 | 0;
       $0_1 = $0_1 + 4 | 0;
       $2_1 = 6;
       continue label$12;
      case 6:
       HEAP32[$0_1 >> 2] = (HEAP32[(($1_1 + ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] | 0) + (HEAP32[($1_1 + ((HEAPU8[$5_1 >> 0] | 0) << 3 | 0) | 0) >> 2] | 0) | 0;
       $5_1 = $5_1 + 2 | 0;
       $0_1 = $0_1 + 4 | 0;
       $2_1 = 7;
       continue label$12;
      default:
       break label$13;
      };
     }
     HEAP32[$0_1 >> 2] = (HEAP32[(($1_1 + ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] | 0) + (HEAP32[($1_1 + ((HEAPU8[$5_1 >> 0] | 0) << 3 | 0) | 0) >> 2] | 0) | 0;
     $2_1 = $9_1 + -1 | 0;
     $5_1 = $5_1 + 2 | 0;
     $0_1 = $0_1 + 4 | 0;
     label$21 : {
      label$22 : {
       if (($9_1 | 0) <= (1 | 0)) {
        break label$22
       }
       $9_1 = $2_1;
       break label$21;
      }
      $5_1 = $5_1 + $4_1 | 0;
      $0_1 = $0_1 + $8_1 | 0;
      if ($3_1) {
       continue label$2
      }
      break label$1;
     }
     $2_1 = 0;
     continue label$12;
    };
   };
  }
 }
 
 function $649($0_1) {
  $0_1 = $0_1 | 0;
  $648($0_1 | 0, 93152 | 0);
 }
 
 function $650($0_1) {
  $0_1 = $0_1 | 0;
  $648($0_1 | 0, 95200 | 0);
 }
 
 function $651($0_1) {
  $0_1 = $0_1 | 0;
  $648($0_1 | 0, 97248 | 0);
 }
 
 function $652($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $9_1 = 0, $7_1 = 0, $1_1 = 0, $8_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $5_1 = $4_1 & 7 | 0;
   $6_1 = ($4_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   $7_1 = ((HEAPU8[($0_1 + 63 | 0) >> 0] | 0) >>> (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($4_1 + 35 | 0) >> 0] | 0) | 0;
   $4_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $8_1 = $6_1;
    label$3 : {
     label$4 : {
      switch ($5_1 | 0) {
      default:
       $9_1 = 0;
       break label$3;
      case 1:
       $9_1 = 7;
       break label$3;
      case 2:
       $9_1 = 6;
       break label$3;
      case 3:
       $9_1 = 5;
       break label$3;
      case 4:
       $9_1 = 4;
       break label$3;
      case 5:
       $9_1 = 3;
       break label$3;
      case 6:
       $9_1 = 2;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $9_1 = 1;
    }
    label$12 : while (1) {
     label$13 : {
      switch ($9_1 | 0) {
      case 0:
       HEAP16[$0_1 >> 1] = HEAPU16[$4_1 >> 1] | 0 | $7_1 | 0;
       $4_1 = $4_1 + 2 | 0;
       $0_1 = $0_1 + 2 | 0;
       $9_1 = 1;
       continue label$12;
      case 1:
       HEAP16[$0_1 >> 1] = HEAPU16[$4_1 >> 1] | 0 | $7_1 | 0;
       $4_1 = $4_1 + 2 | 0;
       $0_1 = $0_1 + 2 | 0;
       $9_1 = 2;
       continue label$12;
      case 2:
       HEAP16[$0_1 >> 1] = HEAPU16[$4_1 >> 1] | 0 | $7_1 | 0;
       $4_1 = $4_1 + 2 | 0;
       $0_1 = $0_1 + 2 | 0;
       $9_1 = 3;
       continue label$12;
      case 3:
       HEAP16[$0_1 >> 1] = HEAPU16[$4_1 >> 1] | 0 | $7_1 | 0;
       $4_1 = $4_1 + 2 | 0;
       $0_1 = $0_1 + 2 | 0;
       $9_1 = 4;
       continue label$12;
      case 4:
       HEAP16[$0_1 >> 1] = HEAPU16[$4_1 >> 1] | 0 | $7_1 | 0;
       $4_1 = $4_1 + 2 | 0;
       $0_1 = $0_1 + 2 | 0;
       $9_1 = 5;
       continue label$12;
      case 5:
       HEAP16[$0_1 >> 1] = HEAPU16[$4_1 >> 1] | 0 | $7_1 | 0;
       $4_1 = $4_1 + 2 | 0;
       $0_1 = $0_1 + 2 | 0;
       $9_1 = 6;
       continue label$12;
      case 6:
       HEAP16[$0_1 >> 1] = HEAPU16[$4_1 >> 1] | 0 | $7_1 | 0;
       $4_1 = $4_1 + 2 | 0;
       $0_1 = $0_1 + 2 | 0;
       $9_1 = 7;
       continue label$12;
      default:
       break label$13;
      };
     }
     HEAP16[$0_1 >> 1] = HEAPU16[$4_1 >> 1] | 0 | $7_1 | 0;
     $9_1 = $8_1 + -1 | 0;
     $4_1 = $4_1 + 2 | 0;
     $0_1 = $0_1 + 2 | 0;
     label$21 : {
      label$22 : {
       if (($8_1 | 0) <= (1 | 0)) {
        break label$22
       }
       $8_1 = $9_1;
       break label$21;
      }
      $0_1 = $0_1 + $2_1 | 0;
      $4_1 = $4_1 + $3_1 | 0;
      if ($1_1) {
       continue label$2
      }
      break label$1;
     }
     $9_1 = 0;
     continue label$12;
    };
   };
  }
 }
 
 function $653($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $2_1 = 0, $8_1 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $4_1 = HEAP32[$0_1 >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $7_1 = HEAPU8[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    if (HEAP32[($8_1 + 24 | 0) >> 2] | 0) {
     break label$2
    }
    if (!$5_1) {
     break label$1
    }
    $8_1 = HEAPU8[($8_1 + 9 | 0) >> 0] | 0;
    $9_1 = $6_1 & 7 | 0;
    $10_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
    label$3 : while (1) {
     $5_1 = $5_1 + -1 | 0;
     $6_1 = $10_1;
     label$4 : {
      label$5 : {
       switch ($9_1 | 0) {
       default:
        $0_1 = 0;
        break label$4;
       case 1:
        $0_1 = 7;
        break label$4;
       case 2:
        $0_1 = 6;
        break label$4;
       case 3:
        $0_1 = 5;
        break label$4;
       case 4:
        $0_1 = 4;
        break label$4;
       case 5:
        $0_1 = 3;
        break label$4;
       case 6:
        $0_1 = 2;
        break label$4;
       case 7:
        break label$5;
       };
      }
      $0_1 = 1;
     }
     label$13 : while (1) {
      label$14 : {
       switch ($0_1 | 0) {
       case 0:
        $0_1 = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
        HEAP8[$2_1 >> 0] = $0_1;
        HEAP8[($2_1 + 1 | 0) >> 0] = $0_1 >>> 8 | 0;
        $4_1 = $4_1 + $7_1 | 0;
        $2_1 = $2_1 + $8_1 | 0;
        $0_1 = 1;
        continue label$13;
       case 1:
        $0_1 = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
        HEAP8[$2_1 >> 0] = $0_1;
        HEAP8[($2_1 + 1 | 0) >> 0] = $0_1 >>> 8 | 0;
        $4_1 = $4_1 + $7_1 | 0;
        $2_1 = $2_1 + $8_1 | 0;
        $0_1 = 2;
        continue label$13;
       case 2:
        $0_1 = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
        HEAP8[$2_1 >> 0] = $0_1;
        HEAP8[($2_1 + 1 | 0) >> 0] = $0_1 >>> 8 | 0;
        $4_1 = $4_1 + $7_1 | 0;
        $2_1 = $2_1 + $8_1 | 0;
        $0_1 = 3;
        continue label$13;
       case 3:
        $0_1 = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
        HEAP8[$2_1 >> 0] = $0_1;
        HEAP8[($2_1 + 1 | 0) >> 0] = $0_1 >>> 8 | 0;
        $4_1 = $4_1 + $7_1 | 0;
        $2_1 = $2_1 + $8_1 | 0;
        $0_1 = 4;
        continue label$13;
       case 4:
        $0_1 = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
        HEAP8[$2_1 >> 0] = $0_1;
        HEAP8[($2_1 + 1 | 0) >> 0] = $0_1 >>> 8 | 0;
        $4_1 = $4_1 + $7_1 | 0;
        $2_1 = $2_1 + $8_1 | 0;
        $0_1 = 5;
        continue label$13;
       case 5:
        $0_1 = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
        HEAP8[$2_1 >> 0] = $0_1;
        HEAP8[($2_1 + 1 | 0) >> 0] = $0_1 >>> 8 | 0;
        $4_1 = $4_1 + $7_1 | 0;
        $2_1 = $2_1 + $8_1 | 0;
        $0_1 = 6;
        continue label$13;
       case 6:
        $0_1 = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
        HEAP8[$2_1 >> 0] = $0_1;
        HEAP8[($2_1 + 1 | 0) >> 0] = $0_1 >>> 8 | 0;
        $4_1 = $4_1 + $7_1 | 0;
        $2_1 = $2_1 + $8_1 | 0;
        $0_1 = 7;
        continue label$13;
       default:
        break label$14;
       };
      }
      $0_1 = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
      HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
      HEAP8[$2_1 >> 0] = $0_1;
      HEAP8[($2_1 + 1 | 0) >> 0] = $0_1 >>> 8 | 0;
      $0_1 = $6_1 + -1 | 0;
      $4_1 = $4_1 + $7_1 | 0;
      $2_1 = $2_1 + $8_1 | 0;
      label$22 : {
       label$23 : {
        if (($6_1 | 0) <= (1 | 0)) {
         break label$23
        }
        $6_1 = $0_1;
        break label$22;
       }
       $2_1 = $2_1 + $1_1 | 0;
       $4_1 = $4_1 + $3_1 | 0;
       if ($5_1) {
        continue label$3
       }
       break label$1;
      }
      $0_1 = 0;
      continue label$13;
     };
    };
   }
   if (!$5_1) {
    break label$1
   }
   $8_1 = (HEAPU8[($0_1 + 63 | 0) >> 0] | 0) << (HEAPU8[($8_1 + 35 | 0) >> 0] | 0) | 0;
   $9_1 = $6_1 & 7 | 0;
   $10_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
   label$24 : while (1) {
    $5_1 = $5_1 + -1 | 0;
    $6_1 = $10_1;
    label$25 : {
     label$26 : {
      switch ($9_1 | 0) {
      default:
       $0_1 = 0;
       break label$25;
      case 1:
       $0_1 = 7;
       break label$25;
      case 2:
       $0_1 = 6;
       break label$25;
      case 3:
       $0_1 = 5;
       break label$25;
      case 4:
       $0_1 = 4;
       break label$25;
      case 5:
       $0_1 = 3;
       break label$25;
      case 6:
       $0_1 = 2;
       break label$25;
      case 7:
       break label$26;
      };
     }
     $0_1 = 1;
    }
    label$34 : while (1) {
     label$35 : {
      switch ($0_1 | 0) {
      case 0:
       HEAP32[$2_1 >> 2] = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0 | $8_1 | 0;
       $4_1 = $4_1 + $7_1 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 1;
       continue label$34;
      case 1:
       HEAP32[$2_1 >> 2] = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0 | $8_1 | 0;
       $4_1 = $4_1 + $7_1 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 2;
       continue label$34;
      case 2:
       HEAP32[$2_1 >> 2] = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0 | $8_1 | 0;
       $4_1 = $4_1 + $7_1 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 3;
       continue label$34;
      case 3:
       HEAP32[$2_1 >> 2] = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0 | $8_1 | 0;
       $4_1 = $4_1 + $7_1 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 4;
       continue label$34;
      case 4:
       HEAP32[$2_1 >> 2] = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0 | $8_1 | 0;
       $4_1 = $4_1 + $7_1 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 5;
       continue label$34;
      case 5:
       HEAP32[$2_1 >> 2] = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0 | $8_1 | 0;
       $4_1 = $4_1 + $7_1 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 6;
       continue label$34;
      case 6:
       HEAP32[$2_1 >> 2] = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0 | $8_1 | 0;
       $4_1 = $4_1 + $7_1 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 7;
       continue label$34;
      default:
       break label$35;
      };
     }
     HEAP32[$2_1 >> 2] = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0) | 0 | $8_1 | 0;
     $0_1 = $6_1 + -1 | 0;
     $4_1 = $4_1 + $7_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     label$43 : {
      label$44 : {
       if (($6_1 | 0) <= (1 | 0)) {
        break label$44
       }
       $6_1 = $0_1;
       break label$43;
      }
      $2_1 = $2_1 + $1_1 | 0;
      $4_1 = $4_1 + $3_1 | 0;
      if ($5_1) {
       continue label$24
      }
      break label$1;
     }
     $0_1 = 0;
     continue label$34;
    };
   };
  }
 }
 
 function $654($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $2_1 = 0, $8_1 = 0, $7_1 = 0, $11_1 = 0, $5_1 = 0, $10_1 = 0, $6_1 = 0, $9_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $4_1 = HEAP32[$0_1 >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $7_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $8_1 = HEAPU8[($7_1 + 9 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    $9_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    if (HEAP32[($9_1 + 24 | 0) >> 2] | 0) {
     break label$2
    }
    if (!$5_1) {
     break label$1
    }
    $7_1 = HEAPU8[($9_1 + 9 | 0) >> 0] | 0;
    $9_1 = $6_1 & 7 | 0;
    $6_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
    label$3 : while (1) {
     $5_1 = $5_1 + -1 | 0;
     $10_1 = $6_1;
     label$4 : {
      label$5 : {
       switch ($9_1 | 0) {
       default:
        $0_1 = 0;
        break label$4;
       case 1:
        $0_1 = 7;
        break label$4;
       case 2:
        $0_1 = 6;
        break label$4;
       case 3:
        $0_1 = 5;
        break label$4;
       case 4:
        $0_1 = 4;
        break label$4;
       case 5:
        $0_1 = 3;
        break label$4;
       case 6:
        $0_1 = 2;
        break label$4;
       case 7:
        break label$5;
       };
      }
      $0_1 = 1;
     }
     label$13 : while (1) {
      label$14 : {
       switch ($0_1 | 0) {
       case 0:
        $0_1 = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
        $11_1 = HEAPU8[$4_1 >> 0] | 0;
        HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = $11_1;
        HEAP8[$2_1 >> 0] = $0_1;
        $4_1 = $4_1 + $8_1 | 0;
        $2_1 = $2_1 + $7_1 | 0;
        $0_1 = 1;
        continue label$13;
       case 1:
        $0_1 = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
        $11_1 = HEAPU8[$4_1 >> 0] | 0;
        HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = $11_1;
        HEAP8[$2_1 >> 0] = $0_1;
        $4_1 = $4_1 + $8_1 | 0;
        $2_1 = $2_1 + $7_1 | 0;
        $0_1 = 2;
        continue label$13;
       case 2:
        $0_1 = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
        $11_1 = HEAPU8[$4_1 >> 0] | 0;
        HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = $11_1;
        HEAP8[$2_1 >> 0] = $0_1;
        $4_1 = $4_1 + $8_1 | 0;
        $2_1 = $2_1 + $7_1 | 0;
        $0_1 = 3;
        continue label$13;
       case 3:
        $0_1 = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
        $11_1 = HEAPU8[$4_1 >> 0] | 0;
        HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = $11_1;
        HEAP8[$2_1 >> 0] = $0_1;
        $4_1 = $4_1 + $8_1 | 0;
        $2_1 = $2_1 + $7_1 | 0;
        $0_1 = 4;
        continue label$13;
       case 4:
        $0_1 = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
        $11_1 = HEAPU8[$4_1 >> 0] | 0;
        HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = $11_1;
        HEAP8[$2_1 >> 0] = $0_1;
        $4_1 = $4_1 + $8_1 | 0;
        $2_1 = $2_1 + $7_1 | 0;
        $0_1 = 5;
        continue label$13;
       case 5:
        $0_1 = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
        $11_1 = HEAPU8[$4_1 >> 0] | 0;
        HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = $11_1;
        HEAP8[$2_1 >> 0] = $0_1;
        $4_1 = $4_1 + $8_1 | 0;
        $2_1 = $2_1 + $7_1 | 0;
        $0_1 = 6;
        continue label$13;
       case 6:
        $0_1 = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
        $11_1 = HEAPU8[$4_1 >> 0] | 0;
        HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
        HEAP8[($2_1 + 2 | 0) >> 0] = $11_1;
        HEAP8[$2_1 >> 0] = $0_1;
        $4_1 = $4_1 + $8_1 | 0;
        $2_1 = $2_1 + $7_1 | 0;
        $0_1 = 7;
        continue label$13;
       default:
        break label$14;
       };
      }
      $0_1 = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
      $11_1 = HEAPU8[$4_1 >> 0] | 0;
      HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
      HEAP8[($2_1 + 2 | 0) >> 0] = $11_1;
      HEAP8[$2_1 >> 0] = $0_1;
      $0_1 = $10_1 + -1 | 0;
      $4_1 = $4_1 + $8_1 | 0;
      $2_1 = $2_1 + $7_1 | 0;
      label$22 : {
       label$23 : {
        if (($10_1 | 0) <= (1 | 0)) {
         break label$23
        }
        $10_1 = $0_1;
        break label$22;
       }
       $2_1 = $2_1 + $1_1 | 0;
       $4_1 = $4_1 + $3_1 | 0;
       if ($5_1) {
        continue label$3
       }
       break label$1;
      }
      $0_1 = 0;
      continue label$13;
     };
    };
   }
   label$24 : {
    if (!(HEAP32[($7_1 + 24 | 0) >> 2] | 0)) {
     break label$24
    }
    if (!$5_1) {
     break label$1
    }
    $10_1 = $6_1 & 7 | 0;
    $11_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
    $8_1 = HEAPU8[($9_1 + 35 | 0) >> 0] | 0;
    label$25 : while (1) {
     $5_1 = $5_1 + -1 | 0;
     $7_1 = $11_1;
     label$26 : {
      label$27 : {
       switch ($10_1 | 0) {
       default:
        $0_1 = 0;
        break label$26;
       case 1:
        $0_1 = 7;
        break label$26;
       case 2:
        $0_1 = 6;
        break label$26;
       case 3:
        $0_1 = 5;
        break label$26;
       case 4:
        $0_1 = 4;
        break label$26;
       case 5:
        $0_1 = 3;
        break label$26;
       case 6:
        $0_1 = 2;
        break label$26;
       case 7:
        break label$27;
       };
      }
      $0_1 = 1;
     }
     label$35 : while (1) {
      label$36 : {
       switch ($0_1 | 0) {
       case 0:
        HEAP32[$2_1 >> 2] = (HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0 | ((HEAPU8[$4_1 >> 0] | 0) << 16 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << $8_1 | 0) | 0;
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $0_1 = 1;
        continue label$35;
       case 1:
        HEAP32[$2_1 >> 2] = (HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0 | ((HEAPU8[$4_1 >> 0] | 0) << 16 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << $8_1 | 0) | 0;
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $0_1 = 2;
        continue label$35;
       case 2:
        HEAP32[$2_1 >> 2] = (HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0 | ((HEAPU8[$4_1 >> 0] | 0) << 16 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << $8_1 | 0) | 0;
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $0_1 = 3;
        continue label$35;
       case 3:
        HEAP32[$2_1 >> 2] = (HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0 | ((HEAPU8[$4_1 >> 0] | 0) << 16 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << $8_1 | 0) | 0;
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $0_1 = 4;
        continue label$35;
       case 4:
        HEAP32[$2_1 >> 2] = (HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0 | ((HEAPU8[$4_1 >> 0] | 0) << 16 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << $8_1 | 0) | 0;
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $0_1 = 5;
        continue label$35;
       case 5:
        HEAP32[$2_1 >> 2] = (HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0 | ((HEAPU8[$4_1 >> 0] | 0) << 16 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << $8_1 | 0) | 0;
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $0_1 = 6;
        continue label$35;
       case 6:
        HEAP32[$2_1 >> 2] = (HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0 | ((HEAPU8[$4_1 >> 0] | 0) << 16 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << $8_1 | 0) | 0;
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $0_1 = 7;
        continue label$35;
       default:
        break label$36;
       };
      }
      HEAP32[$2_1 >> 2] = (HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0 | ((HEAPU8[$4_1 >> 0] | 0) << 16 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << $8_1 | 0) | 0;
      $0_1 = $7_1 + -1 | 0;
      $4_1 = $4_1 + 4 | 0;
      $2_1 = $2_1 + 4 | 0;
      label$44 : {
       label$45 : {
        if (($7_1 | 0) <= (1 | 0)) {
         break label$45
        }
        $7_1 = $0_1;
        break label$44;
       }
       $2_1 = $2_1 + $1_1 | 0;
       $4_1 = $4_1 + $3_1 | 0;
       if ($5_1) {
        continue label$25
       }
       break label$1;
      }
      $0_1 = 0;
      continue label$35;
     };
    };
   }
   if (!$5_1) {
    break label$1
   }
   $7_1 = (HEAPU8[($0_1 + 63 | 0) >> 0] | 0) << (HEAPU8[($9_1 + 35 | 0) >> 0] | 0) | 0;
   $11_1 = $6_1 & 7 | 0;
   $9_1 = ($6_1 + 7 | 0 | 0) / (8 | 0) | 0;
   label$46 : while (1) {
    $5_1 = $5_1 + -1 | 0;
    $10_1 = $9_1;
    label$47 : {
     label$48 : {
      switch ($11_1 | 0) {
      default:
       $0_1 = 0;
       break label$47;
      case 1:
       $0_1 = 7;
       break label$47;
      case 2:
       $0_1 = 6;
       break label$47;
      case 3:
       $0_1 = 5;
       break label$47;
      case 4:
       $0_1 = 4;
       break label$47;
      case 5:
       $0_1 = 3;
       break label$47;
      case 6:
       $0_1 = 2;
       break label$47;
      case 7:
       break label$48;
      };
     }
     $0_1 = 1;
    }
    label$56 : while (1) {
     label$57 : {
      switch ($0_1 | 0) {
      case 0:
       HEAP32[$2_1 >> 2] = (HEAPU8[$4_1 >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | $7_1 | 0;
       $4_1 = $4_1 + $8_1 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 1;
       continue label$56;
      case 1:
       HEAP32[$2_1 >> 2] = (HEAPU8[$4_1 >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | $7_1 | 0;
       $4_1 = $4_1 + $8_1 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 2;
       continue label$56;
      case 2:
       HEAP32[$2_1 >> 2] = (HEAPU8[$4_1 >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | $7_1 | 0;
       $4_1 = $4_1 + $8_1 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 3;
       continue label$56;
      case 3:
       HEAP32[$2_1 >> 2] = (HEAPU8[$4_1 >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | $7_1 | 0;
       $4_1 = $4_1 + $8_1 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 4;
       continue label$56;
      case 4:
       HEAP32[$2_1 >> 2] = (HEAPU8[$4_1 >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | $7_1 | 0;
       $4_1 = $4_1 + $8_1 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 5;
       continue label$56;
      case 5:
       HEAP32[$2_1 >> 2] = (HEAPU8[$4_1 >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | $7_1 | 0;
       $4_1 = $4_1 + $8_1 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 6;
       continue label$56;
      case 6:
       HEAP32[$2_1 >> 2] = (HEAPU8[$4_1 >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | $7_1 | 0;
       $4_1 = $4_1 + $8_1 | 0;
       $2_1 = $2_1 + 4 | 0;
       $0_1 = 7;
       continue label$56;
      default:
       break label$57;
      };
     }
     HEAP32[$2_1 >> 2] = (HEAPU8[$4_1 >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | (HEAPU8[($4_1 + 2 | 0) >> 0] | 0) | 0 | $7_1 | 0;
     $0_1 = $10_1 + -1 | 0;
     $4_1 = $4_1 + $8_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     label$65 : {
      label$66 : {
       if (($10_1 | 0) <= (1 | 0)) {
        break label$66
       }
       $10_1 = $0_1;
       break label$65;
      }
      $2_1 = $2_1 + $1_1 | 0;
      $4_1 = $4_1 + $3_1 | 0;
      if ($5_1) {
       continue label$46
      }
      break label$1;
     }
     $0_1 = 0;
     continue label$56;
    };
   };
  }
 }
 
 function $655($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
  $2_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) / (4 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $5_1 = $4_1 & 7 | 0;
   $6_1 = ($4_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $4_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $7_1 = $1_1 << 1 | 0;
   $8_1 = $2_1 << 2 | 0;
   label$2 : while (1) {
    $3_1 = $3_1 + -1 | 0;
    $2_1 = $6_1;
    label$3 : {
     label$4 : {
      switch ($5_1 | 0) {
      default:
       $1_1 = 0;
       break label$3;
      case 1:
       $1_1 = 7;
       break label$3;
      case 2:
       $1_1 = 6;
       break label$3;
      case 3:
       $1_1 = 5;
       break label$3;
      case 4:
       $1_1 = 4;
       break label$3;
      case 5:
       $1_1 = 3;
       break label$3;
      case 6:
       $1_1 = 2;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $1_1 = 1;
    }
    label$12 : while (1) {
     label$13 : {
      switch ($1_1 | 0) {
      case 0:
       $1_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP16[$0_1 >> 1] = ($1_1 >>> 8 | 0) & 63488 | 0 | (($1_1 >>> 5 | 0) & 2016 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = $0_1 + 2 | 0;
       $4_1 = $4_1 + 4 | 0;
       $1_1 = 1;
       continue label$12;
      case 1:
       $1_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP16[$0_1 >> 1] = ($1_1 >>> 8 | 0) & 63488 | 0 | (($1_1 >>> 5 | 0) & 2016 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = $0_1 + 2 | 0;
       $4_1 = $4_1 + 4 | 0;
       $1_1 = 2;
       continue label$12;
      case 2:
       $1_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP16[$0_1 >> 1] = ($1_1 >>> 8 | 0) & 63488 | 0 | (($1_1 >>> 5 | 0) & 2016 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = $0_1 + 2 | 0;
       $4_1 = $4_1 + 4 | 0;
       $1_1 = 3;
       continue label$12;
      case 3:
       $1_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP16[$0_1 >> 1] = ($1_1 >>> 8 | 0) & 63488 | 0 | (($1_1 >>> 5 | 0) & 2016 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = $0_1 + 2 | 0;
       $4_1 = $4_1 + 4 | 0;
       $1_1 = 4;
       continue label$12;
      case 4:
       $1_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP16[$0_1 >> 1] = ($1_1 >>> 8 | 0) & 63488 | 0 | (($1_1 >>> 5 | 0) & 2016 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = $0_1 + 2 | 0;
       $4_1 = $4_1 + 4 | 0;
       $1_1 = 5;
       continue label$12;
      case 5:
       $1_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP16[$0_1 >> 1] = ($1_1 >>> 8 | 0) & 63488 | 0 | (($1_1 >>> 5 | 0) & 2016 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = $0_1 + 2 | 0;
       $4_1 = $4_1 + 4 | 0;
       $1_1 = 6;
       continue label$12;
      case 6:
       $1_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP16[$0_1 >> 1] = ($1_1 >>> 8 | 0) & 63488 | 0 | (($1_1 >>> 5 | 0) & 2016 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = $0_1 + 2 | 0;
       $4_1 = $4_1 + 4 | 0;
       $1_1 = 7;
       continue label$12;
      default:
       break label$13;
      };
     }
     $1_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP16[$0_1 >> 1] = ($1_1 >>> 8 | 0) & 63488 | 0 | (($1_1 >>> 5 | 0) & 2016 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
     $1_1 = $2_1 + -1 | 0;
     $0_1 = $0_1 + 2 | 0;
     $4_1 = $4_1 + 4 | 0;
     label$21 : {
      label$22 : {
       if (($2_1 | 0) <= (1 | 0)) {
        break label$22
       }
       $2_1 = $1_1;
       break label$21;
      }
      $0_1 = $0_1 + $7_1 | 0;
      $4_1 = $4_1 + $8_1 | 0;
      if ($3_1) {
       continue label$2
      }
      break label$1;
     }
     $1_1 = 0;
     continue label$12;
    };
   };
  }
 }
 
 function $656($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
  $2_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) / (4 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $5_1 = $4_1 & 7 | 0;
   $6_1 = ($4_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $4_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $7_1 = $1_1 << 1 | 0;
   $8_1 = $2_1 << 2 | 0;
   label$2 : while (1) {
    $3_1 = $3_1 + -1 | 0;
    $2_1 = $6_1;
    label$3 : {
     label$4 : {
      switch ($5_1 | 0) {
      default:
       $1_1 = 0;
       break label$3;
      case 1:
       $1_1 = 7;
       break label$3;
      case 2:
       $1_1 = 6;
       break label$3;
      case 3:
       $1_1 = 5;
       break label$3;
      case 4:
       $1_1 = 4;
       break label$3;
      case 5:
       $1_1 = 3;
       break label$3;
      case 6:
       $1_1 = 2;
       break label$3;
      case 7:
       break label$4;
      };
     }
     $1_1 = 1;
    }
    label$12 : while (1) {
     label$13 : {
      switch ($1_1 | 0) {
      case 0:
       $1_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP16[$0_1 >> 1] = ($1_1 >>> 9 | 0) & 31744 | 0 | (($1_1 >>> 6 | 0) & 992 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = $0_1 + 2 | 0;
       $4_1 = $4_1 + 4 | 0;
       $1_1 = 1;
       continue label$12;
      case 1:
       $1_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP16[$0_1 >> 1] = ($1_1 >>> 9 | 0) & 31744 | 0 | (($1_1 >>> 6 | 0) & 992 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = $0_1 + 2 | 0;
       $4_1 = $4_1 + 4 | 0;
       $1_1 = 2;
       continue label$12;
      case 2:
       $1_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP16[$0_1 >> 1] = ($1_1 >>> 9 | 0) & 31744 | 0 | (($1_1 >>> 6 | 0) & 992 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = $0_1 + 2 | 0;
       $4_1 = $4_1 + 4 | 0;
       $1_1 = 3;
       continue label$12;
      case 3:
       $1_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP16[$0_1 >> 1] = ($1_1 >>> 9 | 0) & 31744 | 0 | (($1_1 >>> 6 | 0) & 992 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = $0_1 + 2 | 0;
       $4_1 = $4_1 + 4 | 0;
       $1_1 = 4;
       continue label$12;
      case 4:
       $1_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP16[$0_1 >> 1] = ($1_1 >>> 9 | 0) & 31744 | 0 | (($1_1 >>> 6 | 0) & 992 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = $0_1 + 2 | 0;
       $4_1 = $4_1 + 4 | 0;
       $1_1 = 5;
       continue label$12;
      case 5:
       $1_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP16[$0_1 >> 1] = ($1_1 >>> 9 | 0) & 31744 | 0 | (($1_1 >>> 6 | 0) & 992 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = $0_1 + 2 | 0;
       $4_1 = $4_1 + 4 | 0;
       $1_1 = 6;
       continue label$12;
      case 6:
       $1_1 = HEAP32[$4_1 >> 2] | 0;
       HEAP16[$0_1 >> 1] = ($1_1 >>> 9 | 0) & 31744 | 0 | (($1_1 >>> 6 | 0) & 992 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
       $0_1 = $0_1 + 2 | 0;
       $4_1 = $4_1 + 4 | 0;
       $1_1 = 7;
       continue label$12;
      default:
       break label$13;
      };
     }
     $1_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP16[$0_1 >> 1] = ($1_1 >>> 9 | 0) & 31744 | 0 | (($1_1 >>> 6 | 0) & 992 | 0) | 0 | (($1_1 >>> 3 | 0) & 31 | 0) | 0;
     $1_1 = $2_1 + -1 | 0;
     $0_1 = $0_1 + 2 | 0;
     $4_1 = $4_1 + 4 | 0;
     label$21 : {
      label$22 : {
       if (($2_1 | 0) <= (1 | 0)) {
        break label$22
       }
       $2_1 = $1_1;
       break label$21;
      }
      $0_1 = $0_1 + $7_1 | 0;
      $4_1 = $4_1 + $8_1 | 0;
      if ($3_1) {
       continue label$2
      }
      break label$1;
     }
     $1_1 = 0;
     continue label$12;
    };
   };
  }
 }
 
 function $657($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $11_1 = 0, $10_1 = 0, $14_1 = 0, $4_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = $4_1 + $3_1 | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ($4_1 >>> 14 | 0) & 262140 | 0;
  $9_1 = $3_1 + $3_1 | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $7_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $14_1 = $11_1;
    $2_1 = $10_1;
    $1_1 = $4_1;
    label$3 : {
     if (!($11_1 & 1 | 0)) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + $8_1 | 0) >> 2] | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $11_1 + -1 | 0;
     $1_1 = $5_1;
    }
    label$4 : {
     if (($11_1 | 0) == (1 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + ((($1_1 + $3_1 | 0) >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
      $2_1 = $2_1 + 8 | 0;
      $1_1 = $1_1 + $9_1 | 0;
      $14_1 = $14_1 + -2 | 0;
      if ($14_1) {
       continue label$5
      }
      break label$5;
     };
    }
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $658($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $8_1 = 0, $11_1 = 0, $1_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $10_1 = 0, $12_1 = 0, $6_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = (((HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 240 | 0) + -16 | 0) >>> 4 | 0;
   $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $5_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $4_1;
    $6_1 = $5_1;
    label$3 : {
     $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$3
     }
     label$4 : while (1) {
      $8_1 = HEAP32[$1_1 >> 2] | 0;
      $2_1 = $8_1 & 255 | 0;
      $9_1 = HEAP32[$6_1 >> 2] | 0;
      $10_1 = $9_1 & 255 | 0;
      $11_1 = ($8_1 >>> 8 | 0) & 255 | 0;
      $8_1 = ($8_1 >>> 16 | 0) & 255 | 0;
      $12_1 = ($9_1 >>> 8 | 0) & 255 | 0;
      $9_1 = ($9_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       label$6 : {
        switch ($3_1 | 0) {
        case 0:
         $8_1 = $9_1;
         $11_1 = $12_1;
         $2_1 = $10_1;
         break label$5;
        case 1:
         $2_1 = $2_1 + $10_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $11_1 = $11_1 + $12_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $8_1 = $8_1 + $9_1 | 0;
         $8_1 = $8_1 >>> 0 < 255 >>> 0 ? $8_1 : 255;
         break label$5;
        case 3:
         $2_1 = (Math_imul($2_1, $10_1) >>> 0) / (255 >>> 0) | 0;
         $11_1 = (Math_imul($11_1, $12_1) >>> 0) / (255 >>> 0) | 0;
         $8_1 = (Math_imul($8_1, $9_1) >>> 0) / (255 >>> 0) | 0;
         break label$5;
        case 7:
         break label$6;
        default:
         break label$5;
        };
       }
       $2_1 = (Math_imul($2_1, $10_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = (Math_imul($11_1, $12_1) >>> 0) / (255 >>> 0) | 0;
       $8_1 = (Math_imul($8_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | ($8_1 << 16 | 0) | 0 | $2_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $6_1 = $6_1 + 4 | 0;
      $7_1 = $7_1 + -1 | 0;
      if ($7_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $4_1 = $4_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $5_1 = $5_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $4_1;
   HEAP32[$0_1 >> 2] = $5_1;
  }
 }
 
 function $659($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $16_1 = 0, $17_1 = 0, $2_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $7_1 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $10_1 = 0, $11_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (((HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 240 | 0) + -16 | 0) >>> 4 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $9_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$9_1) {
     break label$2
    }
    $10_1 = $7_1 >>> 16 | 0;
    $11_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $12_1 = $5_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($11_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $10_1) | 0) + (($12_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $13_1 = $1_1 & 255 | 0;
     $14_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $16_1 = HEAP32[$2_1 >> 2] | 0;
     $1_1 = $16_1 & 255 | 0;
     $17_1 = ($16_1 >>> 8 | 0) & 255 | 0;
     $16_1 = ($16_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      label$5 : {
       switch ($3_1 | 0) {
       case 0:
        $1_1 = $13_1;
        $17_1 = $14_1;
        $16_1 = $15_1;
        break label$4;
       case 1:
        $1_1 = $1_1 + $13_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        $17_1 = $17_1 + $14_1 | 0;
        $17_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
        $16_1 = $16_1 + $15_1 | 0;
        $16_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
        break label$4;
       case 3:
        $1_1 = (Math_imul($1_1, $13_1) >>> 0) / (255 >>> 0) | 0;
        $17_1 = (Math_imul($17_1, $14_1) >>> 0) / (255 >>> 0) | 0;
        $16_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
        break label$4;
       case 7:
        break label$5;
       default:
        break label$4;
       };
      }
      $1_1 = (Math_imul($1_1, $13_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $16_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $17_1 << 8 | 0 | $1_1 | 0 | ($16_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $12_1 = $12_1 + $4_1 | 0;
     $9_1 = $9_1 + -1 | 0;
     if ($9_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $660($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $6_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
   $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $7_1;
    $9_1 = $8_1;
    label$3 : {
     $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$10_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$9_1 >> 2] | 0;
      $11_1 = $2_1 & 255 | 0;
      $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$6_1) {
        break label$5
       }
       $11_1 = (Math_imul($11_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = (Math_imul($12_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = (Math_imul($2_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $12_1 << 8 | 0 | ($2_1 << 16 | 0) | 0 | $11_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $9_1 = $9_1 + 4 | 0;
      $10_1 = $10_1 + -1 | 0;
      if ($10_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $8_1 = $8_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[$0_1 >> 2] = $8_1;
  }
 }
 
 function $661($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $15_1 = 0, $8_1 = 0, $12_1 = 0, $7_1 = 0, $16_1 = 0, $17_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $9_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $10_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $11_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$2
    }
    $13_1 = $7_1 >>> 16 | 0;
    $14_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $1_1 = $5_1;
    label$3 : while (1) {
     $15_1 = HEAP32[(($14_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $13_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $16_1 = $15_1 & 255 | 0;
     $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $16_1 = (Math_imul($16_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $10_1) >>> 0) / (255 >>> 0) | 0;
      $15_1 = (Math_imul($15_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $17_1 << 8 | 0 | $16_1 | 0 | ($15_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $4_1 | 0;
     $12_1 = $12_1 + -1 | 0;
     if ($12_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $662($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $16_1 = 0, $1_1 = 0, $15_1 = 0, $18_1 = 0, $19_1 = 0, $17_1 = 0, $9_1 = 0, $6_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $6_1 = (wasm2js_i32$0 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0, wasm2js_i32$1 = 255, wasm2js_i32$2 = $1_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   $7_1 = ($1_1 & 48 | 0 | 0) != (0 | 0) & ($6_1 | 0) != (255 | 0) | 0;
   $8_1 = $1_1 & 1 | 0;
   $9_1 = $6_1 ^ 255 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $11_1;
    $13_1 = $12_1;
    label$3 : {
     $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$14_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$1_1 >> 2] | 0;
      $15_1 = HEAP32[$13_1 >> 2] | 0;
      $16_1 = $15_1 & 255 | 0;
      $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$8_1) {
        break label$5
       }
       $16_1 = (Math_imul($16_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      $18_1 = $2_1 >>> 8 | 0;
      $19_1 = $2_1 >>> 16 | 0;
      label$6 : {
       if (!$7_1) {
        break label$6
       }
       $16_1 = (Math_imul($16_1, $6_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $6_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 & 255 | 0;
      $18_1 = $18_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      label$7 : {
       label$8 : {
        switch ($10_1 | 0) {
        case 0:
         $2_1 = $16_1 + ((Math_imul($2_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $18_1 = $17_1 + ((Math_imul($18_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $15_1 + ((Math_imul($19_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$7;
        case 1:
         $2_1 = $16_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $16_1 = $17_1 + $18_1 | 0;
         $18_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
         $16_1 = $15_1 + $19_1 | 0;
         $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
         break label$7;
        case 3:
         $2_1 = (Math_imul($16_1, $2_1) >>> 0) / (255 >>> 0) | 0;
         $18_1 = (Math_imul($17_1, $18_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($15_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         break label$7;
        case 7:
         break label$8;
        default:
         break label$7;
        };
       }
       $2_1 = (Math_imul($16_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $16_1 = (Math_imul($17_1 + $9_1 | 0, $18_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
       $16_1 = (Math_imul($15_1 + $9_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $18_1 << 8 | 0 | ($19_1 << 16 | 0) | 0 | $2_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $663($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $23_1 = 0, $24_1 = 0, $2_1 = 0, $21_1 = 0, $22_1 = 0, $12_1 = 0, $4_1 = 0, $13_1 = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $8_1 = 0, $10_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = (wasm2js_i32$0 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0, wasm2js_i32$1 = 255, wasm2js_i32$2 = $3_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $5_1 = ($3_1 & 48 | 0 | 0) != (0 | 0) & ($4_1 | 0) != (255 | 0) | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = $4_1 ^ 255 | 0;
  $13_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $13_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $3_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $1_1 = $3_1 & 255 | 0;
     $21_1 = ($3_1 >>> 8 | 0) & 255 | 0;
     $22_1 = ($3_1 >>> 16 | 0) & 255 | 0;
     $3_1 = HEAP32[$2_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $1_1 = (Math_imul($1_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($22_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $23_1 = $3_1 >>> 8 | 0;
     $24_1 = $3_1 >>> 16 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $1_1 = (Math_imul($1_1, $4_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $4_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($22_1, $4_1) >>> 0) / (255 >>> 0) | 0;
     }
     $3_1 = $3_1 & 255 | 0;
     $23_1 = $23_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     label$6 : {
      label$7 : {
       switch ($7_1 | 0) {
       case 0:
        $3_1 = $1_1 + ((Math_imul($3_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $23_1 = $21_1 + ((Math_imul($23_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $22_1 + ((Math_imul($24_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$6;
       case 1:
        $3_1 = $1_1 + $3_1 | 0;
        $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $1_1 = $21_1 + $23_1 | 0;
        $23_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        $1_1 = $22_1 + $24_1 | 0;
        $24_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        break label$6;
       case 3:
        $3_1 = (Math_imul($1_1, $3_1) >>> 0) / (255 >>> 0) | 0;
        $23_1 = (Math_imul($21_1, $23_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($22_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        break label$6;
       case 7:
        break label$7;
       default:
        break label$6;
       };
      }
      $3_1 = (Math_imul($1_1 + $12_1 | 0, $3_1) >>> 0) / (255 >>> 0) | 0;
      $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
      $1_1 = (Math_imul($21_1 + $12_1 | 0, $23_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $1_1 = (Math_imul($22_1 + $12_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $23_1 << 8 | 0 | ($24_1 << 16 | 0) | 0 | $3_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $3_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $13_1 = $13_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $13_1;
 }
 
 function $664($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $11_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $6_1 = ($5_1 | 0) / (2 | 0) | 0;
  $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$2
    }
    $9_1 = $6_1 >>> 16 | 0;
    $10_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $7_1;
    $1_1 = $4_1;
    label$3 : while (1) {
     $11_1 = HEAP32[(($10_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $9_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = ($11_1 << 16 | 0) & 16711680 | 0 | ($11_1 & 65280 | 0) | 0 | (($11_1 >>> 16 | 0) & 255 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $3_1 | 0;
     $8_1 = $8_1 + -1 | 0;
     if ($8_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $6_1 = $6_1 + $5_1 | 0;
   $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
 }
 
 function $665($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $8_1 = 0, $11_1 = 0, $1_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $10_1 = 0, $12_1 = 0, $6_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = (((HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 240 | 0) + -16 | 0) >>> 4 | 0;
   $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $5_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $4_1;
    $6_1 = $5_1;
    label$3 : {
     $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$3
     }
     label$4 : while (1) {
      $8_1 = HEAP32[$1_1 >> 2] | 0;
      $2_1 = $8_1 & 255 | 0;
      $9_1 = HEAP32[$6_1 >> 2] | 0;
      $10_1 = $9_1 & 255 | 0;
      $11_1 = ($8_1 >>> 8 | 0) & 255 | 0;
      $8_1 = ($8_1 >>> 16 | 0) & 255 | 0;
      $12_1 = ($9_1 >>> 8 | 0) & 255 | 0;
      $9_1 = ($9_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       label$6 : {
        switch ($3_1 | 0) {
        case 0:
         $2_1 = $9_1;
         $11_1 = $12_1;
         $8_1 = $10_1;
         break label$5;
        case 1:
         $8_1 = $8_1 + $10_1 | 0;
         $8_1 = $8_1 >>> 0 < 255 >>> 0 ? $8_1 : 255;
         $11_1 = $11_1 + $12_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $2_1 = $9_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$5;
        case 3:
         $8_1 = (Math_imul($8_1, $10_1) >>> 0) / (255 >>> 0) | 0;
         $11_1 = (Math_imul($11_1, $12_1) >>> 0) / (255 >>> 0) | 0;
         $2_1 = (Math_imul($9_1, $2_1) >>> 0) / (255 >>> 0) | 0;
         break label$5;
        case 7:
         break label$6;
        default:
         break label$5;
        };
       }
       $8_1 = (Math_imul($8_1, $10_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = (Math_imul($11_1, $12_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = (Math_imul($9_1, $2_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | $2_1 | 0 | ($8_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $6_1 = $6_1 + 4 | 0;
      $7_1 = $7_1 + -1 | 0;
      if ($7_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $4_1 = $4_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $5_1 = $5_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $4_1;
   HEAP32[$0_1 >> 2] = $5_1;
  }
 }
 
 function $666($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $16_1 = 0, $17_1 = 0, $2_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $7_1 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $10_1 = 0, $11_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (((HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 240 | 0) + -16 | 0) >>> 4 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $9_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$9_1) {
     break label$2
    }
    $10_1 = $7_1 >>> 16 | 0;
    $11_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $12_1 = $5_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($11_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $10_1) | 0) + (($12_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $13_1 = $1_1 & 255 | 0;
     $14_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $16_1 = HEAP32[$2_1 >> 2] | 0;
     $1_1 = $16_1 & 255 | 0;
     $17_1 = ($16_1 >>> 8 | 0) & 255 | 0;
     $16_1 = ($16_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      label$5 : {
       switch ($3_1 | 0) {
       case 0:
        $16_1 = $13_1;
        $17_1 = $14_1;
        $1_1 = $15_1;
        break label$4;
       case 1:
        $16_1 = $16_1 + $13_1 | 0;
        $16_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
        $17_1 = $17_1 + $14_1 | 0;
        $17_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
        $1_1 = $15_1 + $1_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        break label$4;
       case 3:
        $16_1 = (Math_imul($16_1, $13_1) >>> 0) / (255 >>> 0) | 0;
        $17_1 = (Math_imul($17_1, $14_1) >>> 0) / (255 >>> 0) | 0;
        $1_1 = (Math_imul($15_1, $1_1) >>> 0) / (255 >>> 0) | 0;
        break label$4;
       case 7:
        break label$5;
       default:
        break label$4;
       };
      }
      $16_1 = (Math_imul($16_1, $13_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = (Math_imul($15_1, $1_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $17_1 << 8 | 0 | ($16_1 << 16 | 0) | 0 | $1_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     $12_1 = $12_1 + $4_1 | 0;
     $9_1 = $9_1 + -1 | 0;
     if ($9_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $667($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $6_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
   $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $7_1;
    $9_1 = $8_1;
    label$3 : {
     $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$10_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$9_1 >> 2] | 0;
      $11_1 = $2_1 & 255 | 0;
      $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$6_1) {
        break label$5
       }
       $11_1 = (Math_imul($11_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = (Math_imul($12_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = (Math_imul($2_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $12_1 << 8 | 0 | $2_1 | 0 | ($11_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $9_1 = $9_1 + 4 | 0;
      $10_1 = $10_1 + -1 | 0;
      if ($10_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $8_1 = $8_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[$0_1 >> 2] = $8_1;
  }
 }
 
 function $668($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $15_1 = 0, $8_1 = 0, $12_1 = 0, $7_1 = 0, $16_1 = 0, $17_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $9_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $10_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $11_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$2
    }
    $13_1 = $7_1 >>> 16 | 0;
    $14_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $1_1 = $5_1;
    label$3 : while (1) {
     $15_1 = HEAP32[(($14_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $13_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $16_1 = $15_1 & 255 | 0;
     $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $16_1 = (Math_imul($16_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $10_1) >>> 0) / (255 >>> 0) | 0;
      $15_1 = (Math_imul($15_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $17_1 << 8 | 0 | ($16_1 << 16 | 0) | 0 | $15_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $4_1 | 0;
     $12_1 = $12_1 + -1 | 0;
     if ($12_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $669($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $16_1 = 0, $1_1 = 0, $15_1 = 0, $18_1 = 0, $19_1 = 0, $17_1 = 0, $9_1 = 0, $6_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $6_1 = (wasm2js_i32$0 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0, wasm2js_i32$1 = 255, wasm2js_i32$2 = $1_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   $7_1 = ($1_1 & 48 | 0 | 0) != (0 | 0) & ($6_1 | 0) != (255 | 0) | 0;
   $8_1 = $1_1 & 1 | 0;
   $9_1 = $6_1 ^ 255 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $11_1;
    $13_1 = $12_1;
    label$3 : {
     $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$14_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$1_1 >> 2] | 0;
      $15_1 = HEAP32[$13_1 >> 2] | 0;
      $16_1 = $15_1 & 255 | 0;
      $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$8_1) {
        break label$5
       }
       $16_1 = (Math_imul($16_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      $18_1 = $2_1 >>> 8 | 0;
      $19_1 = $2_1 >>> 16 | 0;
      label$6 : {
       if (!$7_1) {
        break label$6
       }
       $16_1 = (Math_imul($16_1, $6_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $6_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 & 255 | 0;
      $18_1 = $18_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      label$7 : {
       label$8 : {
        switch ($10_1 | 0) {
        case 0:
         $19_1 = $16_1 + ((Math_imul($19_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $18_1 = $17_1 + ((Math_imul($18_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $2_1 = $15_1 + ((Math_imul($2_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$7;
        case 1:
         $16_1 = $16_1 + $19_1 | 0;
         $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
         $16_1 = $17_1 + $18_1 | 0;
         $18_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
         $2_1 = $15_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$7;
        case 3:
         $19_1 = (Math_imul($16_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         $18_1 = (Math_imul($17_1, $18_1) >>> 0) / (255 >>> 0) | 0;
         $2_1 = (Math_imul($15_1, $2_1) >>> 0) / (255 >>> 0) | 0;
         break label$7;
        case 7:
         break label$8;
        default:
         break label$7;
        };
       }
       $16_1 = (Math_imul($16_1 + $9_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
       $16_1 = (Math_imul($17_1 + $9_1 | 0, $18_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
       $2_1 = (Math_imul($15_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $18_1 << 8 | 0 | $2_1 | 0 | ($19_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $670($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $23_1 = 0, $24_1 = 0, $2_1 = 0, $21_1 = 0, $22_1 = 0, $12_1 = 0, $4_1 = 0, $13_1 = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $8_1 = 0, $10_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = (wasm2js_i32$0 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0, wasm2js_i32$1 = 255, wasm2js_i32$2 = $3_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $5_1 = ($3_1 & 48 | 0 | 0) != (0 | 0) & ($4_1 | 0) != (255 | 0) | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = $4_1 ^ 255 | 0;
  $13_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $13_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $3_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $1_1 = $3_1 & 255 | 0;
     $21_1 = ($3_1 >>> 8 | 0) & 255 | 0;
     $22_1 = ($3_1 >>> 16 | 0) & 255 | 0;
     $3_1 = HEAP32[$2_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $1_1 = (Math_imul($1_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($22_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $23_1 = $3_1 >>> 8 | 0;
     $24_1 = $3_1 >>> 16 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $1_1 = (Math_imul($1_1, $4_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $4_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($22_1, $4_1) >>> 0) / (255 >>> 0) | 0;
     }
     $3_1 = $3_1 & 255 | 0;
     $23_1 = $23_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     label$6 : {
      label$7 : {
       switch ($7_1 | 0) {
       case 0:
        $24_1 = $1_1 + ((Math_imul($24_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $23_1 = $21_1 + ((Math_imul($23_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $3_1 = $22_1 + ((Math_imul($3_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$6;
       case 1:
        $1_1 = $1_1 + $24_1 | 0;
        $24_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        $1_1 = $21_1 + $23_1 | 0;
        $23_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        $3_1 = $22_1 + $3_1 | 0;
        $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        break label$6;
       case 3:
        $24_1 = (Math_imul($1_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        $23_1 = (Math_imul($21_1, $23_1) >>> 0) / (255 >>> 0) | 0;
        $3_1 = (Math_imul($22_1, $3_1) >>> 0) / (255 >>> 0) | 0;
        break label$6;
       case 7:
        break label$7;
       default:
        break label$6;
       };
      }
      $1_1 = (Math_imul($1_1 + $12_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $1_1 = (Math_imul($21_1 + $12_1 | 0, $23_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $3_1 = (Math_imul($22_1 + $12_1 | 0, $3_1) >>> 0) / (255 >>> 0) | 0;
      $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $23_1 << 8 | 0 | $3_1 | 0 | ($24_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $3_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $13_1 = $13_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $13_1;
 }
 
 function $671($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $11_1 = 0, $10_1 = 0, $14_1 = 0, $4_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = $4_1 + $3_1 | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ($4_1 >>> 14 | 0) & 262140 | 0;
  $9_1 = $3_1 + $3_1 | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $7_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $14_1 = $11_1;
    $2_1 = $10_1;
    $1_1 = $4_1;
    label$3 : {
     if (!($11_1 & 1 | 0)) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + $8_1 | 0) >> 2] | 0 | -16777216 | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $11_1 + -1 | 0;
     $1_1 = $5_1;
    }
    label$4 : {
     if (($11_1 | 0) == (1 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0 | -16777216 | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + ((($1_1 + $3_1 | 0) >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0 | -16777216 | 0;
      $2_1 = $2_1 + 8 | 0;
      $1_1 = $1_1 + $9_1 | 0;
      $14_1 = $14_1 + -2 | 0;
      if ($14_1) {
       continue label$5
      }
      break label$5;
     };
    }
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $672($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $9_1 = 0, $12_1 = 0, $1_1 = 0, $10_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $11_1 = 0, $13_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = (((HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 240 | 0) + -16 | 0) >>> 4 | 0;
   $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $5_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $4_1;
    $6_1 = $5_1;
    label$3 : {
     $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$1_1 >> 2] | 0;
      $8_1 = $2_1 >>> 24 | 0;
      $9_1 = $2_1 & 255 | 0;
      $10_1 = HEAP32[$6_1 >> 2] | 0;
      $11_1 = $10_1 & 255 | 0;
      $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      $13_1 = ($10_1 >>> 8 | 0) & 255 | 0;
      $10_1 = ($10_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       label$6 : {
        switch ($3_1 | 0) {
        case 0:
         $8_1 = 255;
         $2_1 = $10_1;
         $12_1 = $13_1;
         $9_1 = $11_1;
         break label$5;
        case 1:
         $9_1 = $9_1 + $11_1 | 0;
         $9_1 = $9_1 >>> 0 < 255 >>> 0 ? $9_1 : 255;
         $12_1 = $12_1 + $13_1 | 0;
         $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
         $2_1 = $2_1 + $10_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$5;
        case 3:
         $9_1 = (Math_imul($9_1, $11_1) >>> 0) / (255 >>> 0) | 0;
         $12_1 = (Math_imul($12_1, $13_1) >>> 0) / (255 >>> 0) | 0;
         $2_1 = (Math_imul($2_1, $10_1) >>> 0) / (255 >>> 0) | 0;
         break label$5;
        case 7:
         break label$6;
        default:
         break label$5;
        };
       }
       $9_1 = (Math_imul($9_1, $11_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = (Math_imul($12_1, $13_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = (Math_imul($2_1, $10_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $12_1 << 8 | 0 | ($2_1 << 16 | 0) | 0 | $9_1 | 0 | ($8_1 << 24 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $6_1 = $6_1 + 4 | 0;
      $7_1 = $7_1 + -1 | 0;
      if ($7_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $4_1 = $4_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $5_1 = $5_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $4_1;
   HEAP32[$0_1 >> 2] = $5_1;
  }
 }
 
 function $673($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $17_1 = 0, $18_1 = 0, $2_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $7_1 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, $16_1 = 0, $3_1 = 0, $5_1 = 0, $10_1 = 0, $11_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (((HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 240 | 0) + -16 | 0) >>> 4 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $9_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$9_1) {
     break label$2
    }
    $10_1 = $7_1 >>> 16 | 0;
    $11_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $12_1 = $5_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($11_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $10_1) | 0) + (($12_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $13_1 = $1_1 & 255 | 0;
     $14_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     $16_1 = $1_1 >>> 24 | 0;
     $17_1 = $1_1 & 255 | 0;
     $18_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $1_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      label$5 : {
       switch ($3_1 | 0) {
       case 0:
        $16_1 = 255;
        $17_1 = $13_1;
        $18_1 = $14_1;
        $1_1 = $15_1;
        break label$4;
       case 1:
        $17_1 = $17_1 + $13_1 | 0;
        $17_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
        $18_1 = $18_1 + $14_1 | 0;
        $18_1 = $18_1 >>> 0 < 255 >>> 0 ? $18_1 : 255;
        $1_1 = $1_1 + $15_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        break label$4;
       case 3:
        $17_1 = (Math_imul($17_1, $13_1) >>> 0) / (255 >>> 0) | 0;
        $18_1 = (Math_imul($18_1, $14_1) >>> 0) / (255 >>> 0) | 0;
        $1_1 = (Math_imul($1_1, $15_1) >>> 0) / (255 >>> 0) | 0;
        break label$4;
       case 7:
        break label$5;
       default:
        break label$4;
       };
      }
      $17_1 = (Math_imul($17_1, $13_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = (Math_imul($18_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = (Math_imul($1_1, $15_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $17_1 | ($16_1 << 24 | 0) | 0 | ($18_1 << 8 | 0) | 0 | ($1_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $12_1 = $12_1 + $4_1 | 0;
     $9_1 = $9_1 + -1 | 0;
     if ($9_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $674($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0, $12_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $6_1 = (wasm2js_i32$0 = (HEAPU8[($0_1 + 63 | 0) >> 0] | 0) << 24 | 0, wasm2js_i32$1 = -16777216, wasm2js_i32$2 = $1_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   $7_1 = $1_1 & 1 | 0;
   $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $9_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $8_1;
    $10_1 = $9_1;
    label$3 : {
     $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$11_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$10_1 >> 2] | 0;
      $12_1 = $2_1 & 255 | 0;
      $13_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$7_1) {
        break label$5
       }
       $12_1 = (Math_imul($12_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $13_1 = (Math_imul($13_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = (Math_imul($2_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $2_1 << 16 | 0 | $6_1 | 0 | ($13_1 << 8 | 0) | 0 | $12_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $10_1 = $10_1 + 4 | 0;
      $11_1 = $11_1 + -1 | 0;
      if ($11_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $9_1 = $9_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
   HEAP32[$0_1 >> 2] = $9_1;
  }
 }
 
 function $675($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0, $10_1 = 0, $14_1 = 0, $9_1 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $16_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = (wasm2js_i32$0 = (HEAPU8[($0_1 + 63 | 0) >> 0] | 0) << 24 | 0, wasm2js_i32$1 = -16777216, wasm2js_i32$2 = $3_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $5_1 = $3_1 & 1 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $11_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $12_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $13_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$14_1) {
     break label$2
    }
    $15_1 = $9_1 >>> 16 | 0;
    $16_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $10_1;
    $1_1 = $7_1;
    label$3 : while (1) {
     $3_1 = HEAP32[(($16_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $15_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $17_1 = $3_1 & 255 | 0;
     $18_1 = ($3_1 >>> 8 | 0) & 255 | 0;
     $3_1 = ($3_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$5_1) {
       break label$4
      }
      $17_1 = (Math_imul($17_1, $11_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = (Math_imul($18_1, $12_1) >>> 0) / (255 >>> 0) | 0;
      $3_1 = (Math_imul($3_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $17_1 | $4_1 | 0 | ($18_1 << 8 | 0) | 0 | ($3_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $6_1 | 0;
     $14_1 = $14_1 + -1 | 0;
     if ($14_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $676($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $16_1 = 0, $1_1 = 0, $15_1 = 0, $18_1 = 0, $19_1 = 0, $17_1 = 0, $9_1 = 0, $6_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $20_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $6_1 = (wasm2js_i32$0 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0, wasm2js_i32$1 = 255, wasm2js_i32$2 = $1_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   $7_1 = ($1_1 & 48 | 0 | 0) != (0 | 0) & ($6_1 | 0) != (255 | 0) | 0;
   $8_1 = $1_1 & 1 | 0;
   $9_1 = $6_1 ^ 255 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $11_1;
    $13_1 = $12_1;
    label$3 : {
     $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$14_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$1_1 >> 2] | 0;
      $15_1 = HEAP32[$13_1 >> 2] | 0;
      $16_1 = $15_1 & 255 | 0;
      $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$8_1) {
        break label$5
       }
       $16_1 = (Math_imul($16_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      $18_1 = $2_1 >>> 8 | 0;
      $19_1 = $2_1 >>> 16 | 0;
      label$6 : {
       if (!$7_1) {
        break label$6
       }
       $16_1 = (Math_imul($16_1, $6_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $6_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $20_1 = $2_1 >>> 24 | 0;
      $2_1 = $2_1 & 255 | 0;
      $18_1 = $18_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      label$7 : {
       label$8 : {
        switch ($10_1 | 0) {
        case 0:
         $20_1 = ((Math_imul($20_1, $9_1) >>> 0) / (255 >>> 0) | 0) + $6_1 | 0;
         $2_1 = $16_1 + ((Math_imul($2_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $18_1 = $17_1 + ((Math_imul($18_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $15_1 + ((Math_imul($19_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$7;
        case 1:
         $2_1 = $16_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $16_1 = $17_1 + $18_1 | 0;
         $18_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
         $16_1 = $15_1 + $19_1 | 0;
         $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
         break label$7;
        case 3:
         $2_1 = (Math_imul($16_1, $2_1) >>> 0) / (255 >>> 0) | 0;
         $18_1 = (Math_imul($17_1, $18_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($15_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         break label$7;
        case 7:
         break label$8;
        default:
         break label$7;
        };
       }
       $2_1 = (Math_imul($16_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $16_1 = (Math_imul($17_1 + $9_1 | 0, $18_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
       $16_1 = (Math_imul($15_1 + $9_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $18_1 << 8 | 0 | ($19_1 << 16 | 0) | 0 | $2_1 | 0 | ($20_1 << 24 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $677($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $23_1 = 0, $24_1 = 0, $21_1 = 0, $22_1 = 0, $12_1 = 0, $4_1 = 0, $13_1 = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $25_1 = 0, $8_1 = 0, $10_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = (wasm2js_i32$0 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0, wasm2js_i32$1 = 255, wasm2js_i32$2 = $3_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $5_1 = ($3_1 & 48 | 0 | 0) != (0 | 0) & ($4_1 | 0) != (255 | 0) | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = $4_1 ^ 255 | 0;
  $13_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = $13_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $2_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $1_1 = $2_1 & 255 | 0;
     $21_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $22_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $2_1 = HEAP32[$3_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $1_1 = (Math_imul($1_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($22_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $23_1 = $2_1 >>> 8 | 0;
     $24_1 = $2_1 >>> 16 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $1_1 = (Math_imul($1_1, $4_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $4_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($22_1, $4_1) >>> 0) / (255 >>> 0) | 0;
     }
     $25_1 = $2_1 >>> 24 | 0;
     $2_1 = $2_1 & 255 | 0;
     $23_1 = $23_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     label$6 : {
      label$7 : {
       switch ($7_1 | 0) {
       case 0:
        $25_1 = ((Math_imul($25_1, $12_1) >>> 0) / (255 >>> 0) | 0) + $4_1 | 0;
        $2_1 = $1_1 + ((Math_imul($2_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $23_1 = $21_1 + ((Math_imul($23_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $22_1 + ((Math_imul($24_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$6;
       case 1:
        $2_1 = $1_1 + $2_1 | 0;
        $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $1_1 = $21_1 + $23_1 | 0;
        $23_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        $1_1 = $22_1 + $24_1 | 0;
        $24_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        break label$6;
       case 3:
        $2_1 = (Math_imul($1_1, $2_1) >>> 0) / (255 >>> 0) | 0;
        $23_1 = (Math_imul($21_1, $23_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($22_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        break label$6;
       case 7:
        break label$7;
       default:
        break label$6;
       };
      }
      $2_1 = (Math_imul($1_1 + $12_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
      $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      $1_1 = (Math_imul($21_1 + $12_1 | 0, $23_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $1_1 = (Math_imul($22_1 + $12_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
     }
     HEAP32[$3_1 >> 2] = $23_1 << 8 | 0 | ($24_1 << 16 | 0) | 0 | $2_1 | 0 | ($25_1 << 24 | 0) | 0;
     $3_1 = $3_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $13_1 = $13_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $13_1;
 }
 
 function $678($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $11_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $6_1 = ($5_1 | 0) / (2 | 0) | 0;
  $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$2
    }
    $9_1 = $6_1 >>> 16 | 0;
    $10_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $7_1;
    $1_1 = $4_1;
    label$3 : while (1) {
     $11_1 = HEAP32[(($10_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $9_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = ($11_1 << 16 | 0) & 16711680 | 0 | ($11_1 & 65280 | 0) | 0 | (($11_1 >>> 16 | 0) & 255 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $3_1 | 0;
     $8_1 = $8_1 + -1 | 0;
     if ($8_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $6_1 = $6_1 + $5_1 | 0;
   $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
 }
 
 function $679($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $8_1 = 0, $11_1 = 0, $1_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $10_1 = 0, $12_1 = 0, $6_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = (((HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 240 | 0) + -16 | 0) >>> 4 | 0;
   $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $5_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $4_1;
    $6_1 = $5_1;
    label$3 : {
     $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$3
     }
     label$4 : while (1) {
      $8_1 = HEAP32[$1_1 >> 2] | 0;
      $2_1 = $8_1 & 255 | 0;
      $9_1 = HEAP32[$6_1 >> 2] | 0;
      $10_1 = $9_1 & 255 | 0;
      $11_1 = ($8_1 >>> 8 | 0) & 255 | 0;
      $8_1 = ($8_1 >>> 16 | 0) & 255 | 0;
      $12_1 = ($9_1 >>> 8 | 0) & 255 | 0;
      $9_1 = ($9_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       label$6 : {
        switch ($3_1 | 0) {
        case 0:
         $8_1 = $10_1;
         $11_1 = $12_1;
         $2_1 = $9_1;
         break label$5;
        case 1:
         $2_1 = $9_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $11_1 = $11_1 + $12_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $8_1 = $8_1 + $10_1 | 0;
         $8_1 = $8_1 >>> 0 < 255 >>> 0 ? $8_1 : 255;
         break label$5;
        case 3:
         $2_1 = (Math_imul($9_1, $2_1) >>> 0) / (255 >>> 0) | 0;
         $11_1 = (Math_imul($11_1, $12_1) >>> 0) / (255 >>> 0) | 0;
         $8_1 = (Math_imul($8_1, $10_1) >>> 0) / (255 >>> 0) | 0;
         break label$5;
        case 7:
         break label$6;
        default:
         break label$5;
        };
       }
       $2_1 = (Math_imul($9_1, $2_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = (Math_imul($11_1, $12_1) >>> 0) / (255 >>> 0) | 0;
       $8_1 = (Math_imul($8_1, $10_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | ($8_1 << 16 | 0) | 0 | $2_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $6_1 = $6_1 + 4 | 0;
      $7_1 = $7_1 + -1 | 0;
      if ($7_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $4_1 = $4_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $5_1 = $5_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $4_1;
   HEAP32[$0_1 >> 2] = $5_1;
  }
 }
 
 function $680($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $16_1 = 0, $17_1 = 0, $2_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $7_1 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $10_1 = 0, $11_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (((HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 240 | 0) + -16 | 0) >>> 4 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $9_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$9_1) {
     break label$2
    }
    $10_1 = $7_1 >>> 16 | 0;
    $11_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $12_1 = $5_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($11_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $10_1) | 0) + (($12_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $13_1 = $1_1 & 255 | 0;
     $14_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $16_1 = HEAP32[$2_1 >> 2] | 0;
     $1_1 = $16_1 & 255 | 0;
     $17_1 = ($16_1 >>> 8 | 0) & 255 | 0;
     $16_1 = ($16_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      label$5 : {
       switch ($3_1 | 0) {
       case 0:
        $1_1 = $15_1;
        $17_1 = $14_1;
        $16_1 = $13_1;
        break label$4;
       case 1:
        $1_1 = $15_1 + $1_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        $17_1 = $17_1 + $14_1 | 0;
        $17_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
        $16_1 = $16_1 + $13_1 | 0;
        $16_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
        break label$4;
       case 3:
        $1_1 = (Math_imul($15_1, $1_1) >>> 0) / (255 >>> 0) | 0;
        $17_1 = (Math_imul($17_1, $14_1) >>> 0) / (255 >>> 0) | 0;
        $16_1 = (Math_imul($16_1, $13_1) >>> 0) / (255 >>> 0) | 0;
        break label$4;
       case 7:
        break label$5;
       default:
        break label$4;
       };
      }
      $1_1 = (Math_imul($15_1, $1_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $16_1 = (Math_imul($16_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $17_1 << 8 | 0 | $1_1 | 0 | ($16_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $12_1 = $12_1 + $4_1 | 0;
     $9_1 = $9_1 + -1 | 0;
     if ($9_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $681($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $6_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
   $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $7_1;
    $9_1 = $8_1;
    label$3 : {
     $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$10_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$9_1 >> 2] | 0;
      $11_1 = $2_1 & 255 | 0;
      $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$6_1) {
        break label$5
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = (Math_imul($12_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = (Math_imul($11_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $12_1 << 8 | 0 | ($11_1 << 16 | 0) | 0 | $2_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $9_1 = $9_1 + 4 | 0;
      $10_1 = $10_1 + -1 | 0;
      if ($10_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $8_1 = $8_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[$0_1 >> 2] = $8_1;
  }
 }
 
 function $682($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $15_1 = 0, $8_1 = 0, $12_1 = 0, $7_1 = 0, $16_1 = 0, $17_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $9_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $10_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $11_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$2
    }
    $13_1 = $7_1 >>> 16 | 0;
    $14_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $1_1 = $5_1;
    label$3 : while (1) {
     $15_1 = HEAP32[(($14_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $13_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $16_1 = $15_1 & 255 | 0;
     $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $10_1) >>> 0) / (255 >>> 0) | 0;
      $16_1 = (Math_imul($16_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $17_1 << 8 | 0 | $15_1 | 0 | ($16_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $4_1 | 0;
     $12_1 = $12_1 + -1 | 0;
     if ($12_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $683($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $16_1 = 0, $17_1 = 0, $15_1 = 0, $18_1 = 0, $19_1 = 0, $9_1 = 0, $6_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $6_1 = (wasm2js_i32$0 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0, wasm2js_i32$1 = 255, wasm2js_i32$2 = $1_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   $7_1 = ($1_1 & 48 | 0 | 0) != (0 | 0) & ($6_1 | 0) != (255 | 0) | 0;
   $8_1 = $1_1 & 1 | 0;
   $9_1 = $6_1 ^ 255 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $11_1;
    $13_1 = $12_1;
    label$3 : {
     $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$14_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$1_1 >> 2] | 0;
      $15_1 = HEAP32[$13_1 >> 2] | 0;
      $16_1 = $15_1 & 255 | 0;
      $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$8_1) {
        break label$5
       }
       $15_1 = (Math_imul($15_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($16_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      $18_1 = $2_1 >>> 8 | 0;
      $19_1 = $2_1 >>> 16 | 0;
      label$6 : {
       if (!$7_1) {
        break label$6
       }
       $15_1 = (Math_imul($15_1, $6_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $6_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($16_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 & 255 | 0;
      $18_1 = $18_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      label$7 : {
       label$8 : {
        switch ($10_1 | 0) {
        case 0:
         $2_1 = $15_1 + ((Math_imul($2_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $18_1 = $17_1 + ((Math_imul($18_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $16_1 + ((Math_imul($19_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$7;
        case 1:
         $2_1 = $15_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $17_1 = $17_1 + $18_1 | 0;
         $18_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
         $16_1 = $16_1 + $19_1 | 0;
         $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
         break label$7;
        case 3:
         $2_1 = (Math_imul($15_1, $2_1) >>> 0) / (255 >>> 0) | 0;
         $18_1 = (Math_imul($17_1, $18_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($16_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         break label$7;
        case 7:
         break label$8;
        default:
         break label$7;
        };
       }
       $2_1 = (Math_imul($15_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $17_1 = (Math_imul($17_1 + $9_1 | 0, $18_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
       $16_1 = (Math_imul($16_1 + $9_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $18_1 << 8 | 0 | ($19_1 << 16 | 0) | 0 | $2_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $684($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $21_1 = 0, $23_1 = 0, $24_1 = 0, $2_1 = 0, $22_1 = 0, $12_1 = 0, $4_1 = 0, $13_1 = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $8_1 = 0, $10_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = (wasm2js_i32$0 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0, wasm2js_i32$1 = 255, wasm2js_i32$2 = $3_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $5_1 = ($3_1 & 48 | 0 | 0) != (0 | 0) & ($4_1 | 0) != (255 | 0) | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = $4_1 ^ 255 | 0;
  $13_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $13_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $3_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $1_1 = $3_1 & 255 | 0;
     $21_1 = ($3_1 >>> 8 | 0) & 255 | 0;
     $22_1 = ($3_1 >>> 16 | 0) & 255 | 0;
     $3_1 = HEAP32[$2_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $22_1 = (Math_imul($22_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = (Math_imul($1_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $23_1 = $3_1 >>> 8 | 0;
     $24_1 = $3_1 >>> 16 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $22_1 = (Math_imul($22_1, $4_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $4_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = (Math_imul($1_1, $4_1) >>> 0) / (255 >>> 0) | 0;
     }
     $3_1 = $3_1 & 255 | 0;
     $23_1 = $23_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     label$6 : {
      label$7 : {
       switch ($7_1 | 0) {
       case 0:
        $3_1 = $22_1 + ((Math_imul($3_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $23_1 = $21_1 + ((Math_imul($23_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $1_1 + ((Math_imul($24_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$6;
       case 1:
        $3_1 = $22_1 + $3_1 | 0;
        $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $21_1 = $21_1 + $23_1 | 0;
        $23_1 = $21_1 >>> 0 < 255 >>> 0 ? $21_1 : 255;
        $1_1 = $1_1 + $24_1 | 0;
        $24_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        break label$6;
       case 3:
        $3_1 = (Math_imul($22_1, $3_1) >>> 0) / (255 >>> 0) | 0;
        $23_1 = (Math_imul($21_1, $23_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($1_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        break label$6;
       case 7:
        break label$7;
       default:
        break label$6;
       };
      }
      $3_1 = (Math_imul($22_1 + $12_1 | 0, $3_1) >>> 0) / (255 >>> 0) | 0;
      $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
      $21_1 = (Math_imul($21_1 + $12_1 | 0, $23_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = $21_1 >>> 0 < 255 >>> 0 ? $21_1 : 255;
      $1_1 = (Math_imul($1_1 + $12_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $23_1 << 8 | 0 | ($24_1 << 16 | 0) | 0 | $3_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $3_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $13_1 = $13_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $13_1;
 }
 
 function $685($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $11_1 = 0, $10_1 = 0, $14_1 = 0, $4_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = $4_1 + $3_1 | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ($4_1 >>> 14 | 0) & 262140 | 0;
  $9_1 = $3_1 + $3_1 | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $7_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $14_1 = $11_1;
    $2_1 = $10_1;
    $1_1 = $4_1;
    label$3 : {
     if (!($11_1 & 1 | 0)) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + $8_1 | 0) >> 2] | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $11_1 + -1 | 0;
     $1_1 = $5_1;
    }
    label$4 : {
     if (($11_1 | 0) == (1 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + ((($1_1 + $3_1 | 0) >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
      $2_1 = $2_1 + 8 | 0;
      $1_1 = $1_1 + $9_1 | 0;
      $14_1 = $14_1 + -2 | 0;
      if ($14_1) {
       continue label$5
      }
      break label$5;
     };
    }
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $686($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $8_1 = 0, $11_1 = 0, $1_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $10_1 = 0, $12_1 = 0, $6_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = (((HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 240 | 0) + -16 | 0) >>> 4 | 0;
   $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $5_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $4_1;
    $6_1 = $5_1;
    label$3 : {
     $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$3
     }
     label$4 : while (1) {
      $8_1 = HEAP32[$1_1 >> 2] | 0;
      $2_1 = $8_1 & 255 | 0;
      $9_1 = HEAP32[$6_1 >> 2] | 0;
      $10_1 = $9_1 & 255 | 0;
      $11_1 = ($8_1 >>> 8 | 0) & 255 | 0;
      $8_1 = ($8_1 >>> 16 | 0) & 255 | 0;
      $12_1 = ($9_1 >>> 8 | 0) & 255 | 0;
      $9_1 = ($9_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       label$6 : {
        switch ($3_1 | 0) {
        case 0:
         $2_1 = $10_1;
         $11_1 = $12_1;
         $8_1 = $9_1;
         break label$5;
        case 1:
         $8_1 = $8_1 + $9_1 | 0;
         $8_1 = $8_1 >>> 0 < 255 >>> 0 ? $8_1 : 255;
         $11_1 = $11_1 + $12_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $2_1 = $2_1 + $10_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$5;
        case 3:
         $8_1 = (Math_imul($8_1, $9_1) >>> 0) / (255 >>> 0) | 0;
         $11_1 = (Math_imul($11_1, $12_1) >>> 0) / (255 >>> 0) | 0;
         $2_1 = (Math_imul($2_1, $10_1) >>> 0) / (255 >>> 0) | 0;
         break label$5;
        case 7:
         break label$6;
        default:
         break label$5;
        };
       }
       $8_1 = (Math_imul($8_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = (Math_imul($11_1, $12_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = (Math_imul($2_1, $10_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | $2_1 | 0 | ($8_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $6_1 = $6_1 + 4 | 0;
      $7_1 = $7_1 + -1 | 0;
      if ($7_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $4_1 = $4_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $5_1 = $5_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $4_1;
   HEAP32[$0_1 >> 2] = $5_1;
  }
 }
 
 function $687($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $16_1 = 0, $17_1 = 0, $2_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $7_1 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $10_1 = 0, $11_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (((HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 240 | 0) + -16 | 0) >>> 4 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $9_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$9_1) {
     break label$2
    }
    $10_1 = $7_1 >>> 16 | 0;
    $11_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $12_1 = $5_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($11_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $10_1) | 0) + (($12_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $13_1 = $1_1 & 255 | 0;
     $14_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $16_1 = HEAP32[$2_1 >> 2] | 0;
     $1_1 = $16_1 & 255 | 0;
     $17_1 = ($16_1 >>> 8 | 0) & 255 | 0;
     $16_1 = ($16_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      label$5 : {
       switch ($3_1 | 0) {
       case 0:
        $16_1 = $15_1;
        $17_1 = $14_1;
        $1_1 = $13_1;
        break label$4;
       case 1:
        $16_1 = $16_1 + $15_1 | 0;
        $16_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
        $17_1 = $17_1 + $14_1 | 0;
        $17_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
        $1_1 = $1_1 + $13_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        break label$4;
       case 3:
        $16_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
        $17_1 = (Math_imul($17_1, $14_1) >>> 0) / (255 >>> 0) | 0;
        $1_1 = (Math_imul($1_1, $13_1) >>> 0) / (255 >>> 0) | 0;
        break label$4;
       case 7:
        break label$5;
       default:
        break label$4;
       };
      }
      $16_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = (Math_imul($1_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $17_1 << 8 | 0 | ($16_1 << 16 | 0) | 0 | $1_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     $12_1 = $12_1 + $4_1 | 0;
     $9_1 = $9_1 + -1 | 0;
     if ($9_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $688($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $6_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
   $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $7_1;
    $9_1 = $8_1;
    label$3 : {
     $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$10_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$9_1 >> 2] | 0;
      $11_1 = $2_1 & 255 | 0;
      $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$6_1) {
        break label$5
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = (Math_imul($12_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = (Math_imul($11_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $12_1 << 8 | 0 | $11_1 | 0 | ($2_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $9_1 = $9_1 + 4 | 0;
      $10_1 = $10_1 + -1 | 0;
      if ($10_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $8_1 = $8_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[$0_1 >> 2] = $8_1;
  }
 }
 
 function $689($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $15_1 = 0, $8_1 = 0, $12_1 = 0, $7_1 = 0, $16_1 = 0, $17_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $9_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $10_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $11_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$2
    }
    $13_1 = $7_1 >>> 16 | 0;
    $14_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $1_1 = $5_1;
    label$3 : while (1) {
     $15_1 = HEAP32[(($14_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $13_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $16_1 = $15_1 & 255 | 0;
     $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $10_1) >>> 0) / (255 >>> 0) | 0;
      $16_1 = (Math_imul($16_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $17_1 << 8 | 0 | ($15_1 << 16 | 0) | 0 | $16_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $4_1 | 0;
     $12_1 = $12_1 + -1 | 0;
     if ($12_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $690($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $15_1 = 0, $1_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $16_1 = 0, $9_1 = 0, $6_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $6_1 = (wasm2js_i32$0 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0, wasm2js_i32$1 = 255, wasm2js_i32$2 = $1_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   $7_1 = ($1_1 & 48 | 0 | 0) != (0 | 0) & ($6_1 | 0) != (255 | 0) | 0;
   $8_1 = $1_1 & 1 | 0;
   $9_1 = $6_1 ^ 255 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $11_1;
    $13_1 = $12_1;
    label$3 : {
     $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$14_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$1_1 >> 2] | 0;
      $15_1 = HEAP32[$13_1 >> 2] | 0;
      $16_1 = $15_1 & 255 | 0;
      $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$8_1) {
        break label$5
       }
       $15_1 = (Math_imul($15_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($16_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      $18_1 = $2_1 >>> 8 | 0;
      $19_1 = $2_1 >>> 16 | 0;
      label$6 : {
       if (!$7_1) {
        break label$6
       }
       $15_1 = (Math_imul($15_1, $6_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $6_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($16_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 & 255 | 0;
      $18_1 = $18_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      label$7 : {
       label$8 : {
        switch ($10_1 | 0) {
        case 0:
         $19_1 = $15_1 + ((Math_imul($19_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $18_1 = $17_1 + ((Math_imul($18_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $2_1 = $16_1 + ((Math_imul($2_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$7;
        case 1:
         $15_1 = $15_1 + $19_1 | 0;
         $19_1 = $15_1 >>> 0 < 255 >>> 0 ? $15_1 : 255;
         $17_1 = $17_1 + $18_1 | 0;
         $18_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
         $2_1 = $16_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$7;
        case 3:
         $19_1 = (Math_imul($15_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         $18_1 = (Math_imul($17_1, $18_1) >>> 0) / (255 >>> 0) | 0;
         $2_1 = (Math_imul($16_1, $2_1) >>> 0) / (255 >>> 0) | 0;
         break label$7;
        case 7:
         break label$8;
        default:
         break label$7;
        };
       }
       $15_1 = (Math_imul($15_1 + $9_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $15_1 >>> 0 < 255 >>> 0 ? $15_1 : 255;
       $17_1 = (Math_imul($17_1 + $9_1 | 0, $18_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
       $2_1 = (Math_imul($16_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $18_1 << 8 | 0 | $2_1 | 0 | ($19_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $691($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $21_1 = 0, $22_1 = 0, $1_1 = 0, $23_1 = 0, $24_1 = 0, $2_1 = 0, $12_1 = 0, $4_1 = 0, $13_1 = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $8_1 = 0, $10_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = (wasm2js_i32$0 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0, wasm2js_i32$1 = 255, wasm2js_i32$2 = $3_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $5_1 = ($3_1 & 48 | 0 | 0) != (0 | 0) & ($4_1 | 0) != (255 | 0) | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = $4_1 ^ 255 | 0;
  $13_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $13_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $3_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $1_1 = $3_1 & 255 | 0;
     $21_1 = ($3_1 >>> 8 | 0) & 255 | 0;
     $22_1 = ($3_1 >>> 16 | 0) & 255 | 0;
     $3_1 = HEAP32[$2_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $22_1 = (Math_imul($22_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = (Math_imul($1_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $23_1 = $3_1 >>> 8 | 0;
     $24_1 = $3_1 >>> 16 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $22_1 = (Math_imul($22_1, $4_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $4_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = (Math_imul($1_1, $4_1) >>> 0) / (255 >>> 0) | 0;
     }
     $3_1 = $3_1 & 255 | 0;
     $23_1 = $23_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     label$6 : {
      label$7 : {
       switch ($7_1 | 0) {
       case 0:
        $24_1 = $22_1 + ((Math_imul($24_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $23_1 = $21_1 + ((Math_imul($23_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $3_1 = $1_1 + ((Math_imul($3_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$6;
       case 1:
        $22_1 = $22_1 + $24_1 | 0;
        $24_1 = $22_1 >>> 0 < 255 >>> 0 ? $22_1 : 255;
        $21_1 = $21_1 + $23_1 | 0;
        $23_1 = $21_1 >>> 0 < 255 >>> 0 ? $21_1 : 255;
        $3_1 = $1_1 + $3_1 | 0;
        $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        break label$6;
       case 3:
        $24_1 = (Math_imul($22_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        $23_1 = (Math_imul($21_1, $23_1) >>> 0) / (255 >>> 0) | 0;
        $3_1 = (Math_imul($1_1, $3_1) >>> 0) / (255 >>> 0) | 0;
        break label$6;
       case 7:
        break label$7;
       default:
        break label$6;
       };
      }
      $22_1 = (Math_imul($22_1 + $12_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $22_1 >>> 0 < 255 >>> 0 ? $22_1 : 255;
      $21_1 = (Math_imul($21_1 + $12_1 | 0, $23_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = $21_1 >>> 0 < 255 >>> 0 ? $21_1 : 255;
      $3_1 = (Math_imul($1_1 + $12_1 | 0, $3_1) >>> 0) / (255 >>> 0) | 0;
      $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $23_1 << 8 | 0 | $3_1 | 0 | ($24_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $3_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $13_1 = $13_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $13_1;
 }
 
 function $692($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $11_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $6_1 = ($5_1 | 0) / (2 | 0) | 0;
  $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$2
    }
    $9_1 = $6_1 >>> 16 | 0;
    $10_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $7_1;
    $1_1 = $4_1;
    label$3 : while (1) {
     $11_1 = HEAP32[(($10_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $9_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = $11_1 << 16 | 0 | ($11_1 & 65280 | 0) | 0 | (($11_1 >>> 16 | 0) & 255 | 0) | 0 | -16777216 | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $3_1 | 0;
     $8_1 = $8_1 + -1 | 0;
     if ($8_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $6_1 = $6_1 + $5_1 | 0;
   $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
 }
 
 function $693($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $9_1 = 0, $12_1 = 0, $1_1 = 0, $10_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $11_1 = 0, $13_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = (((HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 240 | 0) + -16 | 0) >>> 4 | 0;
   $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $5_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $4_1;
    $6_1 = $5_1;
    label$3 : {
     $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$1_1 >> 2] | 0;
      $8_1 = $2_1 >>> 24 | 0;
      $9_1 = $2_1 & 255 | 0;
      $10_1 = HEAP32[$6_1 >> 2] | 0;
      $11_1 = $10_1 & 255 | 0;
      $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      $13_1 = ($10_1 >>> 8 | 0) & 255 | 0;
      $10_1 = ($10_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       label$6 : {
        switch ($3_1 | 0) {
        case 0:
         $8_1 = 255;
         $2_1 = $11_1;
         $12_1 = $13_1;
         $9_1 = $10_1;
         break label$5;
        case 1:
         $9_1 = $10_1 + $9_1 | 0;
         $9_1 = $9_1 >>> 0 < 255 >>> 0 ? $9_1 : 255;
         $12_1 = $12_1 + $13_1 | 0;
         $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
         $2_1 = $2_1 + $11_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$5;
        case 3:
         $9_1 = (Math_imul($10_1, $9_1) >>> 0) / (255 >>> 0) | 0;
         $12_1 = (Math_imul($12_1, $13_1) >>> 0) / (255 >>> 0) | 0;
         $2_1 = (Math_imul($2_1, $11_1) >>> 0) / (255 >>> 0) | 0;
         break label$5;
        case 7:
         break label$6;
        default:
         break label$5;
        };
       }
       $9_1 = (Math_imul($10_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = (Math_imul($12_1, $13_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = (Math_imul($2_1, $11_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $12_1 << 8 | 0 | ($2_1 << 16 | 0) | 0 | $9_1 | 0 | ($8_1 << 24 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $6_1 = $6_1 + 4 | 0;
      $7_1 = $7_1 + -1 | 0;
      if ($7_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $4_1 = $4_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $5_1 = $5_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $4_1;
   HEAP32[$0_1 >> 2] = $5_1;
  }
 }
 
 function $694($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $17_1 = 0, $18_1 = 0, $2_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $7_1 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, $16_1 = 0, $3_1 = 0, $5_1 = 0, $10_1 = 0, $11_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (((HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 240 | 0) + -16 | 0) >>> 4 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $9_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$9_1) {
     break label$2
    }
    $10_1 = $7_1 >>> 16 | 0;
    $11_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $12_1 = $5_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($11_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $10_1) | 0) + (($12_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $13_1 = $1_1 & 255 | 0;
     $14_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     $16_1 = $1_1 >>> 24 | 0;
     $17_1 = $1_1 & 255 | 0;
     $18_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $1_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      label$5 : {
       switch ($3_1 | 0) {
       case 0:
        $16_1 = 255;
        $17_1 = $15_1;
        $18_1 = $14_1;
        $1_1 = $13_1;
        break label$4;
       case 1:
        $17_1 = $15_1 + $17_1 | 0;
        $17_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
        $18_1 = $18_1 + $14_1 | 0;
        $18_1 = $18_1 >>> 0 < 255 >>> 0 ? $18_1 : 255;
        $1_1 = $1_1 + $13_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        break label$4;
       case 3:
        $17_1 = (Math_imul($15_1, $17_1) >>> 0) / (255 >>> 0) | 0;
        $18_1 = (Math_imul($18_1, $14_1) >>> 0) / (255 >>> 0) | 0;
        $1_1 = (Math_imul($1_1, $13_1) >>> 0) / (255 >>> 0) | 0;
        break label$4;
       case 7:
        break label$5;
       default:
        break label$4;
       };
      }
      $17_1 = (Math_imul($15_1, $17_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = (Math_imul($18_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = (Math_imul($1_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $17_1 | ($16_1 << 24 | 0) | 0 | ($18_1 << 8 | 0) | 0 | ($1_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $12_1 = $12_1 + $4_1 | 0;
     $9_1 = $9_1 + -1 | 0;
     if ($9_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $695($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0, $12_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $6_1 = (wasm2js_i32$0 = (HEAPU8[($0_1 + 63 | 0) >> 0] | 0) << 24 | 0, wasm2js_i32$1 = -16777216, wasm2js_i32$2 = $1_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   $7_1 = $1_1 & 1 | 0;
   $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $9_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $8_1;
    $10_1 = $9_1;
    label$3 : {
     $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$11_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$10_1 >> 2] | 0;
      $12_1 = $2_1 & 255 | 0;
      $13_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$7_1) {
        break label$5
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $13_1 = (Math_imul($13_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = (Math_imul($12_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $12_1 << 16 | 0 | $6_1 | 0 | ($13_1 << 8 | 0) | 0 | $2_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $10_1 = $10_1 + 4 | 0;
      $11_1 = $11_1 + -1 | 0;
      if ($11_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $9_1 = $9_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
   HEAP32[$0_1 >> 2] = $9_1;
  }
 }
 
 function $696($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0, $10_1 = 0, $14_1 = 0, $9_1 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $16_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = (wasm2js_i32$0 = (HEAPU8[($0_1 + 63 | 0) >> 0] | 0) << 24 | 0, wasm2js_i32$1 = -16777216, wasm2js_i32$2 = $3_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $5_1 = $3_1 & 1 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $11_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $12_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $13_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$14_1) {
     break label$2
    }
    $15_1 = $9_1 >>> 16 | 0;
    $16_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $10_1;
    $1_1 = $7_1;
    label$3 : while (1) {
     $3_1 = HEAP32[(($16_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $15_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $17_1 = $3_1 & 255 | 0;
     $18_1 = ($3_1 >>> 8 | 0) & 255 | 0;
     $3_1 = ($3_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$5_1) {
       break label$4
      }
      $3_1 = (Math_imul($3_1, $11_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = (Math_imul($18_1, $12_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $3_1 | $4_1 | 0 | ($18_1 << 8 | 0) | 0 | ($17_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $6_1 | 0;
     $14_1 = $14_1 + -1 | 0;
     if ($14_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $697($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $16_1 = 0, $17_1 = 0, $15_1 = 0, $18_1 = 0, $19_1 = 0, $9_1 = 0, $6_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $20_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $6_1 = (wasm2js_i32$0 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0, wasm2js_i32$1 = 255, wasm2js_i32$2 = $1_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   $7_1 = ($1_1 & 48 | 0 | 0) != (0 | 0) & ($6_1 | 0) != (255 | 0) | 0;
   $8_1 = $1_1 & 1 | 0;
   $9_1 = $6_1 ^ 255 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $11_1;
    $13_1 = $12_1;
    label$3 : {
     $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$14_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$1_1 >> 2] | 0;
      $15_1 = HEAP32[$13_1 >> 2] | 0;
      $16_1 = $15_1 & 255 | 0;
      $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$8_1) {
        break label$5
       }
       $15_1 = (Math_imul($15_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($16_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      $18_1 = $2_1 >>> 8 | 0;
      $19_1 = $2_1 >>> 16 | 0;
      label$6 : {
       if (!$7_1) {
        break label$6
       }
       $15_1 = (Math_imul($15_1, $6_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $6_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($16_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $20_1 = $2_1 >>> 24 | 0;
      $2_1 = $2_1 & 255 | 0;
      $18_1 = $18_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      label$7 : {
       label$8 : {
        switch ($10_1 | 0) {
        case 0:
         $20_1 = ((Math_imul($20_1, $9_1) >>> 0) / (255 >>> 0) | 0) + $6_1 | 0;
         $2_1 = $15_1 + ((Math_imul($2_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $18_1 = $17_1 + ((Math_imul($18_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $16_1 + ((Math_imul($19_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$7;
        case 1:
         $2_1 = $15_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $17_1 = $17_1 + $18_1 | 0;
         $18_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
         $16_1 = $16_1 + $19_1 | 0;
         $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
         break label$7;
        case 3:
         $2_1 = (Math_imul($15_1, $2_1) >>> 0) / (255 >>> 0) | 0;
         $18_1 = (Math_imul($17_1, $18_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($16_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         break label$7;
        case 7:
         break label$8;
        default:
         break label$7;
        };
       }
       $2_1 = (Math_imul($15_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $17_1 = (Math_imul($17_1 + $9_1 | 0, $18_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
       $16_1 = (Math_imul($16_1 + $9_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $18_1 << 8 | 0 | ($19_1 << 16 | 0) | 0 | $2_1 | 0 | ($20_1 << 24 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $698($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $21_1 = 0, $3_1 = 0, $23_1 = 0, $24_1 = 0, $22_1 = 0, $12_1 = 0, $4_1 = 0, $13_1 = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $25_1 = 0, $8_1 = 0, $10_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = (wasm2js_i32$0 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0, wasm2js_i32$1 = 255, wasm2js_i32$2 = $3_1 & 2 | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $5_1 = ($3_1 & 48 | 0 | 0) != (0 | 0) & ($4_1 | 0) != (255 | 0) | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = $4_1 ^ 255 | 0;
  $13_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = $13_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $2_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $1_1 = $2_1 & 255 | 0;
     $21_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $22_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $2_1 = HEAP32[$3_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $22_1 = (Math_imul($22_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = (Math_imul($1_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $23_1 = $2_1 >>> 8 | 0;
     $24_1 = $2_1 >>> 16 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $22_1 = (Math_imul($22_1, $4_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $4_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = (Math_imul($1_1, $4_1) >>> 0) / (255 >>> 0) | 0;
     }
     $25_1 = $2_1 >>> 24 | 0;
     $2_1 = $2_1 & 255 | 0;
     $23_1 = $23_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     label$6 : {
      label$7 : {
       switch ($7_1 | 0) {
       case 0:
        $25_1 = ((Math_imul($25_1, $12_1) >>> 0) / (255 >>> 0) | 0) + $4_1 | 0;
        $2_1 = $22_1 + ((Math_imul($2_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $23_1 = $21_1 + ((Math_imul($23_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $1_1 + ((Math_imul($24_1, $12_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$6;
       case 1:
        $2_1 = $22_1 + $2_1 | 0;
        $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $21_1 = $21_1 + $23_1 | 0;
        $23_1 = $21_1 >>> 0 < 255 >>> 0 ? $21_1 : 255;
        $1_1 = $1_1 + $24_1 | 0;
        $24_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        break label$6;
       case 3:
        $2_1 = (Math_imul($22_1, $2_1) >>> 0) / (255 >>> 0) | 0;
        $23_1 = (Math_imul($21_1, $23_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($1_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        break label$6;
       case 7:
        break label$7;
       default:
        break label$6;
       };
      }
      $2_1 = (Math_imul($22_1 + $12_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
      $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      $21_1 = (Math_imul($21_1 + $12_1 | 0, $23_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = $21_1 >>> 0 < 255 >>> 0 ? $21_1 : 255;
      $1_1 = (Math_imul($1_1 + $12_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
     }
     HEAP32[$3_1 >> 2] = $23_1 << 8 | 0 | ($24_1 << 16 | 0) | 0 | $2_1 | 0 | ($25_1 << 24 | 0) | 0;
     $3_1 = $3_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $13_1 = $13_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $13_1;
 }
 
 function $699($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $11_1 = 0, $10_1 = 0, $14_1 = 0, $4_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = $4_1 + $3_1 | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ($4_1 >>> 14 | 0) & 262140 | 0;
  $9_1 = $3_1 + $3_1 | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $7_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $14_1 = $11_1;
    $2_1 = $10_1;
    $1_1 = $4_1;
    label$3 : {
     if (!($11_1 & 1 | 0)) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = (HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + $8_1 | 0) >> 2] | 0) & 16777215 | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $11_1 + -1 | 0;
     $1_1 = $5_1;
    }
    label$4 : {
     if (($11_1 | 0) == (1 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      HEAP32[$2_1 >> 2] = (HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0) & 16777215 | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + ((($1_1 + $3_1 | 0) >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0) & 16777215 | 0;
      $2_1 = $2_1 + 8 | 0;
      $1_1 = $1_1 + $9_1 | 0;
      $14_1 = $14_1 + -2 | 0;
      if ($14_1) {
       continue label$5
      }
      break label$5;
     };
    }
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $700($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $1_1 = 0, $10_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $3_1 = 0, $4_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $3_1 = $1_1 & 48 | 0;
   $4_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $5_1;
    $7_1 = $6_1;
    label$3 : {
     $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$7_1 >> 2] | 0;
      $9_1 = $2_1 >>> 24 | 0;
      $10_1 = $2_1 & 255 | 0;
      $11_1 = HEAP32[$1_1 >> 2] | 0;
      $12_1 = $11_1 >>> 8 | 0;
      $13_1 = $11_1 >>> 16 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$3_1) {
        break label$5
       }
       if (($9_1 | 0) == (255 | 0)) {
        break label$5
       }
       $10_1 = (Math_imul($10_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $14_1 = (Math_imul($14_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $11_1 & 255 | 0;
      $11_1 = $12_1 & 255 | 0;
      $12_1 = $13_1 & 255 | 0;
      label$6 : {
       label$7 : {
        switch ($4_1 | 0) {
        case 0:
         $9_1 = $9_1 ^ 255 | 0;
         $2_1 = $10_1 + ((Math_imul($9_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $11_1 = $14_1 + ((Math_imul($11_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $12_1 = $15_1 + ((Math_imul($12_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$6;
        case 1:
         $2_1 = $10_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $11_1 = $14_1 + $11_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $12_1 = $15_1 + $12_1 | 0;
         $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
         break label$6;
        case 3:
         $2_1 = ((Math_imul($10_1, $2_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $11_1 = ((Math_imul($14_1, $11_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $12_1 = ((Math_imul($15_1, $12_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         break label$6;
        case 7:
         break label$7;
        default:
         break label$6;
        };
       }
       $9_1 = $9_1 ^ 255 | 0;
       $2_1 = (Math_imul($10_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $11_1 = (Math_imul($14_1 + $9_1 | 0, $11_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
       $12_1 = (Math_imul($15_1 + $9_1 | 0, $12_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | ($12_1 << 16 | 0) | 0 | $2_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $7_1 = $7_1 + 4 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $5_1 = $5_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $6_1 = $6_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
   HEAP32[$0_1 >> 2] = $6_1;
  }
 }
 
 function $701($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $19_1 = 0, $15_1 = 0, $2_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $11_1 = 0, $9_1 = 0, $14_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $9_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $10_1;
    $14_1 = $7_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($14_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $15_1 = $1_1 >>> 24 | 0;
     $16_1 = $1_1 & 255 | 0;
     $17_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $18_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     $3_1 = $1_1 >>> 8 | 0;
     $19_1 = $1_1 >>> 16 | 0;
     label$4 : {
      if (!$4_1) {
       break label$4
      }
      if (($15_1 | 0) == (255 | 0)) {
       break label$4
      }
      $16_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = (Math_imul($18_1, $15_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $3_1 = $3_1 & 255 | 0;
     $19_1 = $19_1 & 255 | 0;
     label$5 : {
      label$6 : {
       switch ($5_1 | 0) {
       case 0:
        $15_1 = $15_1 ^ 255 | 0;
        $1_1 = $16_1 + ((Math_imul($15_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $3_1 = $17_1 + ((Math_imul($3_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $19_1 = $18_1 + ((Math_imul($19_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$5;
       case 1:
        $1_1 = $16_1 + $1_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        $3_1 = $17_1 + $3_1 | 0;
        $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $19_1 = $18_1 + $19_1 | 0;
        $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
        break label$5;
       case 3:
        $1_1 = ((Math_imul($16_1, $1_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $3_1 = ((Math_imul($17_1, $3_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $19_1 = ((Math_imul($18_1, $19_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        break label$5;
       case 7:
        break label$6;
       default:
        break label$5;
       };
      }
      $15_1 = $15_1 ^ 255 | 0;
      $1_1 = (Math_imul($16_1 + $15_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $3_1 = (Math_imul($17_1 + $15_1 | 0, $3_1) >>> 0) / (255 >>> 0) | 0;
      $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
      $19_1 = (Math_imul($18_1 + $15_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
      $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $3_1 << 8 | 0 | ($19_1 << 16 | 0) | 0 | $1_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $14_1 + $6_1 | 0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $702($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $6_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
   $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $7_1;
    $9_1 = $8_1;
    label$3 : {
     $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$10_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$9_1 >> 2] | 0;
      $11_1 = $2_1 & 255 | 0;
      $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$6_1) {
        break label$5
       }
       $11_1 = (Math_imul($11_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = (Math_imul($12_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = (Math_imul($2_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $12_1 << 8 | 0 | ($2_1 << 16 | 0) | 0 | $11_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $9_1 = $9_1 + 4 | 0;
      $10_1 = $10_1 + -1 | 0;
      if ($10_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $8_1 = $8_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[$0_1 >> 2] = $8_1;
  }
 }
 
 function $703($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $15_1 = 0, $8_1 = 0, $12_1 = 0, $7_1 = 0, $16_1 = 0, $17_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $9_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $10_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $11_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$2
    }
    $13_1 = $7_1 >>> 16 | 0;
    $14_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $1_1 = $5_1;
    label$3 : while (1) {
     $15_1 = HEAP32[(($14_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $13_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $16_1 = $15_1 & 255 | 0;
     $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $16_1 = (Math_imul($16_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $10_1) >>> 0) / (255 >>> 0) | 0;
      $15_1 = (Math_imul($15_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $17_1 << 8 | 0 | $16_1 | 0 | ($15_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $4_1 | 0;
     $12_1 = $12_1 + -1 | 0;
     if ($12_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $704($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $15_1 = 0, $1_1 = 0, $16_1 = 0, $19_1 = 0, $20_1 = 0, $17_1 = 0, $18_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 48 | 0;
   $8_1 = $1_1 & 2 | 0;
   $9_1 = $1_1 & 1 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $11_1;
    $13_1 = $12_1;
    label$3 : {
     $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$14_1) {
      break label$3
     }
     label$4 : while (1) {
      $15_1 = HEAP32[$1_1 >> 2] | 0;
      $2_1 = HEAP32[$13_1 >> 2] | 0;
      $16_1 = $2_1 & 255 | 0;
      $17_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $18_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$9_1) {
        break label$5
       }
       $16_1 = (Math_imul($16_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($18_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 >>> 24 | 0;
      label$6 : {
       if (!$8_1) {
        break label$6
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      $19_1 = $15_1 >>> 8 | 0;
      $20_1 = $15_1 >>> 16 | 0;
      label$7 : {
       if (!$7_1) {
        break label$7
       }
       if ($2_1 >>> 0 > 254 >>> 0) {
        break label$7
       }
       $16_1 = (Math_imul($2_1, $16_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($2_1, $17_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($2_1, $18_1) >>> 0) / (255 >>> 0) | 0;
      }
      $15_1 = $15_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      $20_1 = $20_1 & 255 | 0;
      label$8 : {
       label$9 : {
        switch ($10_1 | 0) {
        case 0:
         $2_1 = 255 - $2_1 | 0;
         $15_1 = $16_1 + ((Math_imul($2_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $17_1 + ((Math_imul($2_1, $19_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $20_1 = $18_1 + ((Math_imul($2_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$8;
        case 1:
         $2_1 = $16_1 + $15_1 | 0;
         $15_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $17_1 + $19_1 | 0;
         $19_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $18_1 + $20_1 | 0;
         $20_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$8;
        case 3:
         $15_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($17_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         $20_1 = (Math_imul($18_1, $20_1) >>> 0) / (255 >>> 0) | 0;
         break label$8;
        case 7:
         break label$9;
        default:
         break label$8;
        };
       }
       $2_1 = 255 - $2_1 | 0;
       $15_1 = (Math_imul($16_1 + $2_1 | 0, $15_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = $15_1 >>> 0 < 255 >>> 0 ? $15_1 : 255;
       $16_1 = (Math_imul($17_1 + $2_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
       $2_1 = (Math_imul($18_1 + $2_1 | 0, $20_1) >>> 0) / (255 >>> 0) | 0;
       $20_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $19_1 << 8 | 0 | ($20_1 << 16 | 0) | 0 | $15_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $705($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $21_1 = 0, $24_1 = 0, $25_1 = 0, $22_1 = 0, $23_1 = 0, $12_1 = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $8_1 = 0, $10_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = $3_1 & 2 | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $13_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = $12_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $2_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $21_1 = $2_1 & 255 | 0;
     $22_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $23_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $21_1 = (Math_imul($21_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($22_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($23_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $2_1 = $2_1 >>> 24 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $2_1 = (Math_imul($2_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     $24_1 = $1_1 >>> 8 | 0;
     $25_1 = $1_1 >>> 16 | 0;
     label$6 : {
      if (!$4_1) {
       break label$6
      }
      if ($2_1 >>> 0 > 254 >>> 0) {
       break label$6
      }
      $21_1 = (Math_imul($2_1, $21_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($2_1, $22_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($2_1, $23_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     $25_1 = $25_1 & 255 | 0;
     label$7 : {
      label$8 : {
       switch ($7_1 | 0) {
       case 0:
        $2_1 = 255 - $2_1 | 0;
        $1_1 = $21_1 + ((Math_imul($2_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $22_1 + ((Math_imul($2_1, $24_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $25_1 = $23_1 + ((Math_imul($2_1, $25_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$7;
       case 1:
        $2_1 = $21_1 + $1_1 | 0;
        $1_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $22_1 + $24_1 | 0;
        $24_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $23_1 + $25_1 | 0;
        $25_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        break label$7;
       case 3:
        $1_1 = (Math_imul($21_1, $1_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($22_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        $25_1 = (Math_imul($23_1, $25_1) >>> 0) / (255 >>> 0) | 0;
        break label$7;
       case 7:
        break label$8;
       default:
        break label$7;
       };
      }
      $2_1 = 255 - $2_1 | 0;
      $1_1 = (Math_imul($21_1 + $2_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $21_1 = (Math_imul($22_1 + $2_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $21_1 >>> 0 < 255 >>> 0 ? $21_1 : 255;
      $2_1 = (Math_imul($23_1 + $2_1 | 0, $25_1) >>> 0) / (255 >>> 0) | 0;
      $25_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
     }
     HEAP32[$3_1 >> 2] = $24_1 << 8 | 0 | ($25_1 << 16 | 0) | 0 | $1_1 | 0;
     $3_1 = $3_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $12_1 = $12_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $12_1;
 }
 
 function $706($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $11_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $6_1 = ($5_1 | 0) / (2 | 0) | 0;
  $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$2
    }
    $9_1 = $6_1 >>> 16 | 0;
    $10_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $7_1;
    $1_1 = $4_1;
    label$3 : while (1) {
     $11_1 = HEAP32[(($10_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $9_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = ($11_1 << 16 | 0) & 16711680 | 0 | ($11_1 & 65280 | 0) | 0 | (($11_1 >>> 16 | 0) & 255 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $3_1 | 0;
     $8_1 = $8_1 + -1 | 0;
     if ($8_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $6_1 = $6_1 + $5_1 | 0;
   $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
 }
 
 function $707($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $1_1 = 0, $10_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $3_1 = 0, $4_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $3_1 = $1_1 & 48 | 0;
   $4_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $5_1;
    $7_1 = $6_1;
    label$3 : {
     $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$7_1 >> 2] | 0;
      $9_1 = $2_1 >>> 24 | 0;
      $10_1 = $2_1 & 255 | 0;
      $11_1 = HEAP32[$1_1 >> 2] | 0;
      $12_1 = $11_1 >>> 8 | 0;
      $13_1 = $11_1 >>> 16 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$3_1) {
        break label$5
       }
       if (($9_1 | 0) == (255 | 0)) {
        break label$5
       }
       $10_1 = (Math_imul($10_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $14_1 = (Math_imul($14_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $11_1 & 255 | 0;
      $11_1 = $12_1 & 255 | 0;
      $12_1 = $13_1 & 255 | 0;
      label$6 : {
       label$7 : {
        switch ($4_1 | 0) {
        case 0:
         $9_1 = $9_1 ^ 255 | 0;
         $12_1 = $10_1 + ((Math_imul($12_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $11_1 = $14_1 + ((Math_imul($11_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $2_1 = $15_1 + ((Math_imul($9_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$6;
        case 1:
         $12_1 = $10_1 + $12_1 | 0;
         $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
         $11_1 = $14_1 + $11_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $2_1 = $15_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$6;
        case 3:
         $12_1 = ((Math_imul($10_1, $12_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $11_1 = ((Math_imul($14_1, $11_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $2_1 = ((Math_imul($15_1, $2_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         break label$6;
        case 7:
         break label$7;
        default:
         break label$6;
        };
       }
       $9_1 = $9_1 ^ 255 | 0;
       $12_1 = (Math_imul($10_1 + $9_1 | 0, $12_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
       $11_1 = (Math_imul($14_1 + $9_1 | 0, $11_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
       $2_1 = (Math_imul($15_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | $2_1 | 0 | ($12_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $7_1 = $7_1 + 4 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $5_1 = $5_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $6_1 = $6_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
   HEAP32[$0_1 >> 2] = $6_1;
  }
 }
 
 function $708($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $19_1 = 0, $15_1 = 0, $2_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $11_1 = 0, $9_1 = 0, $14_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $9_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $10_1;
    $14_1 = $7_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($14_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $15_1 = $1_1 >>> 24 | 0;
     $16_1 = $1_1 & 255 | 0;
     $17_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $18_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     $3_1 = $1_1 >>> 8 | 0;
     $19_1 = $1_1 >>> 16 | 0;
     label$4 : {
      if (!$4_1) {
       break label$4
      }
      if (($15_1 | 0) == (255 | 0)) {
       break label$4
      }
      $16_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = (Math_imul($18_1, $15_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $3_1 = $3_1 & 255 | 0;
     $19_1 = $19_1 & 255 | 0;
     label$5 : {
      label$6 : {
       switch ($5_1 | 0) {
       case 0:
        $15_1 = $15_1 ^ 255 | 0;
        $19_1 = $16_1 + ((Math_imul($19_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $3_1 = $17_1 + ((Math_imul($3_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $1_1 = $18_1 + ((Math_imul($15_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$5;
       case 1:
        $19_1 = $16_1 + $19_1 | 0;
        $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
        $3_1 = $17_1 + $3_1 | 0;
        $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $1_1 = $18_1 + $1_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        break label$5;
       case 3:
        $19_1 = ((Math_imul($16_1, $19_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $3_1 = ((Math_imul($17_1, $3_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $1_1 = ((Math_imul($18_1, $1_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        break label$5;
       case 7:
        break label$6;
       default:
        break label$5;
       };
      }
      $15_1 = $15_1 ^ 255 | 0;
      $19_1 = (Math_imul($16_1 + $15_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
      $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
      $3_1 = (Math_imul($17_1 + $15_1 | 0, $3_1) >>> 0) / (255 >>> 0) | 0;
      $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
      $1_1 = (Math_imul($18_1 + $15_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $3_1 << 8 | 0 | $1_1 | 0 | ($19_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $14_1 + $6_1 | 0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $709($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $6_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
   $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $7_1;
    $9_1 = $8_1;
    label$3 : {
     $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$10_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$9_1 >> 2] | 0;
      $11_1 = $2_1 & 255 | 0;
      $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$6_1) {
        break label$5
       }
       $11_1 = (Math_imul($11_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = (Math_imul($12_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = (Math_imul($2_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $12_1 << 8 | 0 | $2_1 | 0 | ($11_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $9_1 = $9_1 + 4 | 0;
      $10_1 = $10_1 + -1 | 0;
      if ($10_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $8_1 = $8_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[$0_1 >> 2] = $8_1;
  }
 }
 
 function $710($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $15_1 = 0, $8_1 = 0, $12_1 = 0, $7_1 = 0, $16_1 = 0, $17_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $9_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $10_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $11_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$2
    }
    $13_1 = $7_1 >>> 16 | 0;
    $14_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $1_1 = $5_1;
    label$3 : while (1) {
     $15_1 = HEAP32[(($14_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $13_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $16_1 = $15_1 & 255 | 0;
     $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $16_1 = (Math_imul($16_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $10_1) >>> 0) / (255 >>> 0) | 0;
      $15_1 = (Math_imul($15_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $17_1 << 8 | 0 | ($16_1 << 16 | 0) | 0 | $15_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $4_1 | 0;
     $12_1 = $12_1 + -1 | 0;
     if ($12_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $711($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $16_1 = 0, $15_1 = 0, $19_1 = 0, $20_1 = 0, $17_1 = 0, $18_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 48 | 0;
   $8_1 = $1_1 & 2 | 0;
   $9_1 = $1_1 & 1 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $11_1;
    $13_1 = $12_1;
    label$3 : {
     $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$14_1) {
      break label$3
     }
     label$4 : while (1) {
      $15_1 = HEAP32[$1_1 >> 2] | 0;
      $2_1 = HEAP32[$13_1 >> 2] | 0;
      $16_1 = $2_1 & 255 | 0;
      $17_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $18_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$9_1) {
        break label$5
       }
       $16_1 = (Math_imul($16_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($18_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 >>> 24 | 0;
      label$6 : {
       if (!$8_1) {
        break label$6
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      $19_1 = $15_1 >>> 8 | 0;
      $20_1 = $15_1 >>> 16 | 0;
      label$7 : {
       if (!$7_1) {
        break label$7
       }
       if ($2_1 >>> 0 > 254 >>> 0) {
        break label$7
       }
       $16_1 = (Math_imul($2_1, $16_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($2_1, $17_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($2_1, $18_1) >>> 0) / (255 >>> 0) | 0;
      }
      $15_1 = $15_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      $20_1 = $20_1 & 255 | 0;
      label$8 : {
       label$9 : {
        switch ($10_1 | 0) {
        case 0:
         $2_1 = 255 - $2_1 | 0;
         $20_1 = $16_1 + ((Math_imul($2_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $17_1 + ((Math_imul($2_1, $19_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $15_1 = $18_1 + ((Math_imul($2_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$8;
        case 1:
         $2_1 = $16_1 + $20_1 | 0;
         $20_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $17_1 + $19_1 | 0;
         $19_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $18_1 + $15_1 | 0;
         $15_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$8;
        case 3:
         $20_1 = (Math_imul($16_1, $20_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($17_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         $15_1 = (Math_imul($18_1, $15_1) >>> 0) / (255 >>> 0) | 0;
         break label$8;
        case 7:
         break label$9;
        default:
         break label$8;
        };
       }
       $2_1 = 255 - $2_1 | 0;
       $16_1 = (Math_imul($16_1 + $2_1 | 0, $20_1) >>> 0) / (255 >>> 0) | 0;
       $20_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
       $16_1 = (Math_imul($17_1 + $2_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
       $2_1 = (Math_imul($18_1 + $2_1 | 0, $15_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $19_1 << 8 | 0 | $15_1 | 0 | ($20_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $712($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $21_1 = 0, $3_1 = 0, $24_1 = 0, $25_1 = 0, $22_1 = 0, $23_1 = 0, $12_1 = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $8_1 = 0, $10_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = $3_1 & 2 | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $13_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = $12_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $2_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $21_1 = $2_1 & 255 | 0;
     $22_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $23_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $21_1 = (Math_imul($21_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($22_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($23_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $2_1 = $2_1 >>> 24 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $2_1 = (Math_imul($2_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     $24_1 = $1_1 >>> 8 | 0;
     $25_1 = $1_1 >>> 16 | 0;
     label$6 : {
      if (!$4_1) {
       break label$6
      }
      if ($2_1 >>> 0 > 254 >>> 0) {
       break label$6
      }
      $21_1 = (Math_imul($2_1, $21_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($2_1, $22_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($2_1, $23_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     $25_1 = $25_1 & 255 | 0;
     label$7 : {
      label$8 : {
       switch ($7_1 | 0) {
       case 0:
        $2_1 = 255 - $2_1 | 0;
        $25_1 = $21_1 + ((Math_imul($2_1, $25_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $22_1 + ((Math_imul($2_1, $24_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $1_1 = $23_1 + ((Math_imul($2_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$7;
       case 1:
        $2_1 = $21_1 + $25_1 | 0;
        $25_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $22_1 + $24_1 | 0;
        $24_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $23_1 + $1_1 | 0;
        $1_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        break label$7;
       case 3:
        $25_1 = (Math_imul($21_1, $25_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($22_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        $1_1 = (Math_imul($23_1, $1_1) >>> 0) / (255 >>> 0) | 0;
        break label$7;
       case 7:
        break label$8;
       default:
        break label$7;
       };
      }
      $2_1 = 255 - $2_1 | 0;
      $21_1 = (Math_imul($21_1 + $2_1 | 0, $25_1) >>> 0) / (255 >>> 0) | 0;
      $25_1 = $21_1 >>> 0 < 255 >>> 0 ? $21_1 : 255;
      $21_1 = (Math_imul($22_1 + $2_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $21_1 >>> 0 < 255 >>> 0 ? $21_1 : 255;
      $2_1 = (Math_imul($23_1 + $2_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
     }
     HEAP32[$3_1 >> 2] = $24_1 << 8 | 0 | $1_1 | 0 | ($25_1 << 16 | 0) | 0;
     $3_1 = $3_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $12_1 = $12_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $12_1;
 }
 
 function $713($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $11_1 = 0, $10_1 = 0, $14_1 = 0, $4_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = $4_1 + $3_1 | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ($4_1 >>> 14 | 0) & 262140 | 0;
  $9_1 = $3_1 + $3_1 | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $7_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $14_1 = $11_1;
    $2_1 = $10_1;
    $1_1 = $4_1;
    label$3 : {
     if (!($11_1 & 1 | 0)) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + $8_1 | 0) >> 2] | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $11_1 + -1 | 0;
     $1_1 = $5_1;
    }
    label$4 : {
     if (($11_1 | 0) == (1 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + ((($1_1 + $3_1 | 0) >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
      $2_1 = $2_1 + 8 | 0;
      $1_1 = $1_1 + $9_1 | 0;
      $14_1 = $14_1 + -2 | 0;
      if ($14_1) {
       continue label$5
      }
      break label$5;
     };
    }
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $714($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $11_1 = 0, $9_1 = 0, $1_1 = 0, $12_1 = 0, $10_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $16_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $3_1 = $1_1 & 48 | 0;
   $4_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $5_1;
    $7_1 = $6_1;
    label$3 : {
     $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$7_1 >> 2] | 0;
      $9_1 = $2_1 >>> 24 | 0;
      $10_1 = $2_1 & 255 | 0;
      $11_1 = HEAP32[$1_1 >> 2] | 0;
      $12_1 = $11_1 >>> 8 | 0;
      $13_1 = $11_1 >>> 16 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$3_1) {
        break label$5
       }
       if (($9_1 | 0) == (255 | 0)) {
        break label$5
       }
       $10_1 = (Math_imul($10_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $14_1 = (Math_imul($14_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      }
      $16_1 = $11_1 >>> 24 | 0;
      $2_1 = $11_1 & 255 | 0;
      $11_1 = $12_1 & 255 | 0;
      $12_1 = $13_1 & 255 | 0;
      label$6 : {
       label$7 : {
        switch ($4_1 | 0) {
        case 0:
         $13_1 = $9_1 ^ 255 | 0;
         $16_1 = $9_1 + ((Math_imul($13_1, $16_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $2_1 = $10_1 + ((Math_imul($13_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $11_1 = $14_1 + ((Math_imul($11_1, $13_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $12_1 = $15_1 + ((Math_imul($12_1, $13_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$6;
        case 1:
         $2_1 = $10_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $11_1 = $14_1 + $11_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $9_1 = $15_1 + $12_1 | 0;
         $12_1 = $9_1 >>> 0 < 255 >>> 0 ? $9_1 : 255;
         break label$6;
        case 3:
         $2_1 = ((Math_imul($10_1, $2_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $11_1 = ((Math_imul($14_1, $11_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $12_1 = ((Math_imul($15_1, $12_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         break label$6;
        case 7:
         break label$7;
        default:
         break label$6;
        };
       }
       $9_1 = $9_1 ^ 255 | 0;
       $2_1 = (Math_imul($10_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $11_1 = (Math_imul($14_1 + $9_1 | 0, $11_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
       $9_1 = (Math_imul($15_1 + $9_1 | 0, $12_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = $9_1 >>> 0 < 255 >>> 0 ? $9_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | ($12_1 << 16 | 0) | 0 | $2_1 | 0 | ($16_1 << 24 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $7_1 = $7_1 + 4 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $5_1 = $5_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $6_1 = $6_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
   HEAP32[$0_1 >> 2] = $6_1;
  }
 }
 
 function $715($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $18_1 = 0, $19_1 = 0, $2_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0, $11_1 = 0, $21_1 = 0, $9_1 = 0, $14_1 = 0, $20_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $9_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $10_1;
    $14_1 = $7_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($14_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $3_1 = $1_1 >>> 24 | 0;
     $15_1 = $1_1 & 255 | 0;
     $16_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $17_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     $18_1 = $1_1 >>> 8 | 0;
     $19_1 = $1_1 >>> 16 | 0;
     label$4 : {
      if (!$4_1) {
       break label$4
      }
      if (($3_1 | 0) == (255 | 0)) {
       break label$4
      }
      $15_1 = (Math_imul($15_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      $16_1 = (Math_imul($16_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $3_1) >>> 0) / (255 >>> 0) | 0;
     }
     $20_1 = $1_1 >>> 24 | 0;
     $1_1 = $1_1 & 255 | 0;
     $18_1 = $18_1 & 255 | 0;
     $19_1 = $19_1 & 255 | 0;
     label$5 : {
      label$6 : {
       switch ($5_1 | 0) {
       case 0:
        $21_1 = $3_1 ^ 255 | 0;
        $20_1 = $3_1 + ((Math_imul($21_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $1_1 = $15_1 + ((Math_imul($21_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $18_1 = $16_1 + ((Math_imul($18_1, $21_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $19_1 = $17_1 + ((Math_imul($19_1, $21_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$5;
       case 1:
        $1_1 = $15_1 + $1_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        $3_1 = $16_1 + $18_1 | 0;
        $18_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $3_1 = $17_1 + $19_1 | 0;
        $19_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        break label$5;
       case 3:
        $1_1 = ((Math_imul($15_1, $1_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $18_1 = ((Math_imul($16_1, $18_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $19_1 = ((Math_imul($17_1, $19_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        break label$5;
       case 7:
        break label$6;
       default:
        break label$5;
       };
      }
      $3_1 = $3_1 ^ 255 | 0;
      $1_1 = (Math_imul($15_1 + $3_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $18_1 = (Math_imul($16_1 + $3_1 | 0, $18_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = $18_1 >>> 0 < 255 >>> 0 ? $18_1 : 255;
      $3_1 = (Math_imul($17_1 + $3_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
      $19_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $18_1 << 8 | 0 | ($19_1 << 16 | 0) | 0 | $1_1 | 0 | ($20_1 << 24 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $14_1 + $6_1 | 0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $716($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 2 | 0;
   $8_1 = $1_1 & 1 | 0;
   $9_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $10_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $9_1;
    $11_1 = $10_1;
    label$3 : {
     $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$12_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$11_1 >> 2] | 0;
      $13_1 = $2_1 & 255 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$8_1) {
        break label$5
       }
       $13_1 = (Math_imul($13_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $14_1 = (Math_imul($14_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 >>> 24 | 0;
      label$6 : {
       if (!$7_1) {
        break label$6
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $14_1 << 8 | 0 | ($15_1 << 16 | 0) | 0 | $13_1 | 0 | ($2_1 << 24 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $11_1 = $11_1 + 4 | 0;
      $12_1 = $12_1 + -1 | 0;
      if ($12_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $9_1 = $9_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $10_1 = $10_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $9_1;
   HEAP32[$0_1 >> 2] = $10_1;
  }
 }
 
 function $717($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $10_1 = 0, $15_1 = 0, $9_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 2 | 0;
  $5_1 = $3_1 & 1 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $11_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $12_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $13_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $15_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$15_1) {
     break label$2
    }
    $16_1 = $9_1 >>> 16 | 0;
    $17_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $10_1;
    $3_1 = $7_1;
    label$3 : while (1) {
     $2_1 = HEAP32[(($17_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $16_1) | 0) + (($3_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $18_1 = $2_1 & 255 | 0;
     $19_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $20_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$5_1) {
       break label$4
      }
      $18_1 = (Math_imul($18_1, $12_1) >>> 0) / (255 >>> 0) | 0;
      $19_1 = (Math_imul($19_1, $13_1) >>> 0) / (255 >>> 0) | 0;
      $20_1 = (Math_imul($20_1, $14_1) >>> 0) / (255 >>> 0) | 0;
     }
     $2_1 = $2_1 >>> 24 | 0;
     label$5 : {
      if (!$4_1) {
       break label$5
      }
      $2_1 = (Math_imul($2_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$1_1 >> 2] = $19_1 << 8 | 0 | $18_1 | 0 | ($20_1 << 16 | 0) | 0 | ($2_1 << 24 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + $6_1 | 0;
     $15_1 = $15_1 + -1 | 0;
     if ($15_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $718($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $16_1 = 0, $19_1 = 0, $20_1 = 0, $17_1 = 0, $18_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $22_1 = 0, $14_1 = 0, $21_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 48 | 0;
   $8_1 = $1_1 & 2 | 0;
   $9_1 = $1_1 & 1 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $13_1 = $11_1;
    $14_1 = $12_1;
    label$3 : {
     $15_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$15_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$13_1 >> 2] | 0;
      $1_1 = HEAP32[$14_1 >> 2] | 0;
      $16_1 = $1_1 & 255 | 0;
      $17_1 = ($1_1 >>> 8 | 0) & 255 | 0;
      $18_1 = ($1_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$9_1) {
        break label$5
       }
       $16_1 = (Math_imul($16_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($18_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $1_1 = $1_1 >>> 24 | 0;
      label$6 : {
       if (!$8_1) {
        break label$6
       }
       $1_1 = (Math_imul($1_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      $19_1 = $2_1 >>> 8 | 0;
      $20_1 = $2_1 >>> 16 | 0;
      label$7 : {
       if (!$7_1) {
        break label$7
       }
       if ($1_1 >>> 0 > 254 >>> 0) {
        break label$7
       }
       $16_1 = (Math_imul($1_1, $16_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($1_1, $17_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($1_1, $18_1) >>> 0) / (255 >>> 0) | 0;
      }
      $21_1 = $2_1 >>> 24 | 0;
      $2_1 = $2_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      $20_1 = $20_1 & 255 | 0;
      label$8 : {
       label$9 : {
        switch ($10_1 | 0) {
        case 0:
         $22_1 = 255 - $1_1 | 0;
         $21_1 = $1_1 + ((Math_imul($22_1, $21_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $2_1 = $16_1 + ((Math_imul($22_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $17_1 + ((Math_imul($22_1, $19_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $20_1 = $18_1 + ((Math_imul($22_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$8;
        case 1:
         $2_1 = $16_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $1_1 = $17_1 + $19_1 | 0;
         $19_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
         $1_1 = $18_1 + $20_1 | 0;
         $20_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
         break label$8;
        case 3:
         $2_1 = (Math_imul($16_1, $2_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($17_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         $20_1 = (Math_imul($18_1, $20_1) >>> 0) / (255 >>> 0) | 0;
         break label$8;
        case 7:
         break label$9;
        default:
         break label$8;
        };
       }
       $1_1 = 255 - $1_1 | 0;
       $2_1 = (Math_imul($16_1 + $1_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $16_1 = (Math_imul($17_1 + $1_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
       $1_1 = (Math_imul($18_1 + $1_1 | 0, $20_1) >>> 0) / (255 >>> 0) | 0;
       $20_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      }
      HEAP32[$13_1 >> 2] = $19_1 << 8 | 0 | ($20_1 << 16 | 0) | 0 | $2_1 | 0 | ($21_1 << 24 | 0) | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + 4 | 0;
      $15_1 = $15_1 + -1 | 0;
      if ($15_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $1_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $719($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $21_1 = 0, $24_1 = 0, $25_1 = 0, $22_1 = 0, $23_1 = 0, $1_1 = 0, $12_1 = 0, $17_1 = 0, $27_1 = 0, $11_1 = 0, $20_1 = 0, $26_1 = 0, $8_1 = 0, $10_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = $3_1 & 2 | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $13_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $12_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $3_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $21_1 = $3_1 & 255 | 0;
     $22_1 = ($3_1 >>> 8 | 0) & 255 | 0;
     $23_1 = ($3_1 >>> 16 | 0) & 255 | 0;
     $2_1 = HEAP32[$1_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $21_1 = (Math_imul($21_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($22_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($23_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $3_1 = $3_1 >>> 24 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $3_1 = (Math_imul($3_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     $24_1 = $2_1 >>> 8 | 0;
     $25_1 = $2_1 >>> 16 | 0;
     label$6 : {
      if (!$4_1) {
       break label$6
      }
      if ($3_1 >>> 0 > 254 >>> 0) {
       break label$6
      }
      $21_1 = (Math_imul($3_1, $21_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($3_1, $22_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($3_1, $23_1) >>> 0) / (255 >>> 0) | 0;
     }
     $26_1 = $2_1 >>> 24 | 0;
     $2_1 = $2_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     $25_1 = $25_1 & 255 | 0;
     label$7 : {
      label$8 : {
       switch ($7_1 | 0) {
       case 0:
        $27_1 = 255 - $3_1 | 0;
        $26_1 = $3_1 + ((Math_imul($27_1, $26_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $2_1 = $21_1 + ((Math_imul($27_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $22_1 + ((Math_imul($27_1, $24_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $25_1 = $23_1 + ((Math_imul($27_1, $25_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$7;
       case 1:
        $2_1 = $21_1 + $2_1 | 0;
        $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $3_1 = $22_1 + $24_1 | 0;
        $24_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $3_1 = $23_1 + $25_1 | 0;
        $25_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        break label$7;
       case 3:
        $2_1 = (Math_imul($21_1, $2_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($22_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        $25_1 = (Math_imul($23_1, $25_1) >>> 0) / (255 >>> 0) | 0;
        break label$7;
       case 7:
        break label$8;
       default:
        break label$7;
       };
      }
      $3_1 = 255 - $3_1 | 0;
      $2_1 = (Math_imul($21_1 + $3_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
      $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      $21_1 = (Math_imul($22_1 + $3_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $21_1 >>> 0 < 255 >>> 0 ? $21_1 : 255;
      $3_1 = (Math_imul($23_1 + $3_1 | 0, $25_1) >>> 0) / (255 >>> 0) | 0;
      $25_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
     }
     HEAP32[$1_1 >> 2] = $24_1 << 8 | 0 | ($25_1 << 16 | 0) | 0 | $2_1 | 0 | ($26_1 << 24 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $3_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $12_1 = $12_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $12_1;
 }
 
 function $720($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $11_1 = 0, $10_1 = 0, $14_1 = 0, $4_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = $4_1 + $3_1 | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ($4_1 >>> 14 | 0) & 262140 | 0;
  $9_1 = $3_1 + $3_1 | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $7_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $14_1 = $11_1;
    $2_1 = $10_1;
    $1_1 = $4_1;
    label$3 : {
     if (!($11_1 & 1 | 0)) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = (HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + $8_1 | 0) >> 2] | 0) >>> 8 | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $11_1 + -1 | 0;
     $1_1 = $5_1;
    }
    label$4 : {
     if (($11_1 | 0) == (1 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      HEAP32[$2_1 >> 2] = (HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0) >>> 8 | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + ((($1_1 + $3_1 | 0) >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0) >>> 8 | 0;
      $2_1 = $2_1 + 8 | 0;
      $1_1 = $1_1 + $9_1 | 0;
      $14_1 = $14_1 + -2 | 0;
      if ($14_1) {
       continue label$5
      }
      break label$5;
     };
    }
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $721($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $1_1 = 0, $10_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $3_1 = 0, $4_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $3_1 = $1_1 & 48 | 0;
   $4_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $5_1;
    $7_1 = $6_1;
    label$3 : {
     $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$7_1 >> 2] | 0;
      $9_1 = $2_1 & 255 | 0;
      $10_1 = $2_1 >>> 24 | 0;
      $11_1 = HEAP32[$1_1 >> 2] | 0;
      $12_1 = $11_1 >>> 8 | 0;
      $13_1 = $11_1 >>> 16 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$3_1) {
        break label$5
       }
       if (($9_1 | 0) == (255 | 0)) {
        break label$5
       }
       $14_1 = (Math_imul($14_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $10_1 = (Math_imul($10_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $11_1 & 255 | 0;
      $11_1 = $12_1 & 255 | 0;
      $12_1 = $13_1 & 255 | 0;
      label$6 : {
       label$7 : {
        switch ($4_1 | 0) {
        case 0:
         $9_1 = $9_1 ^ 255 | 0;
         $2_1 = $14_1 + ((Math_imul($9_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $11_1 = $15_1 + ((Math_imul($11_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $12_1 = $10_1 + ((Math_imul($12_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$6;
        case 1:
         $2_1 = $14_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $11_1 = $15_1 + $11_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $12_1 = $10_1 + $12_1 | 0;
         $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
         break label$6;
        case 3:
         $2_1 = ((Math_imul($14_1, $2_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $11_1 = ((Math_imul($15_1, $11_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $12_1 = ((Math_imul($10_1, $12_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         break label$6;
        case 7:
         break label$7;
        default:
         break label$6;
        };
       }
       $9_1 = $9_1 ^ 255 | 0;
       $2_1 = (Math_imul($14_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $11_1 = (Math_imul($15_1 + $9_1 | 0, $11_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
       $12_1 = (Math_imul($10_1 + $9_1 | 0, $12_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | ($12_1 << 16 | 0) | 0 | $2_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $7_1 = $7_1 + 4 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $5_1 = $5_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $6_1 = $6_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
   HEAP32[$0_1 >> 2] = $6_1;
  }
 }
 
 function $722($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $19_1 = 0, $15_1 = 0, $2_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $11_1 = 0, $9_1 = 0, $14_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $9_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $10_1;
    $14_1 = $7_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($14_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $15_1 = $1_1 & 255 | 0;
     $16_1 = $1_1 >>> 24 | 0;
     $17_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $18_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     $3_1 = $1_1 >>> 8 | 0;
     $19_1 = $1_1 >>> 16 | 0;
     label$4 : {
      if (!$4_1) {
       break label$4
      }
      if (($15_1 | 0) == (255 | 0)) {
       break label$4
      }
      $17_1 = (Math_imul($17_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = (Math_imul($18_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $16_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $3_1 = $3_1 & 255 | 0;
     $19_1 = $19_1 & 255 | 0;
     label$5 : {
      label$6 : {
       switch ($5_1 | 0) {
       case 0:
        $15_1 = $15_1 ^ 255 | 0;
        $1_1 = $17_1 + ((Math_imul($15_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $3_1 = $18_1 + ((Math_imul($3_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $19_1 = $16_1 + ((Math_imul($19_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$5;
       case 1:
        $1_1 = $17_1 + $1_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        $3_1 = $18_1 + $3_1 | 0;
        $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $19_1 = $16_1 + $19_1 | 0;
        $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
        break label$5;
       case 3:
        $1_1 = ((Math_imul($17_1, $1_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $3_1 = ((Math_imul($18_1, $3_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $19_1 = ((Math_imul($16_1, $19_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        break label$5;
       case 7:
        break label$6;
       default:
        break label$5;
       };
      }
      $15_1 = $15_1 ^ 255 | 0;
      $1_1 = (Math_imul($17_1 + $15_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $3_1 = (Math_imul($18_1 + $15_1 | 0, $3_1) >>> 0) / (255 >>> 0) | 0;
      $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
      $19_1 = (Math_imul($16_1 + $15_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
      $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $3_1 << 8 | 0 | ($19_1 << 16 | 0) | 0 | $1_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $14_1 + $6_1 | 0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $723($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $6_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
   $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $7_1;
    $9_1 = $8_1;
    label$3 : {
     $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$10_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$9_1 >> 2] | 0;
      $11_1 = $2_1 >>> 24 | 0;
      $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$6_1) {
        break label$5
       }
       $12_1 = (Math_imul($12_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = (Math_imul($2_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = (Math_imul($11_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $2_1 << 8 | 0 | ($11_1 << 16 | 0) | 0 | $12_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $9_1 = $9_1 + 4 | 0;
      $10_1 = $10_1 + -1 | 0;
      if ($10_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $8_1 = $8_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[$0_1 >> 2] = $8_1;
  }
 }
 
 function $724($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $15_1 = 0, $8_1 = 0, $12_1 = 0, $7_1 = 0, $16_1 = 0, $17_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $9_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $10_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $11_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$2
    }
    $13_1 = $7_1 >>> 16 | 0;
    $14_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $1_1 = $5_1;
    label$3 : while (1) {
     $15_1 = HEAP32[(($14_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $13_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $16_1 = $15_1 >>> 24 | 0;
     $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $17_1 = (Math_imul($17_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      $15_1 = (Math_imul($15_1, $10_1) >>> 0) / (255 >>> 0) | 0;
      $16_1 = (Math_imul($16_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $15_1 << 8 | 0 | $17_1 | 0 | ($16_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $4_1 | 0;
     $12_1 = $12_1 + -1 | 0;
     if ($12_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $725($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $15_1 = 0, $1_1 = 0, $17_1 = 0, $19_1 = 0, $20_1 = 0, $16_1 = 0, $18_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 48 | 0;
   $8_1 = $1_1 & 2 | 0;
   $9_1 = $1_1 & 1 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $11_1;
    $13_1 = $12_1;
    label$3 : {
     $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$14_1) {
      break label$3
     }
     label$4 : while (1) {
      $15_1 = HEAP32[$1_1 >> 2] | 0;
      $2_1 = HEAP32[$13_1 >> 2] | 0;
      $16_1 = $2_1 >>> 24 | 0;
      $17_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $18_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$9_1) {
        break label$5
       }
       $17_1 = (Math_imul($17_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($18_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($16_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 & 255 | 0;
      label$6 : {
       if (!$8_1) {
        break label$6
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      $19_1 = $15_1 >>> 8 | 0;
      $20_1 = $15_1 >>> 16 | 0;
      label$7 : {
       if (!$7_1) {
        break label$7
       }
       if ($2_1 >>> 0 > 254 >>> 0) {
        break label$7
       }
       $17_1 = (Math_imul($2_1, $17_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($2_1, $18_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($2_1, $16_1) >>> 0) / (255 >>> 0) | 0;
      }
      $15_1 = $15_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      $20_1 = $20_1 & 255 | 0;
      label$8 : {
       label$9 : {
        switch ($10_1 | 0) {
        case 0:
         $2_1 = 255 - $2_1 | 0;
         $15_1 = $17_1 + ((Math_imul($2_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $18_1 + ((Math_imul($2_1, $19_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $20_1 = $16_1 + ((Math_imul($2_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$8;
        case 1:
         $2_1 = $17_1 + $15_1 | 0;
         $15_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $18_1 + $19_1 | 0;
         $19_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $16_1 + $20_1 | 0;
         $20_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$8;
        case 3:
         $15_1 = (Math_imul($17_1, $15_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($18_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         $20_1 = (Math_imul($16_1, $20_1) >>> 0) / (255 >>> 0) | 0;
         break label$8;
        case 7:
         break label$9;
        default:
         break label$8;
        };
       }
       $2_1 = 255 - $2_1 | 0;
       $15_1 = (Math_imul($17_1 + $2_1 | 0, $15_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = $15_1 >>> 0 < 255 >>> 0 ? $15_1 : 255;
       $17_1 = (Math_imul($18_1 + $2_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
       $2_1 = (Math_imul($16_1 + $2_1 | 0, $20_1) >>> 0) / (255 >>> 0) | 0;
       $20_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $19_1 << 8 | 0 | ($20_1 << 16 | 0) | 0 | $15_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $726($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $22_1 = 0, $24_1 = 0, $25_1 = 0, $21_1 = 0, $23_1 = 0, $12_1 = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $8_1 = 0, $10_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = $3_1 & 2 | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $13_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = $12_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $2_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $21_1 = $2_1 >>> 24 | 0;
     $22_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $23_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $22_1 = (Math_imul($22_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($23_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $2_1 = $2_1 & 255 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $2_1 = (Math_imul($2_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     $24_1 = $1_1 >>> 8 | 0;
     $25_1 = $1_1 >>> 16 | 0;
     label$6 : {
      if (!$4_1) {
       break label$6
      }
      if ($2_1 >>> 0 > 254 >>> 0) {
       break label$6
      }
      $22_1 = (Math_imul($2_1, $22_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($2_1, $23_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($2_1, $21_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     $25_1 = $25_1 & 255 | 0;
     label$7 : {
      label$8 : {
       switch ($7_1 | 0) {
       case 0:
        $2_1 = 255 - $2_1 | 0;
        $1_1 = $22_1 + ((Math_imul($2_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $23_1 + ((Math_imul($2_1, $24_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $25_1 = $21_1 + ((Math_imul($2_1, $25_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$7;
       case 1:
        $2_1 = $22_1 + $1_1 | 0;
        $1_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $23_1 + $24_1 | 0;
        $24_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $21_1 + $25_1 | 0;
        $25_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        break label$7;
       case 3:
        $1_1 = (Math_imul($22_1, $1_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($23_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        $25_1 = (Math_imul($21_1, $25_1) >>> 0) / (255 >>> 0) | 0;
        break label$7;
       case 7:
        break label$8;
       default:
        break label$7;
       };
      }
      $2_1 = 255 - $2_1 | 0;
      $1_1 = (Math_imul($22_1 + $2_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $22_1 = (Math_imul($23_1 + $2_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $22_1 >>> 0 < 255 >>> 0 ? $22_1 : 255;
      $2_1 = (Math_imul($21_1 + $2_1 | 0, $25_1) >>> 0) / (255 >>> 0) | 0;
      $25_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
     }
     HEAP32[$3_1 >> 2] = $24_1 << 8 | 0 | ($25_1 << 16 | 0) | 0 | $1_1 | 0;
     $3_1 = $3_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $12_1 = $12_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $12_1;
 }
 
 function $727($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $11_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $6_1 = ($5_1 | 0) / (2 | 0) | 0;
  $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$2
    }
    $9_1 = $6_1 >>> 16 | 0;
    $10_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $7_1;
    $1_1 = $4_1;
    label$3 : while (1) {
     $11_1 = HEAP32[(($10_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $9_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = ($11_1 >>> 8 | 0) & 65280 | 0 | ($11_1 >>> 24 | 0) | 0 | (($11_1 << 8 | 0) & 16711680 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $3_1 | 0;
     $8_1 = $8_1 + -1 | 0;
     if ($8_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $6_1 = $6_1 + $5_1 | 0;
   $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
 }
 
 function $728($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $1_1 = 0, $10_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $3_1 = 0, $4_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $3_1 = $1_1 & 48 | 0;
   $4_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $5_1;
    $7_1 = $6_1;
    label$3 : {
     $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$7_1 >> 2] | 0;
      $9_1 = $2_1 & 255 | 0;
      $10_1 = $2_1 >>> 24 | 0;
      $11_1 = HEAP32[$1_1 >> 2] | 0;
      $12_1 = $11_1 >>> 8 | 0;
      $13_1 = $11_1 >>> 16 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$3_1) {
        break label$5
       }
       if (($9_1 | 0) == (255 | 0)) {
        break label$5
       }
       $14_1 = (Math_imul($14_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $10_1 = (Math_imul($10_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $11_1 & 255 | 0;
      $11_1 = $12_1 & 255 | 0;
      $12_1 = $13_1 & 255 | 0;
      label$6 : {
       label$7 : {
        switch ($4_1 | 0) {
        case 0:
         $9_1 = $9_1 ^ 255 | 0;
         $12_1 = $14_1 + ((Math_imul($12_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $11_1 = $15_1 + ((Math_imul($11_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $2_1 = $10_1 + ((Math_imul($9_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$6;
        case 1:
         $12_1 = $14_1 + $12_1 | 0;
         $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
         $11_1 = $15_1 + $11_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $2_1 = $10_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$6;
        case 3:
         $12_1 = ((Math_imul($14_1, $12_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $11_1 = ((Math_imul($15_1, $11_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $2_1 = ((Math_imul($10_1, $2_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         break label$6;
        case 7:
         break label$7;
        default:
         break label$6;
        };
       }
       $9_1 = $9_1 ^ 255 | 0;
       $12_1 = (Math_imul($14_1 + $9_1 | 0, $12_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
       $11_1 = (Math_imul($15_1 + $9_1 | 0, $11_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
       $2_1 = (Math_imul($10_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | $2_1 | 0 | ($12_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $7_1 = $7_1 + 4 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $5_1 = $5_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $6_1 = $6_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
   HEAP32[$0_1 >> 2] = $6_1;
  }
 }
 
 function $729($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $19_1 = 0, $15_1 = 0, $2_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $11_1 = 0, $9_1 = 0, $14_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $9_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $10_1;
    $14_1 = $7_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($14_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $15_1 = $1_1 & 255 | 0;
     $16_1 = $1_1 >>> 24 | 0;
     $17_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $18_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     $3_1 = $1_1 >>> 8 | 0;
     $19_1 = $1_1 >>> 16 | 0;
     label$4 : {
      if (!$4_1) {
       break label$4
      }
      if (($15_1 | 0) == (255 | 0)) {
       break label$4
      }
      $17_1 = (Math_imul($17_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = (Math_imul($18_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $16_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $3_1 = $3_1 & 255 | 0;
     $19_1 = $19_1 & 255 | 0;
     label$5 : {
      label$6 : {
       switch ($5_1 | 0) {
       case 0:
        $15_1 = $15_1 ^ 255 | 0;
        $19_1 = $17_1 + ((Math_imul($19_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $3_1 = $18_1 + ((Math_imul($3_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $1_1 = $16_1 + ((Math_imul($15_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$5;
       case 1:
        $19_1 = $17_1 + $19_1 | 0;
        $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
        $3_1 = $18_1 + $3_1 | 0;
        $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $1_1 = $16_1 + $1_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        break label$5;
       case 3:
        $19_1 = ((Math_imul($17_1, $19_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $3_1 = ((Math_imul($18_1, $3_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $1_1 = ((Math_imul($16_1, $1_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        break label$5;
       case 7:
        break label$6;
       default:
        break label$5;
       };
      }
      $15_1 = $15_1 ^ 255 | 0;
      $19_1 = (Math_imul($17_1 + $15_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
      $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
      $3_1 = (Math_imul($18_1 + $15_1 | 0, $3_1) >>> 0) / (255 >>> 0) | 0;
      $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
      $1_1 = (Math_imul($16_1 + $15_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $3_1 << 8 | 0 | $1_1 | 0 | ($19_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $14_1 + $6_1 | 0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $730($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $6_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
   $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $7_1;
    $9_1 = $8_1;
    label$3 : {
     $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$10_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$9_1 >> 2] | 0;
      $11_1 = $2_1 >>> 24 | 0;
      $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$6_1) {
        break label$5
       }
       $12_1 = (Math_imul($12_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = (Math_imul($2_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = (Math_imul($11_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $2_1 << 8 | 0 | $11_1 | 0 | ($12_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $9_1 = $9_1 + 4 | 0;
      $10_1 = $10_1 + -1 | 0;
      if ($10_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $8_1 = $8_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[$0_1 >> 2] = $8_1;
  }
 }
 
 function $731($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $15_1 = 0, $8_1 = 0, $12_1 = 0, $7_1 = 0, $16_1 = 0, $17_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $9_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $10_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $11_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$2
    }
    $13_1 = $7_1 >>> 16 | 0;
    $14_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $1_1 = $5_1;
    label$3 : while (1) {
     $15_1 = HEAP32[(($14_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $13_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $16_1 = $15_1 >>> 24 | 0;
     $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $17_1 = (Math_imul($17_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      $15_1 = (Math_imul($15_1, $10_1) >>> 0) / (255 >>> 0) | 0;
      $16_1 = (Math_imul($16_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $15_1 << 8 | 0 | ($17_1 << 16 | 0) | 0 | $16_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $4_1 | 0;
     $12_1 = $12_1 + -1 | 0;
     if ($12_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $732($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $17_1 = 0, $15_1 = 0, $19_1 = 0, $20_1 = 0, $16_1 = 0, $18_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 48 | 0;
   $8_1 = $1_1 & 2 | 0;
   $9_1 = $1_1 & 1 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $11_1;
    $13_1 = $12_1;
    label$3 : {
     $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$14_1) {
      break label$3
     }
     label$4 : while (1) {
      $15_1 = HEAP32[$1_1 >> 2] | 0;
      $2_1 = HEAP32[$13_1 >> 2] | 0;
      $16_1 = $2_1 >>> 24 | 0;
      $17_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $18_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$9_1) {
        break label$5
       }
       $17_1 = (Math_imul($17_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($18_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($16_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 & 255 | 0;
      label$6 : {
       if (!$8_1) {
        break label$6
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      $19_1 = $15_1 >>> 8 | 0;
      $20_1 = $15_1 >>> 16 | 0;
      label$7 : {
       if (!$7_1) {
        break label$7
       }
       if ($2_1 >>> 0 > 254 >>> 0) {
        break label$7
       }
       $17_1 = (Math_imul($2_1, $17_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($2_1, $18_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($2_1, $16_1) >>> 0) / (255 >>> 0) | 0;
      }
      $15_1 = $15_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      $20_1 = $20_1 & 255 | 0;
      label$8 : {
       label$9 : {
        switch ($10_1 | 0) {
        case 0:
         $2_1 = 255 - $2_1 | 0;
         $20_1 = $17_1 + ((Math_imul($2_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $18_1 + ((Math_imul($2_1, $19_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $15_1 = $16_1 + ((Math_imul($2_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$8;
        case 1:
         $2_1 = $17_1 + $20_1 | 0;
         $20_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $18_1 + $19_1 | 0;
         $19_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $16_1 + $15_1 | 0;
         $15_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$8;
        case 3:
         $20_1 = (Math_imul($17_1, $20_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($18_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         $15_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
         break label$8;
        case 7:
         break label$9;
        default:
         break label$8;
        };
       }
       $2_1 = 255 - $2_1 | 0;
       $17_1 = (Math_imul($17_1 + $2_1 | 0, $20_1) >>> 0) / (255 >>> 0) | 0;
       $20_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
       $17_1 = (Math_imul($18_1 + $2_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
       $2_1 = (Math_imul($16_1 + $2_1 | 0, $15_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $19_1 << 8 | 0 | $15_1 | 0 | ($20_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $733($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $22_1 = 0, $3_1 = 0, $24_1 = 0, $25_1 = 0, $21_1 = 0, $23_1 = 0, $12_1 = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $8_1 = 0, $10_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = $3_1 & 2 | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $13_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = $12_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $2_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $21_1 = $2_1 >>> 24 | 0;
     $22_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $23_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $22_1 = (Math_imul($22_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($23_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $2_1 = $2_1 & 255 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $2_1 = (Math_imul($2_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     $24_1 = $1_1 >>> 8 | 0;
     $25_1 = $1_1 >>> 16 | 0;
     label$6 : {
      if (!$4_1) {
       break label$6
      }
      if ($2_1 >>> 0 > 254 >>> 0) {
       break label$6
      }
      $22_1 = (Math_imul($2_1, $22_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($2_1, $23_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($2_1, $21_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     $25_1 = $25_1 & 255 | 0;
     label$7 : {
      label$8 : {
       switch ($7_1 | 0) {
       case 0:
        $2_1 = 255 - $2_1 | 0;
        $25_1 = $22_1 + ((Math_imul($2_1, $25_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $23_1 + ((Math_imul($2_1, $24_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $1_1 = $21_1 + ((Math_imul($2_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$7;
       case 1:
        $2_1 = $22_1 + $25_1 | 0;
        $25_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $23_1 + $24_1 | 0;
        $24_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $21_1 + $1_1 | 0;
        $1_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        break label$7;
       case 3:
        $25_1 = (Math_imul($22_1, $25_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($23_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        $1_1 = (Math_imul($21_1, $1_1) >>> 0) / (255 >>> 0) | 0;
        break label$7;
       case 7:
        break label$8;
       default:
        break label$7;
       };
      }
      $2_1 = 255 - $2_1 | 0;
      $22_1 = (Math_imul($22_1 + $2_1 | 0, $25_1) >>> 0) / (255 >>> 0) | 0;
      $25_1 = $22_1 >>> 0 < 255 >>> 0 ? $22_1 : 255;
      $22_1 = (Math_imul($23_1 + $2_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $22_1 >>> 0 < 255 >>> 0 ? $22_1 : 255;
      $2_1 = (Math_imul($21_1 + $2_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
     }
     HEAP32[$3_1 >> 2] = $24_1 << 8 | 0 | $1_1 | 0 | ($25_1 << 16 | 0) | 0;
     $3_1 = $3_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $12_1 = $12_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $12_1;
 }
 
 function $734($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $11_1 = 0, $10_1 = 0, $14_1 = 0, $4_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = $4_1 + $3_1 | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ($4_1 >>> 14 | 0) & 262140 | 0;
  $9_1 = $3_1 + $3_1 | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $7_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $14_1 = $11_1;
    $2_1 = $10_1;
    $1_1 = $4_1;
    label$3 : {
     if (!($11_1 & 1 | 0)) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = __wasm_rotl_i32(HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + $8_1 | 0) >> 2] | 0 | 0, 24 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $11_1 + -1 | 0;
     $1_1 = $5_1;
    }
    label$4 : {
     if (($11_1 | 0) == (1 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      HEAP32[$2_1 >> 2] = __wasm_rotl_i32(HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0 | 0, 24 | 0) | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = __wasm_rotl_i32(HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + ((($1_1 + $3_1 | 0) >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0 | 0, 24 | 0) | 0;
      $2_1 = $2_1 + 8 | 0;
      $1_1 = $1_1 + $9_1 | 0;
      $14_1 = $14_1 + -2 | 0;
      if ($14_1) {
       continue label$5
      }
      break label$5;
     };
    }
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $735($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $11_1 = 0, $9_1 = 0, $1_1 = 0, $12_1 = 0, $10_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $16_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $3_1 = $1_1 & 48 | 0;
   $4_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $5_1;
    $7_1 = $6_1;
    label$3 : {
     $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$7_1 >> 2] | 0;
      $9_1 = $2_1 & 255 | 0;
      $10_1 = $2_1 >>> 24 | 0;
      $11_1 = HEAP32[$1_1 >> 2] | 0;
      $12_1 = $11_1 >>> 8 | 0;
      $13_1 = $11_1 >>> 16 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$3_1) {
        break label$5
       }
       if (($9_1 | 0) == (255 | 0)) {
        break label$5
       }
       $14_1 = (Math_imul($14_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $10_1 = (Math_imul($10_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      }
      $16_1 = $11_1 >>> 24 | 0;
      $2_1 = $11_1 & 255 | 0;
      $11_1 = $12_1 & 255 | 0;
      $12_1 = $13_1 & 255 | 0;
      label$6 : {
       label$7 : {
        switch ($4_1 | 0) {
        case 0:
         $13_1 = $9_1 ^ 255 | 0;
         $16_1 = $9_1 + ((Math_imul($13_1, $16_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $2_1 = $14_1 + ((Math_imul($13_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $11_1 = $15_1 + ((Math_imul($11_1, $13_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $12_1 = $10_1 + ((Math_imul($12_1, $13_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$6;
        case 1:
         $2_1 = $14_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $11_1 = $15_1 + $11_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $9_1 = $10_1 + $12_1 | 0;
         $12_1 = $9_1 >>> 0 < 255 >>> 0 ? $9_1 : 255;
         break label$6;
        case 3:
         $2_1 = ((Math_imul($14_1, $2_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $11_1 = ((Math_imul($15_1, $11_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $12_1 = ((Math_imul($10_1, $12_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         break label$6;
        case 7:
         break label$7;
        default:
         break label$6;
        };
       }
       $9_1 = $9_1 ^ 255 | 0;
       $2_1 = (Math_imul($14_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $11_1 = (Math_imul($15_1 + $9_1 | 0, $11_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
       $9_1 = (Math_imul($10_1 + $9_1 | 0, $12_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = $9_1 >>> 0 < 255 >>> 0 ? $9_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | ($12_1 << 16 | 0) | 0 | $2_1 | 0 | ($16_1 << 24 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $7_1 = $7_1 + 4 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $5_1 = $5_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $6_1 = $6_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
   HEAP32[$0_1 >> 2] = $6_1;
  }
 }
 
 function $736($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $18_1 = 0, $19_1 = 0, $2_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0, $11_1 = 0, $21_1 = 0, $9_1 = 0, $14_1 = 0, $20_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $9_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $10_1;
    $14_1 = $7_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($14_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $3_1 = $1_1 & 255 | 0;
     $15_1 = $1_1 >>> 24 | 0;
     $16_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $17_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     $18_1 = $1_1 >>> 8 | 0;
     $19_1 = $1_1 >>> 16 | 0;
     label$4 : {
      if (!$4_1) {
       break label$4
      }
      if (($3_1 | 0) == (255 | 0)) {
       break label$4
      }
      $16_1 = (Math_imul($16_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      $15_1 = (Math_imul($15_1, $3_1) >>> 0) / (255 >>> 0) | 0;
     }
     $20_1 = $1_1 >>> 24 | 0;
     $1_1 = $1_1 & 255 | 0;
     $18_1 = $18_1 & 255 | 0;
     $19_1 = $19_1 & 255 | 0;
     label$5 : {
      label$6 : {
       switch ($5_1 | 0) {
       case 0:
        $21_1 = $3_1 ^ 255 | 0;
        $20_1 = $3_1 + ((Math_imul($21_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $1_1 = $16_1 + ((Math_imul($21_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $18_1 = $17_1 + ((Math_imul($18_1, $21_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $19_1 = $15_1 + ((Math_imul($19_1, $21_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$5;
       case 1:
        $1_1 = $16_1 + $1_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        $3_1 = $17_1 + $18_1 | 0;
        $18_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $3_1 = $15_1 + $19_1 | 0;
        $19_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        break label$5;
       case 3:
        $1_1 = ((Math_imul($16_1, $1_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $18_1 = ((Math_imul($17_1, $18_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $19_1 = ((Math_imul($15_1, $19_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        break label$5;
       case 7:
        break label$6;
       default:
        break label$5;
       };
      }
      $3_1 = $3_1 ^ 255 | 0;
      $1_1 = (Math_imul($16_1 + $3_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $18_1 = (Math_imul($17_1 + $3_1 | 0, $18_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = $18_1 >>> 0 < 255 >>> 0 ? $18_1 : 255;
      $3_1 = (Math_imul($15_1 + $3_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
      $19_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $18_1 << 8 | 0 | ($19_1 << 16 | 0) | 0 | $1_1 | 0 | ($20_1 << 24 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $14_1 + $6_1 | 0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $737($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 2 | 0;
   $8_1 = $1_1 & 1 | 0;
   $9_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $10_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $9_1;
    $11_1 = $10_1;
    label$3 : {
     $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$12_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$11_1 >> 2] | 0;
      $13_1 = $2_1 >>> 24 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$8_1) {
        break label$5
       }
       $14_1 = (Math_imul($14_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $13_1 = (Math_imul($13_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 & 255 | 0;
      label$6 : {
       if (!$7_1) {
        break label$6
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $15_1 << 8 | 0 | ($13_1 << 16 | 0) | 0 | $14_1 | 0 | ($2_1 << 24 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $11_1 = $11_1 + 4 | 0;
      $12_1 = $12_1 + -1 | 0;
      if ($12_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $9_1 = $9_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $10_1 = $10_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $9_1;
   HEAP32[$0_1 >> 2] = $10_1;
  }
 }
 
 function $738($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $10_1 = 0, $15_1 = 0, $9_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 2 | 0;
  $5_1 = $3_1 & 1 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $11_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $12_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $13_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $15_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$15_1) {
     break label$2
    }
    $16_1 = $9_1 >>> 16 | 0;
    $17_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $10_1;
    $3_1 = $7_1;
    label$3 : while (1) {
     $2_1 = HEAP32[(($17_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $16_1) | 0) + (($3_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $18_1 = $2_1 >>> 24 | 0;
     $19_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $20_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$5_1) {
       break label$4
      }
      $19_1 = (Math_imul($19_1, $12_1) >>> 0) / (255 >>> 0) | 0;
      $20_1 = (Math_imul($20_1, $13_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = (Math_imul($18_1, $14_1) >>> 0) / (255 >>> 0) | 0;
     }
     $2_1 = $2_1 & 255 | 0;
     label$5 : {
      if (!$4_1) {
       break label$5
      }
      $2_1 = (Math_imul($2_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$1_1 >> 2] = $20_1 << 8 | 0 | $19_1 | 0 | ($18_1 << 16 | 0) | 0 | ($2_1 << 24 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + $6_1 | 0;
     $15_1 = $15_1 + -1 | 0;
     if ($15_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $739($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $17_1 = 0, $19_1 = 0, $20_1 = 0, $16_1 = 0, $18_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $22_1 = 0, $14_1 = 0, $21_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 48 | 0;
   $8_1 = $1_1 & 2 | 0;
   $9_1 = $1_1 & 1 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $13_1 = $11_1;
    $14_1 = $12_1;
    label$3 : {
     $15_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$15_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$13_1 >> 2] | 0;
      $1_1 = HEAP32[$14_1 >> 2] | 0;
      $16_1 = $1_1 >>> 24 | 0;
      $17_1 = ($1_1 >>> 8 | 0) & 255 | 0;
      $18_1 = ($1_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$9_1) {
        break label$5
       }
       $17_1 = (Math_imul($17_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($18_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($16_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $1_1 = $1_1 & 255 | 0;
      label$6 : {
       if (!$8_1) {
        break label$6
       }
       $1_1 = (Math_imul($1_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      $19_1 = $2_1 >>> 8 | 0;
      $20_1 = $2_1 >>> 16 | 0;
      label$7 : {
       if (!$7_1) {
        break label$7
       }
       if ($1_1 >>> 0 > 254 >>> 0) {
        break label$7
       }
       $17_1 = (Math_imul($1_1, $17_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($1_1, $18_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($1_1, $16_1) >>> 0) / (255 >>> 0) | 0;
      }
      $21_1 = $2_1 >>> 24 | 0;
      $2_1 = $2_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      $20_1 = $20_1 & 255 | 0;
      label$8 : {
       label$9 : {
        switch ($10_1 | 0) {
        case 0:
         $22_1 = 255 - $1_1 | 0;
         $21_1 = $1_1 + ((Math_imul($22_1, $21_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $2_1 = $17_1 + ((Math_imul($22_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $18_1 + ((Math_imul($22_1, $19_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $20_1 = $16_1 + ((Math_imul($22_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$8;
        case 1:
         $2_1 = $17_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $1_1 = $18_1 + $19_1 | 0;
         $19_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
         $1_1 = $16_1 + $20_1 | 0;
         $20_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
         break label$8;
        case 3:
         $2_1 = (Math_imul($17_1, $2_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($18_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         $20_1 = (Math_imul($16_1, $20_1) >>> 0) / (255 >>> 0) | 0;
         break label$8;
        case 7:
         break label$9;
        default:
         break label$8;
        };
       }
       $1_1 = 255 - $1_1 | 0;
       $2_1 = (Math_imul($17_1 + $1_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $17_1 = (Math_imul($18_1 + $1_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
       $1_1 = (Math_imul($16_1 + $1_1 | 0, $20_1) >>> 0) / (255 >>> 0) | 0;
       $20_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      }
      HEAP32[$13_1 >> 2] = $19_1 << 8 | 0 | ($20_1 << 16 | 0) | 0 | $2_1 | 0 | ($21_1 << 24 | 0) | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + 4 | 0;
      $15_1 = $15_1 + -1 | 0;
      if ($15_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $1_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $740($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $22_1 = 0, $24_1 = 0, $25_1 = 0, $21_1 = 0, $23_1 = 0, $1_1 = 0, $12_1 = 0, $17_1 = 0, $27_1 = 0, $11_1 = 0, $20_1 = 0, $26_1 = 0, $8_1 = 0, $10_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = $3_1 & 2 | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $13_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $12_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $3_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $21_1 = $3_1 >>> 24 | 0;
     $22_1 = ($3_1 >>> 8 | 0) & 255 | 0;
     $23_1 = ($3_1 >>> 16 | 0) & 255 | 0;
     $2_1 = HEAP32[$1_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $22_1 = (Math_imul($22_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($23_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $3_1 = $3_1 & 255 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $3_1 = (Math_imul($3_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     $24_1 = $2_1 >>> 8 | 0;
     $25_1 = $2_1 >>> 16 | 0;
     label$6 : {
      if (!$4_1) {
       break label$6
      }
      if ($3_1 >>> 0 > 254 >>> 0) {
       break label$6
      }
      $22_1 = (Math_imul($3_1, $22_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($3_1, $23_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($3_1, $21_1) >>> 0) / (255 >>> 0) | 0;
     }
     $26_1 = $2_1 >>> 24 | 0;
     $2_1 = $2_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     $25_1 = $25_1 & 255 | 0;
     label$7 : {
      label$8 : {
       switch ($7_1 | 0) {
       case 0:
        $27_1 = 255 - $3_1 | 0;
        $26_1 = $3_1 + ((Math_imul($27_1, $26_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $2_1 = $22_1 + ((Math_imul($27_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $23_1 + ((Math_imul($27_1, $24_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $25_1 = $21_1 + ((Math_imul($27_1, $25_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$7;
       case 1:
        $2_1 = $22_1 + $2_1 | 0;
        $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $3_1 = $23_1 + $24_1 | 0;
        $24_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $3_1 = $21_1 + $25_1 | 0;
        $25_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        break label$7;
       case 3:
        $2_1 = (Math_imul($22_1, $2_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($23_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        $25_1 = (Math_imul($21_1, $25_1) >>> 0) / (255 >>> 0) | 0;
        break label$7;
       case 7:
        break label$8;
       default:
        break label$7;
       };
      }
      $3_1 = 255 - $3_1 | 0;
      $2_1 = (Math_imul($22_1 + $3_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
      $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      $22_1 = (Math_imul($23_1 + $3_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $22_1 >>> 0 < 255 >>> 0 ? $22_1 : 255;
      $3_1 = (Math_imul($21_1 + $3_1 | 0, $25_1) >>> 0) / (255 >>> 0) | 0;
      $25_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
     }
     HEAP32[$1_1 >> 2] = $24_1 << 8 | 0 | ($25_1 << 16 | 0) | 0 | $2_1 | 0 | ($26_1 << 24 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $3_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $12_1 = $12_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $12_1;
 }
 
 function $741($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $11_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $6_1 = ($5_1 | 0) / (2 | 0) | 0;
  $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$2
    }
    $9_1 = $6_1 >>> 16 | 0;
    $10_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $7_1;
    $1_1 = $4_1;
    label$3 : while (1) {
     $11_1 = HEAP32[(($10_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $9_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = ($11_1 << 16 | 0) & 16711680 | 0 | ($11_1 & 65280 | 0) | 0 | (($11_1 >>> 16 | 0) & 255 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $3_1 | 0;
     $8_1 = $8_1 + -1 | 0;
     if ($8_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $6_1 = $6_1 + $5_1 | 0;
   $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
 }
 
 function $742($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $1_1 = 0, $10_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $3_1 = 0, $4_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $3_1 = $1_1 & 48 | 0;
   $4_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $5_1;
    $7_1 = $6_1;
    label$3 : {
     $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$7_1 >> 2] | 0;
      $9_1 = $2_1 >>> 24 | 0;
      $10_1 = $2_1 & 255 | 0;
      $11_1 = HEAP32[$1_1 >> 2] | 0;
      $12_1 = $11_1 >>> 8 | 0;
      $13_1 = $11_1 >>> 16 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$3_1) {
        break label$5
       }
       if (($9_1 | 0) == (255 | 0)) {
        break label$5
       }
       $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $14_1 = (Math_imul($14_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $10_1 = (Math_imul($10_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $11_1 & 255 | 0;
      $11_1 = $12_1 & 255 | 0;
      $12_1 = $13_1 & 255 | 0;
      label$6 : {
       label$7 : {
        switch ($4_1 | 0) {
        case 0:
         $9_1 = $9_1 ^ 255 | 0;
         $2_1 = $15_1 + ((Math_imul($9_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $11_1 = $14_1 + ((Math_imul($11_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $12_1 = $10_1 + ((Math_imul($12_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$6;
        case 1:
         $2_1 = $15_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $11_1 = $14_1 + $11_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $12_1 = $10_1 + $12_1 | 0;
         $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
         break label$6;
        case 3:
         $2_1 = ((Math_imul($15_1, $2_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $11_1 = ((Math_imul($14_1, $11_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $12_1 = ((Math_imul($10_1, $12_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         break label$6;
        case 7:
         break label$7;
        default:
         break label$6;
        };
       }
       $9_1 = $9_1 ^ 255 | 0;
       $2_1 = (Math_imul($15_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $11_1 = (Math_imul($14_1 + $9_1 | 0, $11_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
       $12_1 = (Math_imul($10_1 + $9_1 | 0, $12_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | ($12_1 << 16 | 0) | 0 | $2_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $7_1 = $7_1 + 4 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $5_1 = $5_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $6_1 = $6_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
   HEAP32[$0_1 >> 2] = $6_1;
  }
 }
 
 function $743($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $19_1 = 0, $15_1 = 0, $2_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $11_1 = 0, $9_1 = 0, $14_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $9_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $10_1;
    $14_1 = $7_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($14_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $15_1 = $1_1 >>> 24 | 0;
     $16_1 = $1_1 & 255 | 0;
     $17_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $18_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     $3_1 = $1_1 >>> 8 | 0;
     $19_1 = $1_1 >>> 16 | 0;
     label$4 : {
      if (!$4_1) {
       break label$4
      }
      if (($15_1 | 0) == (255 | 0)) {
       break label$4
      }
      $18_1 = (Math_imul($18_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $16_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $3_1 = $3_1 & 255 | 0;
     $19_1 = $19_1 & 255 | 0;
     label$5 : {
      label$6 : {
       switch ($5_1 | 0) {
       case 0:
        $15_1 = $15_1 ^ 255 | 0;
        $1_1 = $18_1 + ((Math_imul($15_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $3_1 = $17_1 + ((Math_imul($3_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $19_1 = $16_1 + ((Math_imul($19_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$5;
       case 1:
        $1_1 = $18_1 + $1_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        $3_1 = $17_1 + $3_1 | 0;
        $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $19_1 = $16_1 + $19_1 | 0;
        $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
        break label$5;
       case 3:
        $1_1 = ((Math_imul($18_1, $1_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $3_1 = ((Math_imul($17_1, $3_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $19_1 = ((Math_imul($16_1, $19_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        break label$5;
       case 7:
        break label$6;
       default:
        break label$5;
       };
      }
      $15_1 = $15_1 ^ 255 | 0;
      $1_1 = (Math_imul($18_1 + $15_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $3_1 = (Math_imul($17_1 + $15_1 | 0, $3_1) >>> 0) / (255 >>> 0) | 0;
      $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
      $19_1 = (Math_imul($16_1 + $15_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
      $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $3_1 << 8 | 0 | ($19_1 << 16 | 0) | 0 | $1_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $14_1 + $6_1 | 0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $744($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $6_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
   $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $7_1;
    $9_1 = $8_1;
    label$3 : {
     $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$10_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$9_1 >> 2] | 0;
      $11_1 = $2_1 & 255 | 0;
      $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$6_1) {
        break label$5
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = (Math_imul($12_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = (Math_imul($11_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $12_1 << 8 | 0 | ($11_1 << 16 | 0) | 0 | $2_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $9_1 = $9_1 + 4 | 0;
      $10_1 = $10_1 + -1 | 0;
      if ($10_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $8_1 = $8_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[$0_1 >> 2] = $8_1;
  }
 }
 
 function $745($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $15_1 = 0, $8_1 = 0, $12_1 = 0, $7_1 = 0, $16_1 = 0, $17_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $9_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $10_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $11_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$2
    }
    $13_1 = $7_1 >>> 16 | 0;
    $14_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $1_1 = $5_1;
    label$3 : while (1) {
     $15_1 = HEAP32[(($14_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $13_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $16_1 = $15_1 & 255 | 0;
     $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $10_1) >>> 0) / (255 >>> 0) | 0;
      $16_1 = (Math_imul($16_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $17_1 << 8 | 0 | $15_1 | 0 | ($16_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $4_1 | 0;
     $12_1 = $12_1 + -1 | 0;
     if ($12_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $746($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $15_1 = 0, $1_1 = 0, $17_1 = 0, $19_1 = 0, $20_1 = 0, $16_1 = 0, $18_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 48 | 0;
   $8_1 = $1_1 & 2 | 0;
   $9_1 = $1_1 & 1 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $11_1;
    $13_1 = $12_1;
    label$3 : {
     $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$14_1) {
      break label$3
     }
     label$4 : while (1) {
      $15_1 = HEAP32[$1_1 >> 2] | 0;
      $2_1 = HEAP32[$13_1 >> 2] | 0;
      $16_1 = $2_1 & 255 | 0;
      $17_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $18_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$9_1) {
        break label$5
       }
       $18_1 = (Math_imul($18_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($16_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 >>> 24 | 0;
      label$6 : {
       if (!$8_1) {
        break label$6
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      $19_1 = $15_1 >>> 8 | 0;
      $20_1 = $15_1 >>> 16 | 0;
      label$7 : {
       if (!$7_1) {
        break label$7
       }
       if ($2_1 >>> 0 > 254 >>> 0) {
        break label$7
       }
       $18_1 = (Math_imul($2_1, $18_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($2_1, $17_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($2_1, $16_1) >>> 0) / (255 >>> 0) | 0;
      }
      $15_1 = $15_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      $20_1 = $20_1 & 255 | 0;
      label$8 : {
       label$9 : {
        switch ($10_1 | 0) {
        case 0:
         $2_1 = 255 - $2_1 | 0;
         $15_1 = $18_1 + ((Math_imul($2_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $17_1 + ((Math_imul($2_1, $19_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $20_1 = $16_1 + ((Math_imul($2_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$8;
        case 1:
         $2_1 = $18_1 + $15_1 | 0;
         $15_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $17_1 + $19_1 | 0;
         $19_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $16_1 + $20_1 | 0;
         $20_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$8;
        case 3:
         $15_1 = (Math_imul($18_1, $15_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($17_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         $20_1 = (Math_imul($16_1, $20_1) >>> 0) / (255 >>> 0) | 0;
         break label$8;
        case 7:
         break label$9;
        default:
         break label$8;
        };
       }
       $2_1 = 255 - $2_1 | 0;
       $15_1 = (Math_imul($18_1 + $2_1 | 0, $15_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = $15_1 >>> 0 < 255 >>> 0 ? $15_1 : 255;
       $17_1 = (Math_imul($17_1 + $2_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
       $2_1 = (Math_imul($16_1 + $2_1 | 0, $20_1) >>> 0) / (255 >>> 0) | 0;
       $20_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $19_1 << 8 | 0 | ($20_1 << 16 | 0) | 0 | $15_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $747($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $22_1 = 0, $24_1 = 0, $25_1 = 0, $21_1 = 0, $23_1 = 0, $12_1 = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $8_1 = 0, $10_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = $3_1 & 2 | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $13_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = $12_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $2_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $21_1 = $2_1 & 255 | 0;
     $22_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $23_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $23_1 = (Math_imul($23_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($22_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $2_1 = $2_1 >>> 24 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $2_1 = (Math_imul($2_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     $24_1 = $1_1 >>> 8 | 0;
     $25_1 = $1_1 >>> 16 | 0;
     label$6 : {
      if (!$4_1) {
       break label$6
      }
      if ($2_1 >>> 0 > 254 >>> 0) {
       break label$6
      }
      $23_1 = (Math_imul($2_1, $23_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($2_1, $22_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($2_1, $21_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     $25_1 = $25_1 & 255 | 0;
     label$7 : {
      label$8 : {
       switch ($7_1 | 0) {
       case 0:
        $2_1 = 255 - $2_1 | 0;
        $1_1 = $23_1 + ((Math_imul($2_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $22_1 + ((Math_imul($2_1, $24_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $25_1 = $21_1 + ((Math_imul($2_1, $25_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$7;
       case 1:
        $2_1 = $23_1 + $1_1 | 0;
        $1_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $22_1 + $24_1 | 0;
        $24_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $21_1 + $25_1 | 0;
        $25_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        break label$7;
       case 3:
        $1_1 = (Math_imul($23_1, $1_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($22_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        $25_1 = (Math_imul($21_1, $25_1) >>> 0) / (255 >>> 0) | 0;
        break label$7;
       case 7:
        break label$8;
       default:
        break label$7;
       };
      }
      $2_1 = 255 - $2_1 | 0;
      $1_1 = (Math_imul($23_1 + $2_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $22_1 = (Math_imul($22_1 + $2_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $22_1 >>> 0 < 255 >>> 0 ? $22_1 : 255;
      $2_1 = (Math_imul($21_1 + $2_1 | 0, $25_1) >>> 0) / (255 >>> 0) | 0;
      $25_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
     }
     HEAP32[$3_1 >> 2] = $24_1 << 8 | 0 | ($25_1 << 16 | 0) | 0 | $1_1 | 0;
     $3_1 = $3_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $12_1 = $12_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $12_1;
 }
 
 function $748($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $11_1 = 0, $10_1 = 0, $14_1 = 0, $4_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = $4_1 + $3_1 | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ($4_1 >>> 14 | 0) & 262140 | 0;
  $9_1 = $3_1 + $3_1 | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $7_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $14_1 = $11_1;
    $2_1 = $10_1;
    $1_1 = $4_1;
    label$3 : {
     if (!($11_1 & 1 | 0)) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = (HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + $8_1 | 0) >> 2] | 0) & 16777215 | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $11_1 + -1 | 0;
     $1_1 = $5_1;
    }
    label$4 : {
     if (($11_1 | 0) == (1 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      HEAP32[$2_1 >> 2] = (HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0) & 16777215 | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + ((($1_1 + $3_1 | 0) >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0) & 16777215 | 0;
      $2_1 = $2_1 + 8 | 0;
      $1_1 = $1_1 + $9_1 | 0;
      $14_1 = $14_1 + -2 | 0;
      if ($14_1) {
       continue label$5
      }
      break label$5;
     };
    }
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $749($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $1_1 = 0, $10_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $3_1 = 0, $4_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $3_1 = $1_1 & 48 | 0;
   $4_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $5_1;
    $7_1 = $6_1;
    label$3 : {
     $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$7_1 >> 2] | 0;
      $9_1 = $2_1 >>> 24 | 0;
      $10_1 = $2_1 & 255 | 0;
      $11_1 = HEAP32[$1_1 >> 2] | 0;
      $12_1 = $11_1 >>> 8 | 0;
      $13_1 = $11_1 >>> 16 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$3_1) {
        break label$5
       }
       if (($9_1 | 0) == (255 | 0)) {
        break label$5
       }
       $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $14_1 = (Math_imul($14_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $10_1 = (Math_imul($10_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $11_1 & 255 | 0;
      $11_1 = $12_1 & 255 | 0;
      $12_1 = $13_1 & 255 | 0;
      label$6 : {
       label$7 : {
        switch ($4_1 | 0) {
        case 0:
         $9_1 = $9_1 ^ 255 | 0;
         $12_1 = $15_1 + ((Math_imul($12_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $11_1 = $14_1 + ((Math_imul($11_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $2_1 = $10_1 + ((Math_imul($9_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$6;
        case 1:
         $12_1 = $15_1 + $12_1 | 0;
         $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
         $11_1 = $14_1 + $11_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $2_1 = $10_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$6;
        case 3:
         $12_1 = ((Math_imul($15_1, $12_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $11_1 = ((Math_imul($14_1, $11_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $2_1 = ((Math_imul($10_1, $2_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         break label$6;
        case 7:
         break label$7;
        default:
         break label$6;
        };
       }
       $9_1 = $9_1 ^ 255 | 0;
       $12_1 = (Math_imul($15_1 + $9_1 | 0, $12_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
       $11_1 = (Math_imul($14_1 + $9_1 | 0, $11_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
       $2_1 = (Math_imul($10_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | $2_1 | 0 | ($12_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $7_1 = $7_1 + 4 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $5_1 = $5_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $6_1 = $6_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
   HEAP32[$0_1 >> 2] = $6_1;
  }
 }
 
 function $750($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $19_1 = 0, $15_1 = 0, $2_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $11_1 = 0, $9_1 = 0, $14_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $9_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $10_1;
    $14_1 = $7_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($14_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $15_1 = $1_1 >>> 24 | 0;
     $16_1 = $1_1 & 255 | 0;
     $17_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $18_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     $3_1 = $1_1 >>> 8 | 0;
     $19_1 = $1_1 >>> 16 | 0;
     label$4 : {
      if (!$4_1) {
       break label$4
      }
      if (($15_1 | 0) == (255 | 0)) {
       break label$4
      }
      $18_1 = (Math_imul($18_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $16_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $3_1 = $3_1 & 255 | 0;
     $19_1 = $19_1 & 255 | 0;
     label$5 : {
      label$6 : {
       switch ($5_1 | 0) {
       case 0:
        $15_1 = $15_1 ^ 255 | 0;
        $19_1 = $18_1 + ((Math_imul($19_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $3_1 = $17_1 + ((Math_imul($3_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $1_1 = $16_1 + ((Math_imul($15_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$5;
       case 1:
        $19_1 = $18_1 + $19_1 | 0;
        $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
        $3_1 = $17_1 + $3_1 | 0;
        $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $1_1 = $16_1 + $1_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        break label$5;
       case 3:
        $19_1 = ((Math_imul($18_1, $19_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $3_1 = ((Math_imul($17_1, $3_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $1_1 = ((Math_imul($16_1, $1_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        break label$5;
       case 7:
        break label$6;
       default:
        break label$5;
       };
      }
      $15_1 = $15_1 ^ 255 | 0;
      $19_1 = (Math_imul($18_1 + $15_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
      $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
      $3_1 = (Math_imul($17_1 + $15_1 | 0, $3_1) >>> 0) / (255 >>> 0) | 0;
      $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
      $1_1 = (Math_imul($16_1 + $15_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $3_1 << 8 | 0 | $1_1 | 0 | ($19_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $14_1 + $6_1 | 0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $751($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $6_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
   $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $7_1;
    $9_1 = $8_1;
    label$3 : {
     $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$10_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$9_1 >> 2] | 0;
      $11_1 = $2_1 & 255 | 0;
      $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$6_1) {
        break label$5
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = (Math_imul($12_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = (Math_imul($11_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $12_1 << 8 | 0 | $11_1 | 0 | ($2_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $9_1 = $9_1 + 4 | 0;
      $10_1 = $10_1 + -1 | 0;
      if ($10_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $8_1 = $8_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[$0_1 >> 2] = $8_1;
  }
 }
 
 function $752($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $15_1 = 0, $8_1 = 0, $12_1 = 0, $7_1 = 0, $16_1 = 0, $17_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $9_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $10_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $11_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$2
    }
    $13_1 = $7_1 >>> 16 | 0;
    $14_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $1_1 = $5_1;
    label$3 : while (1) {
     $15_1 = HEAP32[(($14_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $13_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $16_1 = $15_1 & 255 | 0;
     $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $10_1) >>> 0) / (255 >>> 0) | 0;
      $16_1 = (Math_imul($16_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $17_1 << 8 | 0 | ($15_1 << 16 | 0) | 0 | $16_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $4_1 | 0;
     $12_1 = $12_1 + -1 | 0;
     if ($12_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $753($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 48 | 0;
   $8_1 = $1_1 & 2 | 0;
   $9_1 = $1_1 & 1 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $11_1;
    $13_1 = $12_1;
    label$3 : {
     $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$14_1) {
      break label$3
     }
     label$4 : while (1) {
      $15_1 = HEAP32[$1_1 >> 2] | 0;
      $2_1 = HEAP32[$13_1 >> 2] | 0;
      $16_1 = $2_1 & 255 | 0;
      $17_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $18_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$9_1) {
        break label$5
       }
       $18_1 = (Math_imul($18_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($16_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 >>> 24 | 0;
      label$6 : {
       if (!$8_1) {
        break label$6
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      $19_1 = $15_1 >>> 8 | 0;
      $20_1 = $15_1 >>> 16 | 0;
      label$7 : {
       if (!$7_1) {
        break label$7
       }
       if ($2_1 >>> 0 > 254 >>> 0) {
        break label$7
       }
       $18_1 = (Math_imul($2_1, $18_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($2_1, $17_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($2_1, $16_1) >>> 0) / (255 >>> 0) | 0;
      }
      $15_1 = $15_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      $20_1 = $20_1 & 255 | 0;
      label$8 : {
       label$9 : {
        switch ($10_1 | 0) {
        case 0:
         $2_1 = 255 - $2_1 | 0;
         $20_1 = $18_1 + ((Math_imul($2_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $17_1 + ((Math_imul($2_1, $19_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $15_1 = $16_1 + ((Math_imul($2_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$8;
        case 1:
         $2_1 = $18_1 + $20_1 | 0;
         $20_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $17_1 + $19_1 | 0;
         $19_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $16_1 + $15_1 | 0;
         $15_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$8;
        case 3:
         $20_1 = (Math_imul($18_1, $20_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($17_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         $15_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
         break label$8;
        case 7:
         break label$9;
        default:
         break label$8;
        };
       }
       $2_1 = 255 - $2_1 | 0;
       $18_1 = (Math_imul($18_1 + $2_1 | 0, $20_1) >>> 0) / (255 >>> 0) | 0;
       $20_1 = $18_1 >>> 0 < 255 >>> 0 ? $18_1 : 255;
       $17_1 = (Math_imul($17_1 + $2_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
       $2_1 = (Math_imul($16_1 + $2_1 | 0, $15_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $19_1 << 8 | 0 | $15_1 | 0 | ($20_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $754($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $21_1 = 0, $12_1 = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $8_1 = 0, $10_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = $3_1 & 2 | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $13_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = $12_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $2_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $21_1 = $2_1 & 255 | 0;
     $22_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $23_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $23_1 = (Math_imul($23_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($22_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $2_1 = $2_1 >>> 24 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $2_1 = (Math_imul($2_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     $24_1 = $1_1 >>> 8 | 0;
     $25_1 = $1_1 >>> 16 | 0;
     label$6 : {
      if (!$4_1) {
       break label$6
      }
      if ($2_1 >>> 0 > 254 >>> 0) {
       break label$6
      }
      $23_1 = (Math_imul($2_1, $23_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($2_1, $22_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($2_1, $21_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     $25_1 = $25_1 & 255 | 0;
     label$7 : {
      label$8 : {
       switch ($7_1 | 0) {
       case 0:
        $2_1 = 255 - $2_1 | 0;
        $25_1 = $23_1 + ((Math_imul($2_1, $25_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $22_1 + ((Math_imul($2_1, $24_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $1_1 = $21_1 + ((Math_imul($2_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$7;
       case 1:
        $2_1 = $23_1 + $25_1 | 0;
        $25_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $22_1 + $24_1 | 0;
        $24_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $21_1 + $1_1 | 0;
        $1_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        break label$7;
       case 3:
        $25_1 = (Math_imul($23_1, $25_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($22_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        $1_1 = (Math_imul($21_1, $1_1) >>> 0) / (255 >>> 0) | 0;
        break label$7;
       case 7:
        break label$8;
       default:
        break label$7;
       };
      }
      $2_1 = 255 - $2_1 | 0;
      $23_1 = (Math_imul($23_1 + $2_1 | 0, $25_1) >>> 0) / (255 >>> 0) | 0;
      $25_1 = $23_1 >>> 0 < 255 >>> 0 ? $23_1 : 255;
      $22_1 = (Math_imul($22_1 + $2_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $22_1 >>> 0 < 255 >>> 0 ? $22_1 : 255;
      $2_1 = (Math_imul($21_1 + $2_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
     }
     HEAP32[$3_1 >> 2] = $24_1 << 8 | 0 | $1_1 | 0 | ($25_1 << 16 | 0) | 0;
     $3_1 = $3_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $12_1 = $12_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $12_1;
 }
 
 function $755($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $11_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $6_1 = ($5_1 | 0) / (2 | 0) | 0;
  $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$2
    }
    $9_1 = $6_1 >>> 16 | 0;
    $10_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $7_1;
    $1_1 = $4_1;
    label$3 : while (1) {
     $11_1 = HEAP32[(($10_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $9_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = ($11_1 << 16 | 0) & 16711680 | 0 | ($11_1 & -16711936 | 0) | 0 | (($11_1 >>> 16 | 0) & 255 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $3_1 | 0;
     $8_1 = $8_1 + -1 | 0;
     if ($8_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $6_1 = $6_1 + $5_1 | 0;
   $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
 }
 
 function $756($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $11_1 = 0, $9_1 = 0, $1_1 = 0, $12_1 = 0, $10_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $16_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $3_1 = $1_1 & 48 | 0;
   $4_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $5_1;
    $7_1 = $6_1;
    label$3 : {
     $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$7_1 >> 2] | 0;
      $9_1 = $2_1 >>> 24 | 0;
      $10_1 = $2_1 & 255 | 0;
      $11_1 = HEAP32[$1_1 >> 2] | 0;
      $12_1 = $11_1 >>> 8 | 0;
      $13_1 = $11_1 >>> 16 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$3_1) {
        break label$5
       }
       if (($9_1 | 0) == (255 | 0)) {
        break label$5
       }
       $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $14_1 = (Math_imul($14_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $10_1 = (Math_imul($10_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      }
      $16_1 = $11_1 >>> 24 | 0;
      $2_1 = $11_1 & 255 | 0;
      $11_1 = $12_1 & 255 | 0;
      $12_1 = $13_1 & 255 | 0;
      label$6 : {
       label$7 : {
        switch ($4_1 | 0) {
        case 0:
         $13_1 = $9_1 ^ 255 | 0;
         $16_1 = $9_1 + ((Math_imul($13_1, $16_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $2_1 = $15_1 + ((Math_imul($13_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $11_1 = $14_1 + ((Math_imul($11_1, $13_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $12_1 = $10_1 + ((Math_imul($12_1, $13_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$6;
        case 1:
         $2_1 = $15_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $11_1 = $14_1 + $11_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $9_1 = $10_1 + $12_1 | 0;
         $12_1 = $9_1 >>> 0 < 255 >>> 0 ? $9_1 : 255;
         break label$6;
        case 3:
         $2_1 = ((Math_imul($15_1, $2_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $11_1 = ((Math_imul($14_1, $11_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $12_1 = ((Math_imul($10_1, $12_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         break label$6;
        case 7:
         break label$7;
        default:
         break label$6;
        };
       }
       $9_1 = $9_1 ^ 255 | 0;
       $2_1 = (Math_imul($15_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $11_1 = (Math_imul($14_1 + $9_1 | 0, $11_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
       $9_1 = (Math_imul($10_1 + $9_1 | 0, $12_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = $9_1 >>> 0 < 255 >>> 0 ? $9_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | ($12_1 << 16 | 0) | 0 | $2_1 | 0 | ($16_1 << 24 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $7_1 = $7_1 + 4 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $5_1 = $5_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $6_1 = $6_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
   HEAP32[$0_1 >> 2] = $6_1;
  }
 }
 
 function $757($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $18_1 = 0, $19_1 = 0, $2_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0, $11_1 = 0, $21_1 = 0, $9_1 = 0, $14_1 = 0, $20_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $9_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $10_1;
    $14_1 = $7_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($14_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $3_1 = $1_1 >>> 24 | 0;
     $15_1 = $1_1 & 255 | 0;
     $16_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $17_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     $18_1 = $1_1 >>> 8 | 0;
     $19_1 = $1_1 >>> 16 | 0;
     label$4 : {
      if (!$4_1) {
       break label$4
      }
      if (($3_1 | 0) == (255 | 0)) {
       break label$4
      }
      $17_1 = (Math_imul($17_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      $16_1 = (Math_imul($16_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      $15_1 = (Math_imul($15_1, $3_1) >>> 0) / (255 >>> 0) | 0;
     }
     $20_1 = $1_1 >>> 24 | 0;
     $1_1 = $1_1 & 255 | 0;
     $18_1 = $18_1 & 255 | 0;
     $19_1 = $19_1 & 255 | 0;
     label$5 : {
      label$6 : {
       switch ($5_1 | 0) {
       case 0:
        $21_1 = $3_1 ^ 255 | 0;
        $20_1 = $3_1 + ((Math_imul($21_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $1_1 = $17_1 + ((Math_imul($21_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $18_1 = $16_1 + ((Math_imul($18_1, $21_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $19_1 = $15_1 + ((Math_imul($19_1, $21_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$5;
       case 1:
        $1_1 = $17_1 + $1_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        $3_1 = $16_1 + $18_1 | 0;
        $18_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $3_1 = $15_1 + $19_1 | 0;
        $19_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        break label$5;
       case 3:
        $1_1 = ((Math_imul($17_1, $1_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $18_1 = ((Math_imul($16_1, $18_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $19_1 = ((Math_imul($15_1, $19_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        break label$5;
       case 7:
        break label$6;
       default:
        break label$5;
       };
      }
      $3_1 = $3_1 ^ 255 | 0;
      $1_1 = (Math_imul($17_1 + $3_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $18_1 = (Math_imul($16_1 + $3_1 | 0, $18_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = $18_1 >>> 0 < 255 >>> 0 ? $18_1 : 255;
      $3_1 = (Math_imul($15_1 + $3_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
      $19_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $18_1 << 8 | 0 | ($19_1 << 16 | 0) | 0 | $1_1 | 0 | ($20_1 << 24 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $14_1 + $6_1 | 0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $758($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 2 | 0;
   $8_1 = $1_1 & 1 | 0;
   $9_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $10_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $9_1;
    $11_1 = $10_1;
    label$3 : {
     $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$12_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$11_1 >> 2] | 0;
      $13_1 = $2_1 & 255 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$8_1) {
        break label$5
       }
       $15_1 = (Math_imul($15_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $14_1 = (Math_imul($14_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $13_1 = (Math_imul($13_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 >>> 24 | 0;
      label$6 : {
       if (!$7_1) {
        break label$6
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $14_1 << 8 | 0 | ($13_1 << 16 | 0) | 0 | $15_1 | 0 | ($2_1 << 24 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $11_1 = $11_1 + 4 | 0;
      $12_1 = $12_1 + -1 | 0;
      if ($12_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $9_1 = $9_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $10_1 = $10_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $9_1;
   HEAP32[$0_1 >> 2] = $10_1;
  }
 }
 
 function $759($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $10_1 = 0, $15_1 = 0, $9_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 2 | 0;
  $5_1 = $3_1 & 1 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $11_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $12_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $13_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $15_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$15_1) {
     break label$2
    }
    $16_1 = $9_1 >>> 16 | 0;
    $17_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $10_1;
    $3_1 = $7_1;
    label$3 : while (1) {
     $2_1 = HEAP32[(($17_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $16_1) | 0) + (($3_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $18_1 = $2_1 & 255 | 0;
     $19_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $20_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$5_1) {
       break label$4
      }
      $20_1 = (Math_imul($20_1, $12_1) >>> 0) / (255 >>> 0) | 0;
      $19_1 = (Math_imul($19_1, $13_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = (Math_imul($18_1, $14_1) >>> 0) / (255 >>> 0) | 0;
     }
     $2_1 = $2_1 >>> 24 | 0;
     label$5 : {
      if (!$4_1) {
       break label$5
      }
      $2_1 = (Math_imul($2_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$1_1 >> 2] = $19_1 << 8 | 0 | $20_1 | 0 | ($18_1 << 16 | 0) | 0 | ($2_1 << 24 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + $6_1 | 0;
     $15_1 = $15_1 + -1 | 0;
     if ($15_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $760($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $17_1 = 0, $19_1 = 0, $20_1 = 0, $16_1 = 0, $18_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $22_1 = 0, $14_1 = 0, $21_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 48 | 0;
   $8_1 = $1_1 & 2 | 0;
   $9_1 = $1_1 & 1 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $13_1 = $11_1;
    $14_1 = $12_1;
    label$3 : {
     $15_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$15_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$13_1 >> 2] | 0;
      $1_1 = HEAP32[$14_1 >> 2] | 0;
      $16_1 = $1_1 & 255 | 0;
      $17_1 = ($1_1 >>> 8 | 0) & 255 | 0;
      $18_1 = ($1_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$9_1) {
        break label$5
       }
       $18_1 = (Math_imul($18_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($16_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $1_1 = $1_1 >>> 24 | 0;
      label$6 : {
       if (!$8_1) {
        break label$6
       }
       $1_1 = (Math_imul($1_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      $19_1 = $2_1 >>> 8 | 0;
      $20_1 = $2_1 >>> 16 | 0;
      label$7 : {
       if (!$7_1) {
        break label$7
       }
       if ($1_1 >>> 0 > 254 >>> 0) {
        break label$7
       }
       $18_1 = (Math_imul($1_1, $18_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($1_1, $17_1) >>> 0) / (255 >>> 0) | 0;
       $16_1 = (Math_imul($1_1, $16_1) >>> 0) / (255 >>> 0) | 0;
      }
      $21_1 = $2_1 >>> 24 | 0;
      $2_1 = $2_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      $20_1 = $20_1 & 255 | 0;
      label$8 : {
       label$9 : {
        switch ($10_1 | 0) {
        case 0:
         $22_1 = 255 - $1_1 | 0;
         $21_1 = $1_1 + ((Math_imul($22_1, $21_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $2_1 = $18_1 + ((Math_imul($22_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $17_1 + ((Math_imul($22_1, $19_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $20_1 = $16_1 + ((Math_imul($22_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$8;
        case 1:
         $2_1 = $18_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $1_1 = $17_1 + $19_1 | 0;
         $19_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
         $1_1 = $16_1 + $20_1 | 0;
         $20_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
         break label$8;
        case 3:
         $2_1 = (Math_imul($18_1, $2_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($17_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         $20_1 = (Math_imul($16_1, $20_1) >>> 0) / (255 >>> 0) | 0;
         break label$8;
        case 7:
         break label$9;
        default:
         break label$8;
        };
       }
       $1_1 = 255 - $1_1 | 0;
       $2_1 = (Math_imul($18_1 + $1_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $17_1 = (Math_imul($17_1 + $1_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $17_1 >>> 0 < 255 >>> 0 ? $17_1 : 255;
       $1_1 = (Math_imul($16_1 + $1_1 | 0, $20_1) >>> 0) / (255 >>> 0) | 0;
       $20_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      }
      HEAP32[$13_1 >> 2] = $19_1 << 8 | 0 | ($20_1 << 16 | 0) | 0 | $2_1 | 0 | ($21_1 << 24 | 0) | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + 4 | 0;
      $15_1 = $15_1 + -1 | 0;
      if ($15_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $1_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $761($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $22_1 = 0, $24_1 = 0, $25_1 = 0, $21_1 = 0, $23_1 = 0, $1_1 = 0, $12_1 = 0, $17_1 = 0, $27_1 = 0, $11_1 = 0, $20_1 = 0, $26_1 = 0, $8_1 = 0, $10_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = $3_1 & 2 | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $13_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $12_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $3_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $21_1 = $3_1 & 255 | 0;
     $22_1 = ($3_1 >>> 8 | 0) & 255 | 0;
     $23_1 = ($3_1 >>> 16 | 0) & 255 | 0;
     $2_1 = HEAP32[$1_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $23_1 = (Math_imul($23_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($22_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($21_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $3_1 = $3_1 >>> 24 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $3_1 = (Math_imul($3_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     $24_1 = $2_1 >>> 8 | 0;
     $25_1 = $2_1 >>> 16 | 0;
     label$6 : {
      if (!$4_1) {
       break label$6
      }
      if ($3_1 >>> 0 > 254 >>> 0) {
       break label$6
      }
      $23_1 = (Math_imul($3_1, $23_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($3_1, $22_1) >>> 0) / (255 >>> 0) | 0;
      $21_1 = (Math_imul($3_1, $21_1) >>> 0) / (255 >>> 0) | 0;
     }
     $26_1 = $2_1 >>> 24 | 0;
     $2_1 = $2_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     $25_1 = $25_1 & 255 | 0;
     label$7 : {
      label$8 : {
       switch ($7_1 | 0) {
       case 0:
        $27_1 = 255 - $3_1 | 0;
        $26_1 = $3_1 + ((Math_imul($27_1, $26_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $2_1 = $23_1 + ((Math_imul($27_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $22_1 + ((Math_imul($27_1, $24_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $25_1 = $21_1 + ((Math_imul($27_1, $25_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$7;
       case 1:
        $2_1 = $23_1 + $2_1 | 0;
        $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $3_1 = $22_1 + $24_1 | 0;
        $24_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $3_1 = $21_1 + $25_1 | 0;
        $25_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        break label$7;
       case 3:
        $2_1 = (Math_imul($23_1, $2_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($22_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        $25_1 = (Math_imul($21_1, $25_1) >>> 0) / (255 >>> 0) | 0;
        break label$7;
       case 7:
        break label$8;
       default:
        break label$7;
       };
      }
      $3_1 = 255 - $3_1 | 0;
      $2_1 = (Math_imul($23_1 + $3_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
      $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      $22_1 = (Math_imul($22_1 + $3_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $22_1 >>> 0 < 255 >>> 0 ? $22_1 : 255;
      $3_1 = (Math_imul($21_1 + $3_1 | 0, $25_1) >>> 0) / (255 >>> 0) | 0;
      $25_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
     }
     HEAP32[$1_1 >> 2] = $24_1 << 8 | 0 | ($25_1 << 16 | 0) | 0 | $2_1 | 0 | ($26_1 << 24 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $3_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $12_1 = $12_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $12_1;
 }
 
 function $762($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $11_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $6_1 = ($5_1 | 0) / (2 | 0) | 0;
  $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$2
    }
    $9_1 = $6_1 >>> 16 | 0;
    $10_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $7_1;
    $1_1 = $4_1;
    label$3 : while (1) {
     $11_1 = HEAP32[(($10_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $9_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = ($11_1 >>> 8 | 0) & 65280 | 0 | ($11_1 >>> 24 | 0) | 0 | (($11_1 << 8 | 0) & 16711680 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $3_1 | 0;
     $8_1 = $8_1 + -1 | 0;
     if ($8_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $6_1 = $6_1 + $5_1 | 0;
   $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
 }
 
 function $763($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $1_1 = 0, $10_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $3_1 = 0, $4_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $3_1 = $1_1 & 48 | 0;
   $4_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $5_1;
    $7_1 = $6_1;
    label$3 : {
     $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$7_1 >> 2] | 0;
      $9_1 = $2_1 & 255 | 0;
      $10_1 = $2_1 >>> 24 | 0;
      $11_1 = HEAP32[$1_1 >> 2] | 0;
      $12_1 = $11_1 >>> 8 | 0;
      $13_1 = $11_1 >>> 16 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$3_1) {
        break label$5
       }
       if (($9_1 | 0) == (255 | 0)) {
        break label$5
       }
       $10_1 = (Math_imul($10_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $14_1 = (Math_imul($14_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $11_1 & 255 | 0;
      $11_1 = $12_1 & 255 | 0;
      $12_1 = $13_1 & 255 | 0;
      label$6 : {
       label$7 : {
        switch ($4_1 | 0) {
        case 0:
         $9_1 = $9_1 ^ 255 | 0;
         $2_1 = $10_1 + ((Math_imul($9_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $11_1 = $15_1 + ((Math_imul($11_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $12_1 = $14_1 + ((Math_imul($12_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$6;
        case 1:
         $2_1 = $10_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $11_1 = $15_1 + $11_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $12_1 = $14_1 + $12_1 | 0;
         $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
         break label$6;
        case 3:
         $2_1 = ((Math_imul($10_1, $2_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $11_1 = ((Math_imul($15_1, $11_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $12_1 = ((Math_imul($14_1, $12_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         break label$6;
        case 7:
         break label$7;
        default:
         break label$6;
        };
       }
       $9_1 = $9_1 ^ 255 | 0;
       $2_1 = (Math_imul($10_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $11_1 = (Math_imul($15_1 + $9_1 | 0, $11_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
       $12_1 = (Math_imul($14_1 + $9_1 | 0, $12_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | ($12_1 << 16 | 0) | 0 | $2_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $7_1 = $7_1 + 4 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $5_1 = $5_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $6_1 = $6_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
   HEAP32[$0_1 >> 2] = $6_1;
  }
 }
 
 function $764($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $19_1 = 0, $15_1 = 0, $2_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $11_1 = 0, $9_1 = 0, $14_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $9_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $10_1;
    $14_1 = $7_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($14_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $15_1 = $1_1 & 255 | 0;
     $16_1 = $1_1 >>> 24 | 0;
     $17_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $18_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     $3_1 = $1_1 >>> 8 | 0;
     $19_1 = $1_1 >>> 16 | 0;
     label$4 : {
      if (!$4_1) {
       break label$4
      }
      if (($15_1 | 0) == (255 | 0)) {
       break label$4
      }
      $16_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = (Math_imul($18_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $15_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $3_1 = $3_1 & 255 | 0;
     $19_1 = $19_1 & 255 | 0;
     label$5 : {
      label$6 : {
       switch ($5_1 | 0) {
       case 0:
        $15_1 = $15_1 ^ 255 | 0;
        $1_1 = $16_1 + ((Math_imul($15_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $3_1 = $18_1 + ((Math_imul($3_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $19_1 = $17_1 + ((Math_imul($19_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$5;
       case 1:
        $1_1 = $16_1 + $1_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        $3_1 = $18_1 + $3_1 | 0;
        $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $19_1 = $17_1 + $19_1 | 0;
        $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
        break label$5;
       case 3:
        $1_1 = ((Math_imul($16_1, $1_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $3_1 = ((Math_imul($18_1, $3_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $19_1 = ((Math_imul($17_1, $19_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        break label$5;
       case 7:
        break label$6;
       default:
        break label$5;
       };
      }
      $15_1 = $15_1 ^ 255 | 0;
      $1_1 = (Math_imul($16_1 + $15_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $3_1 = (Math_imul($18_1 + $15_1 | 0, $3_1) >>> 0) / (255 >>> 0) | 0;
      $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
      $19_1 = (Math_imul($17_1 + $15_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
      $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $3_1 << 8 | 0 | ($19_1 << 16 | 0) | 0 | $1_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $14_1 + $6_1 | 0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $765($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $6_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
   $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $7_1;
    $9_1 = $8_1;
    label$3 : {
     $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$10_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$9_1 >> 2] | 0;
      $11_1 = $2_1 >>> 24 | 0;
      $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$6_1) {
        break label$5
       }
       $11_1 = (Math_imul($11_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = (Math_imul($2_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = (Math_imul($12_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $2_1 << 8 | 0 | ($12_1 << 16 | 0) | 0 | $11_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $9_1 = $9_1 + 4 | 0;
      $10_1 = $10_1 + -1 | 0;
      if ($10_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $8_1 = $8_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[$0_1 >> 2] = $8_1;
  }
 }
 
 function $766($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $15_1 = 0, $8_1 = 0, $12_1 = 0, $7_1 = 0, $16_1 = 0, $17_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $9_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $10_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $11_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$2
    }
    $13_1 = $7_1 >>> 16 | 0;
    $14_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $1_1 = $5_1;
    label$3 : while (1) {
     $15_1 = HEAP32[(($14_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $13_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $16_1 = $15_1 >>> 24 | 0;
     $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $16_1 = (Math_imul($16_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      $15_1 = (Math_imul($15_1, $10_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $15_1 << 8 | 0 | $16_1 | 0 | ($17_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $4_1 | 0;
     $12_1 = $12_1 + -1 | 0;
     if ($12_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $767($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $15_1 = 0, $1_1 = 0, $16_1 = 0, $19_1 = 0, $20_1 = 0, $17_1 = 0, $18_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 48 | 0;
   $8_1 = $1_1 & 2 | 0;
   $9_1 = $1_1 & 1 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $11_1;
    $13_1 = $12_1;
    label$3 : {
     $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$14_1) {
      break label$3
     }
     label$4 : while (1) {
      $15_1 = HEAP32[$1_1 >> 2] | 0;
      $2_1 = HEAP32[$13_1 >> 2] | 0;
      $16_1 = $2_1 >>> 24 | 0;
      $17_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $18_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$9_1) {
        break label$5
       }
       $16_1 = (Math_imul($16_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($18_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 & 255 | 0;
      label$6 : {
       if (!$8_1) {
        break label$6
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      $19_1 = $15_1 >>> 8 | 0;
      $20_1 = $15_1 >>> 16 | 0;
      label$7 : {
       if (!$7_1) {
        break label$7
       }
       if ($2_1 >>> 0 > 254 >>> 0) {
        break label$7
       }
       $16_1 = (Math_imul($2_1, $16_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($2_1, $18_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($2_1, $17_1) >>> 0) / (255 >>> 0) | 0;
      }
      $15_1 = $15_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      $20_1 = $20_1 & 255 | 0;
      label$8 : {
       label$9 : {
        switch ($10_1 | 0) {
        case 0:
         $2_1 = 255 - $2_1 | 0;
         $15_1 = $16_1 + ((Math_imul($2_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $18_1 + ((Math_imul($2_1, $19_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $20_1 = $17_1 + ((Math_imul($2_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$8;
        case 1:
         $2_1 = $16_1 + $15_1 | 0;
         $15_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $18_1 + $19_1 | 0;
         $19_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $17_1 + $20_1 | 0;
         $20_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$8;
        case 3:
         $15_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($18_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         $20_1 = (Math_imul($17_1, $20_1) >>> 0) / (255 >>> 0) | 0;
         break label$8;
        case 7:
         break label$9;
        default:
         break label$8;
        };
       }
       $2_1 = 255 - $2_1 | 0;
       $15_1 = (Math_imul($16_1 + $2_1 | 0, $15_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = $15_1 >>> 0 < 255 >>> 0 ? $15_1 : 255;
       $16_1 = (Math_imul($18_1 + $2_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
       $2_1 = (Math_imul($17_1 + $2_1 | 0, $20_1) >>> 0) / (255 >>> 0) | 0;
       $20_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $19_1 << 8 | 0 | ($20_1 << 16 | 0) | 0 | $15_1 | 0;
      $1_1 = $1_1 + 4 | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $768($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $21_1 = 0, $24_1 = 0, $25_1 = 0, $22_1 = 0, $23_1 = 0, $12_1 = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $8_1 = 0, $10_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = $3_1 & 2 | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $13_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = $12_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $2_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $21_1 = $2_1 >>> 24 | 0;
     $22_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $23_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $21_1 = (Math_imul($21_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($23_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($22_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $2_1 = $2_1 & 255 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $2_1 = (Math_imul($2_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     $24_1 = $1_1 >>> 8 | 0;
     $25_1 = $1_1 >>> 16 | 0;
     label$6 : {
      if (!$4_1) {
       break label$6
      }
      if ($2_1 >>> 0 > 254 >>> 0) {
       break label$6
      }
      $21_1 = (Math_imul($2_1, $21_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($2_1, $23_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($2_1, $22_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     $25_1 = $25_1 & 255 | 0;
     label$7 : {
      label$8 : {
       switch ($7_1 | 0) {
       case 0:
        $2_1 = 255 - $2_1 | 0;
        $1_1 = $21_1 + ((Math_imul($2_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $23_1 + ((Math_imul($2_1, $24_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $25_1 = $22_1 + ((Math_imul($2_1, $25_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$7;
       case 1:
        $2_1 = $21_1 + $1_1 | 0;
        $1_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $23_1 + $24_1 | 0;
        $24_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $22_1 + $25_1 | 0;
        $25_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        break label$7;
       case 3:
        $1_1 = (Math_imul($21_1, $1_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($23_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        $25_1 = (Math_imul($22_1, $25_1) >>> 0) / (255 >>> 0) | 0;
        break label$7;
       case 7:
        break label$8;
       default:
        break label$7;
       };
      }
      $2_1 = 255 - $2_1 | 0;
      $1_1 = (Math_imul($21_1 + $2_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $21_1 = (Math_imul($23_1 + $2_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $21_1 >>> 0 < 255 >>> 0 ? $21_1 : 255;
      $2_1 = (Math_imul($22_1 + $2_1 | 0, $25_1) >>> 0) / (255 >>> 0) | 0;
      $25_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
     }
     HEAP32[$3_1 >> 2] = $24_1 << 8 | 0 | ($25_1 << 16 | 0) | 0 | $1_1 | 0;
     $3_1 = $3_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $12_1 = $12_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $12_1;
 }
 
 function $769($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $11_1 = 0, $10_1 = 0, $14_1 = 0, $4_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = $4_1 + $3_1 | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ($4_1 >>> 14 | 0) & 262140 | 0;
  $9_1 = $3_1 + $3_1 | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $7_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $14_1 = $11_1;
    $2_1 = $10_1;
    $1_1 = $4_1;
    label$3 : {
     if (!($11_1 & 1 | 0)) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = (HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + $8_1 | 0) >> 2] | 0) >>> 8 | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $11_1 + -1 | 0;
     $1_1 = $5_1;
    }
    label$4 : {
     if (($11_1 | 0) == (1 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      HEAP32[$2_1 >> 2] = (HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0) >>> 8 | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + ((($1_1 + $3_1 | 0) >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0) >>> 8 | 0;
      $2_1 = $2_1 + 8 | 0;
      $1_1 = $1_1 + $9_1 | 0;
      $14_1 = $14_1 + -2 | 0;
      if ($14_1) {
       continue label$5
      }
      break label$5;
     };
    }
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $770($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $1_1 = 0, $10_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $3_1 = 0, $4_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $3_1 = $1_1 & 48 | 0;
   $4_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $5_1;
    $7_1 = $6_1;
    label$3 : {
     $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$7_1 >> 2] | 0;
      $9_1 = $2_1 & 255 | 0;
      $10_1 = $2_1 >>> 24 | 0;
      $11_1 = HEAP32[$1_1 >> 2] | 0;
      $12_1 = $11_1 >>> 8 | 0;
      $13_1 = $11_1 >>> 16 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$3_1) {
        break label$5
       }
       if (($9_1 | 0) == (255 | 0)) {
        break label$5
       }
       $10_1 = (Math_imul($10_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $14_1 = (Math_imul($14_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $11_1 & 255 | 0;
      $11_1 = $12_1 & 255 | 0;
      $12_1 = $13_1 & 255 | 0;
      label$6 : {
       label$7 : {
        switch ($4_1 | 0) {
        case 0:
         $9_1 = $9_1 ^ 255 | 0;
         $12_1 = $10_1 + ((Math_imul($12_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $11_1 = $15_1 + ((Math_imul($11_1, $9_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $2_1 = $14_1 + ((Math_imul($9_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$6;
        case 1:
         $12_1 = $10_1 + $12_1 | 0;
         $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
         $11_1 = $15_1 + $11_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $2_1 = $14_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$6;
        case 3:
         $12_1 = ((Math_imul($10_1, $12_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $11_1 = ((Math_imul($15_1, $11_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $2_1 = ((Math_imul($14_1, $2_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         break label$6;
        case 7:
         break label$7;
        default:
         break label$6;
        };
       }
       $9_1 = $9_1 ^ 255 | 0;
       $12_1 = (Math_imul($10_1 + $9_1 | 0, $12_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = $12_1 >>> 0 < 255 >>> 0 ? $12_1 : 255;
       $11_1 = (Math_imul($15_1 + $9_1 | 0, $11_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
       $2_1 = (Math_imul($14_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | $2_1 | 0 | ($12_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $7_1 = $7_1 + 4 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $5_1 = $5_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $6_1 = $6_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
   HEAP32[$0_1 >> 2] = $6_1;
  }
 }
 
 function $771($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $19_1 = 0, $15_1 = 0, $2_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $11_1 = 0, $9_1 = 0, $14_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $9_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $10_1;
    $14_1 = $7_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($14_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $15_1 = $1_1 & 255 | 0;
     $16_1 = $1_1 >>> 24 | 0;
     $17_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $18_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     $3_1 = $1_1 >>> 8 | 0;
     $19_1 = $1_1 >>> 16 | 0;
     label$4 : {
      if (!$4_1) {
       break label$4
      }
      if (($15_1 | 0) == (255 | 0)) {
       break label$4
      }
      $16_1 = (Math_imul($16_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = (Math_imul($18_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $15_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $3_1 = $3_1 & 255 | 0;
     $19_1 = $19_1 & 255 | 0;
     label$5 : {
      label$6 : {
       switch ($5_1 | 0) {
       case 0:
        $15_1 = $15_1 ^ 255 | 0;
        $19_1 = $16_1 + ((Math_imul($19_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $3_1 = $18_1 + ((Math_imul($3_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $1_1 = $17_1 + ((Math_imul($15_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$5;
       case 1:
        $19_1 = $16_1 + $19_1 | 0;
        $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
        $3_1 = $18_1 + $3_1 | 0;
        $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $1_1 = $17_1 + $1_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        break label$5;
       case 3:
        $19_1 = ((Math_imul($16_1, $19_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $3_1 = ((Math_imul($18_1, $3_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $1_1 = ((Math_imul($17_1, $1_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        break label$5;
       case 7:
        break label$6;
       default:
        break label$5;
       };
      }
      $15_1 = $15_1 ^ 255 | 0;
      $19_1 = (Math_imul($16_1 + $15_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
      $19_1 = $19_1 >>> 0 < 255 >>> 0 ? $19_1 : 255;
      $3_1 = (Math_imul($18_1 + $15_1 | 0, $3_1) >>> 0) / (255 >>> 0) | 0;
      $3_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
      $1_1 = (Math_imul($17_1 + $15_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $3_1 << 8 | 0 | $1_1 | 0 | ($19_1 << 16 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $14_1 + $6_1 | 0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $772($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $6_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
   $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $7_1;
    $9_1 = $8_1;
    label$3 : {
     $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$10_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$9_1 >> 2] | 0;
      $11_1 = $2_1 >>> 24 | 0;
      $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $2_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$6_1) {
        break label$5
       }
       $11_1 = (Math_imul($11_1, $3_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = (Math_imul($2_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = (Math_imul($12_1, $5_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $2_1 << 8 | 0 | $12_1 | 0 | ($11_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $9_1 = $9_1 + 4 | 0;
      $10_1 = $10_1 + -1 | 0;
      if ($10_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $7_1 = $7_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $8_1 = $8_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[$0_1 >> 2] = $8_1;
  }
 }
 
 function $773($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $15_1 = 0, $8_1 = 0, $12_1 = 0, $7_1 = 0, $16_1 = 0, $17_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) & 1 | 0;
  $4_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $5_1 = ($4_1 | 0) / (2 | 0) | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $9_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $10_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $11_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$2
    }
    $13_1 = $7_1 >>> 16 | 0;
    $14_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $8_1;
    $1_1 = $5_1;
    label$3 : while (1) {
     $15_1 = HEAP32[(($14_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $13_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $16_1 = $15_1 >>> 24 | 0;
     $17_1 = ($15_1 >>> 8 | 0) & 255 | 0;
     $15_1 = ($15_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $16_1 = (Math_imul($16_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      $15_1 = (Math_imul($15_1, $10_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$2_1 >> 2] = $15_1 << 8 | 0 | ($16_1 << 16 | 0) | 0 | $17_1 | 0;
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + $4_1 | 0;
     $12_1 = $12_1 + -1 | 0;
     if ($12_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $8_1 = $8_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
 }
 
 function $774($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $16_1 = 0, $15_1 = 0, $19_1 = 0, $20_1 = 0, $17_1 = 0, $18_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 48 | 0;
   $8_1 = $1_1 & 2 | 0;
   $9_1 = $1_1 & 1 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $11_1;
    $13_1 = $12_1;
    label$3 : {
     $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$14_1) {
      break label$3
     }
     label$4 : while (1) {
      $15_1 = HEAP32[$1_1 >> 2] | 0;
      $2_1 = HEAP32[$13_1 >> 2] | 0;
      $16_1 = $2_1 >>> 24 | 0;
      $17_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $18_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$9_1) {
        break label$5
       }
       $16_1 = (Math_imul($16_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($18_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 & 255 | 0;
      label$6 : {
       if (!$8_1) {
        break label$6
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      $19_1 = $15_1 >>> 8 | 0;
      $20_1 = $15_1 >>> 16 | 0;
      label$7 : {
       if (!$7_1) {
        break label$7
       }
       if ($2_1 >>> 0 > 254 >>> 0) {
        break label$7
       }
       $16_1 = (Math_imul($2_1, $16_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($2_1, $18_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($2_1, $17_1) >>> 0) / (255 >>> 0) | 0;
      }
      $15_1 = $15_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      $20_1 = $20_1 & 255 | 0;
      label$8 : {
       label$9 : {
        switch ($10_1 | 0) {
        case 0:
         $2_1 = 255 - $2_1 | 0;
         $20_1 = $16_1 + ((Math_imul($2_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $18_1 + ((Math_imul($2_1, $19_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $15_1 = $17_1 + ((Math_imul($2_1, $15_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$8;
        case 1:
         $2_1 = $16_1 + $20_1 | 0;
         $20_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $18_1 + $19_1 | 0;
         $19_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $2_1 = $17_1 + $15_1 | 0;
         $15_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         break label$8;
        case 3:
         $20_1 = (Math_imul($16_1, $20_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($18_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         $15_1 = (Math_imul($17_1, $15_1) >>> 0) / (255 >>> 0) | 0;
         break label$8;
        case 7:
         break label$9;
        default:
         break label$8;
        };
       }
       $2_1 = 255 - $2_1 | 0;
       $16_1 = (Math_imul($16_1 + $2_1 | 0, $20_1) >>> 0) / (255 >>> 0) | 0;
       $20_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
       $16_1 = (Math_imul($18_1 + $2_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
       $2_1 = (Math_imul($17_1 + $2_1 | 0, $15_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $19_1 << 8 | 0 | $15_1 | 0 | ($20_1 << 16 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $775($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $21_1 = 0, $3_1 = 0, $24_1 = 0, $25_1 = 0, $22_1 = 0, $23_1 = 0, $12_1 = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $8_1 = 0, $10_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = $3_1 & 2 | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $13_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = $12_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $2_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $21_1 = $2_1 >>> 24 | 0;
     $22_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $23_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $21_1 = (Math_imul($21_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($23_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($22_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $2_1 = $2_1 & 255 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $2_1 = (Math_imul($2_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     $24_1 = $1_1 >>> 8 | 0;
     $25_1 = $1_1 >>> 16 | 0;
     label$6 : {
      if (!$4_1) {
       break label$6
      }
      if ($2_1 >>> 0 > 254 >>> 0) {
       break label$6
      }
      $21_1 = (Math_imul($2_1, $21_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($2_1, $23_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($2_1, $22_1) >>> 0) / (255 >>> 0) | 0;
     }
     $1_1 = $1_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     $25_1 = $25_1 & 255 | 0;
     label$7 : {
      label$8 : {
       switch ($7_1 | 0) {
       case 0:
        $2_1 = 255 - $2_1 | 0;
        $25_1 = $21_1 + ((Math_imul($2_1, $25_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $23_1 + ((Math_imul($2_1, $24_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $1_1 = $22_1 + ((Math_imul($2_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$7;
       case 1:
        $2_1 = $21_1 + $25_1 | 0;
        $25_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $23_1 + $24_1 | 0;
        $24_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $2_1 = $22_1 + $1_1 | 0;
        $1_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        break label$7;
       case 3:
        $25_1 = (Math_imul($21_1, $25_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($23_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        $1_1 = (Math_imul($22_1, $1_1) >>> 0) / (255 >>> 0) | 0;
        break label$7;
       case 7:
        break label$8;
       default:
        break label$7;
       };
      }
      $2_1 = 255 - $2_1 | 0;
      $21_1 = (Math_imul($21_1 + $2_1 | 0, $25_1) >>> 0) / (255 >>> 0) | 0;
      $25_1 = $21_1 >>> 0 < 255 >>> 0 ? $21_1 : 255;
      $21_1 = (Math_imul($23_1 + $2_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $21_1 >>> 0 < 255 >>> 0 ? $21_1 : 255;
      $2_1 = (Math_imul($22_1 + $2_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
     }
     HEAP32[$3_1 >> 2] = $24_1 << 8 | 0 | $1_1 | 0 | ($25_1 << 16 | 0) | 0;
     $3_1 = $3_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $12_1 = $12_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $12_1;
 }
 
 function $776($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $11_1 = 0, $1_1 = 0, $10_1 = 0, $3_1 = 0, $14_1 = 0, $4_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = ($3_1 | 0) / (2 | 0) | 0;
  $5_1 = $4_1 + $3_1 | 0;
  $6_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ($4_1 >>> 14 | 0) & 262140 | 0;
  $9_1 = $3_1 + $3_1 | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $7_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $14_1 = $11_1;
    $2_1 = $10_1;
    $1_1 = $4_1;
    label$3 : {
     if (!($11_1 & 1 | 0)) {
      break label$3
     }
     $2_1 = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + $8_1 | 0) >> 2] | 0;
     HEAP32[$10_1 >> 2] = $2_1 << 24 | 0 | (($2_1 & 65280 | 0) << 8 | 0) | 0 | (($2_1 >>> 8 | 0) & 65280 | 0 | ($2_1 >>> 24 | 0) | 0) | 0;
     $2_1 = $10_1 + 4 | 0;
     $14_1 = $11_1 + -1 | 0;
     $1_1 = $5_1;
    }
    label$4 : {
     if (($11_1 | 0) == (1 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      $11_1 = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($1_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
      HEAP32[$2_1 >> 2] = $11_1 << 24 | 0 | (($11_1 & 65280 | 0) << 8 | 0) | 0 | (($11_1 >>> 8 | 0) & 65280 | 0 | ($11_1 >>> 24 | 0) | 0) | 0;
      $11_1 = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + ((($1_1 + $3_1 | 0) >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = $11_1 << 24 | 0 | (($11_1 & 65280 | 0) << 8 | 0) | 0 | (($11_1 >>> 8 | 0) & 65280 | 0 | ($11_1 >>> 24 | 0) | 0) | 0;
      $2_1 = $2_1 + 8 | 0;
      $1_1 = $1_1 + $9_1 | 0;
      $14_1 = $14_1 + -2 | 0;
      if ($14_1) {
       continue label$5
      }
      break label$5;
     };
    }
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $7_1 = $7_1 + $6_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $777($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $11_1 = 0, $9_1 = 0, $1_1 = 0, $12_1 = 0, $10_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $16_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $3_1 = $1_1 & 48 | 0;
   $4_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $5_1;
    $7_1 = $6_1;
    label$3 : {
     $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$7_1 >> 2] | 0;
      $9_1 = $2_1 & 255 | 0;
      $10_1 = $2_1 >>> 24 | 0;
      $11_1 = HEAP32[$1_1 >> 2] | 0;
      $12_1 = $11_1 >>> 8 | 0;
      $13_1 = $11_1 >>> 16 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$3_1) {
        break label$5
       }
       if (($9_1 | 0) == (255 | 0)) {
        break label$5
       }
       $10_1 = (Math_imul($10_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $9_1) >>> 0) / (255 >>> 0) | 0;
       $14_1 = (Math_imul($14_1, $9_1) >>> 0) / (255 >>> 0) | 0;
      }
      $16_1 = $11_1 >>> 24 | 0;
      $2_1 = $11_1 & 255 | 0;
      $11_1 = $12_1 & 255 | 0;
      $12_1 = $13_1 & 255 | 0;
      label$6 : {
       label$7 : {
        switch ($4_1 | 0) {
        case 0:
         $13_1 = $9_1 ^ 255 | 0;
         $16_1 = $9_1 + ((Math_imul($13_1, $16_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $2_1 = $10_1 + ((Math_imul($13_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $11_1 = $15_1 + ((Math_imul($11_1, $13_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $12_1 = $14_1 + ((Math_imul($12_1, $13_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$6;
        case 1:
         $2_1 = $10_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $11_1 = $15_1 + $11_1 | 0;
         $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
         $9_1 = $14_1 + $12_1 | 0;
         $12_1 = $9_1 >>> 0 < 255 >>> 0 ? $9_1 : 255;
         break label$6;
        case 3:
         $2_1 = ((Math_imul($10_1, $2_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $11_1 = ((Math_imul($15_1, $11_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         $12_1 = ((Math_imul($14_1, $12_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
         break label$6;
        case 7:
         break label$7;
        default:
         break label$6;
        };
       }
       $9_1 = $9_1 ^ 255 | 0;
       $2_1 = (Math_imul($10_1 + $9_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $11_1 = (Math_imul($15_1 + $9_1 | 0, $11_1) >>> 0) / (255 >>> 0) | 0;
       $11_1 = $11_1 >>> 0 < 255 >>> 0 ? $11_1 : 255;
       $9_1 = (Math_imul($14_1 + $9_1 | 0, $12_1) >>> 0) / (255 >>> 0) | 0;
       $12_1 = $9_1 >>> 0 < 255 >>> 0 ? $9_1 : 255;
      }
      HEAP32[$1_1 >> 2] = $11_1 << 8 | 0 | ($12_1 << 16 | 0) | 0 | $2_1 | 0 | ($16_1 << 24 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $7_1 = $7_1 + 4 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $5_1 = $5_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $6_1 = $6_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
   HEAP32[$0_1 >> 2] = $6_1;
  }
 }
 
 function $778($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $18_1 = 0, $19_1 = 0, $2_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0, $11_1 = 0, $21_1 = 0, $9_1 = 0, $14_1 = 0, $20_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    $11_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $9_1 >>> 16 | 0;
    $13_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $10_1;
    $14_1 = $7_1;
    label$3 : while (1) {
     $1_1 = HEAP32[(($13_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $12_1) | 0) + (($14_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $3_1 = $1_1 & 255 | 0;
     $15_1 = $1_1 >>> 24 | 0;
     $16_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $17_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     $18_1 = $1_1 >>> 8 | 0;
     $19_1 = $1_1 >>> 16 | 0;
     label$4 : {
      if (!$4_1) {
       break label$4
      }
      if (($3_1 | 0) == (255 | 0)) {
       break label$4
      }
      $15_1 = (Math_imul($15_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      $17_1 = (Math_imul($17_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      $16_1 = (Math_imul($16_1, $3_1) >>> 0) / (255 >>> 0) | 0;
     }
     $20_1 = $1_1 >>> 24 | 0;
     $1_1 = $1_1 & 255 | 0;
     $18_1 = $18_1 & 255 | 0;
     $19_1 = $19_1 & 255 | 0;
     label$5 : {
      label$6 : {
       switch ($5_1 | 0) {
       case 0:
        $21_1 = $3_1 ^ 255 | 0;
        $20_1 = $3_1 + ((Math_imul($21_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $1_1 = $15_1 + ((Math_imul($21_1, $1_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $18_1 = $17_1 + ((Math_imul($18_1, $21_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $19_1 = $16_1 + ((Math_imul($19_1, $21_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$5;
       case 1:
        $1_1 = $15_1 + $1_1 | 0;
        $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
        $3_1 = $17_1 + $18_1 | 0;
        $18_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $3_1 = $16_1 + $19_1 | 0;
        $19_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        break label$5;
       case 3:
        $1_1 = ((Math_imul($15_1, $1_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $18_1 = ((Math_imul($17_1, $18_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        $19_1 = ((Math_imul($16_1, $19_1) & 65535 | 0) >>> 0) / (255 >>> 0) | 0;
        break label$5;
       case 7:
        break label$6;
       default:
        break label$5;
       };
      }
      $3_1 = $3_1 ^ 255 | 0;
      $1_1 = (Math_imul($15_1 + $3_1 | 0, $1_1) >>> 0) / (255 >>> 0) | 0;
      $1_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      $18_1 = (Math_imul($17_1 + $3_1 | 0, $18_1) >>> 0) / (255 >>> 0) | 0;
      $18_1 = $18_1 >>> 0 < 255 >>> 0 ? $18_1 : 255;
      $3_1 = (Math_imul($16_1 + $3_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
      $19_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
     }
     HEAP32[$2_1 >> 2] = $18_1 << 8 | 0 | ($19_1 << 16 | 0) | 0 | $1_1 | 0 | ($20_1 << 24 | 0) | 0;
     $2_1 = $2_1 + 4 | 0;
     $14_1 = $14_1 + $6_1 | 0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $1_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $779($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 2 | 0;
   $8_1 = $1_1 & 1 | 0;
   $9_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $10_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $1_1 = $9_1;
    $11_1 = $10_1;
    label$3 : {
     $12_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$12_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$11_1 >> 2] | 0;
      $13_1 = $2_1 >>> 24 | 0;
      $14_1 = ($2_1 >>> 8 | 0) & 255 | 0;
      $15_1 = ($2_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$8_1) {
        break label$5
       }
       $13_1 = (Math_imul($13_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $15_1 = (Math_imul($15_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $14_1 = (Math_imul($14_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $2_1 = $2_1 & 255 | 0;
      label$6 : {
       if (!$7_1) {
        break label$6
       }
       $2_1 = (Math_imul($2_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      HEAP32[$1_1 >> 2] = $15_1 << 8 | 0 | ($14_1 << 16 | 0) | 0 | $13_1 | 0 | ($2_1 << 24 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $11_1 = $11_1 + 4 | 0;
      $12_1 = $12_1 + -1 | 0;
      if ($12_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $9_1 = $9_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $10_1 = $10_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $9_1;
   HEAP32[$0_1 >> 2] = $10_1;
  }
 }
 
 function $780($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $10_1 = 0, $15_1 = 0, $9_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 2 | 0;
  $5_1 = $3_1 & 1 | 0;
  $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = ($6_1 | 0) / (2 | 0) | 0;
  $8_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $11_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $12_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $13_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $15_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$15_1) {
     break label$2
    }
    $16_1 = $9_1 >>> 16 | 0;
    $17_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $10_1;
    $3_1 = $7_1;
    label$3 : while (1) {
     $2_1 = HEAP32[(($17_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $16_1) | 0) + (($3_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $18_1 = $2_1 >>> 24 | 0;
     $19_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $20_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     label$4 : {
      if (!$5_1) {
       break label$4
      }
      $18_1 = (Math_imul($18_1, $12_1) >>> 0) / (255 >>> 0) | 0;
      $20_1 = (Math_imul($20_1, $13_1) >>> 0) / (255 >>> 0) | 0;
      $19_1 = (Math_imul($19_1, $14_1) >>> 0) / (255 >>> 0) | 0;
     }
     $2_1 = $2_1 & 255 | 0;
     label$5 : {
      if (!$4_1) {
       break label$5
      }
      $2_1 = (Math_imul($2_1, $11_1) >>> 0) / (255 >>> 0) | 0;
     }
     HEAP32[$1_1 >> 2] = $20_1 << 8 | 0 | $18_1 | 0 | ($19_1 << 16 | 0) | 0 | ($2_1 << 24 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + $6_1 | 0;
     $15_1 = $15_1 + -1 | 0;
     if ($15_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $1_1 = $2_1;
   $2_1 = $2_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $9_1 = $9_1 + $8_1 | 0;
   $10_1 = $10_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $10_1;
 }
 
 function $781($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $16_1 = 0, $19_1 = 0, $20_1 = 0, $17_1 = 0, $18_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $22_1 = 0, $14_1 = 0, $21_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $7_1 = $1_1 & 48 | 0;
   $8_1 = $1_1 & 2 | 0;
   $9_1 = $1_1 & 1 | 0;
   $10_1 = (($1_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
   $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $12_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    $13_1 = $11_1;
    $14_1 = $12_1;
    label$3 : {
     $15_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$15_1) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAP32[$13_1 >> 2] | 0;
      $1_1 = HEAP32[$14_1 >> 2] | 0;
      $16_1 = $1_1 >>> 24 | 0;
      $17_1 = ($1_1 >>> 8 | 0) & 255 | 0;
      $18_1 = ($1_1 >>> 16 | 0) & 255 | 0;
      label$5 : {
       if (!$9_1) {
        break label$5
       }
       $16_1 = (Math_imul($16_1, $4_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($18_1, $5_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($17_1, $6_1) >>> 0) / (255 >>> 0) | 0;
      }
      $1_1 = $1_1 & 255 | 0;
      label$6 : {
       if (!$8_1) {
        break label$6
       }
       $1_1 = (Math_imul($1_1, $3_1) >>> 0) / (255 >>> 0) | 0;
      }
      $19_1 = $2_1 >>> 8 | 0;
      $20_1 = $2_1 >>> 16 | 0;
      label$7 : {
       if (!$7_1) {
        break label$7
       }
       if ($1_1 >>> 0 > 254 >>> 0) {
        break label$7
       }
       $16_1 = (Math_imul($1_1, $16_1) >>> 0) / (255 >>> 0) | 0;
       $18_1 = (Math_imul($1_1, $18_1) >>> 0) / (255 >>> 0) | 0;
       $17_1 = (Math_imul($1_1, $17_1) >>> 0) / (255 >>> 0) | 0;
      }
      $21_1 = $2_1 >>> 24 | 0;
      $2_1 = $2_1 & 255 | 0;
      $19_1 = $19_1 & 255 | 0;
      $20_1 = $20_1 & 255 | 0;
      label$8 : {
       label$9 : {
        switch ($10_1 | 0) {
        case 0:
         $22_1 = 255 - $1_1 | 0;
         $21_1 = $1_1 + ((Math_imul($22_1, $21_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $2_1 = $16_1 + ((Math_imul($22_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $19_1 = $18_1 + ((Math_imul($22_1, $19_1) >>> 0) / (255 >>> 0) | 0) | 0;
         $20_1 = $17_1 + ((Math_imul($22_1, $20_1) >>> 0) / (255 >>> 0) | 0) | 0;
         break label$8;
        case 1:
         $2_1 = $16_1 + $2_1 | 0;
         $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
         $1_1 = $18_1 + $19_1 | 0;
         $19_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
         $1_1 = $17_1 + $20_1 | 0;
         $20_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
         break label$8;
        case 3:
         $2_1 = (Math_imul($16_1, $2_1) >>> 0) / (255 >>> 0) | 0;
         $19_1 = (Math_imul($18_1, $19_1) >>> 0) / (255 >>> 0) | 0;
         $20_1 = (Math_imul($17_1, $20_1) >>> 0) / (255 >>> 0) | 0;
         break label$8;
        case 7:
         break label$9;
        default:
         break label$8;
        };
       }
       $1_1 = 255 - $1_1 | 0;
       $2_1 = (Math_imul($16_1 + $1_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
       $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
       $16_1 = (Math_imul($18_1 + $1_1 | 0, $19_1) >>> 0) / (255 >>> 0) | 0;
       $19_1 = $16_1 >>> 0 < 255 >>> 0 ? $16_1 : 255;
       $1_1 = (Math_imul($17_1 + $1_1 | 0, $20_1) >>> 0) / (255 >>> 0) | 0;
       $20_1 = $1_1 >>> 0 < 255 >>> 0 ? $1_1 : 255;
      }
      HEAP32[$13_1 >> 2] = $19_1 << 8 | 0 | ($20_1 << 16 | 0) | 0 | $2_1 | 0 | ($21_1 << 24 | 0) | 0;
      $13_1 = $13_1 + 4 | 0;
      $14_1 = $14_1 + 4 | 0;
      $15_1 = $15_1 + -1 | 0;
      if ($15_1) {
       continue label$4
      }
      break label$4;
     };
     $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $1_1 = $2_1;
    $2_1 = $1_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
    $11_1 = $11_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    $12_1 = $12_1 + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
   HEAP32[$0_1 >> 2] = $12_1;
  }
 }
 
 function $782($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $21_1 = 0, $24_1 = 0, $25_1 = 0, $22_1 = 0, $23_1 = 0, $1_1 = 0, $12_1 = 0, $17_1 = 0, $27_1 = 0, $11_1 = 0, $20_1 = 0, $26_1 = 0, $8_1 = 0, $10_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $4_1 = $3_1 & 48 | 0;
  $5_1 = $3_1 & 2 | 0;
  $6_1 = $3_1 & 1 | 0;
  $7_1 = (($3_1 & 240 | 0) + -16 | 0) >>> 4 | 0;
  $8_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) << 16 | 0 | 0) / (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = ($8_1 | 0) / (2 | 0) | 0;
  $10_1 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) << 16 | 0 | 0) / ($1_1 | 0) | 0;
  $11_1 = ($10_1 | 0) / (2 | 0) | 0;
  $12_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $13_1 = HEAPU8[($0_1 + 63 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 62 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 61 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 60 | 0) >> 0] | 0;
  label$1 : while (1) {
   label$2 : {
    $17_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$2
    }
    $18_1 = $11_1 >>> 16 | 0;
    $19_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $12_1;
    $20_1 = $9_1;
    label$3 : while (1) {
     $3_1 = HEAP32[(($19_1 + Math_imul(HEAP32[($0_1 + 12 | 0) >> 2] | 0, $18_1) | 0) + (($20_1 >>> 14 | 0) & 262140 | 0) | 0) >> 2] | 0;
     $21_1 = $3_1 >>> 24 | 0;
     $22_1 = ($3_1 >>> 8 | 0) & 255 | 0;
     $23_1 = ($3_1 >>> 16 | 0) & 255 | 0;
     $2_1 = HEAP32[$1_1 >> 2] | 0;
     label$4 : {
      if (!$6_1) {
       break label$4
      }
      $21_1 = (Math_imul($21_1, $14_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($23_1, $15_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($22_1, $16_1) >>> 0) / (255 >>> 0) | 0;
     }
     $3_1 = $3_1 & 255 | 0;
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $3_1 = (Math_imul($3_1, $13_1) >>> 0) / (255 >>> 0) | 0;
     }
     $24_1 = $2_1 >>> 8 | 0;
     $25_1 = $2_1 >>> 16 | 0;
     label$6 : {
      if (!$4_1) {
       break label$6
      }
      if ($3_1 >>> 0 > 254 >>> 0) {
       break label$6
      }
      $21_1 = (Math_imul($3_1, $21_1) >>> 0) / (255 >>> 0) | 0;
      $23_1 = (Math_imul($3_1, $23_1) >>> 0) / (255 >>> 0) | 0;
      $22_1 = (Math_imul($3_1, $22_1) >>> 0) / (255 >>> 0) | 0;
     }
     $26_1 = $2_1 >>> 24 | 0;
     $2_1 = $2_1 & 255 | 0;
     $24_1 = $24_1 & 255 | 0;
     $25_1 = $25_1 & 255 | 0;
     label$7 : {
      label$8 : {
       switch ($7_1 | 0) {
       case 0:
        $27_1 = 255 - $3_1 | 0;
        $26_1 = $3_1 + ((Math_imul($27_1, $26_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $2_1 = $21_1 + ((Math_imul($27_1, $2_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $24_1 = $23_1 + ((Math_imul($27_1, $24_1) >>> 0) / (255 >>> 0) | 0) | 0;
        $25_1 = $22_1 + ((Math_imul($27_1, $25_1) >>> 0) / (255 >>> 0) | 0) | 0;
        break label$7;
       case 1:
        $2_1 = $21_1 + $2_1 | 0;
        $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
        $3_1 = $23_1 + $24_1 | 0;
        $24_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        $3_1 = $22_1 + $25_1 | 0;
        $25_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
        break label$7;
       case 3:
        $2_1 = (Math_imul($21_1, $2_1) >>> 0) / (255 >>> 0) | 0;
        $24_1 = (Math_imul($23_1, $24_1) >>> 0) / (255 >>> 0) | 0;
        $25_1 = (Math_imul($22_1, $25_1) >>> 0) / (255 >>> 0) | 0;
        break label$7;
       case 7:
        break label$8;
       default:
        break label$7;
       };
      }
      $3_1 = 255 - $3_1 | 0;
      $2_1 = (Math_imul($21_1 + $3_1 | 0, $2_1) >>> 0) / (255 >>> 0) | 0;
      $2_1 = $2_1 >>> 0 < 255 >>> 0 ? $2_1 : 255;
      $21_1 = (Math_imul($23_1 + $3_1 | 0, $24_1) >>> 0) / (255 >>> 0) | 0;
      $24_1 = $21_1 >>> 0 < 255 >>> 0 ? $21_1 : 255;
      $3_1 = (Math_imul($22_1 + $3_1 | 0, $25_1) >>> 0) / (255 >>> 0) | 0;
      $25_1 = $3_1 >>> 0 < 255 >>> 0 ? $3_1 : 255;
     }
     HEAP32[$1_1 >> 2] = $24_1 << 8 | 0 | ($25_1 << 16 | 0) | 0 | $2_1 | 0 | ($26_1 << 24 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $20_1 = $20_1 + $8_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $3_1 = $2_1;
   $2_1 = $3_1 + -1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   $11_1 = $11_1 + $10_1 | 0;
   $12_1 = $12_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   if ($3_1) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($0_1 + 20 | 0) >> 2] = $12_1;
 }
 
 function $783($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $1_1 = 0, $9_1 = 0, $11_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) >>> 0 > 7 >>> 0) {
     break label$2
    }
    $796($2_1 | 0);
    $2_1 = $260(73632 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAPU8[$0_1 >> 0] | 0) & 2 | 0)) {
     break label$3
    }
    $576($0_1 | 0, 1 | 0);
    $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = 274;
   HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($2_1 + 60 | 0) >> 2] = $4_1;
   HEAP32[($2_1 + 28 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
   label$4 : {
    if (!((HEAPU8[($2_1 + 69 | 0) >> 0] | 0) & 16 | 0)) {
     break label$4
    }
    if ($575($0_1 | 0) | 0) {
     break label$4
    }
    $2_1 = 0;
    break label$1;
   }
   label$5 : {
    label$6 : {
     if (!(HEAP32[($2_1 + 4 | 0) >> 2] | 0)) {
      break label$6
     }
     if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0) & -4097 | 0) {
      break label$6
     }
     $6_1 = 133;
     break label$5;
    }
    $6_1 = 275;
    $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ((HEAPU8[($4_1 + 28 | 0) >> 0] | 0) >>> 0 > 8 >>> 0) {
     break label$5
    }
    if ((HEAPU8[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 28 | 0) >> 0] | 0) >>> 0 > 8 >>> 0) {
     break label$5
    }
    label$7 : {
     label$8 : {
      if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) >>> 0 > 7 >>> 0) {
       break label$8
      }
      label$9 : {
       $5_1 = HEAP32[$4_1 >> 2] | 0;
       if (!$5_1) {
        break label$9
       }
       if (($5_1 & -268435456 | 0 | 0) != (268435456 | 0)) {
        break label$8
       }
      }
      if (((($5_1 >>> 24 | 0) & 15 | 0) + -1 | 0) >>> 0 > 2 >>> 0) {
       break label$8
      }
      $6_1 = $594($0_1 | 0) | 0;
      break label$7;
     }
     label$10 : {
      if ((HEAPU8[($4_1 + 9 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break label$10
      }
      label$11 : {
       $4_1 = HEAP32[$4_1 >> 2] | 0;
       if (!$4_1) {
        break label$11
       }
       if (($4_1 & -268435456 | 0 | 0) != (268435456 | 0)) {
        break label$10
       }
      }
      if (((($4_1 >>> 24 | 0) & 15 | 0) + -1 | 0) >>> 0 > 2 >>> 0) {
       break label$10
      }
      $6_1 = $607($0_1 | 0) | 0;
      break label$7;
     }
     label$12 : {
      if (!((HEAPU8[($2_1 + 68 | 0) >> 0] | 0) & 16 | 0)) {
       break label$12
      }
      $6_1 = $618($0_1 | 0) | 0;
      break label$7;
     }
     $6_1 = $633($0_1 | 0) | 0;
    }
    if ($6_1) {
     break label$5
    }
    $4_1 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
    $7_1 = HEAP32[(HEAP32[($3_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
    $8_1 = HEAP32[(HEAP32[($0_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
    label$13 : {
     if ((HEAP32[(0 + 116988 | 0) >> 2] | 0 | 0) != (2147483647 | 0)) {
      break label$13
     }
     $5_1 = $378(75497 | 0) | 0;
     HEAP32[(0 + 116988 | 0) >> 2] = 0;
     label$14 : {
      if (!$5_1) {
       break label$14
      }
      HEAP32[$1_1 >> 2] = 116988;
      $555($5_1 | 0, 66848 | 0, $1_1 | 0) | 0;
      break label$13;
     }
     label$15 : {
      if (!($562() | 0)) {
       break label$15
      }
      HEAP32[(0 + 116988 | 0) >> 2] = HEAP32[(0 + 116988 | 0) >> 2] | 0 | 1 | 0;
     }
     label$16 : {
      if (!($563() | 0)) {
       break label$16
      }
      HEAP32[(0 + 116988 | 0) >> 2] = HEAP32[(0 + 116988 | 0) >> 2] | 0 | 2 | 0;
     }
     label$17 : {
      if (!($564() | 0)) {
       break label$17
      }
      HEAP32[(0 + 116988 | 0) >> 2] = HEAP32[(0 + 116988 | 0) >> 2] | 0 | 4 | 0;
     }
     label$18 : {
      if (!($565() | 0)) {
       break label$18
      }
      HEAP32[(0 + 116988 | 0) >> 2] = HEAP32[(0 + 116988 | 0) >> 2] | 0 | 8 | 0;
     }
     if (!($561() | 0)) {
      break label$13
     }
     HEAP32[(0 + 116988 | 0) >> 2] = HEAP32[(0 + 116988 | 0) >> 2] | 0 | 16 | 0;
    }
    label$19 : {
     $6_1 = HEAP32[(114448 + 16 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$19
     }
     $9_1 = $4_1 & 1011 | 0;
     $4_1 = 0;
     $10_1 = HEAP32[(0 + 116988 | 0) >> 2] | 0;
     label$20 : while (1) {
      label$21 : {
       $5_1 = 114448 + Math_imul($4_1, 20) | 0;
       if (($8_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
        break label$21
       }
       if (($7_1 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0)) {
        break label$21
       }
       if (((HEAP32[($5_1 + 8 | 0) >> 2] | 0) & $9_1 | 0 | 0) != ($9_1 | 0)) {
        break label$21
       }
       $11_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($11_1 & $10_1 | 0 | 0) == ($11_1 | 0)) {
        break label$5
       }
      }
      $4_1 = $4_1 + 1 | 0;
      $6_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
      if ($6_1) {
       continue label$20
      }
      break label$20;
     };
    }
    $3_1 = HEAP32[(HEAP32[($3_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
    label$22 : {
     label$23 : {
      $0_1 = HEAP32[(HEAP32[($0_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
      if (!$0_1) {
       break label$23
      }
      if (($0_1 & -268435456 | 0 | 0) != (268435456 | 0)) {
       break label$22
      }
     }
     if (((($0_1 >>> 24 | 0) & 15 | 0) + -1 | 0) >>> 0 < 3 >>> 0) {
      break label$22
     }
     label$24 : {
      if (!$3_1) {
       break label$24
      }
      if (($3_1 & -268435456 | 0 | 0) != (268435456 | 0)) {
       break label$22
      }
     }
     if (((($3_1 >>> 24 | 0) & 15 | 0) + -1 | 0) >>> 0 < 3 >>> 0) {
      break label$22
     }
     HEAP32[($2_1 + 12 | 0) >> 2] = 275;
     $2_1 = 0;
     break label$1;
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = 0;
    $796($2_1 | 0);
    $2_1 = $260(73632 | 0, 0 | 0) | 0;
    break label$1;
   }
   HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
   $2_1 = 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $784($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $9_1 = 0, $6_1 = 0, $8_1 = 0, $5_1 = 0, $7_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (!((HEAPU8[$2_1 >> 0] | 0) & 2 | 0)) {
         break label$6
        }
        $4_1 = $805($2_1 | 0) | 0;
        $5_1 = $4_1 >>> 31 | 0;
        if (!((HEAPU8[$0_1 >> 0] | 0) & 2 | 0)) {
         break label$4
        }
        $6_1 = $5_1;
        break label$5;
       }
       $6_1 = 0;
       $5_1 = 1;
       $7_1 = 1;
       if (!((HEAPU8[$0_1 >> 0] | 0) & 2 | 0)) {
        break label$3
       }
      }
      $8_1 = $805($0_1 | 0) | 0;
      $9_1 = $8_1 >>> 31 | 0;
      $7_1 = 0;
      $4_1 = -1;
      if (($8_1 | 0) < (0 | 0)) {
       break label$1
      }
      if (!$6_1) {
       break label$3
      }
      break label$1;
     }
     $9_1 = 1;
     if (($4_1 | 0) < (0 | 0)) {
      break label$2
     }
     $7_1 = 1;
    }
    $4_1 = 0;
    label$7 : {
     if (!$1_1) {
      break label$7
     }
     $9_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     if (($9_1 | 0) < (1 | 0)) {
      break label$7
     }
     $8_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (($8_1 | 0) < (1 | 0)) {
      break label$7
     }
     $10_1 = HEAPU16[$1_1 >> 1] | 0;
     $11_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     $12_1 = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
     $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     $4_1 = HEAPU8[((HEAP32[($1_1 + 56 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0;
     $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     HEAP32[($1_1 + 28 | 0) >> 2] = $6_1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $8_1;
     HEAP32[($1_1 + 20 | 0) >> 2] = $9_1;
     HEAP32[($1_1 + 32 | 0) >> 2] = $6_1 - Math_imul($9_1, $4_1) | 0;
     HEAP32[($1_1 + 16 | 0) >> 2] = ($11_1 + Math_imul($12_1, $6_1) | 0) + Math_imul($10_1, $4_1) | 0;
     $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
     $9_1 = HEAPU8[((HEAP32[($1_1 + 60 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0;
     HEAP32[($1_1 + 36 | 0) >> 2] = ((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + Math_imul(HEAPU16[($3_1 + 4 | 0) >> 1] | 0, $4_1) | 0) + Math_imul(HEAPU16[$3_1 >> 1] | 0, $9_1) | 0;
     $6_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     HEAP32[($1_1 + 40 | 0) >> 2] = $6_1;
     HEAP32[($1_1 + 44 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     HEAP32[($1_1 + 52 | 0) >> 2] = $4_1 - Math_imul($6_1, $9_1) | 0;
     HEAP32[($1_1 + 48 | 0) >> 2] = $4_1;
     FUNCTION_TABLE[HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0]($1_1 + 16 | 0);
     $4_1 = 0;
    }
    $9_1 = $7_1;
    break label$1;
   }
   $4_1 = -1;
  }
  label$8 : {
   if ($5_1) {
    break label$8
   }
   $806($2_1 | 0);
  }
  label$9 : {
   if ($9_1) {
    break label$9
   }
   $806($0_1 | 0);
  }
  return $4_1 | 0;
 }
 
 function $785($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   if (($0_1 & -268435456 | 0 | 0) == (268435456 | 0)) {
    break label$1
   }
   $260(73663 | 0, 0 | 0) | 0;
   return 0 | 0;
  }
  HEAP32[$1_1 >> 2] = ($0_1 & 255 | 0) >>> 0 < 3 >>> 0 ? ($0_1 >>> 8 | 0) & 255 | 0 : ($0_1 << 3 | 0) & 2040 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$2_1 >> 2] = 0;
  label$2 : {
   label$3 : {
    if (($0_1 | 0) == (390076419 | 0)) {
     break label$3
    }
    if (($0_1 | 0) != (386930691 | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = 255;
    HEAP32[$3_1 >> 2] = 65280;
    HEAP32[$4_1 >> 2] = 16711680;
    return 1 | 0;
   }
   HEAP32[$2_1 >> 2] = 16711680;
   HEAP32[$3_1 >> 2] = 65280;
   HEAP32[$4_1 >> 2] = 255;
   return 1 | 0;
  }
  $1_1 = 1;
  label$4 : {
   if (((($0_1 >>> 24 | 0) & 15 | 0) + -4 | 0) >>> 0 > 2 >>> 0) {
    break label$4
   }
   label$5 : {
    $1_1 = (($0_1 >>> 16 | 0) & 15 | 0) + -1 | 0;
    if ($1_1 >>> 0 < 8 >>> 0) {
     break label$5
    }
    $260(67557 | 0, 0 | 0) | 0;
    return 0 | 0;
   }
   $1_1 = $1_1 << 2 | 0;
   $6_1 = HEAP32[($1_1 + 99392 | 0) >> 2] | 0;
   $7_1 = HEAP32[($1_1 + 99360 | 0) >> 2] | 0;
   $8_1 = HEAP32[($1_1 + 99328 | 0) >> 2] | 0;
   $1_1 = HEAP32[($1_1 + 99296 | 0) >> 2] | 0;
   label$6 : {
    switch ((($0_1 >>> 20 | 0) & 15 | 0) + -1 | 0 | 0) {
    case 1:
     HEAP32[$2_1 >> 2] = $6_1;
     HEAP32[$3_1 >> 2] = $7_1;
     HEAP32[$4_1 >> 2] = $8_1;
     return 1 | 0;
    case 2:
     HEAP32[$5_1 >> 2] = $6_1;
    case 0:
     HEAP32[$2_1 >> 2] = $7_1;
     HEAP32[$3_1 >> 2] = $8_1;
     HEAP32[$4_1 >> 2] = $1_1;
     return 1 | 0;
    case 3:
     HEAP32[$2_1 >> 2] = $6_1;
     HEAP32[$3_1 >> 2] = $7_1;
     HEAP32[$4_1 >> 2] = $8_1;
     HEAP32[$5_1 >> 2] = $1_1;
     return 1 | 0;
    case 5:
     HEAP32[$4_1 >> 2] = $6_1;
     HEAP32[$3_1 >> 2] = $7_1;
     HEAP32[$2_1 >> 2] = $8_1;
     return 1 | 0;
    case 7:
     HEAP32[$4_1 >> 2] = $6_1;
     HEAP32[$3_1 >> 2] = $7_1;
     HEAP32[$2_1 >> 2] = $8_1;
     HEAP32[$5_1 >> 2] = $1_1;
     return 1 | 0;
    case 6:
     HEAP32[$5_1 >> 2] = $6_1;
    case 4:
     HEAP32[$4_1 >> 2] = $7_1;
     HEAP32[$3_1 >> 2] = $8_1;
     HEAP32[$2_1 >> 2] = $1_1;
     return 1 | 0;
    default:
     break label$6;
    };
   }
   $1_1 = 0;
   $260(67557 | 0, 0 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $786($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = 287310080;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        switch ($0_1 + -1 | 0 | 0) {
        case 3:
         return 304088064 | 0;
        case 7:
         label$11 : {
          if ($1_1) {
           break label$11
          }
          return 318769153 | 0;
         }
         if (($1_1 | 0) != (224 | 0)) {
          break label$1
         }
         if (($2_1 | 0) != (28 | 0)) {
          break label$1
         }
         if (($3_1 | 0) != (3 | 0)) {
          break label$1
         }
         if ($4_1) {
          break label$1
         }
         return 336660481 | 0;
        case 11:
         $5_1 = 353504258;
         if (!$1_1) {
          break label$2
         }
         label$12 : {
          if ($4_1) {
           break label$12
          }
          if (($2_1 | 0) != (240 | 0)) {
           break label$12
          }
          if (($1_1 | 0) != (3840 | 0)) {
           break label$12
          }
          if (($3_1 | 0) == (15 | 0)) {
           break label$2
          }
         }
         if ($4_1) {
          break label$1
         }
         if (($2_1 | 0) != (240 | 0)) {
          break label$1
         }
         if (($1_1 | 0) != (15 | 0)) {
          break label$1
         }
         if (($3_1 | 0) != (3840 | 0)) {
          break label$1
         }
         return 357698562 | 0;
        case 14:
         if ($1_1) {
          break label$5
         }
         return 353570562 | 0;
        case 0:
         break label$2;
        case 31:
         break label$3;
        case 23:
         break label$4;
        case 15:
         break label$6;
        default:
         break label$1;
        };
       }
       if ($1_1) {
        break label$5
       }
       return 353701890 | 0;
      }
      label$13 : {
       $0_1 = ($2_1 | 0) == (992 | 0);
       $5_1 = (($1_1 | 0) == (31744 | 0) & $0_1 | 0) & ($3_1 | 0) == (31 | 0) | 0;
       if (($5_1 | 0) != (1 | 0)) {
        break label$13
       }
       if ($4_1) {
        break label$13
       }
       return 353570562 | 0;
      }
      $0_1 = ($1_1 | 0) == (31 | 0) & ($0_1 & ($3_1 | 0) == (31744 | 0) | 0) | 0;
      label$14 : {
       if ($4_1) {
        break label$14
       }
       if (!$0_1) {
        break label$14
       }
       return 357764866 | 0;
      }
      label$15 : {
       if (($4_1 | 0) != (61440 | 0)) {
        break label$15
       }
       if (($2_1 | 0) != (240 | 0)) {
        break label$15
       }
       if (($1_1 | 0) != (3840 | 0)) {
        break label$15
       }
       if (($3_1 | 0) != (15 | 0)) {
        break label$15
       }
       return 355602434 | 0;
      }
      label$16 : {
       if (($4_1 | 0) != (15 | 0)) {
        break label$16
       }
       if (($2_1 | 0) != (3840 | 0)) {
        break label$16
       }
       if (($1_1 | 0) != (61440 | 0)) {
        break label$16
       }
       if (($3_1 | 0) != (240 | 0)) {
        break label$16
       }
       return 356651010 | 0;
      }
      label$17 : {
       if (($4_1 | 0) != (61440 | 0)) {
        break label$17
       }
       if (($2_1 | 0) != (240 | 0)) {
        break label$17
       }
       if (($1_1 | 0) != (15 | 0)) {
        break label$17
       }
       if (($3_1 | 0) != (3840 | 0)) {
        break label$17
       }
       return 359796738 | 0;
      }
      label$18 : {
       if (($4_1 | 0) != (15 | 0)) {
        break label$18
       }
       if (($2_1 | 0) != (3840 | 0)) {
        break label$18
       }
       if (($1_1 | 0) != (240 | 0)) {
        break label$18
       }
       if (($3_1 | 0) != (61440 | 0)) {
        break label$18
       }
       return 360845314 | 0;
      }
      label$19 : {
       if (!($5_1 & ($4_1 | 0) == (32768 | 0) | 0)) {
        break label$19
       }
       return 355667970 | 0;
      }
      label$20 : {
       if (($4_1 | 0) != (1 | 0)) {
        break label$20
       }
       if (($1_1 | 0) != (63488 | 0)) {
        break label$20
       }
       if (($2_1 | 0) != (1984 | 0)) {
        break label$20
       }
       if (($3_1 | 0) != (62 | 0)) {
        break label$20
       }
       return 356782082 | 0;
      }
      label$21 : {
       if (!(($4_1 | 0) == (32768 | 0) & $0_1 | 0)) {
        break label$21
       }
       return 359862274 | 0;
      }
      label$22 : {
       if (($1_1 | 0) != (62 | 0)) {
        break label$22
       }
       if (($2_1 | 0) != (1984 | 0)) {
        break label$22
       }
       if (($3_1 | 0) != (63488 | 0)) {
        break label$22
       }
       if (($4_1 | 0) != (1 | 0)) {
        break label$22
       }
       return 360976386 | 0;
      }
      $5_1 = 353701890;
      label$23 : {
       if (($1_1 | 0) != (63488 | 0)) {
        break label$23
       }
       if (($2_1 | 0) != (2016 | 0)) {
        break label$23
       }
       if (($3_1 | 0) != (31 | 0)) {
        break label$23
       }
       if (!$4_1) {
        break label$2
       }
      }
      label$24 : {
       if (($1_1 | 0) != (31 | 0)) {
        break label$24
       }
       if (($2_1 | 0) != (2016 | 0)) {
        break label$24
       }
       if (($3_1 | 0) != (63488 | 0)) {
        break label$24
       }
       if ($4_1) {
        break label$24
       }
       return 357896194 | 0;
      }
      if (($1_1 | 0) != (63 | 0)) {
       break label$1
      }
      if (($2_1 | 0) != (1984 | 0)) {
       break label$1
      }
      if (($3_1 | 0) != (63488 | 0)) {
       break label$1
      }
      if (!$4_1) {
       break label$2
      }
      break label$1;
     }
     $5_1 = 390076419;
     if (!$1_1) {
      break label$2
     }
     if (($1_1 | 0) == (16711680 | 0)) {
      break label$2
     }
     if (($1_1 | 0) != (255 | 0)) {
      break label$1
     }
     return 386930691 | 0;
    }
    $5_1 = 370546692;
    if (!$1_1) {
     break label$2
    }
    $0_1 = ($2_1 | 0) == (65280 | 0) & (($1_1 | 0) == (16711680 | 0) & ($3_1 | 0) == (255 | 0) | 0) | 0;
    label$25 : {
     if ($4_1) {
      break label$25
     }
     if ($0_1) {
      break label$2
     }
    }
    $5_1 = ($2_1 | 0) == (16711680 | 0) & (($1_1 | 0) == (-16777216 | 0) & ($3_1 | 0) == (65280 | 0) | 0) | 0;
    label$26 : {
     if ($4_1) {
      break label$26
     }
     if (!$5_1) {
      break label$26
     }
     return 371595268 | 0;
    }
    $6_1 = ($2_1 | 0) == (65280 | 0) & (($1_1 | 0) == (255 | 0) & ($3_1 | 0) == (16711680 | 0) | 0) | 0;
    label$27 : {
     if ($4_1) {
      break label$27
     }
     if (!$6_1) {
      break label$27
     }
     return 374740996 | 0;
    }
    $7_1 = ($2_1 | 0) == (16711680 | 0) & (($1_1 | 0) == (65280 | 0) & ($3_1 | 0) == (-16777216 | 0) | 0) | 0;
    label$28 : {
     if ($4_1) {
      break label$28
     }
     if (!$7_1) {
      break label$28
     }
     return 375789572 | 0;
    }
    label$29 : {
     if (!(($4_1 | 0) == (-16777216 | 0) & $0_1 | 0)) {
      break label$29
     }
     return 372645892 | 0;
    }
    label$30 : {
     if (!(($4_1 | 0) == (255 | 0) & $5_1 | 0)) {
      break label$30
     }
     return 373694468 | 0;
    }
    label$31 : {
     if (!(($4_1 | 0) == (-16777216 | 0) & $6_1 | 0)) {
      break label$31
     }
     return 376840196 | 0;
    }
    label$32 : {
     if (!(($4_1 | 0) == (255 | 0) & $7_1 | 0)) {
      break label$32
     }
     return 377888772 | 0;
    }
    if (($1_1 | 0) != (1072693248 | 0)) {
     break label$1
    }
    if (($2_1 | 0) != (1047552 | 0)) {
     break label$1
    }
    if (($3_1 | 0) != (1023 | 0)) {
     break label$1
    }
    if (($4_1 | 0) != (-1073741824 | 0)) {
     break label$1
    }
    $5_1 = 372711428;
   }
   return $5_1 | 0;
  }
  return 0 | 0;
 }
 
 function $787($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $522(130792 | 0);
  label$1 : {
   $1_1 = HEAP32[(0 + 130796 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if (($0_1 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
      break label$3
     }
     HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     $523(130792 | 0);
     return $1_1 | 0;
    }
    $1_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  label$4 : {
   $1_1 = $456(44 | 0) | 0;
   if ($1_1) {
    break label$4
   }
   $523(130792 | 0);
   $262(0 | 0) | 0;
   return 0 | 0;
  }
  label$5 : {
   if (($788($1_1 | 0, $0_1 | 0) | 0 | 0) > (-1 | 0)) {
    break label$5
   }
   $523(130792 | 0);
   $459($1_1 | 0);
   return 0 | 0;
  }
  label$6 : {
   label$7 : {
    label$8 : {
     if (!$0_1) {
      break label$8
     }
     if (($0_1 & -268435456 | 0 | 0) != (268435456 | 0)) {
      break label$7
     }
    }
    if (((($0_1 >>> 24 | 0) & 15 | 0) + -1 | 0) >>> 0 < 3 >>> 0) {
     break label$6
    }
   }
   HEAP32[($1_1 + 40 | 0) >> 2] = HEAP32[(0 + 130796 | 0) >> 2] | 0;
   HEAP32[(0 + 130796 | 0) >> 2] = $1_1;
  }
  $523(130792 | 0);
  return $1_1 | 0;
 }
 
 function $788($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $3_1 = 0, $2_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($785($1_1 | 0, $2_1 + 28 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 20 | 0 | 0, $2_1 + 16 | 0 | 0, $2_1 + 12 | 0 | 0) | 0) {
     break label$2
    }
    $1_1 = -1;
    break label$1;
   }
   $3_1 = 0;
   $536($0_1 | 0, 0 | 0, 44 | 0) | 0;
   HEAP32[$0_1 >> 2] = $1_1;
   $1_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
   HEAP8[($0_1 + 8 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 9 | 0) >> 0] = ($1_1 + 7 | 0 | 0) / (8 | 0) | 0;
   $4_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
   HEAP8[($0_1 + 32 | 0) >> 0] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
   HEAP8[($0_1 + 28 | 0) >> 0] = 8;
   label$3 : {
    if (!$4_1) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (!($4_1 & 1 | 0)) {
       break label$5
      }
      $1_1 = $4_1;
      break label$4;
     }
     label$6 : while (1) {
      $3_1 = $3_1 + 1 | 0;
      $5_1 = $4_1 & 2 | 0;
      $1_1 = $4_1 >>> 1 | 0;
      $4_1 = $1_1;
      if (!$5_1) {
       continue label$6
      }
      break label$6;
     };
     HEAP8[($0_1 + 32 | 0) >> 0] = $3_1;
    }
    $4_1 = 8;
    label$7 : while (1) {
     $4_1 = $4_1 + -1 | 0;
     $3_1 = $1_1 & 2 | 0;
     $1_1 = $1_1 >>> 1 | 0;
     if ($3_1) {
      continue label$7
     }
     break label$7;
    };
    HEAP8[($0_1 + 28 | 0) >> 0] = $4_1;
   }
   $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
   $3_1 = 0;
   HEAP8[($0_1 + 33 | 0) >> 0] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
   HEAP8[($0_1 + 29 | 0) >> 0] = 8;
   label$8 : {
    if (!$4_1) {
     break label$8
    }
    label$9 : {
     label$10 : {
      if (!($4_1 & 1 | 0)) {
       break label$10
      }
      $1_1 = $4_1;
      break label$9;
     }
     label$11 : while (1) {
      $3_1 = $3_1 + 1 | 0;
      $5_1 = $4_1 & 2 | 0;
      $1_1 = $4_1 >>> 1 | 0;
      $4_1 = $1_1;
      if (!$5_1) {
       continue label$11
      }
      break label$11;
     };
     HEAP8[($0_1 + 33 | 0) >> 0] = $3_1;
    }
    $4_1 = 8;
    label$12 : while (1) {
     $4_1 = $4_1 + -1 | 0;
     $3_1 = $1_1 & 2 | 0;
     $1_1 = $1_1 >>> 1 | 0;
     if ($3_1) {
      continue label$12
     }
     break label$12;
    };
    HEAP8[($0_1 + 29 | 0) >> 0] = $4_1;
   }
   $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   $3_1 = 0;
   HEAP8[($0_1 + 34 | 0) >> 0] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = $4_1;
   HEAP8[($0_1 + 30 | 0) >> 0] = 8;
   label$13 : {
    if (!$4_1) {
     break label$13
    }
    label$14 : {
     label$15 : {
      if (!($4_1 & 1 | 0)) {
       break label$15
      }
      $1_1 = $4_1;
      break label$14;
     }
     label$16 : while (1) {
      $3_1 = $3_1 + 1 | 0;
      $5_1 = $4_1 & 2 | 0;
      $1_1 = $4_1 >>> 1 | 0;
      $4_1 = $1_1;
      if (!$5_1) {
       continue label$16
      }
      break label$16;
     };
     HEAP8[($0_1 + 34 | 0) >> 0] = $3_1;
    }
    $4_1 = 8;
    label$17 : while (1) {
     $4_1 = $4_1 + -1 | 0;
     $3_1 = $1_1 & 2 | 0;
     $1_1 = $1_1 >>> 1 | 0;
     if ($3_1) {
      continue label$17
     }
     break label$17;
    };
    HEAP8[($0_1 + 30 | 0) >> 0] = $4_1;
   }
   $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   $3_1 = 0;
   HEAP8[($0_1 + 35 | 0) >> 0] = 0;
   HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
   HEAP8[($0_1 + 31 | 0) >> 0] = 8;
   label$18 : {
    if (!$4_1) {
     break label$18
    }
    label$19 : {
     label$20 : {
      if (!($4_1 & 1 | 0)) {
       break label$20
      }
      $1_1 = $4_1;
      break label$19;
     }
     label$21 : while (1) {
      $3_1 = $3_1 + 1 | 0;
      $5_1 = $4_1 & 2 | 0;
      $1_1 = $4_1 >>> 1 | 0;
      $4_1 = $1_1;
      if (!$5_1) {
       continue label$21
      }
      break label$21;
     };
     HEAP8[($0_1 + 35 | 0) >> 0] = $3_1;
    }
    $4_1 = 8;
    label$22 : while (1) {
     $4_1 = $4_1 + -1 | 0;
     $3_1 = $1_1 & 2 | 0;
     $1_1 = $1_1 >>> 1 | 0;
     if ($3_1) {
      continue label$22
     }
     break label$22;
    };
    HEAP8[($0_1 + 31 | 0) >> 0] = $4_1;
   }
   HEAP32[($0_1 + 36 | 0) >> 2] = 1;
   HEAP32[($0_1 + 40 | 0) >> 2] = 0;
   $1_1 = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $789($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$1_1 >> 2] = 67766;
    $260(73395 | 0, $1_1 | 0) | 0;
    break label$1;
   }
   $522(130792 | 0);
   $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   HEAP32[($0_1 + 36 | 0) >> 2] = $2_1 + -1 | 0;
   label$3 : {
    if (($2_1 | 0) < (2 | 0)) {
     break label$3
    }
    $523(130792 | 0);
    break label$1;
   }
   label$4 : {
    label$5 : {
     label$6 : {
      $2_1 = HEAP32[(0 + 130796 | 0) >> 2] | 0;
      if (($0_1 | 0) != ($2_1 | 0)) {
       break label$6
      }
      $2_1 = 130796;
      break label$5;
     }
     if (!$2_1) {
      break label$4
     }
     label$7 : while (1) {
      $3_1 = $2_1;
      $2_1 = HEAP32[($2_1 + 40 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$4
      }
      if (($2_1 | 0) != ($0_1 | 0)) {
       continue label$7
      }
      break label$7;
     };
     $2_1 = $3_1 + 40 | 0;
    }
    HEAP32[$2_1 >> 2] = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   }
   $523(130792 | 0);
   label$8 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $3_1 + -1 | 0;
    if (($3_1 | 0) > (1 | 0)) {
     break label$8
    }
    $459(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0);
    $459($2_1 | 0);
   }
   $459($0_1 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $790($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$1_1 >> 2] = 72439;
    $260(73395 | 0, $1_1 | 0) | 0;
    break label$1;
   }
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $2_1 + -1 | 0;
   if (($2_1 | 0) > (1 | 0)) {
    break label$1
   }
   $459(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
   $459($0_1 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $791($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   label$2 : {
    if (($0_1 | 0) > (0 | 0)) {
     break label$2
    }
    HEAP32[$1_1 >> 2] = 68076;
    $260(73395 | 0, $1_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    $2_1 = $456(16 | 0) | 0;
    if ($2_1) {
     break label$3
    }
    $2_1 = 0;
    $262(0 | 0) | 0;
    break label$1;
   }
   $3_1 = $0_1 << 2 | 0;
   $4_1 = $456($3_1 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
   label$4 : {
    if ($4_1) {
     break label$4
    }
    $459($2_1 | 0);
    $2_1 = 0;
    $262(0 | 0) | 0;
    break label$1;
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = 1;
   HEAP32[($2_1 + 12 | 0) >> 2] = 1;
   HEAP32[$2_1 >> 2] = $0_1;
   $536($4_1 | 0, 255 | 0, $3_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $792($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = 67737;
    $3_1 = $260(73395 | 0, $2_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (!$1_1) {
     break label$3
    }
    if ((HEAP32[$1_1 >> 2] | 0 | 0) <= (1 << (HEAPU8[($0_1 + 8 | 0) >> 0] | 0) | 0 | 0)) {
     break label$3
    }
    $3_1 = $260(67603 | 0, 0 | 0) | 0;
    break label$1;
   }
   $3_1 = 0;
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($4_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $5_1 + -1 | 0;
    if (($5_1 | 0) > (1 | 0)) {
     break label$4
    }
    $459(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
    $459($4_1 | 0);
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($1_1 + 12 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $793($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, $7_1 = 0, $5_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[$0_1 >> 2] | 0;
    if (($4_1 | 0) < (1 | 0)) {
     break label$2
    }
    $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $6_1 = 0;
    $0_1 = 0;
    label$3 : {
     label$4 : while (1) {
      if ((HEAPU8[(($5_1 + ($0_1 << 2 | 0) | 0) + 3 | 0) >> 0] | 0 | 0) != (255 | 0)) {
       break label$3
      }
      $3_1 = 1;
      $7_1 = 1;
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) == ($4_1 | 0)) {
       break label$1
      }
      continue label$4;
     };
    }
    label$5 : {
     label$6 : while (1) {
      if (HEAPU8[(($5_1 + ($6_1 << 2 | 0) | 0) + 3 | 0) >> 0] | 0) {
       break label$5
      }
      $3_1 = 1;
      $6_1 = $6_1 + 1 | 0;
      if (($6_1 | 0) != ($4_1 | 0)) {
       continue label$6
      }
      break label$6;
     };
     $7_1 = 0;
     break label$1;
    }
    $3_1 = 0;
   }
   $7_1 = 1;
  }
  HEAP32[$1_1 >> 2] = $3_1;
  HEAP32[$2_1 >> 2] = $7_1;
 }
 
 function $794() {
  var $0_1 = 0;
  label$1 : {
   $0_1 = $457(1 | 0, 88 | 0) | 0;
   if ($0_1) {
    break label$1
   }
   $262(0 | 0) | 0;
   return $0_1 | 0;
  }
  HEAP32[($0_1 + 76 | 0) >> 2] = -1;
  return $0_1 | 0;
 }
 
 function $795($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $0_1 = HEAP32[$1_1 >> 2] | 0;
     if (!$0_1) {
      break label$3
     }
     label$4 : {
      $2_1 = HEAP32[$0_1 >> 2] | 0;
      if (!$2_1) {
       break label$4
      }
      $560($2_1 + 32 | 0 | 0, $0_1 | 0);
     }
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[($0_1 + 80 | 0) >> 2] = 0;
     HEAP32[($0_1 + 84 | 0) >> 2] = 0;
     $459(HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0);
     HEAP32[($0_1 + 64 | 0) >> 2] = 0;
    }
    $0_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $459($1_1 | 0);
    $1_1 = $0_1;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $796($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    $560($1_1 + 32 | 0 | 0, $0_1 | 0);
   }
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[($0_1 + 80 | 0) >> 2] = 0;
   HEAP32[($0_1 + 84 | 0) >> 2] = 0;
   $459(HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0);
   HEAP32[($0_1 + 64 | 0) >> 2] = 0;
  }
 }
 
 function $797($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0, $5_1 = 0, $9_1 = 0, $2_1 = 0, $15_1 = 0, $16_1 = 0, $7_1 = 0, $17_1 = 0, $14_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $2_1 = global$0 - 1040 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAPU8[$0_1 >> 0] | 0) & 2 | 0)) {
    break label$1
   }
   $576($0_1 | 0, 1 | 0);
  }
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   label$3 : {
    $4_1 = HEAP32[$3_1 >> 2] | 0;
    if (!$4_1) {
     break label$3
    }
    $560($4_1 + 32 | 0 | 0, $3_1 | 0);
   }
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[($3_1 + 80 | 0) >> 2] = 0;
   HEAP32[($3_1 + 84 | 0) >> 2] = 0;
   $459(HEAP32[($3_1 + 64 | 0) >> 2] | 0 | 0);
   HEAP32[($3_1 + 64 | 0) >> 2] = 0;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  $5_1 = $3_1 + 4 | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          $4_1 = HEAP32[$7_1 >> 2] | 0;
          if (!$4_1) {
           break label$11
          }
          if (($4_1 & -268435456 | 0 | 0) != (268435456 | 0)) {
           break label$10
          }
         }
         if (((($4_1 >>> 24 | 0) & 15 | 0) + -1 | 0) >>> 0 > 2 >>> 0) {
          break label$10
         }
         label$12 : {
          label$13 : {
           $8_1 = HEAP32[$6_1 >> 2] | 0;
           if (!$8_1) {
            break label$13
           }
           if (($8_1 & -268435456 | 0 | 0) != (268435456 | 0)) {
            break label$12
           }
          }
          $4_1 = -1;
          if (((($8_1 >>> 24 | 0) & 15 | 0) + -1 | 0) >>> 0 > 2 >>> 0) {
           break label$12
          }
          $8_1 = $798(HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
          HEAP32[($3_1 + 64 | 0) >> 2] = $8_1;
          label$14 : {
           if (HEAP32[($3_1 + 4 | 0) >> 2] | 0) {
            break label$14
           }
           if (!$8_1) {
            break label$4
           }
          }
          if ((HEAPU8[($7_1 + 8 | 0) >> 0] | 0 | 0) == (HEAPU8[($6_1 + 8 | 0) >> 0] | 0 | 0)) {
           break label$7
          }
          HEAP32[$5_1 >> 2] = 0;
          break label$7;
         }
         $9_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
         $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
         $10_1 = HEAPU8[($4_1 + 79 | 0) >> 0] | 0;
         $11_1 = HEAPU8[($4_1 + 78 | 0) >> 0] | 0;
         $12_1 = HEAPU8[($4_1 + 77 | 0) >> 0] | 0;
         $13_1 = HEAPU8[($4_1 + 76 | 0) >> 0] | 0;
         label$15 : {
          label$16 : {
           $4_1 = HEAPU8[($6_1 + 9 | 0) >> 0] | 0;
           $14_1 = ($4_1 | 0) == (3 | 0) ? 4 : $4_1;
           $15_1 = $457(256 | 0, $14_1 | 0) | 0;
           if (!$15_1) {
            break label$16
           }
           $8_1 = 0;
           if ((HEAP32[$9_1 >> 2] | 0 | 0) > (0 | 0)) {
            break label$15
           }
           HEAP32[($3_1 + 64 | 0) >> 2] = $15_1;
           break label$7;
          }
          $262(0 | 0) | 0;
          HEAP32[($3_1 + 64 | 0) >> 2] = 0;
          $4_1 = -1;
          break label$4;
         }
         label$17 : while (1) {
          $4_1 = (HEAP32[($9_1 + 4 | 0) >> 2] | 0) + ($8_1 << 2 | 0) | 0;
          $16_1 = (Math_imul(HEAPU8[($4_1 + 3 | 0) >> 0] | 0, $10_1) >>> 0) / (255 >>> 0) | 0;
          $5_1 = (Math_imul(HEAPU8[($4_1 + 2 | 0) >> 0] | 0, $11_1) >>> 0) / (255 >>> 0) | 0;
          $17_1 = (Math_imul(HEAPU8[($4_1 + 1 | 0) >> 0] | 0, $12_1) >>> 0) / (255 >>> 0) | 0;
          $4_1 = (Math_imul(HEAPU8[$4_1 >> 0] | 0, $13_1) >>> 0) / (255 >>> 0) | 0;
          label$18 : {
           label$19 : {
            switch ((HEAPU8[($6_1 + 9 | 0) >> 0] | 0) + -1 | 0 | 0) {
            case 0:
             HEAP8[($15_1 + Math_imul($8_1, $14_1) | 0) >> 0] = ($17_1 >>> (HEAPU8[($6_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($6_1 + 33 | 0) >> 0] | 0) | 0 | (($4_1 >>> (HEAPU8[($6_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($6_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($6_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($6_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($6_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($6_1 + 35 | 0) >> 0] | 0) | 0) | 0;
             break label$18;
            case 1:
             HEAP16[($15_1 + Math_imul($8_1, $14_1) | 0) >> 1] = ($17_1 >>> (HEAPU8[($6_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($6_1 + 33 | 0) >> 0] | 0) | 0 | (($4_1 >>> (HEAPU8[($6_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($6_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($6_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($6_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($6_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($6_1 + 35 | 0) >> 0] | 0) | 0) | 0;
             break label$18;
            case 2:
             $16_1 = $15_1 + Math_imul($8_1, $14_1) | 0;
             HEAP8[($16_1 + ((HEAPU8[($6_1 + 32 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $4_1;
             HEAP8[($16_1 + ((HEAPU8[($6_1 + 33 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $17_1;
             HEAP8[($16_1 + ((HEAPU8[($6_1 + 34 | 0) >> 0] | 0) >>> 3 | 0) | 0) >> 0] = $5_1;
             break label$18;
            case 3:
             break label$19;
            default:
             break label$18;
            };
           }
           HEAP32[($15_1 + Math_imul($8_1, $14_1) | 0) >> 2] = ($17_1 >>> (HEAPU8[($6_1 + 29 | 0) >> 0] | 0) | 0) << (HEAPU8[($6_1 + 33 | 0) >> 0] | 0) | 0 | (($4_1 >>> (HEAPU8[($6_1 + 28 | 0) >> 0] | 0) | 0) << (HEAPU8[($6_1 + 32 | 0) >> 0] | 0) | 0) | 0 | (($5_1 >>> (HEAPU8[($6_1 + 30 | 0) >> 0] | 0) | 0) << (HEAPU8[($6_1 + 34 | 0) >> 0] | 0) | 0) | 0 | (($16_1 >>> (HEAPU8[($6_1 + 31 | 0) >> 0] | 0) | 0) << (HEAPU8[($6_1 + 35 | 0) >> 0] | 0) | 0) | 0;
          }
          $8_1 = $8_1 + 1 | 0;
          if (($8_1 | 0) < (HEAP32[$9_1 >> 2] | 0 | 0)) {
           continue label$17
          }
          break label$17;
         };
         HEAP32[($3_1 + 64 | 0) >> 2] = $15_1;
         break label$9;
        }
        label$23 : {
         $4_1 = HEAP32[$6_1 >> 2] | 0;
         if (!$4_1) {
          break label$23
         }
         if (($4_1 & -268435456 | 0 | 0) != (268435456 | 0)) {
          break label$8
         }
        }
        if (((($4_1 >>> 24 | 0) & 15 | 0) + -1 | 0) >>> 0 > 2 >>> 0) {
         break label$8
        }
        $17_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
        HEAP32[($2_1 + 1024 | 0) >> 2] = 256;
        $4_1 = 0;
        label$24 : while (1) {
         $8_1 = $2_1 + ($4_1 << 2 | 0) | 0;
         HEAP8[($8_1 + 3 | 0) >> 0] = 255;
         HEAP8[($8_1 + 2 | 0) >> 0] = Math_imul($4_1 & 3 | 0, 85);
         $9_1 = $4_1 & 224 | 0;
         HEAP8[$8_1 >> 0] = $4_1 >>> 6 | 0 | ($9_1 >>> 3 | 0) | 0 | $9_1 | 0;
         $9_1 = ($4_1 << 3 | 0) & 224 | 0;
         HEAP8[($8_1 + 1 | 0) >> 0] = $9_1 >>> 6 | 0 | ($9_1 >>> 3 | 0) | 0 | $9_1 | 0;
         $4_1 = $4_1 + 1 | 0;
         if (($4_1 | 0) != (256 | 0)) {
          continue label$24
         }
         break label$24;
        };
        HEAP32[($2_1 + 1028 | 0) >> 2] = $2_1;
        $8_1 = $798($2_1 + 1024 | 0 | 0, $17_1 | 0, $5_1 | 0) | 0;
        HEAP32[($3_1 + 64 | 0) >> 2] = $8_1;
        label$25 : {
         if (HEAP32[($3_1 + 4 | 0) >> 2] | 0) {
          break label$25
         }
         $4_1 = -1;
         if (!$8_1) {
          break label$4
         }
        }
        HEAP32[$5_1 >> 2] = 0;
       }
       HEAP32[$3_1 >> 2] = $1_1;
       if ($1_1) {
        break label$6
       }
       break label$5;
      }
      if (($7_1 | 0) != ($6_1 | 0)) {
       break label$7
      }
      HEAP32[$5_1 >> 2] = 1;
     }
     HEAP32[$3_1 >> 2] = $1_1;
    }
    $559($1_1 + 32 | 0 | 0, $3_1 | 0) | 0;
   }
   $4_1 = 0;
   $8_1 = 0;
   label$26 : {
    $6_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$26
    }
    $8_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
   }
   HEAP32[($3_1 + 80 | 0) >> 2] = $8_1;
   label$27 : {
    $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$27
    }
    $4_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
   }
   HEAP32[($3_1 + 84 | 0) >> 2] = $4_1;
   $4_1 = $783($0_1 | 0) | 0;
  }
  global$0 = $2_1 + 1040 | 0;
  return $4_1 | 0;
 }
 
 function $798($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $14_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $13_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $70_1 = 0, $78_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    if (($3_1 | 0) > (HEAP32[$1_1 >> 2] | 0 | 0)) {
     break label$2
    }
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ($538(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, $3_1 << 2 | 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 1;
    return 0 | 0;
   }
   HEAP32[$2_1 >> 2] = 0;
  }
  label$4 : {
   $4_1 = $457(256 | 0, 1 | 0) | 0;
   if (!$4_1) {
    break label$4
   }
   label$5 : {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) < (1 | 0)) {
     break label$5
    }
    $5_1 = 0;
    label$6 : while (1) {
     $6_1 = 0;
     label$7 : {
      $7_1 = HEAP32[$1_1 >> 2] | 0;
      if (($7_1 | 0) < (1 | 0)) {
       break label$7
      }
      $2_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + ($5_1 << 2 | 0) | 0;
      $8_1 = HEAPU8[($2_1 + 3 | 0) >> 0] | 0;
      $9_1 = HEAPU8[($2_1 + 2 | 0) >> 0] | 0;
      $10_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
      $11_1 = HEAPU8[$2_1 >> 0] | 0;
      $12_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $13_1 = -1;
      $6_1 = 0;
      $3_1 = 0;
      label$8 : while (1) {
       label$9 : {
        $2_1 = $12_1 + ($3_1 << 2 | 0) | 0;
        $14_1 = (HEAPU8[($2_1 + 1 | 0) >> 0] | 0) - $10_1 | 0;
        $70_1 = Math_imul($14_1, $14_1);
        $14_1 = (HEAPU8[$2_1 >> 0] | 0) - $11_1 | 0;
        $78_1 = $70_1 + Math_imul($14_1, $14_1) | 0;
        $14_1 = (HEAPU8[($2_1 + 2 | 0) >> 0] | 0) - $9_1 | 0;
        $2_1 = (HEAPU8[($2_1 + 3 | 0) >> 0] | 0) - $8_1 | 0;
        $2_1 = ($78_1 + Math_imul($14_1, $14_1) | 0) + Math_imul($2_1, $2_1) | 0;
        if ($2_1 >>> 0 >= $13_1 >>> 0) {
         break label$9
        }
        $13_1 = $2_1;
        $6_1 = $3_1;
        if (!$2_1) {
         break label$7
        }
       }
       $3_1 = $3_1 + 1 | 0;
       if (($3_1 | 0) != ($7_1 | 0)) {
        continue label$8
       }
       break label$8;
      };
     }
     HEAP8[($4_1 + $5_1 | 0) >> 0] = $6_1;
     $5_1 = $5_1 + 1 | 0;
     if (($5_1 | 0) < (HEAP32[$0_1 >> 2] | 0 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   return $4_1 | 0;
  }
  $262(0 | 0) | 0;
  return 0 | 0;
 }
 
 function $799($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    $560($1_1 + 32 | 0 | 0, $0_1 | 0);
   }
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[($0_1 + 80 | 0) >> 2] = 0;
   HEAP32[($0_1 + 84 | 0) >> 2] = 0;
   $459(HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0);
   HEAP32[($0_1 + 64 | 0) >> 2] = 0;
   $459($0_1 | 0);
  }
 }
 
 function $800($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $8$hi = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $35$hi = 0, $38$hi = 0, $46$hi = 0, $48$hi = 0, $131$hi = 0, $133_1 = 0, $133$hi = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) > (-1 | 0)) {
     break label$2
    }
    HEAP32[$5_1 >> 2] = 71694;
    $260(73395 | 0, $5_1 | 0) | 0;
    $6_1 = 0;
    break label$1;
   }
   label$3 : {
    if (($2_1 | 0) > (-1 | 0)) {
     break label$3
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = 67341;
    $260(73395 | 0, $5_1 + 16 | 0 | 0) | 0;
    $6_1 = 0;
    break label$1;
   }
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    if (($4_1 & -268435456 | 0 | 0) == (268435456 | 0)) {
     break label$4
    }
    $6_1 = 0;
    $260(67722 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       $6_1 = ($4_1 >>> 8 | 0) & 255 | 0;
       if ($6_1 >>> 0 < 8 >>> 0) {
        break label$8
       }
       i64toi32_i32$0 = 0;
       $35$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       $38$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $35$hi;
       i64toi32_i32$1 = $38$hi;
       i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $4_1 & 255 | 0 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $8_1 = i64toi32_i32$1;
       $8$hi = i64toi32_i32$0;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
       }
       if ($22_1) {
        break label$6
       }
       i64toi32_i32$1 = $8$hi;
       $6_1 = $8_1;
       break label$7;
      }
      i64toi32_i32$1 = 0;
      $46$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $48$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $46$hi;
      i64toi32_i32$2 = $48$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $8_1 = i64toi32_i32$2;
      $8$hi = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      if ($23_1) {
       break label$6
      }
      i64toi32_i32$2 = $8$hi;
      $6_1 = $8_1;
      $7_1 = $6_1 + 7 | 0;
      if ($7_1 >>> 0 < $6_1 >>> 0) {
       break label$6
      }
      $6_1 = $7_1 >>> 3 | 0;
     }
     $7_1 = $6_1 + 3 | 0;
     if ($7_1 >>> 0 < $6_1 >>> 0) {
      break label$6
     }
     if (($7_1 | 0) > (-1 | 0)) {
      break label$5
     }
    }
    $6_1 = 0;
    $262(0 | 0) | 0;
    break label$1;
   }
   label$9 : {
    $6_1 = $457(1 | 0, 60 | 0) | 0;
    if ($6_1) {
     break label$9
    }
    $6_1 = 0;
    $262(0 | 0) | 0;
    break label$1;
   }
   $4_1 = $787($4_1 | 0) | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = $4_1;
   label$10 : {
    if (!$4_1) {
     break label$10
    }
    HEAP32[($6_1 + 48 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 44 | 0) >> 2] = $1_1;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = 0;
    HEAP32[($6_1 + 36 | 0) >> 2] = 0;
    HEAP32[($6_1 + 40 | 0) >> 2] = i64toi32_i32$2;
    HEAP32[($6_1 + 16 | 0) >> 2] = $7_1 & -4 | 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
    label$11 : {
     label$12 : {
      $2_1 = HEAP32[$4_1 >> 2] | 0;
      if (!$2_1) {
       break label$12
      }
      if (($2_1 & -268435456 | 0 | 0) != (268435456 | 0)) {
       break label$11
      }
     }
     if (((($2_1 >>> 24 | 0) & 15 | 0) + -1 | 0) >>> 0 > 2 >>> 0) {
      break label$11
     }
     $1_1 = $791(1 << (HEAPU8[($4_1 + 8 | 0) >> 0] | 0) | 0 | 0) | 0;
     if (!$1_1) {
      break label$10
     }
     label$13 : {
      if ((HEAP32[$1_1 >> 2] | 0 | 0) != (2 | 0)) {
       break label$13
      }
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP8[($4_1 + 6 | 0) >> 0] = 0;
      $24_1 = 0;
      HEAP8[($4_1 + 4 | 0) >> 0] = $24_1;
      HEAP8[($4_1 + 5 | 0) >> 0] = $24_1 >>> 8 | 0;
      HEAP8[($4_1 + 2 | 0) >> 0] = 255;
      $25_1 = 65535;
      HEAP8[$4_1 >> 0] = $25_1;
      HEAP8[($4_1 + 1 | 0) >> 0] = $25_1 >>> 8 | 0;
     }
     $801($6_1 | 0, $1_1 | 0) | 0;
     $790($1_1 | 0);
     $1_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    label$14 : {
     if (!$1_1) {
      break label$14
     }
     $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$14
     }
     label$15 : {
      i64toi32_i32$2 = 0;
      $131$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$2 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = 0;
      $133_1 = i64toi32_i32$2;
      $133$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $131$hi;
      i64toi32_i32$2 = $133$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $133_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $8_1 = i64toi32_i32$2;
      $8$hi = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $26_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $26_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      if (!$26_1) {
       break label$15
      }
      $802($6_1 | 0);
      $6_1 = 0;
      $262(0 | 0) | 0;
      break label$1;
     }
     i64toi32_i32$2 = $8$hi;
     $4_1 = $8_1;
     $1_1 = $567($4_1 | 0) | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
     label$16 : {
      if ($1_1) {
       break label$16
      }
      $802($6_1 | 0);
      $6_1 = 0;
      $262(0 | 0) | 0;
      break label$1;
     }
     HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] | 0 | 8 | 0;
     $536($1_1 | 0, 0 | 0, $4_1 | 0) | 0;
    }
    $1_1 = $794() | 0;
    HEAP32[($6_1 + 52 | 0) >> 2] = $1_1;
    if (!$1_1) {
     break label$10
    }
    label$17 : {
     if (!(HEAP32[((HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0)) {
      break label$17
     }
     $4_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
     $2_1 = $4_1 & -241 | 0 | 16 | 0;
     HEAP32[($1_1 + 68 | 0) >> 2] = $2_1;
     if (($2_1 | 0) == ($4_1 | 0)) {
      break label$17
     }
     $796($1_1 | 0);
    }
    HEAP32[($6_1 + 56 | 0) >> 2] = 1;
    break label$1;
   }
   $802($6_1 | 0);
   $6_1 = 0;
  }
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $801($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = 73307;
    $3_1 = $260(73395 | 0, $2_1 | 0) | 0;
    break label$1;
   }
   $3_1 = 0;
   label$3 : {
    if (($792(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$3
    }
    $3_1 = -1;
    break label$1;
   }
   $796(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $802($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   if ((HEAPU8[$0_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   $796(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0);
   $795($0_1 | 0);
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   HEAP32[($0_1 + 56 | 0) >> 2] = $1_1 + -1 | 0;
   if (($1_1 | 0) > (1 | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    if (($2_1 | 0) < (1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     $1_1 = $2_1 + -1 | 0;
     HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
     label$4 : {
      if (($2_1 | 0) != (1 | 0)) {
       break label$4
      }
      $1_1 = HEAP32[$0_1 >> 2] | 0;
      if (!($1_1 & 2 | 0)) {
       break label$2
      }
      HEAP32[$0_1 >> 2] = $1_1 & -3 | 0;
      $575($0_1 | 0) | 0;
      $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     }
     $2_1 = $1_1;
     if (($1_1 | 0) > (0 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   label$5 : {
    if (!((HEAPU8[$0_1 >> 0] | 0) & 2 | 0)) {
     break label$5
    }
    $576($0_1 | 0, 0 | 0);
   }
   label$6 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$6
    }
    label$7 : {
     if (($792($1_1 | 0, 0 | 0) | 0 | 0) < (0 | 0)) {
      break label$7
     }
     $796(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0);
    }
    $789(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   }
   label$8 : {
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if ($1_1 & 1 | 0) {
     break label$8
    }
    $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    label$9 : {
     if (!($1_1 & 8 | 0)) {
      break label$9
     }
     $568($2_1 | 0);
     break label$8;
    }
    $459($2_1 | 0);
   }
   label$10 : {
    $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$10
    }
    $799($1_1 | 0);
   }
   $459($0_1 | 0);
  }
 }
 
 function $803($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  label$1 : {
   $7_1 = $786($3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
   if ($7_1) {
    break label$1
   }
   $260(67557 | 0, 0 | 0) | 0;
   return 0 | 0;
  }
  return $800($7_1 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $7_1 | 0) | 0 | 0;
 }
 
 function $804($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$3_1 >> 2] = 73332;
    $0_1 = $260(73395 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    $4_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$3
    }
    if ($2_1 >>> 0 < (HEAP32[$4_1 >> 2] | 0) >>> 0) {
     break label$3
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = 65684;
    $0_1 = $260(73395 | 0, $3_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $5_1 = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!($1_1 & 2 | 0)) {
        break label$7
       }
       $1_1 = $5_1 | 4096 | 0;
       HEAP32[($4_1 + 68 | 0) >> 2] = $1_1;
       if (($1_1 | 0) == ($5_1 | 0)) {
        break label$6
       }
       $796($4_1 | 0);
       $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
       $5_1 = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
       break label$6;
      }
      if (!$1_1) {
       break label$5
      }
     }
     HEAP32[($4_1 + 72 | 0) >> 2] = $2_1;
     $2_1 = $5_1 | 256 | 0;
     break label$4;
    }
    $2_1 = $5_1 & -257 | 0;
   }
   HEAP32[($4_1 + 68 | 0) >> 2] = $2_1;
   $0_1 = 0;
   if (($2_1 | 0) == ($5_1 | 0)) {
    break label$1
   }
   $796($4_1 | 0);
  }
  global$0 = $3_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $805($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if ($1_1) {
    break label$1
   }
   $1_1 = 0;
   if (!((HEAPU8[$0_1 >> 0] | 0) & 2 | 0)) {
    break label$1
   }
   $576($0_1 | 0, 1 | 0);
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 2 | 0;
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1 + 1 | 0;
  return 0 | 0;
 }
 
 function $806($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = $1_1 + -1 | 0;
   if (($1_1 | 0) > (1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 2 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 & -3 | 0;
   $575($0_1 | 0) | 0;
  }
 }
 
 function $807($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $4_1 = 0, $7_1 = 0, $20_1 = 0, $16_1 = 0, $13_1 = 0, $19_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, i64toi32_i32$0 = 0, $21_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $197_1 = 0, $221_1 = 0;
  $3_1 = global$0 - 80 | 0;
  $4_1 = $3_1;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$3_1 >> 2] = 73332;
    $260(73395 | 0, $3_1 | 0) | 0;
    $5_1 = 0;
    break label$1;
   }
   label$3 : {
    if ($1_1) {
     break label$3
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = 67766;
    $260(73395 | 0, $4_1 + 16 | 0 | 0) | 0;
    $5_1 = 0;
    break label$1;
   }
   label$4 : {
    label$5 : {
     label$6 : {
      $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$6
      }
      label$7 : {
       label$8 : {
        $5_1 = HEAP32[$6_1 >> 2] | 0;
        if (($5_1 | 0) >= (1 | 0)) {
         break label$8
        }
        $6_1 = 0;
        break label$7;
       }
       $7_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
       $6_1 = 0;
       label$9 : while (1) {
        $8_1 = $7_1 + ($6_1 << 2 | 0) | 0;
        if ((HEAPU8[$8_1 >> 0] | 0 | 0) != (255 | 0)) {
         break label$7
        }
        if ((HEAPU8[($8_1 + 1 | 0) >> 0] | 0 | 0) != (255 | 0)) {
         break label$7
        }
        if ((HEAPU8[($8_1 + 2 | 0) >> 0] | 0 | 0) != (255 | 0)) {
         break label$7
        }
        $6_1 = $6_1 + 1 | 0;
        if (($6_1 | 0) != ($5_1 | 0)) {
         continue label$9
        }
        break label$5;
       };
      }
      if (($6_1 | 0) == ($5_1 | 0)) {
       break label$5
      }
     }
     $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     $8_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     $5_1 = $786(HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) | 0;
     if ($5_1) {
      break label$4
     }
     $5_1 = 0;
     $260(67557 | 0, 0 | 0) | 0;
     break label$1;
    }
    $5_1 = 0;
    $260(72421 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$10 : {
    $5_1 = $800($6_1 | 0, $8_1 | 0, $6_1 | 0, $6_1 | 0, $5_1 | 0) | 0;
    if ($5_1) {
     break label$10
    }
    $5_1 = 0;
    break label$1;
   }
   label$11 : {
    $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$11
    }
    $8_1 = HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$11
    }
    $535(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[$6_1 >> 2] | 0) << 2 | 0 | 0) | 0;
    HEAP32[(HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($1_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
   }
   $6_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $9_1 = HEAPU8[($6_1 + 79 | 0) >> 0] | 0;
   $10_1 = HEAPU8[($6_1 + 78 | 0) >> 0] | 0;
   $11_1 = HEAPU8[($6_1 + 77 | 0) >> 0] | 0;
   $12_1 = HEAPU8[($6_1 + 76 | 0) >> 0] | 0;
   HEAP32[($6_1 + 76 | 0) >> 2] = -1;
   $13_1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
   HEAP32[($6_1 + 68 | 0) >> 2] = $13_1 & 24576 | 0;
   $796($6_1 | 0);
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 48 | 0) >> 2] = 0;
   HEAP32[($4_1 + 52 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $14_1 = 0;
   label$12 : {
    label$13 : {
     $6_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$13
     }
     if (!(HEAP32[($1_1 + 24 | 0) >> 2] | 0)) {
      break label$13
     }
     $793($6_1 | 0, $4_1 + 64 | 0 | 0, $4_1 + 44 | 0 | 0);
     $8_1 = 0;
     label$14 : {
      label$15 : {
       $15_1 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
       if ($15_1) {
        break label$15
       }
       $16_1 = 0;
       break label$14;
      }
      $16_1 = 0;
      if (HEAP32[($4_1 + 44 | 0) >> 2] | 0) {
       break label$14
      }
      $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $6_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
      $16_1 = HEAP32[$6_1 >> 2] | 0;
      $8_1 = $3_1 - (($16_1 + 15 | 0) & -16 | 0) | 0;
      global$0 = $8_1;
      if (($16_1 | 0) < (1 | 0)) {
       break label$14
      }
      $17_1 = $16_1 & 1 | 0;
      $3_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      $6_1 = 0;
      label$16 : {
       if (($16_1 | 0) == (1 | 0)) {
        break label$16
       }
       $18_1 = $16_1 & 2147483646 | 0;
       $6_1 = 0;
       $19_1 = 0;
       label$17 : while (1) {
        $20_1 = $6_1 << 2 | 0;
        HEAP8[($8_1 + $6_1 | 0) >> 0] = HEAPU8[(($3_1 + $20_1 | 0) + 3 | 0) >> 0] | 0;
        $3_1 = HEAP32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        HEAP8[(($3_1 + $20_1 | 0) + 3 | 0) >> 0] = 255;
        $20_1 = $6_1 | 1 | 0;
        $197_1 = $8_1 + $20_1 | 0;
        $20_1 = $20_1 << 2 | 0;
        HEAP8[$197_1 >> 0] = HEAPU8[(($3_1 + $20_1 | 0) + 3 | 0) >> 0] | 0;
        $3_1 = HEAP32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        HEAP8[(($3_1 + $20_1 | 0) + 3 | 0) >> 0] = 255;
        $6_1 = $6_1 + 2 | 0;
        $19_1 = $19_1 + 2 | 0;
        if (($19_1 | 0) != ($18_1 | 0)) {
         continue label$17
        }
        break label$17;
       };
      }
      if (!$17_1) {
       break label$14
      }
      $221_1 = $8_1 + $6_1 | 0;
      $6_1 = $6_1 << 2 | 0;
      HEAP8[$221_1 >> 0] = HEAPU8[(($3_1 + $6_1 | 0) + 3 | 0) >> 0] | 0;
      HEAP8[(((HEAP32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + $6_1 | 0) + 3 | 0) >> 0] = 255;
     }
     $21_1 = !$15_1;
     break label$12;
    }
    $21_1 = 0;
    $8_1 = 0;
    $16_1 = 0;
   }
   $3_1 = 1;
   label$18 : {
    $17_1 = $13_1 & 256 | 0;
    if (!$17_1) {
     break label$18
    }
    $6_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$18
    }
    if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
     break label$18
    }
    $6_1 = (HEAP32[($6_1 + 4 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) << 2 | 0) | 0;
    $14_1 = HEAPU8[($6_1 + 3 | 0) >> 0] | 0;
    $3_1 = 0;
    HEAP8[($6_1 + 3 | 0) >> 0] = 0;
    $21_1 = 1;
   }
   label$19 : {
    label$20 : {
     label$21 : {
      $6_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
      if ((HEAP32[$6_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
       break label$21
      }
      label$22 : {
       $7_1 = HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       if (!$7_1) {
        break label$22
       }
       if ((HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0) != (HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0)) {
        break label$21
       }
      }
      $7_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      if (!$7_1) {
       break label$20
      }
      if ((HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0) == (HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0)) {
       break label$20
      }
     }
     label$23 : {
      if (($797($0_1 | 0, $5_1 | 0) | 0 | 0) >= (0 | 0)) {
       break label$23
      }
      $15_1 = -1;
      break label$19;
     }
     $6_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    }
    $15_1 = FUNCTION_TABLE[HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0]($0_1, $4_1 + 48 | 0, $5_1, $4_1 + 48 | 0) | 0;
   }
   label$24 : {
    if ($3_1) {
     break label$24
    }
    HEAP8[(((HEAP32[((HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = $14_1;
   }
   label$25 : {
    if (!$8_1) {
     break label$25
    }
    if (($16_1 | 0) < (1 | 0)) {
     break label$25
    }
    $18_1 = $16_1 & 3 | 0;
    $3_1 = HEAP32[((HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    $7_1 = 0;
    $6_1 = 0;
    label$26 : {
     if ($16_1 >>> 0 < 4 >>> 0) {
      break label$26
     }
     $16_1 = $16_1 & 2147483644 | 0;
     $6_1 = 0;
     $19_1 = 0;
     label$27 : while (1) {
      HEAP8[(($3_1 + ($6_1 << 2 | 0) | 0) + 3 | 0) >> 0] = HEAPU8[($8_1 + $6_1 | 0) >> 0] | 0;
      $20_1 = $6_1 | 1 | 0;
      HEAP8[(($3_1 + ($20_1 << 2 | 0) | 0) + 3 | 0) >> 0] = HEAPU8[($8_1 + $20_1 | 0) >> 0] | 0;
      $20_1 = $6_1 | 2 | 0;
      HEAP8[(($3_1 + ($20_1 << 2 | 0) | 0) + 3 | 0) >> 0] = HEAPU8[($8_1 + $20_1 | 0) >> 0] | 0;
      $20_1 = $6_1 | 3 | 0;
      HEAP8[(($3_1 + ($20_1 << 2 | 0) | 0) + 3 | 0) >> 0] = HEAPU8[($8_1 + $20_1 | 0) >> 0] | 0;
      $6_1 = $6_1 + 4 | 0;
      $19_1 = $19_1 + 4 | 0;
      if (($19_1 | 0) != ($16_1 | 0)) {
       continue label$27
      }
      break label$27;
     };
    }
    if (!$18_1) {
     break label$25
    }
    label$28 : while (1) {
     HEAP8[(($3_1 + ($6_1 << 2 | 0) | 0) + 3 | 0) >> 0] = HEAPU8[($8_1 + $6_1 | 0) >> 0] | 0;
     $6_1 = $6_1 + 1 | 0;
     $7_1 = $7_1 + 1 | 0;
     if (($7_1 | 0) != ($18_1 | 0)) {
      continue label$28
     }
     break label$28;
    };
   }
   $6_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
   HEAP8[($6_1 + 79 | 0) >> 0] = $9_1;
   HEAP8[($6_1 + 78 | 0) >> 0] = $10_1;
   HEAP8[($6_1 + 77 | 0) >> 0] = $11_1;
   HEAP8[($6_1 + 76 | 0) >> 0] = $12_1;
   HEAP32[($6_1 + 68 | 0) >> 2] = $13_1 & -28945 | 0;
   $6_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   HEAP8[($6_1 + 79 | 0) >> 0] = $9_1;
   HEAP8[($6_1 + 78 | 0) >> 0] = $10_1;
   HEAP8[($6_1 + 77 | 0) >> 0] = $11_1;
   HEAP8[($6_1 + 76 | 0) >> 0] = $12_1;
   HEAP32[($6_1 + 68 | 0) >> 2] = $13_1;
   $796($6_1 | 0);
   label$29 : {
    if (($15_1 | 0) > (-1 | 0)) {
     break label$29
    }
    $802($5_1 | 0);
    $5_1 = 0;
    break label$1;
   }
   label$30 : {
    if (!$17_1) {
     break label$30
    }
    $8_1 = 0;
    label$31 : {
     $6_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$31
     }
     label$32 : {
      $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$32
      }
      $8_1 = 0;
      $7_1 = HEAP32[$6_1 >> 2] | 0;
      if (($7_1 | 0) > (HEAP32[$3_1 >> 2] | 0 | 0)) {
       break label$31
      }
      label$33 : {
       if ($538(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, $7_1 << 2 | 0 | 0) | 0) {
        break label$33
       }
       $804($5_1 | 0, 1 | 0, HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) | 0;
       break label$30;
      }
      $8_1 = 0;
      if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
       break label$31
      }
     }
     if (HEAP32[($1_1 + 24 | 0) >> 2] | 0) {
      break label$30
     }
     $8_1 = 1;
    }
    HEAP32[($4_1 + 64 | 0) >> 2] = 0;
    label$34 : {
     label$35 : {
      $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $6_1 = $786(HEAPU8[($6_1 + 8 | 0) >> 0] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
      if ($6_1) {
       break label$35
      }
      $6_1 = 0;
      $260(67557 | 0, 0 | 0) | 0;
      break label$34;
     }
     $6_1 = $800($6_1 | 0, 1 | 0, 1 | 0, $6_1 | 0, $6_1 | 0) | 0;
    }
    label$36 : {
     $3_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$36
     }
     $801($6_1 | 0, $3_1 | 0) | 0;
    }
    $569($6_1 | 0, 0 | 0, HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) | 0;
    $3_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
    HEAP32[($3_1 + 68 | 0) >> 2] = (HEAP32[($3_1 + 68 | 0) >> 2] | 0) & -257 | 0;
    $3_1 = $807($6_1 | 0, $1_1 | 0, 0 | 0) | 0;
    $535($4_1 + 64 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, HEAPU8[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0 | 0) | 0;
    $802($6_1 | 0);
    $802($3_1 | 0);
    $3_1 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
    label$37 : {
     label$38 : {
      $6_1 = HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$38
      }
      if ($3_1 >>> 0 < (HEAP32[$6_1 >> 2] | 0) >>> 0) {
       break label$38
      }
      HEAP32[($4_1 + 32 | 0) >> 2] = 65684;
      $260(73395 | 0, $4_1 + 32 | 0 | 0) | 0;
      break label$37;
     }
     $6_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
     HEAP32[($6_1 + 72 | 0) >> 2] = $3_1;
     $3_1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
     $7_1 = $3_1 | 256 | 0;
     HEAP32[($6_1 + 68 | 0) >> 2] = $7_1;
     if (($7_1 | 0) == ($3_1 | 0)) {
      break label$37
     }
     $796($6_1 | 0);
    }
    if ($8_1) {
     break label$30
    }
    $808($5_1 | 0);
   }
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 64 | 0) >> 2] = 0;
   HEAP32[($4_1 + 68 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 72 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $492($0_1 + 36 | 0 | 0, $4_1 + 64 | 0 | 0, $5_1 + 36 | 0 | 0) | 0;
   label$39 : {
    label$40 : {
     label$41 : {
      if (!(HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0)) {
       break label$41
      }
      if (HEAP32[($1_1 + 24 | 0) >> 2] | 0) {
       break label$40
      }
     }
     label$42 : {
      if (!$21_1) {
       break label$42
      }
      if (HEAP32[($1_1 + 24 | 0) >> 2] | 0 | ($13_1 & 2 | 0) | 0) {
       break label$40
      }
      break label$39;
     }
     if (!($13_1 & 2 | 0)) {
      break label$39
     }
    }
    $6_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
    $8_1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
    $3_1 = $8_1 & -241 | 0 | 16 | 0;
    HEAP32[($6_1 + 68 | 0) >> 2] = $3_1;
    if (($3_1 | 0) == ($8_1 | 0)) {
     break label$39
    }
    $796($6_1 | 0);
   }
   if (!($13_1 & 4096 | 0 | ($2_1 & 2 | 0) | 0)) {
    break label$1
   }
   $6_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
   $8_1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
   $3_1 = $8_1 | 4096 | 0;
   HEAP32[($6_1 + 68 | 0) >> 2] = $3_1;
   if (($3_1 | 0) == ($8_1 | 0)) {
    break label$1
   }
   $796($6_1 | 0);
  }
  global$0 = $4_1 + 80 | 0;
  return $5_1 | 0;
 }
 
 function $808($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $13_1 = 0, $7_1 = 0, $5_1 = 0, $9_1 = 0, $12_1 = 0, $4_1 = 0, $8_1 = 0, $1_1 = 0, $10_1 = 0, $11_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!((HEAPU8[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 69 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(HEAP32[($2_1 + 24 | 0) >> 2] | 0)) {
    break label$1
   }
   $3_1 = HEAPU8[($2_1 + 9 | 0) >> 0] | 0;
   label$2 : {
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    if ($2_1) {
     break label$2
    }
    $2_1 = 0;
    if (!((HEAPU8[$0_1 >> 0] | 0) & 2 | 0)) {
     break label$2
    }
    $576($0_1 | 0, 1 | 0);
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 2 | 0;
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $4_1 = $2_1 + 1 | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $4_1;
   label$3 : {
    label$4 : {
     switch ($3_1 + -2 | 0 | 0) {
     case 0:
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$3
      }
      $6_1 = (HEAPU16[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 24 | 0) >> 1] | 0) ^ 65535 | 0;
      $3_1 = (HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) & $6_1 | 0;
      $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      $8_1 = $7_1 & 3 | 0;
      $9_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      $10_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) / (2 | 0) | 0) << 1 | 0;
      $11_1 = $7_1 >>> 0 < 4 >>> 0;
      label$6 : while (1) {
       label$7 : {
        if (!$7_1) {
         break label$7
        }
        $12_1 = 0;
        $13_1 = $7_1;
        $2_1 = $9_1;
        label$8 : {
         if (!$8_1) {
          break label$8
         }
         label$9 : while (1) {
          label$10 : {
           if (($6_1 & (HEAPU16[$2_1 >> 1] | 0) | 0 | 0) != ($3_1 | 0)) {
            break label$10
           }
           HEAP16[$2_1 >> 1] = $3_1;
          }
          $13_1 = $13_1 + -1 | 0;
          $2_1 = $2_1 + 2 | 0;
          $12_1 = $12_1 + 1 | 0;
          if (($12_1 | 0) != ($8_1 | 0)) {
           continue label$9
          }
          break label$9;
         };
        }
        if ($11_1) {
         break label$7
        }
        label$11 : while (1) {
         label$12 : {
          if (($6_1 & (HEAPU16[$2_1 >> 1] | 0) | 0 | 0) != ($3_1 | 0)) {
           break label$12
          }
          HEAP16[$2_1 >> 1] = $3_1;
         }
         label$13 : {
          if (($6_1 & (HEAPU16[($2_1 + 2 | 0) >> 1] | 0) | 0 | 0) != ($3_1 | 0)) {
           break label$13
          }
          HEAP16[($2_1 + 2 | 0) >> 1] = $3_1;
         }
         label$14 : {
          if (($6_1 & (HEAPU16[($2_1 + 4 | 0) >> 1] | 0) | 0 | 0) != ($3_1 | 0)) {
           break label$14
          }
          HEAP16[($2_1 + 4 | 0) >> 1] = $3_1;
         }
         label$15 : {
          if (($6_1 & (HEAPU16[($2_1 + 6 | 0) >> 1] | 0) | 0 | 0) != ($3_1 | 0)) {
           break label$15
          }
          HEAP16[($2_1 + 6 | 0) >> 1] = $3_1;
         }
         $2_1 = $2_1 + 8 | 0;
         $13_1 = $13_1 + -4 | 0;
         if ($13_1) {
          continue label$11
         }
         break label$11;
        };
       }
       $9_1 = $9_1 + $10_1 | 0;
       $5_1 = $5_1 + -1 | 0;
       if ($5_1) {
        continue label$6
       }
       break label$3;
      };
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$7_1) {
     break label$3
    }
    $6_1 = (HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) ^ -1 | 0;
    $3_1 = (HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) & $6_1 | 0;
    $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    label$16 : while (1) {
     label$17 : {
      $9_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (!$9_1) {
       break label$17
      }
      $12_1 = 0;
      $13_1 = $9_1;
      $2_1 = $5_1;
      label$18 : {
       $8_1 = $13_1 & 3 | 0;
       if (!$8_1) {
        break label$18
       }
       label$19 : while (1) {
        label$20 : {
         if (((HEAP32[$2_1 >> 2] | 0) & $6_1 | 0 | 0) != ($3_1 | 0)) {
          break label$20
         }
         HEAP32[$2_1 >> 2] = $3_1;
        }
        $13_1 = $13_1 + -1 | 0;
        $2_1 = $2_1 + 4 | 0;
        $12_1 = $12_1 + 1 | 0;
        if (($12_1 | 0) != ($8_1 | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      if ($9_1 >>> 0 < 4 >>> 0) {
       break label$17
      }
      label$21 : while (1) {
       label$22 : {
        if (((HEAP32[$2_1 >> 2] | 0) & $6_1 | 0 | 0) != ($3_1 | 0)) {
         break label$22
        }
        HEAP32[$2_1 >> 2] = $3_1;
       }
       label$23 : {
        if (((HEAP32[($2_1 + 4 | 0) >> 2] | 0) & $6_1 | 0 | 0) != ($3_1 | 0)) {
         break label$23
        }
        HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
       }
       label$24 : {
        if (((HEAP32[($2_1 + 8 | 0) >> 2] | 0) & $6_1 | 0 | 0) != ($3_1 | 0)) {
         break label$24
        }
        HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
       }
       label$25 : {
        if (((HEAP32[($2_1 + 12 | 0) >> 2] | 0) & $6_1 | 0 | 0) != ($3_1 | 0)) {
         break label$25
        }
        HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
       }
       $2_1 = $2_1 + 16 | 0;
       $13_1 = $13_1 + -4 | 0;
       if ($13_1) {
        continue label$21
       }
       break label$21;
      };
     }
     $5_1 = $5_1 + (((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) / (4 | 0) | 0) << 2 | 0) | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue label$16
     }
     break label$16;
    };
    $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   label$26 : {
    if (!$4_1) {
     break label$26
    }
    HEAP32[($0_1 + 28 | 0) >> 2] = $4_1 + -1 | 0;
    if (($4_1 | 0) > (1 | 0)) {
     break label$26
    }
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (!($2_1 & 2 | 0)) {
     break label$26
    }
    HEAP32[$0_1 >> 2] = $2_1 & -3 | 0;
    $575($0_1 | 0) | 0;
   }
   label$27 : {
    label$28 : {
     $2_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$28
     }
     if (HEAP32[$2_1 >> 2] | 0) {
      break label$28
     }
     HEAP32[$1_1 >> 2] = 65684;
     $260(73395 | 0, $1_1 | 0) | 0;
     break label$27;
    }
    $2_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    $3_1 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
    $6_1 = $3_1 & -257 | 0;
    HEAP32[($2_1 + 68 | 0) >> 2] = $6_1;
    if (($6_1 | 0) == ($3_1 | 0)) {
     break label$27
    }
    $796($2_1 | 0);
   }
   $2_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $3_1 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
   $6_1 = $3_1 & -241 | 0 | 16 | 0;
   HEAP32[($2_1 + 68 | 0) >> 2] = $6_1;
   if (($6_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   $796($2_1 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $809($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $1_1 = $787($1_1 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   return 0 | 0;
  }
  $2_1 = $807($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $789($1_1 | 0);
  return $2_1 | 0;
 }
 
 function $810() {
  var $1_1 = 0, $0_1 = 0, $2_1 = 0;
  $0_1 = global$0 - 1248 | 0;
  global$0 = $0_1;
  $1_1 = 0;
  HEAP32[(0 + 130800 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if ((fimport$36() | 0 | 0) != (-1 | 0)) {
     break label$2
    }
    $1_1 = $260(73609 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    $2_1 = fimport$37() | 0;
    if (($2_1 | 0) < (1 | 0)) {
     break label$3
    }
    label$4 : while (1) {
     label$5 : {
      if (fimport$38($1_1 | 0, $0_1 + 8 | 0 | 0) | 0) {
       break label$5
      }
      $811($1_1 | 0, $0_1 + 8 | 0 | 0, $1_1 | 0) | 0;
     }
     $1_1 = $1_1 + 1 | 0;
     if (($1_1 | 0) != ($2_1 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   $1_1 = 0;
   label$6 : {
    if (!(fimport$39(0 | 0, 0 | 0, 276 | 0, 2 | 0) | 0)) {
     break label$6
    }
    $812();
    $1_1 = $260(71483 | 0, 0 | 0) | 0;
    break label$1;
   }
   if (!(fimport$40(0 | 0, 0 | 0, 277 | 0, 2 | 0) | 0)) {
    break label$1
   }
   $812();
   $1_1 = $260(71441 | 0, 0 | 0) | 0;
  }
  global$0 = $0_1 + 1248 | 0;
  return $1_1 | 0;
 }
 
 function $811($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $12_1 = 0, $10_1 = 0, $13_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0, $11_1 = 0, $14_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($1_1 + 1108 | 0) >> 2] | 0;
    if (($3_1 | 0) < (0 | 0)) {
     break label$2
    }
    $4_1 = HEAP32[(0 + 130812 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$2
    }
    label$3 : while (1) {
     if ((HEAP32[$4_1 >> 2] | 0 | 0) == ($3_1 | 0)) {
      break label$1
     }
     $4_1 = HEAP32[($4_1 + 1128 | 0) >> 2] | 0;
     if ($4_1) {
      continue label$3
     }
     break label$3;
    };
   }
   $5_1 = $456(1136 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   $536($5_1 | 0, 0 | 0, 1136 | 0) | 0;
   HEAP32[$5_1 >> 2] = HEAP32[($1_1 + 1108 | 0) >> 2] | 0;
   $4_1 = $419(0 | 0, 0 | 0, 0 | 0, $1_1 + 1112 | 0 | 0) | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $4_1;
   label$4 : {
    if ($4_1) {
     break label$4
    }
    $459($5_1 | 0);
    return 1 | 0;
   }
   $4_1 = $543($1_1 + 1176 | 0 | 0) | 0;
   HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
   label$5 : {
    if ($4_1) {
     break label$5
    }
    $459(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
    $459($5_1 | 0);
    return 1 | 0;
   }
   $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 24 | 0) >> 2] = $6_1;
   $7_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   HEAP32[($5_1 + 20 | 0) >> 2] = $7_1;
   $4_1 = 0;
   $8_1 = HEAP32[(0 + 130804 | 0) >> 2] | 0;
   HEAP32[(0 + 130804 | 0) >> 2] = $8_1 + 1 | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $8_1;
   HEAPF64[($5_1 + 32 | 0) >> 3] = +HEAPF64[$1_1 >> 3];
   label$6 : {
    if (($6_1 | 0) < (1 | 0)) {
     break label$6
    }
    $9_1 = $6_1 & 3 | 0;
    $3_1 = $5_1 + 40 | 0;
    $10_1 = $1_1 + 16 | 0;
    label$7 : {
     if ($6_1 >>> 0 < 4 >>> 0) {
      break label$7
     }
     $11_1 = $6_1 & 2147483644 | 0;
     $4_1 = 0;
     $12_1 = 0;
     label$8 : while (1) {
      $6_1 = $4_1 << 3 | 0;
      HEAPF64[($3_1 + $6_1 | 0) >> 3] = +HEAPF64[($10_1 + $6_1 | 0) >> 3];
      $13_1 = $6_1 | 8 | 0;
      HEAPF64[($3_1 + $13_1 | 0) >> 3] = +HEAPF64[($10_1 + $13_1 | 0) >> 3];
      $13_1 = $6_1 | 16 | 0;
      HEAPF64[($3_1 + $13_1 | 0) >> 3] = +HEAPF64[($10_1 + $13_1 | 0) >> 3];
      $6_1 = $6_1 | 24 | 0;
      HEAPF64[($3_1 + $6_1 | 0) >> 3] = +HEAPF64[($10_1 + $6_1 | 0) >> 3];
      $4_1 = $4_1 + 4 | 0;
      $12_1 = $12_1 + 4 | 0;
      if (($12_1 | 0) != ($11_1 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    if (!$9_1) {
     break label$6
    }
    $6_1 = 0;
    label$9 : while (1) {
     $12_1 = $4_1 << 3 | 0;
     HEAPF64[($3_1 + $12_1 | 0) >> 3] = +HEAPF64[($10_1 + $12_1 | 0) >> 3];
     $4_1 = $4_1 + 1 | 0;
     $6_1 = $6_1 + 1 | 0;
     if (($6_1 | 0) != ($9_1 | 0)) {
      continue label$9
     }
     break label$9;
    };
   }
   label$10 : {
    if (($7_1 | 0) < (1 | 0)) {
     break label$10
    }
    $14_1 = $7_1 & 1 | 0;
    $10_1 = $5_1 + 1064 | 0;
    $6_1 = $1_1 + 1040 | 0;
    $12_1 = $5_1 + 552 | 0;
    $1_1 = $1_1 + 528 | 0;
    $4_1 = 0;
    label$11 : {
     if (($7_1 | 0) == (1 | 0)) {
      break label$11
     }
     $11_1 = $7_1 & 2147483646 | 0;
     $4_1 = 0;
     $13_1 = 0;
     label$12 : while (1) {
      $3_1 = $4_1 << 3 | 0;
      HEAPF64[($12_1 + $3_1 | 0) >> 3] = +HEAPF64[($1_1 + $3_1 | 0) >> 3];
      HEAP8[($10_1 + $4_1 | 0) >> 0] = HEAPU8[($6_1 + $4_1 | 0) >> 0] | 0;
      $3_1 = $4_1 | 1 | 0;
      $9_1 = $3_1 << 3 | 0;
      HEAPF64[($12_1 + $9_1 | 0) >> 3] = +HEAPF64[($1_1 + $9_1 | 0) >> 3];
      HEAP8[($10_1 + $3_1 | 0) >> 0] = HEAPU8[($6_1 + $3_1 | 0) >> 0] | 0;
      $4_1 = $4_1 + 2 | 0;
      $13_1 = $13_1 + 2 | 0;
      if (($13_1 | 0) != ($11_1 | 0)) {
       continue label$12
      }
      break label$12;
     };
    }
    if (!$14_1) {
     break label$10
    }
    $3_1 = $4_1 << 3 | 0;
    HEAPF64[($12_1 + $3_1 | 0) >> 3] = +HEAPF64[($1_1 + $3_1 | 0) >> 3];
    HEAP8[($10_1 + $4_1 | 0) >> 0] = HEAPU8[($6_1 + $4_1 | 0) >> 0] | 0;
   }
   label$13 : {
    label$14 : {
     $4_1 = HEAP32[(0 + 130808 | 0) >> 2] | 0;
     if ($4_1) {
      break label$14
     }
     HEAP32[(0 + 130812 | 0) >> 2] = $5_1;
     break label$13;
    }
    HEAP32[($4_1 + 1128 | 0) >> 2] = $5_1;
   }
   HEAP32[(0 + 130808 | 0) >> 2] = $5_1;
   HEAP32[(0 + 130800 | 0) >> 2] = (HEAP32[(0 + 130800 | 0) >> 2] | 0) + 1 | 0;
   $407($8_1 | 0);
  }
  return 1 | 0;
 }
 
 function $812() {
  var $0_1 = 0, $1_1 = 0;
  label$1 : {
   $0_1 = HEAP32[(0 + 130812 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = HEAP32[($0_1 + 1128 | 0) >> 2] | 0;
    $459(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
    $459(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
    $459($0_1 | 0);
    $0_1 = $1_1;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[(0 + 130812 | 0) >> 2] = 0;
  HEAP32[(0 + 130808 | 0) >> 2] = 0;
  HEAP32[(0 + 130800 | 0) >> 2] = 0;
  HEAP32[(0 + 130804 | 0) >> 2] = 0;
  fimport$39(0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$40(0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
 }
 
 function $813($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   $4_1 = HEAP32[(0 + 130812 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   label$2 : {
    $1_1 = HEAP32[($1_1 + 1108 | 0) >> 2] | 0;
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     $3_1 = $4_1;
     $4_1 = HEAP32[($4_1 + 1128 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$1
     }
     if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : {
    $1_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$4
    }
    HEAP32[($1_1 + 140 | 0) >> 2] = 0;
   }
   $1_1 = HEAP32[($4_1 + 1128 | 0) >> 2] | 0;
   label$5 : {
    label$6 : {
     if (!$3_1) {
      break label$6
     }
     HEAP32[($3_1 + 1128 | 0) >> 2] = $1_1;
     break label$5;
    }
    HEAP32[(0 + 130812 | 0) >> 2] = $1_1;
   }
   label$7 : {
    if (($4_1 | 0) != (HEAP32[(0 + 130808 | 0) >> 2] | 0 | 0)) {
     break label$7
    }
    HEAP32[(0 + 130808 | 0) >> 2] = $3_1;
   }
   HEAP32[(0 + 130800 | 0) >> 2] = (HEAP32[(0 + 130800 | 0) >> 2] | 0) + -1 | 0;
   $413(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
   $459($4_1 | 0);
  }
  return 1 | 0;
 }
 
 function $814() {
  return HEAP32[(0 + 130800 | 0) >> 2] | 0 | 0;
 }
 
 function $815() {
  
 }
 
 function $816($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  $2_1 = HEAP32[(0 + 130812 | 0) >> 2] | 0;
  label$1 : {
   if (($0_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $3_1 = $0_1 & 7 | 0;
     if ($3_1) {
      break label$3
     }
     $4_1 = $0_1;
     break label$2;
    }
    $4_1 = $0_1;
    label$4 : while (1) {
     $4_1 = $4_1 + -1 | 0;
     $2_1 = HEAP32[($2_1 + 1128 | 0) >> 2] | 0;
     $1_1 = $1_1 + 1 | 0;
     if (($1_1 | 0) != ($3_1 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   if ($0_1 >>> 0 < 8 >>> 0) {
    break label$1
   }
   label$5 : while (1) {
    $1_1 = $4_1 + -9 | 0;
    $2_1 = HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[($2_1 + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0;
    $4_1 = $4_1 + -8 | 0;
    if ($1_1 >>> 0 < -2 >>> 0) {
     continue label$5
    }
    break label$5;
   };
  }
  return HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $817($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $818($0_1) {
  $0_1 = $0_1 | 0;
  return -1 | 0;
 }
 
 function $819($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $820($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = 0;
  $3_1 = HEAP32[(0 + 130812 | 0) >> 2] | 0;
  label$1 : {
   if (($1_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $4_1 = $1_1 & 7 | 0;
     if ($4_1) {
      break label$3
     }
     $5_1 = $1_1;
     break label$2;
    }
    $5_1 = $1_1;
    label$4 : while (1) {
     $5_1 = $5_1 + -1 | 0;
     $3_1 = HEAP32[($3_1 + 1128 | 0) >> 2] | 0;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($4_1 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   if ($1_1 >>> 0 < 8 >>> 0) {
    break label$1
   }
   label$5 : while (1) {
    $2_1 = $5_1 + -9 | 0;
    $3_1 = HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[($3_1 + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0;
    $5_1 = $5_1 + -8 | 0;
    if ($2_1 >>> 0 < -2 >>> 0) {
     continue label$5
    }
    break label$5;
   };
  }
  $421($0_1 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $821($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  $2_1 = HEAP32[(0 + 130812 | 0) >> 2] | 0;
  label$1 : {
   if (($0_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $3_1 = $0_1 & 7 | 0;
     if ($3_1) {
      break label$3
     }
     $4_1 = $0_1;
     break label$2;
    }
    $4_1 = $0_1;
    label$4 : while (1) {
     $4_1 = $4_1 + -1 | 0;
     $2_1 = HEAP32[($2_1 + 1128 | 0) >> 2] | 0;
     $1_1 = $1_1 + 1 | 0;
     if (($1_1 | 0) != ($3_1 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   if ($0_1 >>> 0 < 8 >>> 0) {
    break label$1
   }
   label$5 : while (1) {
    $1_1 = $4_1 + -9 | 0;
    $2_1 = HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[($2_1 + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0;
    $4_1 = $4_1 + -8 | 0;
    if ($1_1 >>> 0 < -2 >>> 0) {
     continue label$5
    }
    break label$5;
   };
  }
  return HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $822($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = 0;
  $3_1 = HEAP32[(0 + 130812 | 0) >> 2] | 0;
  label$1 : {
   if (($1_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $4_1 = $1_1 & 7 | 0;
     if ($4_1) {
      break label$3
     }
     $5_1 = $1_1;
     break label$2;
    }
    $5_1 = $1_1;
    label$4 : while (1) {
     $5_1 = $5_1 + -1 | 0;
     $3_1 = HEAP32[($3_1 + 1128 | 0) >> 2] | 0;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($4_1 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   if ($1_1 >>> 0 < 8 >>> 0) {
    break label$1
   }
   label$5 : while (1) {
    $2_1 = $5_1 + -9 | 0;
    $3_1 = HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[($3_1 + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0) + 1128 | 0) >> 2] | 0;
    $5_1 = $5_1 + -8 | 0;
    if ($2_1 >>> 0 < -2 >>> 0) {
     continue label$5
    }
    break label$5;
   };
  }
  label$6 : {
   if ($3_1) {
    break label$6
   }
   return $260(73123 | 0, 0 | 0) | 0 | 0;
  }
  label$7 : {
   if (!(HEAP32[($3_1 + 16 | 0) >> 2] | 0)) {
    break label$7
   }
   return $260(73803 | 0, 0 | 0) | 0 | 0;
  }
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 140 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  return 0 | 0;
 }
 
 function $823($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $262(4 | 0) | 0 | 0;
 }
 
 function $824($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $262(4 | 0) | 0 | 0;
 }
 
 function $825($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $826($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $262(4 | 0) | 0 | 0;
 }
 
 function $827($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $262(4 | 0) | 0 | 0;
 }
 
 function $828($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $262(4 | 0) | 0 | 0;
 }
 
 function $829($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $10_1 = 0, $12_1 = 0.0, $9_1 = 0, $1_1 = 0, $3_1 = 0, $8_1 = 0, $11_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $1_1 = global$0 - 1248 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 140 | 0) >> 2] | 0;
  fimport$36() | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   if (fimport$38(HEAP32[$2_1 >> 2] | 0 | 0, $1_1 + 8 | 0 | 0) | 0) {
    break label$1
   }
   label$2 : {
    $12_1 = +HEAPF64[($1_1 + 8 | 0) >> 3];
    if ($12_1 == 0.0) {
     break label$2
    }
    if ($12_1 == +HEAPF64[($2_1 + 32 | 0) >> 3]) {
     break label$1
    }
   }
   label$3 : {
    $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 | 0) < (1 | 0)) {
     break label$3
    }
    $4_1 = $2_1 + 552 | 0;
    $5_1 = $2_1 + 1064 | 0;
    $6_1 = $1_1 + 536 | 0;
    $7_1 = $1_1 + 1048 | 0;
    $0_1 = 0;
    label$4 : while (1) {
     label$5 : {
      $8_1 = $5_1 + $0_1 | 0;
      $9_1 = HEAPU8[$8_1 >> 0] | 0;
      $10_1 = $7_1 + $0_1 | 0;
      $11_1 = HEAPU8[$10_1 >> 0] | 0;
      if (($9_1 | 0) == ($11_1 | 0)) {
       break label$5
      }
      $410(HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0, $0_1 & 255 | 0 | 0, $11_1 | 0) | 0;
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      $9_1 = HEAPU8[$10_1 >> 0] | 0;
     }
     $10_1 = $0_1 << 3 | 0;
     HEAPF64[($4_1 + $10_1 | 0) >> 3] = +HEAPF64[($6_1 + $10_1 | 0) >> 3];
     HEAP8[$8_1 >> 0] = $9_1;
     $0_1 = $0_1 + 1 | 0;
     if (($0_1 | 0) < ($3_1 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   label$6 : {
    $10_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
    if (($10_1 | 0) < (1 | 0)) {
     break label$6
    }
    $3_1 = $2_1 + 40 | 0;
    $11_1 = $1_1 + 24 | 0;
    $0_1 = 0;
    label$7 : while (1) {
     label$8 : {
      $9_1 = $0_1 << 3 | 0;
      $8_1 = $3_1 + $9_1 | 0;
      $9_1 = $11_1 + $9_1 | 0;
      $12_1 = +HEAPF64[$9_1 >> 3];
      if (+HEAPF64[$8_1 >> 3] == $12_1) {
       break label$8
      }
      label$9 : {
       label$10 : {
        $12_1 = $12_1 * 32767.0;
        if (!(Math_abs($12_1) < 2147483648.0)) {
         break label$10
        }
        $10_1 = ~~$12_1;
        break label$9;
       }
       $10_1 = -2147483648;
      }
      $409(HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0, $0_1 & 255 | 0 | 0, $10_1 | 0) | 0;
      $10_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      $12_1 = +HEAPF64[$9_1 >> 3];
     }
     HEAPF64[$8_1 >> 3] = $12_1;
     $0_1 = $0_1 + 1 | 0;
     if (($0_1 | 0) < ($10_1 | 0)) {
      continue label$7
     }
     break label$7;
    };
   }
   HEAPF64[($2_1 + 32 | 0) >> 3] = +HEAPF64[($1_1 + 8 | 0) >> 3];
  }
  global$0 = $1_1 + 1248 | 0;
 }
 
 function $830($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 140 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  }
 }
 
 function $831($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $832() {
  return $457(1 | 0, 12 | 0) | 0 | 0;
 }
 
 function $833($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    $836($1_1 | 0);
   }
   $459($0_1 | 0);
  }
 }
 
 function $834($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $835($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $836($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $837() {
  return 0 | 0;
 }
 
 function $838($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $839() {
  label$1 : {
   if (HEAPU8[(0 + 130816 | 0) >> 0] | 0) {
    break label$1
   }
   HEAP8[(0 + 130816 | 0) >> 0] = 1;
   label$2 : {
    if ($1007(4 | 0, 130824 | 0) | 0) {
     break label$2
    }
    HEAP8[(0 + 130840 | 0) >> 0] = 1;
    return;
   }
   $1008(130848 | 0, 0 | 0) | 0;
  }
 }
 
 function $840() {
  var i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $0_1 = 0, i64toi32_i32$6 = 0, $1_1 = 0, $1$hi = 0, $13_1 = 0, $13$hi = 0, $14_1 = 0, $14$hi = 0, $16_1 = 0, $16$hi = 0, $22_1 = 0, $22$hi = 0, $27_1 = 0, $27$hi = 0, $28_1 = 0, $28$hi = 0, $30_1 = 0, $30$hi = 0, $36_1 = 0, $36$hi = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (HEAPU8[(0 + 130816 | 0) >> 0] | 0) {
       break label$4
      }
      HEAP8[(0 + 130816 | 0) >> 0] = 1;
      label$5 : {
       if ($1007(4 | 0, 130824 | 0) | 0) {
        break label$5
       }
       HEAP8[(0 + 130840 | 0) >> 0] = 1;
       break label$3;
      }
      $1008(130848 | 0, 0 | 0) | 0;
     }
     if (!(HEAPU8[(0 + 130840 | 0) >> 0] | 0)) {
      break label$2
     }
    }
    $1007(4 | 0, $0_1 | 0) | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $13_1 = i64toi32_i32$0;
    $13$hi = i64toi32_i32$1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 130824 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 130828 | 0) >> 2] | 0;
    $14_1 = i64toi32_i32$1;
    $14$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$2 = $13_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = $14_1;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$2 = __wasm_i64_mul(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e3 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$2;
    $16$hi = i64toi32_i32$5;
    i64toi32_i32$2 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[(0 + 130832 | 0) >> 2] | 0) | 0 | 0) / (1e6 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
    $22_1 = i64toi32_i32$2;
    $22$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$0 = $16_1;
    i64toi32_i32$2 = $22$hi;
    i64toi32_i32$3 = $22_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$4;
    break label$1;
   }
   $1008($0_1 | 0, 0 | 0) | 0;
   i64toi32_i32$5 = $0_1;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $27_1 = i64toi32_i32$4;
   $27$hi = i64toi32_i32$0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 130848 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 130852 | 0) >> 2] | 0;
   $28_1 = i64toi32_i32$0;
   $28$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $27$hi;
   i64toi32_i32$5 = $27_1;
   i64toi32_i32$0 = $28$hi;
   i64toi32_i32$3 = $28_1;
   i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$5 = __wasm_i64_mul(i64toi32_i32$2 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $30_1 = i64toi32_i32$5;
   $30$hi = i64toi32_i32$1;
   i64toi32_i32$5 = ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[(0 + 130856 | 0) >> 2] | 0) | 0 | 0) / (1e3 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $36_1 = i64toi32_i32$5;
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $30$hi;
   i64toi32_i32$4 = $30_1;
   i64toi32_i32$5 = $36$hi;
   i64toi32_i32$3 = $36_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$2;
  }
  global$0 = $0_1 + 16 | 0;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$4 | 0;
 }
 
 function $841($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$1 = 0, $26_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    if (!(fimport$41() | 0)) {
     break label$2
    }
    if (!($383(74478 | 0, 1 | 0) | 0)) {
     break label$2
    }
    fimport$42($0_1 | 0);
    break label$1;
   }
   $2_1 = ($0_1 >>> 0) / (1e3 >>> 0) | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $1_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 24 | 0) >> 2] = Math_imul($0_1 - Math_imul($2_1, 1e3) | 0, 1e6);
   $0_1 = $986() | 0;
   label$3 : while (1) {
    HEAP32[$0_1 >> 2] = 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    $26_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1;
    HEAP32[$1_1 >> 2] = $26_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
    if (!($1051($1_1 | 0, $1_1 + 16 | 0 | 0) | 0)) {
     break label$1
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (27 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  global$0 = $1_1 + 32 | 0;
 }
 
 function $842() {
  return $847() | 0 | 0;
 }
 
 function $843($0_1) {
  $0_1 = $0_1 | 0;
  return $848($0_1 | 0) | 0 | 0;
 }
 
 function $844() {
  return ($258(130864 | 0, 1 | 0) | 0) + 1 | 0 | 0;
 }
 
 function $845($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = 0;
  $2_1 = $842() | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   if ($0_1 >>> 0 > (HEAP32[$2_1 >> 2] | 0) >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[((($0_1 << 3 | 0) + $2_1 | 0) + -4 | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $846($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    HEAP32[$3_1 >> 2] = 73418;
    $4_1 = $260(73395 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     label$5 : {
      $5_1 = $842() | 0;
      if ($5_1) {
       break label$5
      }
      $4_1 = 0;
      break label$4;
     }
     $4_1 = HEAP32[$5_1 >> 2] | 0;
     if ($0_1 >>> 0 <= $4_1 >>> 0) {
      break label$3
     }
    }
    label$6 : {
     $5_1 = $458($5_1 | 0, ($0_1 << 3 | 0) + 36 | 0 | 0) | 0;
     if ($5_1) {
      break label$6
     }
     $4_1 = $262(0 | 0) | 0;
     break label$1;
    }
    $6_1 = $0_1 + 4 | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    label$7 : {
     if ($6_1 >>> 0 <= $4_1 >>> 0) {
      break label$7
     }
     $1006(($5_1 + ($4_1 << 3 | 0) | 0) + 4 | 0 | 0, 0 | 0, ($6_1 - $4_1 | 0) << 3 | 0 | 0) | 0;
    }
    $4_1 = -1;
    if ($843($5_1 | 0) | 0) {
     break label$1
    }
   }
   $0_1 = ($0_1 << 3 | 0) + $5_1 | 0;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[($0_1 + -4 | 0) >> 2] = $1_1;
   $4_1 = 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $847() {
  var $1_1 = 0, $0_1 = 0;
  $0_1 = $837() | 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 130868 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ((HEAP32[$1_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
      break label$3
     }
     return HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0;
    }
    $1_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $848($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  $2_1 = $837() | 0;
  $834(0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[(0 + 130868 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
        break label$5
       }
       $4_1 = $3_1;
       break label$4;
      }
      label$6 : while (1) {
       $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       if (!$4_1) {
        break label$3
       }
       $1_1 = $3_1;
       $3_1 = $4_1;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
        continue label$6
       }
       break label$6;
      };
     }
     if (!$0_1) {
      break label$2
     }
     HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
     break label$1;
    }
    label$7 : {
     $3_1 = $456(12 | 0) | 0;
     if (!$3_1) {
      break label$7
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
     HEAP32[$3_1 >> 2] = $2_1;
     HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(0 + 130868 | 0) >> 2] | 0;
     HEAP32[(0 + 130868 | 0) >> 2] = $3_1;
     break label$1;
    }
    $835(0 | 0) | 0;
    return $262(0 | 0) | 0 | 0;
   }
   HEAP32[($1_1 ? $1_1 + 8 | 0 : 130868) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   $459($4_1 | 0);
  }
  $835(0 | 0) | 0;
  return 0 | 0;
 }
 
 function $849() {
  HEAP32[(0 + 130880 | 0) >> 2] = 128;
  HEAP32[(0 + 130876 | 0) >> 2] = 130896;
  return 130872 | 0;
 }
 
 function $850($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $838($0_1 | 0);
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   }
   label$3 : {
    $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$3
    }
    $459($1_1 | 0);
   }
   $459($0_1 | 0);
  }
 }
 
 function $851() {
  return 0 | 0;
 }
 
 function $852() {
  var $0_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $0_1 = HEAP32[(0 + 131024 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$1
    }
    HEAP32[(0 + 131024 | 0) >> 2] = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    $459($0_1 | 0);
    continue label$2;
   };
  }
 }
 
 function $853() {
  return $840() | 0 | 0;
 }
 
 function $854() {
  return 0 | 0;
 }
 
 function $855($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var $2_1 = 0, $1_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $19$hi = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[(0 + 131028 | 0) >> 2] | 0;
    if (($3_1 | 0) < (1 | 0)) {
     break label$2
    }
    $4_1 = HEAP32[(0 + 131032 | 0) >> 2] | 0;
    label$3 : {
     label$4 : while (1) {
      $5_1 = HEAP32[($4_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $0$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      if ((i64toi32_i32$2 | 0) == ($0_1 | 0) & (i64toi32_i32$1 | 0) == ($0$hi | 0) | 0) {
       break label$3
      }
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != ($3_1 | 0)) {
       continue label$4
      }
      break label$2;
     };
    }
    if (($2_1 | 0) < ($3_1 | 0)) {
     break label$1
    }
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $0$hi;
   $2_1 = $0_1;
   label$5 : {
    label$6 : {
     if (!(HEAP32[(($927() | 0) + 12 | 0) >> 2] | 0)) {
      break label$6
     }
     HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
     $260(71811 | 0, $1_1 + 16 | 0 | 0) | 0;
     $2_1 = HEAP32[(($927() | 0) + 12 | 0) >> 2] | 0;
     FUNCTION_TABLE[$2_1 | 0]($927() | 0);
     break label$5;
    }
    HEAP32[$1_1 >> 2] = $2_1;
    $260(67447 | 0, $1_1 | 0) | 0;
   }
   $5_1 = 0;
  }
  global$0 = $1_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $856($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $15$hi = 0;
  $3_1 = 0;
  $4_1 = HEAP32[(0 + 131032 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = HEAP32[(0 + 131028 | 0) >> 2] | 0;
    if (($5_1 | 0) < (1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     i64toi32_i32$2 = HEAP32[($4_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $0$hi;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     if ((i64toi32_i32$2 | 0) == ($0_1 | 0) & (i64toi32_i32$1 | 0) == ($0$hi | 0) | 0) {
      break label$1
     }
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) != ($5_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : {
    $3_1 = $458($4_1 | 0, ($5_1 << 2 | 0) + 4 | 0 | 0) | 0;
    if ($3_1) {
     break label$4
    }
    return $262(0 | 0) | 0 | 0;
   }
   HEAP32[(0 + 131032 | 0) >> 2] = $3_1;
   $3_1 = HEAP32[(0 + 131028 | 0) >> 2] | 0;
   $4_1 = $456(32 | 0) | 0;
   HEAP32[((HEAP32[(0 + 131032 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = $4_1;
   label$5 : {
    if ($4_1) {
     break label$5
    }
    return $262(0 | 0) | 0 | 0;
   }
   HEAP32[(0 + 131028 | 0) >> 2] = (HEAP32[(0 + 131028 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = 0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = i64toi32_i32$2;
   HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $4_1;
   HEAP32[$4_1 >> 2] = $0_1;
   HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$2;
   $4_1 = $543(($2_1 ? $2_1 : 87288) | 0) | 0;
   HEAP32[((HEAP32[((HEAP32[(0 + 131032 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] = $4_1;
   $371($0_1 | 0, i64toi32_i32$2 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $857($0_1, $0$hi, $1_1, $1$hi, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = Math_fround($4_1);
  $5_1 = Math_fround($5_1);
  $6_1 = Math_fround($6_1);
  var $10_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $9_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $13_1 = Math_fround(0), $12_1 = 0, $85$hi = 0, $90$hi = 0, $106$hi = 0, $109$hi = 0, $124$hi = 0, $270$hi = 0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    $8_1 = $855($0_1 | 0, i64toi32_i32$0 | 0) | 0;
    if ($8_1) {
     break label$2
    }
    $9_1 = -1;
    break label$1;
   }
   $10_1 = $470() | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$3 = -1;
      if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
       break label$5
      }
      if (!(HEAP32[($10_1 + 140 | 0) >> 2] | 0)) {
       break label$5
      }
      label$6 : {
       label$7 : {
        if (!$2_1) {
         break label$7
        }
        $10_1 = HEAPU8[(0 + 131036 | 0) >> 0] | 0;
        label$8 : {
         if (!$3_1) {
          break label$8
         }
         if ($10_1 & 1 | 0) {
          break label$3
         }
         label$9 : {
          label$10 : {
           $10_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
           $13_1 = Math_fround($5_1 * Math_fround($10_1 | 0));
           if (!(Math_fround(Math_abs($13_1)) < Math_fround(2147483648.0))) {
            break label$10
           }
           $9_1 = ~~$13_1;
           break label$9;
          }
          $9_1 = -2147483648;
         }
         $9_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
         $11_1 = ($9_1 | 0) < ($10_1 | 0) ? $9_1 : $10_1 + -1 | 0;
         label$11 : {
          label$12 : {
           $10_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
           $13_1 = Math_fround($4_1 * Math_fround($10_1 | 0));
           if (!(Math_fround(Math_abs($13_1)) < Math_fround(2147483648.0))) {
            break label$12
           }
           $9_1 = ~~$13_1;
           break label$11;
          }
          $9_1 = -2147483648;
         }
         $9_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
         $475($2_1 | 0, -1 | 0, 0 | 0, (($9_1 | 0) < ($10_1 | 0) ? $9_1 : $10_1 + -1 | 0) | 0, $11_1 | 0) | 0;
         $479($2_1 | 0, -1 | 0, 1 | 0, 1 | 0) | 0;
         break label$6;
        }
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 131040 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 131044 | 0) >> 2] | 0;
        $85$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $0$hi;
        i64toi32_i32$0 = $85$hi;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$2 = $0$hi;
        i64toi32_i32$1 = $0_1;
        if (($10_1 & ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) | 0 | 0) != (1 | 0)) {
         break label$4
        }
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 131048 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 131052 | 0) >> 2] | 0;
        $90$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $90$hi;
        i64toi32_i32$1 = i64toi32_i32$3;
        i64toi32_i32$3 = $1$hi;
        i64toi32_i32$2 = $1_1;
        if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
         break label$4
        }
        $479($2_1 | 0, -1 | 0, 0 | 0, 1 | 0) | 0;
        break label$4;
       }
       if (!$3_1) {
        break label$4
       }
      }
      if (HEAPU8[(0 + 131036 | 0) >> 0] | 0) {
       break label$3
      }
      i64toi32_i32$1 = $0$hi;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$0 + 131040 | 0) >> 2] = $0_1;
      HEAP32[(i64toi32_i32$0 + 131044 | 0) >> 2] = i64toi32_i32$1;
      HEAP8[(0 + 131036 | 0) >> 0] = 1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$0 + 131048 | 0) >> 2] = $1_1;
      HEAP32[(i64toi32_i32$0 + 131052 | 0) >> 2] = i64toi32_i32$1;
      break label$3;
     }
     i64toi32_i32$1 = $0$hi;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$3
     }
     if (HEAP32[($10_1 + 144 | 0) >> 2] | 0) {
      break label$3
     }
     $9_1 = 0;
     break label$1;
    }
    if (!(HEAPU8[(0 + 131036 | 0) >> 0] | 0)) {
     break label$3
    }
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 131040 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 131044 | 0) >> 2] | 0;
    $106$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $106$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 131048 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 131052 | 0) >> 2] | 0;
    $109$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $109$hi;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $1_1;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$3
    }
    HEAP8[(0 + 131036 | 0) >> 0] = 0;
   }
   label$13 : {
    label$14 : {
     $9_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
     if (($9_1 | 0) >= (1 | 0)) {
      break label$14
     }
     $10_1 = 0;
     break label$13;
    }
    $11_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
    $10_1 = 0;
    label$15 : {
     label$16 : while (1) {
      $12_1 = HEAP32[($11_1 + ($10_1 << 2 | 0) | 0) >> 2] | 0;
      i64toi32_i32$2 = $12_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $124$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $124$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$3 = $1_1;
      if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
       break label$15
      }
      $10_1 = $10_1 + 1 | 0;
      if (($10_1 | 0) != ($9_1 | 0)) {
       continue label$16
      }
      break label$16;
     };
     $10_1 = 0;
     break label$13;
    }
    $10_1 = ($10_1 | 0) < ($9_1 | 0) ? $12_1 : 0;
   }
   label$17 : {
    if (!$3_1) {
     break label$17
    }
    label$18 : {
     if (!$10_1) {
      break label$18
     }
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$1 = $1$hi;
     $857($0_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, 0 | 0, Math_fround($4_1), Math_fround($5_1), Math_fround($6_1)) | 0;
     $9_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    }
    $10_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
    label$19 : {
     label$20 : {
      label$21 : {
       if (($9_1 | 0) != (HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0)) {
        break label$21
       }
       $10_1 = $458($10_1 | 0, ($9_1 << 2 | 0) + 4 | 0 | 0) | 0;
       if (!$10_1) {
        break label$20
       }
       HEAP32[($8_1 + 20 | 0) >> 2] = $10_1;
       $10_1 = $456(24 | 0) | 0;
       $11_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
       $9_1 = $11_1 << 2 | 0;
       HEAP32[((HEAP32[($8_1 + 20 | 0) >> 2] | 0) + $9_1 | 0) >> 2] = $10_1;
       $10_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
       if (!(HEAP32[($10_1 + $9_1 | 0) >> 2] | 0)) {
        break label$20
       }
       HEAP32[($8_1 + 16 | 0) >> 2] = $11_1 + 1 | 0;
       $9_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
      }
      HEAP32[($8_1 + 12 | 0) >> 2] = $9_1 + 1 | 0;
      $10_1 = HEAP32[($10_1 + ($9_1 << 2 | 0) | 0) >> 2] | 0;
      HEAPF32[($10_1 + 16 | 0) >> 2] = $6_1;
      HEAPF32[($10_1 + 12 | 0) >> 2] = $5_1;
      HEAPF32[($10_1 + 8 | 0) >> 2] = $4_1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $10_1;
      HEAP32[$10_1 >> 2] = $1_1;
      HEAP32[($10_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      break label$19;
     }
     $9_1 = 0;
     if (($262(0 | 0) | 0 | 0) < (0 | 0)) {
      break label$1
     }
    }
    label$22 : {
     if (($321(1792 | 0, -1 | 0) | 0 | 0) == (1 | 0)) {
      break label$22
     }
     $9_1 = 0;
     break label$1;
    }
    HEAPF32[($7_1 + 48 | 0) >> 2] = $6_1;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = 0;
    HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] = i64toi32_i32$1;
    HEAPF32[(i64toi32_i32$2 + 36 | 0) >> 2] = $5_1;
    HEAPF32[(i64toi32_i32$2 + 32 | 0) >> 2] = $4_1;
    i64toi32_i32$1 = $1$hi;
    HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $1_1;
    HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = $0$hi;
    HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = $0_1;
    HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = 1792;
    $10_1 = 0;
    label$23 : {
     if (!$2_1) {
      break label$23
     }
     $10_1 = $954($2_1 | 0) | 0;
    }
    HEAP32[($7_1 + 52 | 0) >> 2] = $10_1;
    $9_1 = ($327($7_1 + 8 | 0 | 0) | 0 | 0) > (0 | 0);
    break label$1;
   }
   label$24 : {
    if ($10_1) {
     break label$24
    }
    $9_1 = 0;
    break label$1;
   }
   $9_1 = 0;
   label$25 : {
    if (($321(1793 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
     break label$25
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $7_1;
    HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $1_1;
    HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = $0$hi;
    HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = $0_1;
    HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = 1793;
    HEAPF32[(i64toi32_i32$2 + 32 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($10_1 + 12 | 0) >> 2]);
    HEAPF32[(i64toi32_i32$2 + 48 | 0) >> 2] = $6_1;
    i64toi32_i32$1 = 0;
    HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] = i64toi32_i32$1;
    HEAPF32[(i64toi32_i32$2 + 36 | 0) >> 2] = $5_1;
    $10_1 = 0;
    label$26 : {
     if (!$2_1) {
      break label$26
     }
     $10_1 = $954($2_1 | 0) | 0;
    }
    HEAP32[($7_1 + 52 | 0) >> 2] = $10_1;
    $9_1 = ($327($7_1 + 8 | 0 | 0) | 0 | 0) > (0 | 0);
   }
   $11_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
   if (($11_1 | 0) < (1 | 0)) {
    break label$1
   }
   $12_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
   $10_1 = 0;
   label$27 : {
    label$28 : while (1) {
     $2_1 = $12_1 + ($10_1 << 2 | 0) | 0;
     $3_1 = HEAP32[$2_1 >> 2] | 0;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $270$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $270$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0) {
      break label$27
     }
     $10_1 = $10_1 + 1 | 0;
     if (($10_1 | 0) != ($11_1 | 0)) {
      continue label$28
     }
     break label$1;
    };
   }
   $10_1 = $11_1 + -1 | 0;
   HEAP32[($8_1 + 12 | 0) >> 2] = $10_1;
   $10_1 = $10_1 << 2 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($12_1 + $10_1 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($8_1 + 20 | 0) >> 2] | 0) + $10_1 | 0) >> 2] = $3_1;
  }
  global$0 = $7_1 + 64 | 0;
  return $9_1 | 0;
 }
 
 function $858($0_1, $0$hi, $1_1, $1$hi, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  $5_1 = Math_fround($5_1);
  var i64toi32_i32$3 = 0, $8_1 = 0, i64toi32_i32$1 = 0, $9_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $11_1 = Math_fround(0), $10_1 = 0, $12_1 = Math_fround(0), $30$hi = 0, $33$hi = 0, $102$hi = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    $7_1 = $855($0_1 | 0, i64toi32_i32$0 | 0) | 0;
    if ($7_1) {
     break label$2
    }
    $8_1 = -1;
    break label$1;
   }
   $8_1 = 0;
   $9_1 = $470() | 0;
   label$3 : {
    label$4 : {
     if (!$2_1) {
      break label$4
     }
     i64toi32_i32$0 = $0$hi;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
      break label$4
     }
     if (!(HEAP32[($9_1 + 140 | 0) >> 2] | 0)) {
      break label$4
     }
     if (!((HEAPU8[(0 + 131036 | 0) >> 0] | 0) & 1 | 0)) {
      break label$4
     }
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 131040 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 131044 | 0) >> 2] | 0;
     $30$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $0$hi;
     i64toi32_i32$0 = $30$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$1 = $0_1;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != ($0$hi | 0) | 0) {
      break label$4
     }
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 131048 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 131052 | 0) >> 2] | 0;
     $33$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $33$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$4
     }
     label$5 : {
      label$6 : {
       $8_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
       $11_1 = Math_fround($4_1 * Math_fround($8_1 | 0));
       if (!(Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0))) {
        break label$6
       }
       $9_1 = ~~$11_1;
       break label$5;
      }
      $9_1 = -2147483648;
     }
     $9_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
     $10_1 = ($9_1 | 0) < ($8_1 | 0) ? $9_1 : $8_1 + -1 | 0;
     label$7 : {
      label$8 : {
       $8_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
       $11_1 = Math_fround($3_1 * Math_fround($8_1 | 0));
       if (!(Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0))) {
        break label$8
       }
       $9_1 = ~~$11_1;
       break label$7;
      }
      $9_1 = -2147483648;
     }
     $9_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
     $475($2_1 | 0, -1 | 0, 0 | 0, (($9_1 | 0) < ($8_1 | 0) ? $9_1 : $8_1 + -1 | 0) | 0, $10_1 | 0) | 0;
     break label$3;
    }
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if (($0_1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
     break label$3
    }
    if (!(HEAP32[($9_1 + 144 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   label$9 : {
    label$10 : {
     $9_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
     if (($9_1 | 0) < (1 | 0)) {
      break label$10
     }
     $10_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
     $8_1 = 0;
     label$11 : {
      label$12 : while (1) {
       $7_1 = HEAP32[($10_1 + ($8_1 << 2 | 0) | 0) >> 2] | 0;
       i64toi32_i32$3 = $7_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $102$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1$hi;
       i64toi32_i32$1 = $102$hi;
       i64toi32_i32$3 = i64toi32_i32$2;
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$0 = $1_1;
       if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == ($1$hi | 0) | 0) {
        break label$11
       }
       $8_1 = $8_1 + 1 | 0;
       if (($8_1 | 0) != ($9_1 | 0)) {
        continue label$12
       }
       break label$10;
      };
     }
     if (($8_1 | 0) < ($9_1 | 0)) {
      break label$9
     }
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $1$hi;
    $8_1 = $857($0_1 | 0, i64toi32_i32$3 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, 1 | 0, Math_fround($3_1), Math_fround($4_1), Math_fround($5_1)) | 0;
    break label$1;
   }
   $11_1 = Math_fround($4_1 - Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]));
   $8_1 = 0;
   label$13 : {
    $12_1 = Math_fround($3_1 - Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]));
    if ($12_1 != Math_fround(0.0)) {
     break label$13
    }
    if ($11_1 != Math_fround(0.0)) {
     break label$13
    }
    if (Math_fround($5_1 - Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2])) == Math_fround(0.0)) {
     break label$1
    }
   }
   HEAPF32[($7_1 + 16 | 0) >> 2] = $5_1;
   HEAPF32[($7_1 + 12 | 0) >> 2] = $4_1;
   HEAPF32[($7_1 + 8 | 0) >> 2] = $3_1;
   if (($321(1794 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAPF32[($6_1 + 48 | 0) >> 2] = $5_1;
   HEAPF32[($6_1 + 44 | 0) >> 2] = $11_1;
   HEAPF32[($6_1 + 40 | 0) >> 2] = $12_1;
   HEAPF32[($6_1 + 36 | 0) >> 2] = $4_1;
   HEAPF32[($6_1 + 32 | 0) >> 2] = $3_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $6_1;
   HEAP32[(i64toi32_i32$3 + 24 | 0) >> 2] = $1_1;
   HEAP32[(i64toi32_i32$3 + 28 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] = $0_1;
   HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = 1794;
   $8_1 = 0;
   label$14 : {
    if (!$2_1) {
     break label$14
    }
    $8_1 = $954($2_1 | 0) | 0;
   }
   HEAP32[($6_1 + 52 | 0) >> 2] = $8_1;
   $8_1 = ($327($6_1 + 8 | 0 | 0) | 0 | 0) > (0 | 0);
  }
  global$0 = $6_1 + 64 | 0;
  return $8_1 | 0;
 }
 
 function $859($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var $1_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $4_1 = 0, $16$hi = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 131028 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = -1;
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $3_1 = 0;
    $4_1 = HEAP32[(0 + 131032 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      i64toi32_i32$2 = HEAP32[($4_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $16$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $0$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      if ((i64toi32_i32$2 | 0) != ($0_1 | 0) | (i64toi32_i32$1 | 0) != ($0$hi | 0) | 0) {
       break label$4
      }
      $2_1 = $3_1;
      break label$2;
     }
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) != ($1_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   i64toi32_i32$2 = $0$hi;
   $1_1 = $855($0_1 | 0, $0$hi | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   label$5 : {
    if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$5
    }
    $3_1 = 0;
    label$6 : while (1) {
     $459(HEAP32[((HEAP32[($1_1 + 20 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] | 0 | 0);
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) < (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   $459(HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0);
   $459($1_1 | 0);
   $3_1 = (HEAP32[(0 + 131028 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 131028 | 0) >> 2] = $3_1;
   $1_1 = HEAP32[(0 + 131032 | 0) >> 2] | 0;
   HEAP32[($1_1 + ($2_1 << 2 | 0) | 0) >> 2] = HEAP32[($1_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
   i64toi32_i32$2 = $0$hi;
   $372($0_1 | 0, $0$hi | 0) | 0;
  }
 }
 
 function $860() {
  var $0_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $0_1 = HEAP32[(0 + 131028 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    $0_1 = $0_1 + -1 | 0;
    i64toi32_i32$2 = HEAP32[((HEAP32[(0 + 131032 | 0) >> 2] | 0) + ($0_1 << 2 | 0) | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $859(HEAP32[i64toi32_i32$2 >> 2] | 0 | 0, i64toi32_i32$1 | 0);
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $459(HEAP32[(0 + 131032 | 0) >> 2] | 0 | 0);
  HEAP32[(0 + 131032 | 0) >> 2] = 0;
  $369();
 }
 
 function $861($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $999($0_1 | 0) | 0;
  }
 }
 
 function $862($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   if (!(HEAPU8[$2_1 >> 0] | 0)) {
    break label$1
   }
   if ($544($2_1 | 0, 32 | 0) | 0) {
    break label$1
   }
   label$2 : {
    $4_1 = $378($2_1 | 0) | 0;
    if (!$4_1) {
     break label$2
    }
    $4_1 = $549($4_1 | 0) | 0;
    label$3 : {
     if ($1_1) {
      break label$3
     }
     if ($4_1 & 1 | 0) {
      break label$1
     }
    }
    if (($1_1 | 0) != (1 | 0)) {
     break label$2
    }
    if ($4_1 & 2 | 0) {
     break label$1
    }
   }
   $5_1 = $539($2_1 | 0) | 0;
   label$4 : {
    label$5 : {
     switch ($1_1 | 0) {
     case 0:
      $1_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
      $4_1 = FUNCTION_TABLE[HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 8 | 0) >> 2] | 0, 12373) | 0;
      break label$4;
     case 1:
      break label$5;
     default:
      break label$1;
     };
    }
    $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 1104 | 0) >> 2] | 0) + 104 | 0) >> 2] | 0 | 0](0, 12373) | 0;
   }
   if (!$4_1) {
    break label$1
   }
   if (!(HEAPU8[$4_1 >> 0] | 0)) {
    break label$1
   }
   $1_1 = $4_1;
   label$7 : while (1) {
    $1_1 = $545($1_1 | 0, $2_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    label$8 : {
     label$9 : {
      if (($1_1 | 0) == ($4_1 | 0)) {
       break label$9
      }
      if ((HEAPU8[($1_1 + -1 | 0) >> 0] | 0 | 0) != (32 | 0)) {
       break label$8
      }
     }
     if ((HEAPU8[($1_1 + $5_1 | 0) >> 0] | 0 | 32 | 0 | 0) != (32 | 0)) {
      break label$8
     }
     $3_1 = 1;
     break label$1;
    }
    $1_1 = $1_1 + $5_1 | 0;
    label$10 : while (1) {
     label$11 : {
      $0_1 = HEAPU8[$1_1 >> 0] | 0;
      if ($0_1) {
       break label$11
      }
      return $0_1 | 0;
     }
     if (($0_1 | 0) == (32 | 0)) {
      continue label$7
     }
     $1_1 = $1_1 + 1 | 0;
     continue label$10;
    };
   };
  }
  return $3_1 | 0;
 }
 
 function $863($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $0_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $2_1 = FUNCTION_TABLE[$0_1 | 0]($1_1) | 0;
  }
  return $2_1 | 0;
 }
 
 function $864($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[($1_1 + 60 | 0) >> 2] | 0 | 0]($2_1) | 0;
    $1_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = 0;
   }
   label$3 : {
    $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$3
    }
    $861($2_1 | 0);
    $1_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = 0;
   }
   label$4 : {
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if (!$2_1) {
     break label$4
    }
    $861($2_1 | 0);
    $1_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
    HEAP32[$1_1 >> 2] = 0;
   }
   $459($1_1 | 0);
   HEAP32[($0_1 + 1104 | 0) >> 2] = 0;
  }
 }
 
 function $865($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($0_1 + 1104 | 0) >> 2] | 0) {
     break label$2
    }
    $2_1 = $260(73421 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if ($866($0_1 | 0, 1 | 0) | 0) {
     break label$3
    }
    $2_1 = 0;
    break label$1;
   }
   $2_1 = 0;
   label$4 : {
    if ($866($0_1 | 0, 0 | 0) | 0) {
     break label$4
    }
    $447(71930 | 0, 0 | 0);
    break label$1;
   }
   $2_1 = 87288;
   label$5 : {
    $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 1104 | 0) >> 2] | 0) + 128 | 0) >> 2] | 0 | 0]() | 0;
    $0_1 = $3_1 + -12288 | 0;
    if ($0_1 >>> 0 > 14 >>> 0) {
     break label$5
    }
    $2_1 = HEAP32[(($0_1 << 2 | 0) + 99424 | 0) >> 2] | 0;
   }
   label$6 : {
    if (HEAPU8[$2_1 >> 0] | 0) {
     break label$6
    }
    HEAP32[($1_1 + 16 | 0) >> 2] = $3_1;
    $556($1_1 + 32 | 0 | 0, 32 | 0, 65905 | 0, $1_1 + 16 | 0 | 0) | 0;
    $2_1 = $1_1 + 32 | 0;
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = 72010;
   HEAP32[$1_1 >> 2] = 71976;
   $2_1 = $260(81706 | 0, $1_1 | 0) | 0;
  }
  global$0 = $1_1 + 64 | 0;
  return $2_1 | 0;
 }
 
 function $866($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $9_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $12_1 = 0, $8_1 = 0, $10_1 = 0, $6_1 = 0, $11_1 = 0, $13_1 = 0;
  $2_1 = global$0 - 800 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 540 | 0) >> 2] = 0;
  HEAP32[($2_1 + 544 | 0) >> 2] = 12324;
  $3_1 = HEAP32[($0_1 + 432 | 0) >> 2] | 0;
  HEAP32[($2_1 + 552 | 0) >> 2] = 12323;
  HEAP32[($2_1 + 548 | 0) >> 2] = $3_1;
  $3_1 = HEAP32[($0_1 + 436 | 0) >> 2] | 0;
  HEAP32[($2_1 + 560 | 0) >> 2] = 12322;
  HEAP32[($2_1 + 556 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 564 | 0) >> 2] = HEAP32[($0_1 + 440 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $3_1 = $2_1 + 568 | 0;
    $1_1 = 6;
    break label$1;
   }
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 12344;
   HEAP32[($2_1 + 568 | 0) >> 2] = 12327;
   HEAP32[($2_1 + 572 | 0) >> 2] = i64toi32_i32$0;
   $3_1 = $2_1 + 576 | 0;
   $1_1 = 8;
  }
  label$3 : {
   $4_1 = HEAP32[($0_1 + 444 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$3
   }
   HEAP32[$3_1 >> 2] = 12321;
   HEAP32[((($2_1 + 544 | 0) + ($1_1 << 2 | 0) | 0) + 4 | 0) >> 2] = $4_1;
   $1_1 = $1_1 + 2 | 0;
  }
  label$4 : {
   $3_1 = HEAP32[($0_1 + 452 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$4
   }
   $4_1 = ($2_1 + 544 | 0) + ($1_1 << 2 | 0) | 0;
   HEAP32[$4_1 >> 2] = 12320;
   HEAP32[($4_1 + 4 | 0) >> 2] = $3_1;
   $1_1 = $1_1 + 2 | 0;
  }
  label$5 : {
   $3_1 = HEAP32[($0_1 + 448 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$5
   }
   $4_1 = ($2_1 + 544 | 0) + ($1_1 << 2 | 0) | 0;
   HEAP32[$4_1 >> 2] = 12325;
   HEAP32[($4_1 + 4 | 0) >> 2] = $3_1;
   $1_1 = $1_1 + 2 | 0;
  }
  label$6 : {
   $3_1 = HEAP32[($0_1 + 456 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$6
   }
   $4_1 = ($2_1 + 544 | 0) + ($1_1 << 2 | 0) | 0;
   HEAP32[$4_1 >> 2] = 12326;
   HEAP32[($4_1 + 4 | 0) >> 2] = $3_1;
   $1_1 = $1_1 + 2 | 0;
  }
  label$7 : {
   $3_1 = HEAP32[($0_1 + 484 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$7
   }
   $4_1 = ($2_1 + 544 | 0) + ($1_1 << 2 | 0) | 0;
   HEAP32[$4_1 >> 2] = 12338;
   HEAP32[($4_1 + 4 | 0) >> 2] = $3_1;
   $1_1 = $1_1 + 2 | 0;
  }
  label$8 : {
   $3_1 = HEAP32[($0_1 + 488 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$8
   }
   $4_1 = ($2_1 + 544 | 0) + ($1_1 << 2 | 0) | 0;
   HEAP32[$4_1 >> 2] = 12337;
   HEAP32[($4_1 + 4 | 0) >> 2] = $3_1;
   $1_1 = $1_1 + 2 | 0;
  }
  label$9 : {
   if (!(HEAP32[($0_1 + 492 | 0) >> 2] | 0)) {
    break label$9
   }
   i64toi32_i32$1 = ($2_1 + 544 | 0) + ($1_1 << 2 | 0) | 0;
   i64toi32_i32$0 = 13115;
   HEAP32[i64toi32_i32$1 >> 2] = 13113;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $1_1 = $1_1 + 2 | 0;
  }
  label$10 : {
   $3_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
   if (!(HEAP32[($3_1 + 36 | 0) >> 2] | 0)) {
    break label$10
   }
   i64toi32_i32$1 = ($2_1 + 544 | 0) + ($1_1 << 2 | 0) | 0;
   i64toi32_i32$0 = 1;
   HEAP32[i64toi32_i32$1 >> 2] = 12339;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $1_1 = $1_1 + 2 | 0;
  }
  HEAP32[(($2_1 + 544 | 0) + ($1_1 << 2 | 0) | 0) >> 2] = 12352;
  $4_1 = $1_1 + 1 | 0;
  label$11 : {
   label$12 : {
    if ((HEAP32[($0_1 + 512 | 0) >> 2] | 0 | 0) != (4 | 0)) {
     break label$12
    }
    label$13 : {
     label$14 : {
      $3_1 = HEAP32[($0_1 + 500 | 0) >> 2] | 0;
      if (($3_1 | 0) < (3 | 0)) {
       break label$14
      }
      label$15 : {
       if (!($862($0_1 | 0, 0 | 0, 66906 | 0) | 0)) {
        break label$15
       }
       HEAP32[(($2_1 + 544 | 0) + ($4_1 << 2 | 0) | 0) >> 2] = 64;
       break label$13;
      }
      $3_1 = HEAP32[($0_1 + 500 | 0) >> 2] | 0;
     }
     $4_1 = ($2_1 + 544 | 0) + ($4_1 << 2 | 0) | 0;
     label$16 : {
      if (($3_1 | 0) < (2 | 0)) {
       break label$16
      }
      HEAP32[$4_1 >> 2] = 4;
      break label$13;
     }
     HEAP32[$4_1 >> 2] = 1;
    }
    $3_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
    $4_1 = 12448;
    break label$11;
   }
   HEAP32[(($2_1 + 544 | 0) + ($4_1 << 2 | 0) | 0) >> 2] = 8;
   $4_1 = 12450;
  }
  FUNCTION_TABLE[HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0]($4_1) | 0;
  $3_1 = $1_1 + 2 | 0;
  label$17 : {
   $4_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
   $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$17
   }
   HEAP32[(($2_1 + 544 | 0) + ($3_1 << 2 | 0) | 0) >> 2] = 12339;
   HEAP32[((($1_1 << 2 | 0) + ($2_1 + 544 | 0) | 0) + 12 | 0) >> 2] = $5_1;
   $3_1 = $1_1 + 4 | 0;
  }
  HEAP32[(($2_1 + 544 | 0) + ($3_1 << 2 | 0) | 0) >> 2] = 12344;
  $1_1 = -1;
  label$18 : {
   if (!(FUNCTION_TABLE[HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0](HEAP32[($4_1 + 8 | 0) >> 2] | 0, $2_1 + 544 | 0, $2_1 + 16 | 0, 128, $2_1 + 540 | 0) | 0)) {
    break label$18
   }
   $4_1 = HEAP32[($2_1 + 540 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$18
   }
   label$19 : {
    label$20 : {
     $1_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
     if (HEAP32[($1_1 + 32 | 0) >> 2] | 0) {
      break label$20
     }
     $6_1 = 1;
     break label$19;
    }
    $6_1 = 1;
    if (($4_1 | 0) < (1 | 0)) {
     break label$19
    }
    $3_1 = 0;
    label$21 : while (1) {
     FUNCTION_TABLE[HEAP32[($1_1 + 112 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 8 | 0) >> 2] | 0, HEAP32[(($2_1 + 16 | 0) + ($3_1 << 2 | 0) | 0) >> 2] | 0, 12334, $2_1 + 536 | 0) | 0;
     $1_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
     $5_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
     $7_1 = HEAP32[($2_1 + 536 | 0) >> 2] | 0;
     $6_1 = ($5_1 | 0) != ($7_1 | 0);
     $4_1 = HEAP32[($2_1 + 540 | 0) >> 2] | 0;
     if (($5_1 | 0) == ($7_1 | 0)) {
      break label$19
     }
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) < ($4_1 | 0)) {
      continue label$21
     }
     break label$21;
    };
   }
   $8_1 = -1;
   label$22 : {
    if (($4_1 | 0) < (1 | 0)) {
     break label$22
    }
    $9_1 = 0;
    $10_1 = -1;
    $11_1 = -1;
    label$23 : while (1) {
     $1_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
     label$24 : {
      label$25 : {
       if ($6_1) {
        break label$25
       }
       if (!(HEAP32[($1_1 + 32 | 0) >> 2] | 0)) {
        break label$25
       }
       FUNCTION_TABLE[HEAP32[($1_1 + 112 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 8 | 0) >> 2] | 0, HEAP32[(($2_1 + 16 | 0) + ($9_1 << 2 | 0) | 0) >> 2] | 0, 12334, $2_1 + 12 | 0) | 0;
       $1_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
       if ((HEAP32[($1_1 + 32 | 0) >> 2] | 0 | 0) != (HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0)) {
        break label$24
       }
      }
      $12_1 = ($2_1 + 16 | 0) + ($9_1 << 2 | 0) | 0;
      FUNCTION_TABLE[HEAP32[($1_1 + 112 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 8 | 0) >> 2] | 0, HEAP32[$12_1 >> 2] | 0, 12324, $2_1 + 536 | 0) | 0;
      $13_1 = 1;
      label$26 : {
       if ((HEAP32[($2_1 + 536 | 0) >> 2] | 0 | 0) != (8 | 0)) {
        break label$26
       }
       $1_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
       FUNCTION_TABLE[HEAP32[($1_1 + 112 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 8 | 0) >> 2] | 0, HEAP32[$12_1 >> 2] | 0, 12323, $2_1 + 536 | 0) | 0;
       if ((HEAP32[($2_1 + 536 | 0) >> 2] | 0 | 0) != (8 | 0)) {
        break label$26
       }
       $1_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
       FUNCTION_TABLE[HEAP32[($1_1 + 112 | 0) >> 2] | 0 | 0](HEAP32[($1_1 + 8 | 0) >> 2] | 0, HEAP32[$12_1 >> 2] | 0, 12322, $2_1 + 536 | 0) | 0;
       $13_1 = (HEAP32[($2_1 + 536 | 0) >> 2] | 0 | 0) != (8 | 0);
      }
      $5_1 = 0;
      $3_1 = 0;
      label$27 : {
       label$28 : while (1) {
        $1_1 = $3_1;
        $4_1 = ($2_1 + 544 | 0) + ($1_1 << 2 | 0) | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if (($3_1 | 0) == (12344 | 0)) {
         break label$27
        }
        label$29 : {
         if (($3_1 + -12321 | 0) >>> 0 > 5 >>> 0) {
          break label$29
         }
         $4_1 = $4_1 + 4 | 0;
         if ((HEAP32[$4_1 >> 2] | 0 | 0) == (-1 | 0)) {
          break label$29
         }
         $7_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0](HEAP32[($7_1 + 8 | 0) >> 2] | 0, HEAP32[$12_1 >> 2] | 0, $3_1, $2_1 + 536 | 0) | 0;
         $5_1 = ((HEAP32[($2_1 + 536 | 0) >> 2] | 0) + $5_1 | 0) - (HEAP32[$4_1 >> 2] | 0) | 0;
        }
        $3_1 = $1_1 + 2 | 0;
        if ($1_1 >>> 0 < 61 >>> 0) {
         continue label$28
        }
        break label$28;
       };
      }
      label$30 : {
       label$31 : {
        if (($11_1 | 0) == (-1 | 0)) {
         break label$31
        }
        if (($5_1 | 0) >= ($11_1 | 0)) {
         break label$30
        }
       }
       HEAP32[((HEAP32[($0_1 + 1104 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[$12_1 >> 2] | 0;
       $11_1 = $5_1;
      }
      if ($13_1) {
       break label$24
      }
      $1_1 = ($10_1 | 0) == (-1 | 0) | ($5_1 | 0) < ($10_1 | 0) | 0;
      $8_1 = $1_1 ? $9_1 : $8_1;
      $10_1 = $1_1 ? $5_1 : $10_1;
     }
     $9_1 = $9_1 + 1 | 0;
     if (($9_1 | 0) < (HEAP32[($2_1 + 540 | 0) >> 2] | 0 | 0)) {
      continue label$23
     }
     break label$23;
    };
   }
   $1_1 = 0;
   if ((((HEAP32[($0_1 + 440 | 0) >> 2] | 0) + (HEAP32[($0_1 + 432 | 0) >> 2] | 0) | 0) + (HEAP32[($0_1 + 436 | 0) >> 2] | 0) | 0 | 0) > (16 | 0)) {
    break label$18
   }
   if (($8_1 | 0) == (-1 | 0)) {
    break label$18
   }
   HEAP32[((HEAP32[($0_1 + 1104 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[(($2_1 + 16 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
  }
  global$0 = $2_1 + 800 | 0;
  return $1_1 | 0;
 }
 
 function $867($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 128 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($0_1 + 1104 | 0) >> 2] | 0) {
     break label$2
    }
    $3_1 = 0;
    $260(73421 | 0, 0 | 0) | 0;
    break label$1;
   }
   $4_1 = HEAP32[($0_1 + 504 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 500 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 512 | 0) >> 2] | 0;
   label$3 : {
    label$4 : {
     if (HEAP32[($0_1 + 516 | 0) >> 2] | 0) {
      break label$4
     }
     $7_1 = 0;
     break label$3;
    }
    $7_1 = $970() | 0;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       if (($5_1 | 0) < (3 | 0)) {
        break label$8
       }
       if (!(!$4_1 & ($6_1 | 0) == (4 | 0) | 0)) {
        break label$7
       }
      }
      if (HEAP32[($0_1 + 508 | 0) >> 2] | 0) {
       break label$7
      }
      label$9 : {
       switch ($6_1 | 0) {
       case 0:
       case 4:
        break label$9;
       default:
        break label$7;
       };
      }
      $3_1 = 0;
      if (($6_1 | 0) != (4 | 0)) {
       break label$6
      }
      HEAP32[($2_1 + 32 | 0) >> 2] = 12440;
      HEAP32[($2_1 + 36 | 0) >> 2] = ($5_1 | 0) > (1 | 0) ? $5_1 : 1;
      $3_1 = 2;
      break label$6;
     }
     $3_1 = 0;
     if (!($862($0_1 | 0, 0 | 0, 66906 | 0) | 0)) {
      break label$5
     }
     HEAP32[($2_1 + 44 | 0) >> 2] = $4_1;
     HEAP32[($2_1 + 40 | 0) >> 2] = 12539;
     HEAP32[($2_1 + 36 | 0) >> 2] = $5_1;
     HEAP32[($2_1 + 32 | 0) >> 2] = 12440;
     label$10 : {
      label$11 : {
       if ($6_1 & -5 | 0) {
        break label$11
       }
       $5_1 = $2_1 + 48 | 0;
       $3_1 = 4;
       break label$10;
      }
      $5_1 = $2_1 + 56 | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = $6_1;
      HEAP32[($2_1 + 48 | 0) >> 2] = 12541;
      $3_1 = 6;
     }
     $4_1 = HEAP32[($0_1 + 508 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$6
     }
     HEAP32[$5_1 >> 2] = 12540;
     HEAP32[((($2_1 + 32 | 0) + ($3_1 << 2 | 0) | 0) + 4 | 0) >> 2] = $4_1;
     $3_1 = $3_1 + 2 | 0;
    }
    label$12 : {
     if (!(HEAP32[($0_1 + 532 | 0) >> 2] | 0)) {
      break label$12
     }
     if (!($862($0_1 | 0, 0 | 0, 68805 | 0) | 0)) {
      break label$12
     }
     $5_1 = ($2_1 + 32 | 0) + ($3_1 << 2 | 0) | 0;
     HEAP32[$5_1 >> 2] = 12723;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 532 | 0) >> 2] | 0;
     $3_1 = $3_1 + 2 | 0;
    }
    HEAP32[(($2_1 + 32 | 0) + ($3_1 << 2 | 0) | 0) >> 2] = 12344;
    $3_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
    $5_1 = ($6_1 | 0) == (4 | 0) ? 12448 : 12450;
    HEAP32[($3_1 + 40 | 0) >> 2] = $5_1;
    FUNCTION_TABLE[HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0]($5_1) | 0;
    $3_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
    $5_1 = FUNCTION_TABLE[HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0](HEAP32[($3_1 + 8 | 0) >> 2] | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0, $7_1, $2_1 + 32 | 0) | 0;
    $4_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
    label$13 : {
     if ($5_1) {
      break label$13
     }
     $0_1 = 87288;
     label$14 : {
      $6_1 = FUNCTION_TABLE[HEAP32[($4_1 + 128 | 0) >> 2] | 0 | 0]() | 0;
      $3_1 = $6_1 + -12288 | 0;
      if ($3_1 >>> 0 > 14 >>> 0) {
       break label$14
      }
      $0_1 = HEAP32[(($3_1 << 2 | 0) + 99424 | 0) >> 2] | 0;
     }
     label$15 : {
      if (HEAPU8[$0_1 >> 0] | 0) {
       break label$15
      }
      HEAP32[($2_1 + 16 | 0) >> 2] = $6_1;
      $556($2_1 + 96 | 0 | 0, 32 | 0, 65905 | 0, $2_1 + 16 | 0 | 0) | 0;
      $0_1 = $2_1 + 96 | 0;
     }
     HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = 66958;
     HEAP32[$2_1 >> 2] = 66929;
     $260(81706 | 0, $2_1 | 0) | 0;
     $3_1 = 0;
     break label$1;
    }
    $3_1 = 0;
    HEAP32[($4_1 + 16 | 0) >> 2] = 0;
    $1_1 = $868($0_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
    $4_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
    label$16 : {
     if (($1_1 | 0) > (-1 | 0)) {
      break label$16
     }
     if (!$4_1) {
      break label$1
     }
     FUNCTION_TABLE[HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0](HEAP32[($4_1 + 8 | 0) >> 2] | 0, $5_1) | 0;
     break label$1;
    }
    label$17 : {
     label$18 : {
      label$19 : {
       $3_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
       if (($3_1 | 0) > (1 | 0)) {
        break label$19
       }
       label$20 : {
        if (($3_1 | 0) != (1 | 0)) {
         break label$20
        }
        if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) > (4 | 0)) {
         break label$19
        }
       }
       if (!($862($0_1 | 0, 0 | 0, 66878 | 0) | 0)) {
        break label$17
       }
       if (($6_1 | 0) == (4 | 0)) {
        break label$18
       }
       break label$17;
      }
      if (($6_1 | 0) != (4 | 0)) {
       break label$17
      }
     }
     if (!($967(66851 | 0) | 0)) {
      break label$17
     }
     HEAP32[($0_1 + 820 | 0) >> 2] = 1;
    }
    $3_1 = $5_1;
    break label$1;
   }
   $260(82200 | 0, 0 | 0) | 0;
  }
  global$0 = $2_1 + 128 | 0;
  return $3_1 | 0;
 }
 
 function $868($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
    if ($4_1) {
     break label$2
    }
    $4_1 = $260(73421 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (HEAP32[($4_1 + 92 | 0) >> 2] | 0) {
     break label$3
    }
    label$4 : {
     if ($1_1 | $2_1 | 0) {
      break label$4
     }
     $4_1 = 0;
     break label$1;
    }
    $4_1 = $260(73421 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$5 : {
    $5_1 = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$5
    }
    FUNCTION_TABLE[$5_1 | 0](HEAP32[($4_1 + 40 | 0) >> 2] | 0) | 0;
   }
   label$6 : {
    label$7 : {
     if (!$2_1) {
      break label$7
     }
     if ($1_1) {
      break label$6
     }
     if (HEAP32[($0_1 + 820 | 0) >> 2] | 0) {
      break label$6
     }
    }
    $4_1 = 0;
    $0_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[($0_1 + 92 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 8 | 0) >> 2] | 0, 0, 0, 0) | 0;
    break label$1;
   }
   label$8 : {
    $4_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
    if (!(FUNCTION_TABLE[HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0](HEAP32[($4_1 + 8 | 0) >> 2] | 0, $1_1, $1_1, $2_1) | 0)) {
     break label$8
    }
    $4_1 = 0;
    break label$1;
   }
   $4_1 = 87288;
   label$9 : {
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 1104 | 0) >> 2] | 0) + 128 | 0) >> 2] | 0 | 0]() | 0;
    $0_1 = $1_1 + -12288 | 0;
    if ($0_1 >>> 0 > 14 >>> 0) {
     break label$9
    }
    $4_1 = HEAP32[(($0_1 << 2 | 0) + 99424 | 0) >> 2] | 0;
   }
   label$10 : {
    if (HEAPU8[$4_1 >> 0] | 0) {
     break label$10
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
    $556($3_1 + 32 | 0 | 0, 32 | 0, 65905 | 0, $3_1 + 16 | 0 | 0) | 0;
    $4_1 = $3_1 + 32 | 0;
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = 67298;
   HEAP32[$3_1 >> 2] = 67176;
   $4_1 = $260(81706 | 0, $3_1 | 0) | 0;
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $869($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $0_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 8 | 0) >> 2] | 0, $1_1) | 0;
  }
 }
 
 function $870($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $0_1 = $260(73421 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) > (-1 | 0)) {
     break label$3
    }
    $0_1 = $260(73494 | 0, 0 | 0) | 0;
    break label$1;
   }
   $3_1 = FUNCTION_TABLE[HEAP32[($3_1 + 100 | 0) >> 2] | 0 | 0](HEAP32[($3_1 + 8 | 0) >> 2] | 0, $1_1) | 0;
   $0_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
   label$4 : {
    if (($3_1 | 0) != (1 | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
    $0_1 = 0;
    break label$1;
   }
   $1_1 = 87288;
   label$5 : {
    $3_1 = FUNCTION_TABLE[HEAP32[($0_1 + 128 | 0) >> 2] | 0 | 0]() | 0;
    $0_1 = $3_1 + -12288 | 0;
    if ($0_1 >>> 0 > 14 >>> 0) {
     break label$5
    }
    $1_1 = HEAP32[(($0_1 << 2 | 0) + 99424 | 0) >> 2] | 0;
   }
   label$6 : {
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$6
    }
    HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
    $556($2_1 + 32 | 0 | 0, 32 | 0, 65905 | 0, $2_1 + 16 | 0 | 0) | 0;
    $1_1 = $2_1 + 32 | 0;
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = 71213;
   HEAP32[$2_1 >> 2] = 71177;
   $0_1 = $260(81706 | 0, $2_1 | 0) | 0;
  }
  global$0 = $2_1 + 64 | 0;
  return $0_1 | 0;
 }
 
 function $871($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
   if ($0_1) {
    break label$1
   }
   $260(73421 | 0, 0 | 0) | 0;
   return 0 | 0;
  }
  return HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0;
 }
 
 function $872($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
   if (FUNCTION_TABLE[HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0](HEAP32[($4_1 + 8 | 0) >> 2] | 0, $1_1) | 0) {
    break label$1
   }
   $3_1 = 87288;
   label$2 : {
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 1104 | 0) >> 2] | 0) + 128 | 0) >> 2] | 0 | 0]() | 0;
    $0_1 = $1_1 + -12288 | 0;
    if ($0_1 >>> 0 > 14 >>> 0) {
     break label$2
    }
    $3_1 = HEAP32[(($0_1 << 2 | 0) + 99424 | 0) >> 2] | 0;
   }
   label$3 : {
    if (HEAPU8[$3_1 >> 0] | 0) {
     break label$3
    }
    HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
    $556($2_1 + 32 | 0 | 0, 32 | 0, 65905 | 0, $2_1 + 16 | 0 | 0) | 0;
    $3_1 = $2_1 + 32 | 0;
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = 68239;
   HEAP32[$2_1 >> 2] = 66051;
   $3_1 = $260(81706 | 0, $2_1 | 0) | 0;
  }
  global$0 = $2_1 + 64 | 0;
  return $3_1 | 0;
 }
 
 function $873($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  label$1 : {
   if ($865($0_1 | 0) | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      if (HEAP32[($0_1 + 528 | 0) >> 2] | 0) {
       break label$4
      }
      $4_1 = $2_1 + 32 | 0;
      $3_1 = 0;
      break label$3;
     }
     $3_1 = 0;
     if (!($862($0_1 | 0, 0 | 0, 73166 | 0) | 0)) {
      break label$2
     }
     $4_1 = $2_1 + 32 | 0 | 8 | 0;
     HEAP32[($2_1 + 32 | 0) >> 2] = 12445;
     HEAP32[($2_1 + 36 | 0) >> 2] = 12425;
     $3_1 = 2;
    }
    label$5 : {
     if (!($862($0_1 | 0, 0 | 0, 72281 | 0) | 0)) {
      break label$5
     }
     $5_1 = $383(74502 | 0, 0 | 0) | 0;
     HEAP32[$4_1 >> 2] = 12767;
     HEAP32[($3_1 << 2 | 0 | ($2_1 + 32 | 0) | 0 | 4 | 0) >> 2] = !$5_1;
     $3_1 = $3_1 + 2 | 0;
    }
    HEAP32[(($2_1 + 32 | 0) + ($3_1 << 2 | 0) | 0) >> 2] = 12344;
    $3_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
    $3_1 = FUNCTION_TABLE[HEAP32[($3_1 + 84 | 0) >> 2] | 0 | 0](HEAP32[($3_1 + 8 | 0) >> 2] | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0, $1_1, $2_1 + 32 | 0) | 0;
    if ($3_1) {
     break label$1
    }
    $3_1 = 87288;
    label$6 : {
     $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 1104 | 0) >> 2] | 0) + 128 | 0) >> 2] | 0 | 0]() | 0;
     $0_1 = $1_1 + -12288 | 0;
     if ($0_1 >>> 0 > 14 >>> 0) {
      break label$6
     }
     $3_1 = HEAP32[(($0_1 << 2 | 0) + 99424 | 0) >> 2] | 0;
    }
    label$7 : {
     if (HEAPU8[$3_1 >> 0] | 0) {
      break label$7
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
     $556($2_1 + 64 | 0 | 0, 32 | 0, 65905 | 0, $2_1 + 16 | 0 | 0) | 0;
     $3_1 = $2_1 + 64 | 0;
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = 73340;
    HEAP32[$2_1 >> 2] = 73225;
    $260(81706 | 0, $2_1 | 0) | 0;
    $3_1 = 0;
    break label$1;
   }
   $260(68125 | 0, 0 | 0) | 0;
  }
  global$0 = $2_1 + 96 | 0;
  return $3_1 | 0;
 }
 
 function $874($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $0_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 88 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 8 | 0) >> 2] | 0, $1_1) | 0;
  }
 }
 
 function $875($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $457(1 | 0, 156 | 0) | 0;
  HEAP32[($0_1 + 1104 | 0) >> 2] = $2_1;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return $262(0 | 0) | 0 | 0;
  }
  HEAP32[($2_1 + 112 | 0) >> 2] = 298;
  HEAP32[($2_1 + 68 | 0) >> 2] = 299;
  HEAP32[($2_1 + 60 | 0) >> 2] = 300;
  HEAP32[($2_1 + 56 | 0) >> 2] = 301;
  HEAP32[($2_1 + 44 | 0) >> 2] = 302;
  HEAP32[($2_1 + 64 | 0) >> 2] = 303;
  HEAP32[($2_1 + 124 | 0) >> 2] = 304;
  HEAP32[($2_1 + 120 | 0) >> 2] = 305;
  HEAP32[($2_1 + 116 | 0) >> 2] = 306;
  HEAP32[($2_1 + 100 | 0) >> 2] = 307;
  HEAP32[($2_1 + 96 | 0) >> 2] = 308;
  HEAP32[($2_1 + 92 | 0) >> 2] = 309;
  HEAP32[($2_1 + 88 | 0) >> 2] = 310;
  HEAP32[($2_1 + 84 | 0) >> 2] = 311;
  HEAP32[($2_1 + 76 | 0) >> 2] = 312;
  HEAP32[($2_1 + 72 | 0) >> 2] = 313;
  HEAP32[($2_1 + 128 | 0) >> 2] = 314;
  HEAP32[($2_1 + 104 | 0) >> 2] = 315;
  $2_1 = fimport$47(0 | 0) | 0;
  $3_1 = HEAP32[($0_1 + 1104 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$2 : {
   if ($2_1) {
    break label$2
   }
   return $260(65823 | 0, 0 | 0) | 0 | 0;
  }
  label$3 : {
   if ((FUNCTION_TABLE[HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0]($2_1, 0, 0) | 0 | 0) == (1 | 0)) {
    break label$3
   }
   return $260(76362 | 0, 0 | 0) | 0 | 0;
  }
  $2_1 = $0_1 + 544 | 0;
  label$4 : {
   if (!$1_1) {
    break label$4
   }
   $540($2_1 | 0, $1_1 | 0, 255 | 0) | 0;
   return 0 | 0;
  }
  HEAP8[$2_1 >> 0] = 0;
  return 0 | 0;
 }
 
 function $876($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $867($0_1 | 0, HEAP32[(HEAP32[($1_1 + 164 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $877($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   return $868($0_1 | 0, 0 | 0, $2_1 | 0) | 0 | 0;
  }
  return $868($0_1 | 0, HEAP32[(HEAP32[($1_1 + 164 | 0) >> 2] | 0) >> 2] | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $878($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $872($0_1 | 0, HEAP32[(HEAP32[($1_1 + 164 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!(fimport$41() | 0)) {
    break label$1
   }
   if (!($383(74478 | 0, 1 | 0) | 0)) {
    break label$1
   }
   fimport$42(0 | 0);
  }
  return $1_1 | 0;
 }
 
 function $879($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[($1_1 + 164 | 0) >> 2] | 0;
  $802(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
  $785(374740996 | 0, $5_1 + 20 | 0 | 0, $5_1 + 16 | 0 | 0, $5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0, $5_1 + 4 | 0 | 0) | 0;
  $956($1_1 | 0, $5_1 + 28 | 0 | 0, $5_1 + 24 | 0 | 0);
  $7_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = $803(0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    if ($1_1) {
     break label$2
    }
    $7_1 = -1;
    break label$1;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[$2_1 >> 2] = 374740996;
   HEAP32[$3_1 >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 32 | 0;
  return $7_1 | 0;
 }
 
 function $880($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[((HEAP32[($1_1 + 164 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    if ($1_1) {
     break label$2
    }
    $1_1 = $260(66006 | 0, 0 | 0) | 0;
    break label$1;
   }
   $8_1 = 7367017;
   HEAP8[($4_1 + 12 | 0) >> 0] = $8_1;
   HEAP8[($4_1 + 13 | 0) >> 0] = $8_1 >>> 8 | 0;
   HEAP8[($4_1 + 14 | 0) >> 0] = $8_1 >>> 16 | 0;
   HEAP8[($4_1 + 15 | 0) >> 0] = $8_1 >>> 24 | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1;
   HEAP32[$4_1 >> 2] = $21_1;
   HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   fimport$33(123262 | 0, $4_1 + 12 | 0 | 0, $4_1 | 0) | 0;
   $1_1 = 0;
   if (!(fimport$41() | 0)) {
    break label$1
   }
   if (!($383(74478 | 0, 1 | 0) | 0)) {
    break label$1
   }
   $1_1 = 0;
   fimport$42(0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $881($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = HEAP32[($1_1 + 164 | 0) >> 2] | 0;
  $802(HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[($1_1 + 8 | 0) >> 2] = 0;
 }
 
 function $882() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = $470() | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 316;
  HEAP32[($0_1 + 16 | 0) >> 2] = 317;
  HEAP32[($0_1 + 8 | 0) >> 2] = 318;
  HEAP32[$0_1 >> 2] = 319;
  HEAP32[($0_1 + 28 | 0) >> 2] = 320;
  HEAP32[($0_1 + 4 | 0) >> 2] = 321;
  label$1 : {
   $0_1 = $457(1 | 0, 8 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $457(1 | 0, 8 | 0) | 0;
    if ($1_1) {
     break label$2
    }
    $262(0 | 0) | 0;
    $459($0_1 | 0);
    $472(0 | 0);
    return;
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = 0;
   HEAP32[$1_1 >> 2] = 67320;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
   $472($0_1 | 0);
   return;
  }
  $262(0 | 0) | 0;
  $472(0 | 0);
 }
 
 function $883($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $262(4 | 0) | 0;
 }
 
 function $884($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    label$3 : {
     if (!(HEAP32[($1_1 + 4 | 0) >> 2] | 0)) {
      break label$3
     }
     $459(HEAP32[$1_1 >> 2] | 0 | 0);
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    }
    $459($1_1 | 0);
   }
   $459($0_1 | 0);
  }
 }
 
 function $885($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!($473() | 0)) {
    break label$1
   }
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$2
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$0_1) {
     break label$1
    }
    HEAP32[$1_1 >> 2] = $0_1;
    $2_1 = 112;
    HEAP8[($1_1 + 14 | 0) >> 0] = $2_1;
    HEAP8[($1_1 + 15 | 0) >> 0] = $2_1 >>> 8 | 0;
    fimport$33(125720 | 0, $1_1 + 14 | 0 | 0, $1_1 | 0) | 0;
    break label$1;
   }
   HEAP8[($1_1 + 13 | 0) >> 0] = 0;
   fimport$33(125803 | 0, $1_1 + 13 | 0 | 0, 0 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return 0 | 0;
 }
 
 function $886($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $27_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   $5_1 = $809($0_1 | 0, 376840196 | 0, 0 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   HEAP16[($3_1 + 28 | 0) >> 1] = 112;
   HEAP32[($3_1 + 24 | 0) >> 2] = 1768515945;
   i64toi32_i32$0 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   $27_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1;
   HEAP32[$3_1 >> 2] = $27_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $2_1 = fimport$35(124731 | 0, $3_1 + 24 | 0 | 0, $3_1 | 0) | 0;
   $802($5_1 | 0);
   label$2 : {
    $0_1 = $457(1 | 0, 8 | 0) | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     $4_1 = $457(1 | 0, 8 | 0) | 0;
     if ($4_1) {
      break label$3
     }
     $4_1 = 0;
     $262(0 | 0) | 0;
     $459($0_1 | 0);
     break label$1;
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = 1;
    HEAP32[$4_1 >> 2] = $2_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
    $4_1 = $0_1;
    break label$1;
   }
   $4_1 = 0;
   $262(0 | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $887($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $473() | 0;
    if (!$0_1) {
     break label$1
    }
    if ((fimport$61(HEAP32[((HEAP32[($0_1 + 164 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, 1 | 0) | 0 | 0) <= (-1 | 0)) {
     break label$1
    }
    return 0 | 0;
   }
   if ((fimport$62() | 0 | 0) <= (-1 | 0)) {
    break label$1
   }
   return 0 | 0;
  }
  return -1 | 0;
 }
 
 function $888($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ($0_1 >>> 0 > 11 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[(($0_1 << 2 | 0) + 99484 | 0) >> 2] | 0;
   label$2 : {
    $0_1 = $457(1 | 0, 8 | 0) | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     $1_1 = $457(1 | 0, 8 | 0) | 0;
     if ($1_1) {
      break label$3
     }
     $262(0 | 0) | 0;
     $459($0_1 | 0);
     return 0 | 0;
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = 0;
    HEAP32[$1_1 >> 2] = $2_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
    return $0_1 | 0;
   }
   $1_1 = 0;
   $262(0 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $889() {
  
 }
 
 function $890($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0.0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!(HEAP32[($2_1 + 28 | 0) >> 2] | 0)) {
    break label$1
   }
   fimport$65(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
   $2_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     $6_1 = +HEAPF64[$3_1 >> 3];
     if (!(Math_abs($6_1) < 2147483648.0)) {
      break label$3
     }
     $4_1 = ~~$6_1;
     break label$2;
    }
    $4_1 = -2147483648;
   }
   label$4 : {
    label$5 : {
     $6_1 = +HEAPF64[($3_1 + 8 | 0) >> 3];
     if (!(Math_abs($6_1) < 2147483648.0)) {
      break label$5
     }
     $5_1 = ~~$6_1;
     break label$4;
    }
    $5_1 = -2147483648;
   }
   $975($2_1 | 0, 5 | 0, $5_1 | 0, $4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return 0 | 0;
 }
 
 function $891($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  fimport$67(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $0_1 | 0, 0 | 0, 322 | 0, 2 | 0) | 0;
  fimport$68(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $0_1 | 0, 0 | 0, 323 | 0, 2 | 0) | 0;
  fimport$69(1 | 0, $0_1 | 0, 0 | 0, 323 | 0, 2 | 0) | 0;
  fimport$70(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $0_1 | 0, 0 | 0, 324 | 0, 2 | 0) | 0;
  fimport$71(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $0_1 | 0, 0 | 0, 324 | 0, 2 | 0) | 0;
  fimport$72(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $0_1 | 0, 0 | 0, 325 | 0, 2 | 0) | 0;
  fimport$73(2 | 0, $0_1 | 0, 0 | 0, 326 | 0, 2 | 0) | 0;
  fimport$74(2 | 0, $0_1 | 0, 0 | 0, 326 | 0, 2 | 0) | 0;
  fimport$75(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $0_1 | 0, 0 | 0, 327 | 0, 2 | 0) | 0;
  fimport$76(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $0_1 | 0, 0 | 0, 327 | 0, 2 | 0) | 0;
  fimport$77(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $0_1 | 0, 0 | 0, 327 | 0, 2 | 0) | 0;
  fimport$78(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $0_1 | 0, 0 | 0, 327 | 0, 2 | 0) | 0;
  fimport$79(1 | 0, $0_1 | 0, 0 | 0, 328 | 0, 2 | 0) | 0;
  $1_1 = $381(75096 | 0) | 0;
  $1_1 = $1_1 ? $1_1 : 2;
  fimport$80($1_1 | 0, $0_1 | 0, 0 | 0, 329 | 0, 2 | 0) | 0;
  fimport$81($1_1 | 0, $0_1 | 0, 0 | 0, 329 | 0, 2 | 0) | 0;
  fimport$82($1_1 | 0, $0_1 | 0, 0 | 0, 330 | 0, 2 | 0) | 0;
  fimport$83(1 | 0, $0_1 | 0, 0 | 0, 331 | 0, 2 | 0) | 0;
  fimport$84(2 | 0, $0_1 | 0, 0 | 0, 332 | 0, 2 | 0) | 0;
  fimport$85($0_1 | 0, 0 | 0, 333 | 0, 2 | 0) | 0;
  fimport$86($0_1 | 0, 334 | 0, 1 | 0) | 0;
 }
 
 function $892($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0.0, $3_1 = 0, $8_1 = 0.0, $5_1 = 0, $6_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
  fimport$65(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $2_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $7_1 = +(HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) / +HEAPF64[$3_1 >> 3];
  $8_1 = +(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) / +HEAPF64[($3_1 + 8 | 0) >> 3];
  label$1 : {
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      $8_1 = +(HEAP32[($1_1 + 32 | 0) >> 2] | 0 | 0) * $8_1 + +HEAPF64[(0 + 131056 | 0) >> 3];
      if (!(Math_abs($8_1) < 2147483648.0)) {
       break label$4
      }
      $5_1 = ~~$8_1;
      break label$3;
     }
     $5_1 = -2147483648;
    }
    $1_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
    HEAPF64[(0 + 131056 | 0) >> 3] = $8_1 - +($5_1 | 0);
    label$5 : {
     label$6 : {
      $7_1 = +($1_1 | 0) * $7_1 + +HEAPF64[(0 + 131064 | 0) >> 3];
      if (!(Math_abs($7_1) < 2147483648.0)) {
       break label$6
      }
      $6_1 = ~~$7_1;
      break label$5;
     }
     $6_1 = -2147483648;
    }
    HEAPF64[(0 + 131064 | 0) >> 3] = $7_1 - +($6_1 | 0);
    break label$1;
   }
   label$7 : {
    label$8 : {
     $7_1 = $7_1 * +(HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0);
     if (!(Math_abs($7_1) < 2147483648.0)) {
      break label$8
     }
     $6_1 = ~~$7_1;
     break label$7;
    }
    $6_1 = -2147483648;
   }
   label$9 : {
    $7_1 = $8_1 * +(HEAP32[($1_1 + 40 | 0) >> 2] | 0 | 0);
    if (!(Math_abs($7_1) < 2147483648.0)) {
     break label$9
    }
    $5_1 = ~~$7_1;
    break label$1;
   }
   $5_1 = -2147483648;
  }
  $475($2_1 | 0, 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return 0 | 0;
 }
 
 function $893($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   $5_1 = HEAPU16[($1_1 + 28 | 0) >> 1] | 0;
   if ($5_1 >>> 0 > 2 >>> 0) {
    break label$1
   }
   $6_1 = 1;
   $5_1 = $5_1 + 1 | 0;
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != (5 | 0)) {
      break label$3
     }
     $0_1 = 0;
     if (!(HEAP32[(($470() | 0) + 84 | 0) >> 2] | 0)) {
      break label$2
     }
     if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
      break label$2
     }
     $0_1 = 0;
     fimport$61(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
     break label$2;
    }
    $0_1 = ($321(1026 | 0, -1 | 0) | 0 | 0) == (1 | 0);
    $6_1 = 0;
   }
   $4_1 = 0;
   $479(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, 0 | 0, $6_1 | 0, $5_1 & 255 | 0 | 0) | 0;
   fimport$65(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
   $2_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   if (+HEAPF64[($3_1 + 8 | 0) >> 3] <= +($2_1 >>> 0)) {
    break label$1
   }
   $4_1 = 0;
   $1_1 = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   if (+HEAPF64[$3_1 >> 3] <= +($1_1 >>> 0)) {
    break label$1
   }
   $4_1 = $0_1;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $894($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0.0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (HEAP32[($2_1 + 32 | 0) >> 2] | 0) {
    break label$1
   }
   $4_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
   $5_1 = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
   fimport$65(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $6_1 = +(HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) / +HEAPF64[$3_1 >> 3] * +($5_1 | 0);
     if (!(Math_abs($6_1) < 2147483648.0)) {
      break label$3
     }
     $5_1 = ~~$6_1;
     break label$2;
    }
    $5_1 = -2147483648;
   }
   label$4 : {
    label$5 : {
     $6_1 = +(HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) / +HEAPF64[($3_1 + 8 | 0) >> 3] * +($4_1 | 0);
     if (!(Math_abs($6_1) < 2147483648.0)) {
      break label$5
     }
     $4_1 = ~~$6_1;
     break label$4;
    }
    $4_1 = -2147483648;
   }
   $475($1_1 | 0, 0 | 0, 0 | 0, $4_1 | 0, $5_1 | 0) | 0;
  }
  $1_1 = 0;
  label$6 : {
   if (($0_1 | 0) != (33 | 0)) {
    break label$6
   }
   $1_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  }
  $474($1_1 | 0);
  $2_1 = $321(512 | 0, -1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return ($2_1 | 0) == (1 | 0) | 0;
 }
 
 function $895($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0);
  $3_1 = Math_fround(+HEAPF64[($1_1 + 72 | 0) >> 3]);
  label$1 : {
   label$2 : {
    switch (HEAP32[($1_1 + 88 | 0) >> 2] | 0 | 0) {
    case 0:
     $3_1 = Math_fround($3_1 / Math_fround(100.0));
     break label$1;
    case 1:
     $3_1 = Math_fround($3_1 / Math_fround(3.0));
     break label$1;
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $3_1 = Math_fround($3_1 * Math_fround(80.0));
  }
  $480(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, 0 | 0, Math_fround(Math_fround(+HEAPF64[($1_1 + 64 | 0) >> 3])), Math_fround(Math_fround(-$3_1)), 0 | 0) | 0;
  return ($321(1027 | 0, -1 | 0) | 0 | 0) == (1 | 0) | 0;
 }
 
 function $896($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (($0_1 | 0) != (12 | 0)) {
    break label$1
   }
   $437();
  }
  $975(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, (($0_1 | 0) == (13 | 0) ? 12 : 13) | 0, 0 | 0, 0 | 0) | 0;
  return ($321(512 | 0, -1 | 0) | 0 | 0) == (1 | 0) | 0;
 }
 
 function $897($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $3_1 = 0, $11$hi = 0, $7_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $8_1 = 0, $11_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   i64toi32_i32$0 = 0;
   if (($856(1 | 0, i64toi32_i32$0 | 0, 0 | 0, 87288 | 0) | 0 | 0) < (0 | 0)) {
    break label$1
   }
   fimport$65(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = $1_1 + 16 | 0;
   $6_1 = $0_1 + -22 | 0;
   $4_1 = 0;
   $0_1 = 0;
   label$2 : while (1) {
    $7_1 = $0_1;
    label$3 : {
     label$4 : {
      $0_1 = $5_1 + Math_imul($4_1, 48) | 0;
      if ((HEAPU8[($0_1 + 28 | 0) >> 0] | 0 | 0) == (1 | 0)) {
       break label$4
      }
      $0_1 = $7_1;
      break label$3;
     }
     $9_1 = Math_fround(+(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) / +HEAPF64[$3_1 >> 3]);
     $10_1 = Math_fround(+(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) / +HEAPF64[($3_1 + 8 | 0) >> 3]);
     $8_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[$0_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$1;
     label$5 : {
      switch ($6_1 | 0) {
      case 0:
       $0_1 = 1;
       i64toi32_i32$1 = $11$hi;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = $11$hi;
       $857(1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, $8_1 | 0, 1 | 0, Math_fround($10_1), Math_fround($9_1), Math_fround(Math_fround(1.0))) | 0;
       if ($7_1) {
        break label$3
       }
       $0_1 = ($321(1792 | 0, -1 | 0) | 0 | 0) == (1 | 0);
       break label$3;
      case 2:
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = $11$hi;
       $858(1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $8_1 | 0, Math_fround($10_1), Math_fround($9_1), Math_fround(Math_fround(1.0))) | 0;
       $0_1 = $7_1;
       break label$3;
      default:
       break label$5;
      };
     }
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = $11$hi;
     $857(1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, $8_1 | 0, 0 | 0, Math_fround($10_1), Math_fround($9_1), Math_fround(Math_fround(1.0))) | 0;
     $0_1 = 1;
    }
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $4_1 = ($0_1 | 0) != (0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $898($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($2_1 + 32 | 0) >> 2] = HEAPU8[$1_1 >> 0] | 0;
  return 0 | 0;
 }
 
 function $899($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $67$hi = 0, i64toi32_i32$2 = 0;
  $3_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
   if ($4_1 >>> 0 > 222 >>> 0) {
    break label$1
   }
   $4_1 = HEAP32[(($4_1 << 2 | 0) + 99536 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   $3_1 = $4_1;
   label$2 : {
    switch ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + -2 | 0 | 0) {
    case 0:
     $3_1 = ($4_1 & -4 | 0 | 0) == (1073742048 | 0) ? $4_1 + 4 | 0 : $4_1;
     break label$1;
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   $3_1 = $4_1;
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              label$15 : {
               label$16 : {
                switch ($4_1 + -13 | 0 | 0) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                 break label$1;
                case 40:
                 break label$10;
                case 39:
                 break label$11;
                case 38:
                 break label$12;
                case 37:
                 break label$13;
                case 36:
                 break label$14;
                case 35:
                 break label$15;
                case 114:
                 break label$4;
                case 0:
                 break label$5;
                case 44:
                 break label$6;
                case 43:
                 break label$7;
                case 42:
                 break label$8;
                case 41:
                 break label$9;
                default:
                 break label$16;
                };
               }
               $3_1 = $4_1;
               switch ($4_1 + -1073741897 | 0 | 0) {
               case 7:
                break label$11;
               case 5:
                break label$12;
               case 8:
                break label$13;
               case 4:
                break label$14;
               case 0:
                break label$15;
               case 2:
                break label$6;
               case 9:
                break label$7;
               case 1:
                break label$8;
               case 6:
                break label$9;
               default:
                break label$1;
               };
              }
              $3_1 = 1073741922;
              break label$1;
             }
             $3_1 = 1073741913;
             break label$1;
            }
            $3_1 = 1073741914;
            break label$1;
           }
           $3_1 = 1073741915;
           break label$1;
          }
          $3_1 = 1073741916;
          break label$1;
         }
         $3_1 = 1073741917;
         break label$1;
        }
        $3_1 = 1073741918;
        break label$1;
       }
       $3_1 = 1073741919;
       break label$1;
      }
      $3_1 = 1073741920;
      break label$1;
     }
     $3_1 = 1073741921;
     break label$1;
    }
    $3_1 = 1073741912;
    break label$1;
   }
   $3_1 = 1073741923;
  }
  label$17 : {
   label$18 : {
    label$19 : {
     label$20 : {
      label$21 : {
       label$22 : {
        label$23 : {
         label$24 : {
          label$25 : {
           label$26 : {
            label$27 : {
             $5_1 = $985($1_1 + 64 | 0 | 0) | 0;
             if ($5_1 >>> 0 < 127 >>> 0) {
              break label$27
             }
             $6_1 = 82;
             $4_1 = 125;
             label$28 : {
              switch ($5_1 + -57354 | 0 | 0) {
              case 13:
               $4_1 = 123;
               break label$21;
              case 14:
               $4_1 = 124;
               break label$21;
              case 15:
               $4_1 = 258;
               break label$21;
              case 18:
               $4_1 = 88;
               break label$21;
              case 19:
               $4_1 = 228;
               break label$21;
              case 22:
               $4_1 = 262;
               break label$21;
              case 23:
               $4_1 = 266;
               break label$21;
              case 24:
               $4_1 = 261;
               break label$21;
              case 26:
               $4_1 = 260;
               break label$21;
              case 34:
               $4_1 = 281;
               break label$21;
              case 36:
               $4_1 = 129;
               break label$21;
              case 38:
               $4_1 = 128;
               break label$21;
              case 40:
               $4_1 = 269;
               break label$21;
              case 43:
               $4_1 = 84;
               break label$21;
              case 46:
               $4_1 = 230;
               break label$21;
              case 49:
               $4_1 = 117;
               break label$21;
              case 59:
               $4_1 = 83;
               break label$21;
              case 61:
               $4_1 = 74;
               break label$21;
              case 63:
               $4_1 = 75;
               break label$21;
              case 67:
               $6_1 = 79;
               break label$24;
              case 69:
               $4_1 = 77;
               break label$21;
              case 70:
               $6_1 = 81;
               break label$24;
              case 71:
               $4_1 = 78;
               break label$21;
              case 72:
               $4_1 = 73;
               break label$21;
              case 73:
               $4_1 = 76;
               break label$21;
              case 81:
               $4_1 = 227;
               break label$21;
              case 82:
               $4_1 = 231;
               break label$21;
              case 83:
               $4_1 = 101;
               break label$21;
              case 84:
               $4_1 = 102;
               break label$21;
              case 91:
               $4_1 = 268;
               break label$21;
              case 92:
               $4_1 = 274;
               break label$21;
              case 93:
               $4_1 = 273;
               break label$21;
              case 94:
               $4_1 = 272;
               break label$21;
              case 95:
               $4_1 = 271;
               break label$21;
              case 96:
               $4_1 = 270;
               break label$21;
              case 97:
               $4_1 = 267;
               break label$21;
              case 98:
               $4_1 = 265;
               break label$21;
              case 0:
               break label$21;
              case 6:
               break label$22;
              case 62:
               break label$24;
              case 65:
               break label$25;
              case 99:
               break label$28;
              default:
               break label$26;
              };
             }
             $4_1 = 263;
             break label$21;
            }
            $4_1 = HEAP32[(($5_1 << 2 | 0) + 100432 | 0) >> 2] | 0;
            if ($4_1) {
             break label$23
            }
           }
           label$66 : {
            $4_1 = $1_1 + 32 | 0;
            if ($553($4_1 | 0, 67365 | 0, 9 | 0) | 0) {
             break label$66
            }
            $4_1 = 271;
            break label$21;
           }
           if ($553($4_1 | 0, 67348 | 0, 10 | 0) | 0) {
            break label$19
           }
           $4_1 = 270;
           break label$21;
          }
          $6_1 = 80;
         }
         $441(($0_1 | 0) == (2 | 0) | 0, $6_1 | 0, $3_1 | 0) | 0;
         break label$18;
        }
        $441(($0_1 | 0) == (2 | 0) | 0, $4_1 | 0, $3_1 | 0) | 0;
        $5_1 = $4_1 + -42 | 0;
        if ($5_1 >>> 0 >= 41 >>> 0) {
         break label$20
        }
        $3_1 = 1;
        i64toi32_i32$0 = 0;
        $67$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 480;
        i64toi32_i32$2 = 3;
        i64toi32_i32$1 = $67$hi;
        i64toi32_i32$4 = $5_1 & 31 | 0;
        if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = 0;
         $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        } else {
         i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
        }
        if (!($12_1 & 1 | 0)) {
         break label$20
        }
        break label$17;
       }
       $4_1 = 259;
      }
      $441(($0_1 | 0) == (2 | 0) | 0, $4_1 | 0, $3_1 | 0) | 0;
     }
     if (($4_1 + -58 | 0) >>> 0 < 49 >>> 0) {
      break label$18
     }
    }
    $3_1 = 0;
    if ((HEAPU8[($1_1 + 12 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break label$17
    }
   }
   $3_1 = 1;
  }
  $1_1 = 1;
  label$67 : {
   if (($0_1 | 0) != (2 | 0)) {
    break label$67
   }
   $1_1 = $3_1 | ($321(771 | 0, -1 | 0) | 0 | 0) != (1 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $900($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if ($1_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $4_1 = $3_1 + 12 | 0;
     HEAP8[($3_1 + 11 | 0) >> 0] = $1_1;
     break label$2;
    }
    label$4 : {
     if ($1_1 >>> 0 > 2047 >>> 0) {
      break label$4
     }
     $4_1 = $3_1 + 13 | 0;
     HEAP8[($3_1 + 12 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
     HEAP8[($3_1 + 11 | 0) >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
     break label$2;
    }
    label$5 : {
     if ($1_1 >>> 0 > 65535 >>> 0) {
      break label$5
     }
     $4_1 = $3_1 + 14 | 0;
     HEAP8[($3_1 + 13 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
     HEAP8[($3_1 + 11 | 0) >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
     HEAP8[($3_1 + 12 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
     break label$2;
    }
    if ($1_1 >>> 0 > 1114111 >>> 0) {
     break label$1
    }
    $4_1 = $3_1 + 15 | 0;
    HEAP8[($3_1 + 14 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
    HEAP8[($3_1 + 11 | 0) >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
    HEAP8[($3_1 + 13 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
    HEAP8[($3_1 + 12 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
   }
   HEAP8[$4_1 >> 0] = 0;
   $443($3_1 + 11 | 0 | 0) | 0;
  }
  $1_1 = $321(771 | 0, -1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return ($1_1 | 0) == (1 | 0) | 0;
 }
 
 function $901($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   HEAP32[($1_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0 | (HEAP32[($2_1 + 24 | 0) >> 2] | 0) | 0;
   HEAP32[($2_1 + 24 | 0) >> 2] = 0;
   return 0 | 0;
  }
  $1_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  HEAP32[($1_1 + 48 | 0) >> 2] = (HEAP32[($1_1 + 48 | 0) >> 2] | 0) & -4098 | 0;
  label$2 : {
   $1_1 = $937($1_1 | 0) | 0;
   if ((HEAP32[($1_1 + 60 | 0) >> 2] | 0 | 0) != (HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0)) {
    break label$2
   }
   HEAP32[($1_1 + 60 | 0) >> 2] = 0;
  }
  return 0 | 0;
 }
 
 function $902($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $8_1 = 0.0, $5_1 = 0, $9_1 = 0.0, $4_1 = 0, $10_1 = 0.0, $6_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  label$1 : {
   if (!((HEAPU8[((HEAP32[($2_1 + 4 | 0) >> 2] | 0) + 49 | 0) >> 0] | 0) & 32 | 0)) {
    break label$1
   }
   $7_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
   if (+fimport$63() == +$7_1) {
    break label$1
   }
   HEAPF32[($2_1 + 16 | 0) >> 2] = Math_fround(+fimport$63());
   $4_1 = 0;
  }
  label$2 : {
   $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   if (((HEAP32[($5_1 + 48 | 0) >> 2] | 0) & 4129 | 0 | 0) != (32 | 0)) {
    break label$2
   }
   $8_1 = +(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0);
   HEAPF64[($3_1 + 8 | 0) >> 3] = $8_1;
   $9_1 = +(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0);
   HEAPF64[$3_1 >> 3] = $9_1;
   label$3 : {
    if (!(HEAP32[($2_1 + 20 | 0) >> 2] | 0)) {
     break label$3
    }
    fimport$65(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
    $9_1 = +HEAPF64[$3_1 >> 3];
    $8_1 = +HEAPF64[($3_1 + 8 | 0) >> 3];
   }
   label$4 : {
    label$5 : {
     $10_1 = +Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
     $9_1 = $9_1 * $10_1;
     if (!(Math_abs($9_1) < 2147483648.0)) {
      break label$5
     }
     $5_1 = ~~$9_1;
     break label$4;
    }
    $5_1 = -2147483648;
   }
   label$6 : {
    label$7 : {
     $8_1 = $8_1 * $10_1;
     if (!(Math_abs($8_1) < 2147483648.0)) {
      break label$7
     }
     $6_1 = ~~$8_1;
     break label$6;
    }
    $6_1 = -2147483648;
   }
   fimport$64(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, $6_1 | 0, $5_1 | 0) | 0;
   label$8 : {
    if (HEAP32[($2_1 + 20 | 0) >> 2] | 0) {
     break label$8
    }
    if (Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]) == Math_fround(1.0)) {
     break label$8
    }
    fimport$66(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[($3_1 + 8 | 0) >> 3]), +(+HEAPF64[$3_1 >> 3])) | 0;
   }
   $2_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   label$9 : {
    if ($4_1) {
     break label$9
    }
    HEAP32[($2_1 + 24 | 0) >> 2] = 0;
    HEAP32[($2_1 + 28 | 0) >> 2] = 0;
   }
   label$10 : {
    label$11 : {
     $8_1 = +HEAPF64[$3_1 >> 3];
     if (!(Math_abs($8_1) < 2147483648.0)) {
      break label$11
     }
     $5_1 = ~~$8_1;
     break label$10;
    }
    $5_1 = -2147483648;
   }
   label$12 : {
    label$13 : {
     $8_1 = +HEAPF64[($3_1 + 8 | 0) >> 3];
     if (!(Math_abs($8_1) < 2147483648.0)) {
      break label$13
     }
     $4_1 = ~~$8_1;
     break label$12;
    }
    $4_1 = -2147483648;
   }
   $975($2_1 | 0, 5 | 0, $4_1 | 0, $5_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return 0 | 0;
 }
 
 function $903($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $975(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, (HEAPU8[$1_1 >> 0] | 0 ? 2 : 1) | 0, 0 | 0, 0 | 0) | 0;
  return 0 | 0;
 }
 
 function $904($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $334(257 | 0) | 0;
  return 87288 | 0;
 }
 
 function $905($0_1) {
  $0_1 = $0_1 | 0;
  fimport$67(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$68(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$69(1 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$70(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$71(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$72(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$73(2 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$74(2 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$75(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$76(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$77(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$78(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$79(1 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  $0_1 = $381(75096 | 0) | 0;
  $0_1 = $0_1 ? $0_1 : 2;
  fimport$80($0_1 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$81($0_1 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$82($0_1 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$83(1 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$84(2 | 0, 0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$85(0 | 0, 0 | 0, 0 | 0, 2 | 0) | 0;
  fimport$86(0 | 0, 0 | 0, 1 | 0) | 0;
 }
 
 function $906() {
  var $0_1 = 0;
  label$1 : {
   $0_1 = $457(1 | 0, 1116 | 0) | 0;
   if ($0_1) {
    break label$1
   }
   $262(0 | 0) | 0;
   return $0_1 | 0;
  }
  $380(75326 | 0, 78289 | 0) | 0;
  HEAP32[($0_1 + 288 | 0) >> 2] = 335;
  HEAP32[($0_1 + 36 | 0) >> 2] = 336;
  HEAP32[($0_1 + 28 | 0) >> 2] = 337;
  HEAP32[($0_1 + 24 | 0) >> 2] = 338;
  HEAP32[($0_1 + 8 | 0) >> 2] = 339;
  HEAP32[($0_1 + 4 | 0) >> 2] = 340;
  HEAP32[($0_1 + 160 | 0) >> 2] = 341;
  HEAP32[($0_1 + 76 | 0) >> 2] = 342;
  HEAP32[($0_1 + 60 | 0) >> 2] = 343;
  HEAP32[($0_1 + 48 | 0) >> 2] = 344;
  HEAP32[($0_1 + 40 | 0) >> 2] = 345;
  HEAP32[($0_1 + 1112 | 0) >> 2] = 346;
  HEAP32[($0_1 + 236 | 0) >> 2] = 347;
  HEAP32[($0_1 + 232 | 0) >> 2] = 348;
  HEAP32[($0_1 + 228 | 0) >> 2] = 349;
  HEAP32[($0_1 + 224 | 0) >> 2] = 350;
  HEAP32[($0_1 + 216 | 0) >> 2] = 351;
  HEAP32[($0_1 + 212 | 0) >> 2] = 352;
  HEAP32[($0_1 + 208 | 0) >> 2] = 353;
  HEAP32[($0_1 + 204 | 0) >> 2] = 354;
  HEAP32[($0_1 + 200 | 0) >> 2] = 355;
  HEAP32[($0_1 + 172 | 0) >> 2] = 356;
  HEAP32[($0_1 + 168 | 0) >> 2] = 357;
  HEAP32[($0_1 + 164 | 0) >> 2] = 358;
  HEAP32[($0_1 + 128 | 0) >> 2] = 359;
  return $0_1 | 0;
 }
 
 function $907($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $908($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return 0 | 0;
 }
 
 function $909($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = Math_fround(0);
  $5_1 = Math_fround(Math_fround(+fimport$63()) * Math_fround(96.0));
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAPF32[$2_1 >> 2] = $5_1;
  }
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   HEAPF32[$3_1 >> 2] = $5_1;
  }
  label$3 : {
   if (!$4_1) {
    break label$3
   }
   HEAPF32[$4_1 >> 2] = $5_1;
  }
  return 0 | 0;
 }
 
 function $910($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = 0;
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = fimport$33(125872 | 0, $3_1 + 15 | 0 | 0, 0 | 0) | 0;
   HEAP8[($3_1 + 14 | 0) >> 0] = 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = fimport$33(125902 | 0, $3_1 + 14 | 0 | 0, 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return 0 | 0;
 }
 
 function $911($0_1) {
  $0_1 = $0_1 | 0;
  $889();
 }
 
 function $912($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = 370546692;
  fimport$60($1_1 + 16 | 0 | 0, $1_1 + 20 | 0 | 0);
  HEAP32[($1_1 + 24 | 0) >> 2] = 0;
  HEAP32[($1_1 + 28 | 0) >> 2] = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : {
    if (($928($1_1 + 12 | 0 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $2_1 = -1;
    break label$1;
   }
   $932(HEAP32[($0_1 + 396 | 0) >> 2] | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
   $882();
  }
  global$0 = $1_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $913($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($1_1 + 164 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $905($2_1 | 0);
   label$2 : {
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    $874($0_1 | 0, $3_1 | 0);
    HEAP32[$2_1 >> 2] = 0;
   }
   fimport$64(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0) | 0;
   $459(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0);
   $459(HEAP32[($1_1 + 164 | 0) >> 2] | 0 | 0);
   HEAP32[($1_1 + 164 | 0) >> 2] = 0;
  }
 }
 
 function $914($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  label$1 : {
   $4_1 = HEAP32[($1_1 + 164 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $5_1 = Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]);
     $6_1 = Math_fround($5_1 * Math_fround(HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0));
     if (!(Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0))) {
      break label$3
     }
     $4_1 = ~~$6_1;
     break label$2;
    }
    $4_1 = -2147483648;
   }
   HEAP32[$2_1 >> 2] = $4_1;
   label$4 : {
    label$5 : {
     $5_1 = Math_fround($5_1 * Math_fround(HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0));
     if (!(Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0))) {
      break label$5
     }
     $1_1 = ~~$5_1;
     break label$4;
    }
    $1_1 = -2147483648;
   }
   HEAP32[$3_1 >> 2] = $1_1;
  }
 }
 
 function $915($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $3_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($1_1 + 164 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ((HEAPU8[($1_1 + 49 | 0) >> 0] | 0) & 32 | 0) {
      break label$3
     }
     $5_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
     break label$2;
    }
    $5_1 = Math_fround(+fimport$63());
    HEAPF32[($2_1 + 16 | 0) >> 2] = $5_1;
   }
   label$4 : {
    label$5 : {
     $6_1 = Math_fround($5_1 * Math_fround(HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0));
     if (!(Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0))) {
      break label$5
     }
     $3_1 = ~~$6_1;
     break label$4;
    }
    $3_1 = -2147483648;
   }
   label$6 : {
    label$7 : {
     $5_1 = Math_fround($5_1 * Math_fround(HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0));
     if (!(Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0))) {
      break label$7
     }
     $4_1 = ~~$5_1;
     break label$6;
    }
    $4_1 = -2147483648;
   }
   fimport$64(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (HEAP32[($2_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   if (Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]) == Math_fround(1.0)) {
    break label$1
   }
   fimport$66(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, +(+(HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0)), +(+(HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0))) | 0;
  }
 }
 
 function $916($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  fimport$87(HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
 }
 
 function $917($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, $8_1 = 0.0, $7_1 = Math_fround(0), $5_1 = 0, $9_1 = 0.0, $10_1 = 0.0, $11_1 = 0.0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = $457(1 | 0, 36 | 0) | 0;
    if ($3_1) {
     break label$2
    }
    $3_1 = $262(0 | 0) | 0;
    break label$1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = $543(68514 | 0) | 0;
   $7_1 = Math_fround(1.0);
   label$3 : {
    if (!((HEAPU8[($1_1 + 49 | 0) >> 0] | 0) & 32 | 0)) {
     break label$3
    }
    $7_1 = Math_fround(+fimport$63());
   }
   HEAPF32[($3_1 + 16 | 0) >> 2] = $7_1;
   $8_1 = +$528(+(+Math_fround($7_1 * Math_fround(HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0))));
   $9_1 = +$528(+(+Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) * Math_fround(HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0))));
   $4_1 = 1;
   fimport$64(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, 1 | 0) | 0;
   fimport$65(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
   label$4 : {
    if (+$528(+(+HEAPF64[($2_1 + 8 | 0) >> 3])) != 1.0) {
     break label$4
    }
    $4_1 = +$528(+(+HEAPF64[$2_1 >> 3])) != 1.0;
   }
   HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
   label$5 : {
    if (!((HEAPU8[($1_1 + 48 | 0) >> 0] | 0) & 32 | 0)) {
     break label$5
    }
    if (!$4_1) {
     break label$5
    }
    $7_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
    label$6 : {
     label$7 : {
      $8_1 = +HEAPF64[$2_1 >> 3];
      if (!(Math_abs($8_1) < 2147483648.0)) {
       break label$7
      }
      $4_1 = ~~$8_1;
      break label$6;
     }
     $4_1 = -2147483648;
    }
    label$8 : {
     label$9 : {
      $10_1 = +HEAPF64[($2_1 + 8 | 0) >> 3];
      if (!(Math_abs($10_1) < 2147483648.0)) {
       break label$9
      }
      $5_1 = ~~$10_1;
      break label$8;
     }
     $5_1 = -2147483648;
    }
    $975($1_1 | 0, 5 | 0, $5_1 | 0, $4_1 | 0) | 0;
    $11_1 = +$7_1;
    $9_1 = $8_1 * $11_1;
    $8_1 = $10_1 * $11_1;
   }
   $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   label$10 : {
    label$11 : {
     if (!(Math_abs($9_1) < 2147483648.0)) {
      break label$11
     }
     $5_1 = ~~$9_1;
     break label$10;
    }
    $5_1 = -2147483648;
   }
   label$12 : {
    label$13 : {
     if (!(Math_abs($8_1) < 2147483648.0)) {
      break label$13
     }
     $6_1 = ~~$8_1;
     break label$12;
    }
    $6_1 = -2147483648;
   }
   fimport$64($4_1 | 0, $6_1 | 0, $5_1 | 0) | 0;
   label$14 : {
    if (HEAP32[($3_1 + 20 | 0) >> 2] | 0) {
     break label$14
    }
    if (Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) == Math_fround(1.0)) {
     break label$14
    }
    fimport$66(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, +(+(HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0)), +(+(HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0))) | 0;
   }
   label$15 : {
    if (!((HEAPU8[($1_1 + 48 | 0) >> 0] | 0) & 2 | 0)) {
     break label$15
    }
    label$16 : {
     if (HEAP32[($0_1 + 1104 | 0) >> 2] | 0) {
      break label$16
     }
     if (($945(0 | 0) | 0 | 0) >= (0 | 0)) {
      break label$16
     }
     $3_1 = -1;
     break label$1;
    }
    $4_1 = $873($0_1 | 0, 0 | 0) | 0;
    HEAP32[$3_1 >> 2] = $4_1;
    if ($4_1) {
     break label$15
    }
    $3_1 = $260(73188 | 0, 0 | 0) | 0;
    break label$1;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($1_1 + 164 | 0) >> 2] = $3_1;
   $474($1_1 | 0);
   $440($1_1 | 0);
   $891($3_1 | 0);
   $3_1 = 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $918($0_1) {
  $0_1 = $0_1 | 0;
  $459($0_1 | 0);
 }
 
 function $919($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   $5_1 = HEAP32[($1_1 + 164 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$1
   }
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    $6_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
    $7_1 = $6_1 & 4097 | 0;
    $3_1 = ($7_1 | 0) == (4097 | 0);
    HEAP32[($4_1 + 8 | 0) >> 2] = $3_1 ? 1 : 2;
    label$3 : {
     label$4 : {
      if ($3_1) {
       break label$4
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = 0;
      break label$3;
     }
     label$5 : {
      if (!($6_1 & 8192 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = 2;
      break label$3;
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = 1;
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
    HEAP32[($4_1 + 20 | 0) >> 2] = 360;
    HEAP32[($4_1 + 16 | 0) >> 2] = 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = $3_1;
    HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
    if ((fimport$88(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, $4_1 + 8 | 0 | 0) | 0) >>> 0 < 2 >>> 0) {
     break label$1
    }
    HEAP32[($1_1 + 48 | 0) >> 2] = (HEAP32[($1_1 + 48 | 0) >> 2] | 0) & -4098 | 0;
    break label$1;
   }
   fimport$89() | 0;
  }
  global$0 = $4_1 + 32 | 0;
 }
 
 function $920($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (($1_1 | 0) != (1 | 0)) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    if (($2_1 | 0) == (HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    HEAP32[($0_1 + 56 | 0) >> 2] = $2_1;
   }
   if (($321(336 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP8[($3_1 + 20 | 0) >> 0] = $1_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = 336;
   $0_1 = $930($0_1 | 0) | 0;
   HEAP32[($3_1 + 24 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   $4_1 = ($327($3_1 + 8 | 0 | 0) | 0 | 0) > (0 | 0);
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $921($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1067($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $922($0_1) {
  $0_1 = $0_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $2_1 = 0, $1_1 = 0, $4_1 = 0, $7_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!(HEAP32[(0 + 131072 | 0) >> 2] | 0)) {
    break label$1
   }
   $923();
  }
  $839();
  $2_1 = -1;
  label$2 : {
   if (($315(16384 | 0) | 0 | 0) < (0 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if (($435() | 0 | 0) < (0 | 0)) {
      break label$4
     }
     label$5 : {
      if (($460() | 0 | 0) < (0 | 0)) {
       break label$5
      }
      label$6 : {
       if (($854() | 0 | 0) < (0 | 0)) {
        break label$6
       }
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             label$13 : {
              if ($0_1) {
               break label$13
              }
              $0_1 = $381(75687 | 0) | 0;
              if (!$0_1) {
               break label$12
              }
             }
             if (!(HEAPU8[$0_1 >> 0] | 0)) {
              break label$11
             }
             label$14 : {
              if (HEAPU8[$0_1 >> 0] | 0) {
               break label$14
              }
              $3_1 = 0;
              $4_1 = 0;
              break label$9;
             }
             $5_1 = $0_1;
             label$15 : while (1) {
              label$16 : {
               label$17 : {
                $6_1 = $544($5_1 | 0, 44 | 0) | 0;
                if (!$6_1) {
                 break label$17
                }
                $7_1 = $6_1 - $5_1 | 0;
                break label$16;
               }
               $7_1 = $539($5_1 | 0) | 0;
              }
              $3_1 = 0;
              $4_1 = 1;
              label$18 : {
               if (($7_1 | 0) != ($539(HEAP32[(0 + 117620 | 0) >> 2] | 0 | 0) | 0 | 0)) {
                break label$18
               }
               $3_1 = 0;
               if ($546(HEAP32[(0 + 117620 | 0) >> 2] | 0 | 0, $5_1 | 0, $7_1 | 0) | 0) {
                break label$18
               }
               $4_1 = 0;
               $3_1 = FUNCTION_TABLE[HEAP32[(117620 + 8 | 0) >> 2] | 0 | 0]() | 0;
              }
              if (!$6_1) {
               break label$9
              }
              if (!(HEAPU8[($6_1 + 1 | 0) >> 0] | 0)) {
               break label$9
              }
              $5_1 = $6_1 + 1 | 0;
              if ($3_1) {
               break label$9
              }
              continue label$15;
             };
            }
            $3_1 = FUNCTION_TABLE[HEAP32[(117620 + 8 | 0) >> 2] | 0 | 0]() | 0;
            if ($3_1) {
             break label$10
            }
            $260(73097 | 0, 0 | 0) | 0;
            break label$7;
           }
           $3_1 = FUNCTION_TABLE[HEAP32[(117620 + 8 | 0) >> 2] | 0 | 0]() | 0;
           if (!$3_1) {
            break label$8
           }
          }
          $4_1 = 0;
          break label$3;
         }
         if ($3_1) {
          break label$3
         }
        }
        HEAP32[$1_1 >> 2] = $0_1;
        $260(72761 | 0, $1_1 | 0) | 0;
       }
       $860();
      }
      $481();
     }
     $444();
    }
    $316(16384 | 0);
    break label$2;
   }
   HEAP32[(0 + 131072 | 0) >> 2] = $3_1;
   HEAP32[$3_1 >> 2] = HEAP32[(HEAP32[(($4_1 << 2 | 0) + 100940 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 412 | 0) >> 2] = 1;
   $5_1 = $837() | 0;
   $6_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   HEAP32[($6_1 + 800 | 0) >> 2] = 0;
   HEAP32[($6_1 + 368 | 0) >> 2] = $5_1;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[($6_1 + 440 | 0) >> 2] = 2;
   HEAP32[($6_1 + 444 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 3;
   HEAP32[($6_1 + 432 | 0) >> 2] = 3;
   HEAP32[($6_1 + 436 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[($6_1 + 464 | 0) >> 2] = 0;
   HEAP32[($6_1 + 468 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 1;
   HEAP32[($6_1 + 456 | 0) >> 2] = 0;
   HEAP32[($6_1 + 460 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[($6_1 + 448 | 0) >> 2] = 16;
   HEAP32[($6_1 + 452 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[($6_1 + 536 | 0) >> 2] = 1;
   HEAP32[($6_1 + 540 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($6_1 + 512 | 0) >> 2] = 4;
   HEAP32[($6_1 + 504 | 0) >> 2] = 0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 2;
   HEAP32[($6_1 + 496 | 0) >> 2] = -1;
   HEAP32[($6_1 + 500 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1 + 472 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1 + 480 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1 + 488 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   label$19 : {
    $5_1 = HEAP32[($6_1 + 240 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$19
    }
    FUNCTION_TABLE[$5_1 | 0]($6_1, $6_1 + 512 | 0, $6_1 + 500 | 0, $6_1 + 504 | 0);
    $6_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   }
   HEAP32[($6_1 + 532 | 0) >> 2] = 0;
   HEAP32[($6_1 + 508 | 0) >> 2] = 0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[($6_1 + 524 | 0) >> 2] = 0;
   HEAP32[($6_1 + 528 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 1;
   HEAP32[($6_1 + 516 | 0) >> 2] = 0;
   HEAP32[($6_1 + 520 | 0) >> 2] = i64toi32_i32$0;
   $6_1 = $844() | 0;
   HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 812 | 0) >> 2] = $6_1;
   $5_1 = $844() | 0;
   $6_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   HEAP32[($6_1 + 816 | 0) >> 2] = $5_1;
   $2_1 = -1;
   label$20 : {
    if ((FUNCTION_TABLE[HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0]($6_1) | 0 | 0) > (-1 | 0)) {
     break label$20
    }
    $923();
    break label$2;
   }
   label$21 : {
    if (HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 392 | 0) >> 2] | 0) {
     break label$21
    }
    $923();
    $2_1 = $260(67879 | 0, 0 | 0) | 0;
    break label$2;
   }
   $5_1 = $383(75703 | 0, 0 | 0) | 0;
   $6_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   label$22 : {
    label$23 : {
     label$24 : {
      if ($5_1) {
       break label$24
      }
      if (!$6_1) {
       break label$22
      }
      if (HEAP32[($6_1 + 380 | 0) >> 2] | 0) {
       break label$23
      }
      HEAP32[($6_1 + 380 | 0) >> 2] = 1;
      $5_1 = HEAP32[($6_1 + 292 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$23
      }
      FUNCTION_TABLE[$5_1 | 0]($6_1);
      $6_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
     }
     if (!$6_1) {
      break label$22
     }
    }
    $5_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$22
    }
    $2_1 = 0;
    if (FUNCTION_TABLE[$5_1 | 0]($6_1) | 0) {
     break label$2
    }
   }
   $924();
   $2_1 = 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $923() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if (!(HEAP32[(0 + 131072 | 0) >> 2] | 0)) {
    break label$1
   }
   $860();
   $481();
   $444();
   $316(16384 | 0);
   label$2 : {
    $0_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if (!(HEAP32[($0_1 + 380 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[($0_1 + 380 | 0) >> 2] = 0;
    $1_1 = HEAP32[($0_1 + 292 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    FUNCTION_TABLE[$1_1 | 0]($0_1);
    $0_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   }
   label$3 : {
    $1_1 = HEAP32[($0_1 + 400 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$3
    }
    label$4 : while (1) {
     $925($1_1 | 0);
     $0_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
     $1_1 = HEAP32[($0_1 + 400 | 0) >> 2] | 0;
     if ($1_1) {
      continue label$4
     }
     break label$4;
    };
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0]($0_1);
   $1_1 = 0;
   label$5 : {
    label$6 : {
     label$7 : {
      $0_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
      if ((HEAP32[($0_1 + 392 | 0) >> 2] | 0 | 0) < (1 | 0)) {
       break label$7
      }
      label$8 : while (1) {
       $0_1 = HEAP32[($0_1 + 396 | 0) >> 2] | 0;
       $926($1_1 | 0);
       $0_1 = $0_1 + Math_imul($1_1, 72) | 0;
       $459(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
       $459(HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0);
       HEAP32[($0_1 + 68 | 0) >> 2] = 0;
       $1_1 = $1_1 + 1 | 0;
       $0_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
       $2_1 = HEAP32[($0_1 + 392 | 0) >> 2] | 0;
       if (($1_1 | 0) < ($2_1 | 0)) {
        continue label$8
       }
       break label$8;
      };
      $1_1 = HEAP32[($0_1 + 396 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$5
      }
      if (($2_1 | 0) < (1 | 0)) {
       break label$6
      }
      $1_1 = 0;
      label$9 : while (1) {
       $459(HEAP32[((HEAP32[($0_1 + 396 | 0) >> 2] | 0) + Math_imul($1_1, 72) | 0) >> 2] | 0 | 0);
       $1_1 = $1_1 + 1 | 0;
       $0_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
       if (($1_1 | 0) < (HEAP32[($0_1 + 392 | 0) >> 2] | 0 | 0)) {
        continue label$9
       }
       break label$9;
      };
      $1_1 = HEAP32[($0_1 + 396 | 0) >> 2] | 0;
      break label$6;
     }
     $1_1 = HEAP32[($0_1 + 396 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$5
     }
    }
    $459($1_1 | 0);
    $0_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    HEAP32[($0_1 + 392 | 0) >> 2] = 0;
    HEAP32[($0_1 + 396 | 0) >> 2] = 0;
   }
   $459(HEAP32[($0_1 + 416 | 0) >> 2] | 0 | 0);
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   HEAP32[($1_1 + 416 | 0) >> 2] = 0;
   FUNCTION_TABLE[HEAP32[($1_1 + 1112 | 0) >> 2] | 0 | 0]($1_1);
   HEAP32[(0 + 131072 | 0) >> 2] = 0;
  }
 }
 
 function $924() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $321(771 | 0, 1 | 0) | 0;
  $321(770 | 0, 1 | 0) | 0;
  $0_1 = $383(77186 | 0, 1 | 0) | 0;
  $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if (!$1_1) {
      break label$1
     }
     $0_1 = HEAP32[($1_1 + 400 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$2
     }
     label$4 : {
      label$5 : while (1) {
       if ((HEAPU8[($0_1 + 49 | 0) >> 0] | 0) & 2 | 0) {
        break label$4
       }
       $0_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
       if ($0_1) {
        continue label$5
       }
       break label$3;
      };
     }
     $2_1 = HEAP32[($1_1 + 320 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     FUNCTION_TABLE[$2_1 | 0]($1_1, $0_1);
     $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    }
    if (!$1_1) {
     break label$1
    }
   }
   $0_1 = HEAP32[($1_1 + 296 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   FUNCTION_TABLE[$0_1 | 0]($1_1);
  }
 }
 
 function $925($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if ($1_1) {
    break label$1
   }
   $260(73441 | 0, 0 | 0) | 0;
   return;
  }
  label$2 : {
   label$3 : {
    if (!$0_1) {
     break label$3
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($1_1 + 408 | 0 | 0)) {
     break label$2
    }
   }
   $260(66102 | 0, 0 | 0) | 0;
   return;
  }
  HEAP32[($0_1 + 124 | 0) >> 2] = 1;
  label$4 : {
   if (((HEAP32[($0_1 + 48 | 0) >> 2] | 0) & 2052 | 0 | 0) != (4 | 0)) {
    break label$4
   }
   HEAP32[($0_1 + 120 | 0) >> 2] = 1;
   $944($0_1 | 0, 0 | 0) | 0;
   label$5 : {
    $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    $2_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$5
    }
    FUNCTION_TABLE[$2_1 | 0]($1_1, $0_1);
   }
   HEAP32[($0_1 + 120 | 0) >> 2] = 0;
   $975($0_1 | 0, 2 | 0, 0 | 0, 0 | 0) | 0;
  }
  label$6 : {
   if (($439() | 0 | 0) != ($0_1 | 0)) {
    break label$6
   }
   $440(0 | 0);
  }
  label$7 : {
   if (($473() | 0 | 0) != ($0_1 | 0)) {
    break label$7
   }
   $474(0 | 0);
  }
  label$8 : {
   label$9 : {
    label$10 : {
     if (!((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 2 | 0)) {
      break label$10
     }
     $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
     if ((HEAP32[($1_1 + 804 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
      break label$9
     }
     $946($0_1 | 0, 0 | 0) | 0;
    }
    $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($1_1) {
     break label$9
    }
    $260(73441 | 0, 0 | 0) | 0;
    break label$8;
   }
   label$11 : {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($1_1 + 408 | 0 | 0)) {
     break label$11
    }
    $260(66102 | 0, 0 | 0) | 0;
    break label$8;
   }
   $1_1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$8
   }
   HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & -5 | 0;
   $802($1_1 | 0);
   HEAP32[($0_1 + 112 | 0) >> 2] = 0;
   HEAP32[($0_1 + 116 | 0) >> 2] = 0;
  }
  label$12 : {
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if (!(HEAP32[($1_1 + 372 | 0) >> 2] | 0)) {
    break label$12
   }
   $2_1 = HEAP32[($1_1 + 172 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$12
   }
   FUNCTION_TABLE[$2_1 | 0]($1_1, $0_1);
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
  }
  label$13 : {
   $2_1 = HEAP32[($1_1 + 160 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$13
   }
   FUNCTION_TABLE[$2_1 | 0]($1_1, $0_1);
  }
  label$14 : {
   if (!((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 2 | 0)) {
    break label$14
   }
   label$15 : {
    $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($1_1) {
     break label$15
    }
    $260(73441 | 0, 0 | 0) | 0;
    break label$14;
   }
   $2_1 = HEAP32[($1_1 + 540 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$14
   }
   HEAP32[($1_1 + 540 | 0) >> 2] = $2_1 + -1 | 0;
   if (($2_1 | 0) != (1 | 0)) {
    break label$14
   }
   $2_1 = HEAP32[($1_1 + 208 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$14
   }
   FUNCTION_TABLE[$2_1 | 0]($1_1);
  }
  label$16 : {
   if (!((HEAPU8[($0_1 + 51 | 0) >> 0] | 0) & 16 | 0)) {
    break label$16
   }
   label$17 : {
    $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($1_1) {
     break label$17
    }
    $260(73441 | 0, 0 | 0) | 0;
    break label$16;
   }
   $2_1 = HEAP32[($1_1 + 832 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$16
   }
   HEAP32[($1_1 + 832 | 0) >> 2] = $2_1 + -1 | 0;
   if (($2_1 | 0) != (1 | 0)) {
    break label$16
   }
   $2_1 = HEAP32[($1_1 + 248 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$16
   }
   FUNCTION_TABLE[$2_1 | 0]($1_1);
  }
  $2_1 = $936($0_1 | 0) | 0;
  label$18 : {
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   $2_1 = (HEAP32[($1_1 + 396 | 0) >> 2] | 0) + Math_imul($2_1, 72) | 0;
   if ((HEAP32[($2_1 + 60 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
    break label$18
   }
   HEAP32[($2_1 + 60 | 0) >> 2] = 0;
  }
  label$19 : {
   if ((HEAP32[($1_1 + 404 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
    break label$19
   }
   HEAP32[($1_1 + 404 | 0) >> 2] = 0;
  }
  label$20 : {
   if ((HEAP32[($1_1 + 804 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
    break label$20
   }
   HEAP32[($1_1 + 804 | 0) >> 2] = 0;
  }
  label$21 : {
   if ((HEAP32[($1_1 + 384 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
    break label$21
   }
   HEAP32[($1_1 + 384 | 0) >> 2] = 0;
  }
  HEAP32[$0_1 >> 2] = 0;
  $459(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  $802(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  $459(HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0);
  label$22 : {
   label$23 : while (1) {
    $1_1 = HEAP32[($0_1 + 160 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$22
    }
    HEAP32[($0_1 + 160 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $459(HEAP32[$1_1 >> 2] | 0 | 0);
    $459($1_1 | 0);
    continue label$23;
   };
  }
  $1_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
  label$24 : {
   $2_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$24
   }
   HEAP32[($2_1 + 168 | 0) >> 2] = $1_1;
  }
  HEAP32[(wasm2js_i32$0 = $1_1 + 172 | 0, wasm2js_i32$1 = (HEAP32[(0 + 131072 | 0) >> 2] | 0) + 400 | 0, wasm2js_i32$2 = $1_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) >> 2] = $2_1;
  $459($0_1 | 0);
 }
 
 function $926($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($2_1) {
     break label$2
    }
    $260(73441 | 0, 0 | 0) | 0;
    break label$1;
   }
   $3_1 = HEAP32[($2_1 + 392 | 0) >> 2] | 0;
   label$3 : {
    label$4 : {
     if (($0_1 | 0) < (0 | 0)) {
      break label$4
     }
     if (($0_1 | 0) < ($3_1 | 0)) {
      break label$3
     }
    }
    HEAP32[$1_1 >> 2] = $3_1 + -1 | 0;
    $260(74280 | 0, $1_1 | 0) | 0;
    break label$1;
   }
   $4_1 = (HEAP32[($2_1 + 396 | 0) >> 2] | 0) + Math_imul($0_1, 72) | 0;
   $2_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   label$5 : {
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $0_1 = $0_1 + -1 | 0;
     $3_1 = Math_imul($0_1, 20);
     $459(HEAP32[(($2_1 + $3_1 | 0) + 16 | 0) >> 2] | 0 | 0);
     $2_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     HEAP32[(($2_1 + $3_1 | 0) + 16 | 0) >> 2] = 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $459($2_1 | 0);
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $927() {
  return HEAP32[(0 + 131072 | 0) >> 2] | 0 | 0;
 }
 
 function $928($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $19_1 = 0, $22_1 = 0, $32_1 = 0, $35_1 = 0;
  $1_1 = global$0 - 80 | 0;
  global$0 = $1_1;
  $536($1_1 + 8 | 0 | 0, 0 | 0, 72 | 0) | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   HEAP32[($1_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$2 = $0_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1 + 32 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $19_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $22_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1;
   HEAP32[($1_1 + 24 | 0) >> 2] = $22_1;
   HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  }
  HEAP32[($1_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1 + 32 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $32_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 52 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $32_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[($1_1 + 44 | 0) >> 2] = $35_1;
  HEAP32[($1_1 + 48 | 0) >> 2] = i64toi32_i32$0;
  $0_1 = $929($1_1 + 8 | 0 | 0, 0 | 0) | 0;
  global$0 = $1_1 + 80 | 0;
  return $0_1 | 0;
 }
 
 function $929($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    $4_1 = $458(HEAP32[($3_1 + 396 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($3_1 + 392 | 0) >> 2] | 0, 72) + 72 | 0 | 0) | 0;
    if (!$4_1) {
     break label$2
    }
    $5_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    $3_1 = HEAP32[($5_1 + 392 | 0) >> 2] | 0;
    HEAP32[($5_1 + 392 | 0) >> 2] = $3_1 + 1 | 0;
    $6_1 = $1004($4_1 + Math_imul($3_1, 72) | 0 | 0, $0_1 | 0, 72 | 0) | 0;
    HEAP32[($6_1 + 64 | 0) >> 2] = $5_1;
    HEAP32[($5_1 + 396 | 0) >> 2] = $4_1;
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[$0_1 >> 2] | 0;
      if (!$5_1) {
       break label$4
      }
      HEAP32[$6_1 >> 2] = $543($5_1 | 0) | 0;
      break label$3;
     }
     $547($3_1 | 0, $2_1 | 0, 10 | 0) | 0;
     HEAP32[$6_1 >> 2] = $543($2_1 | 0) | 0;
    }
    if (!$1_1) {
     break label$1
    }
    $920((HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 396 | 0) >> 2] | 0) + Math_imul($3_1, 72) | 0 | 0, 2 | 0, 0 | 0) | 0;
    break label$1;
   }
   $262(0 | 0) | 0;
   $3_1 = -1;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $930($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   $3_1 = HEAP32[($2_1 + 392 | 0) >> 2] | 0;
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $2_1 = HEAP32[($2_1 + 396 | 0) >> 2] | 0;
   $1_1 = 0;
   label$2 : while (1) {
    if (($0_1 | 0) == ($2_1 + Math_imul($1_1, 72) | 0 | 0)) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $931($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $260(73441 | 0, 0 | 0) | 0;
    $0_1 = -1;
    break label$1;
   }
   $4_1 = HEAP32[($3_1 + 392 | 0) >> 2] | 0;
   label$3 : {
    label$4 : {
     if (($0_1 | 0) < (0 | 0)) {
      break label$4
     }
     if (($0_1 | 0) < ($4_1 | 0)) {
      break label$3
     }
    }
    $0_1 = -1;
    HEAP32[($2_1 + 16 | 0) >> 2] = $4_1 + -1 | 0;
    $260(74280 | 0, $2_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   label$5 : {
    if ($1_1) {
     break label$5
    }
    HEAP32[$2_1 >> 2] = 67516;
    $0_1 = $260(73395 | 0, $2_1 | 0) | 0;
    break label$1;
   }
   $4_1 = (HEAP32[($3_1 + 396 | 0) >> 2] | 0) + Math_imul($0_1, 72) | 0;
   label$6 : {
    label$7 : {
     $5_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$7
     }
     if (!(FUNCTION_TABLE[$5_1 | 0]($3_1, $4_1, $1_1) | 0)) {
      break label$6
     }
    }
    label$8 : {
     label$9 : {
      if ($0_1) {
       break label$9
      }
      $0_1 = 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = 0;
      break label$8;
     }
     $931($0_1 + -1 | 0 | 0, $1_1 | 0) | 0;
     $0_1 = (HEAP32[$1_1 >> 2] | 0) + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0;
    }
    HEAP32[$1_1 >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
   }
   $0_1 = 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $932($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $7_1 = 0, $8_1 = 0, $5_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $9_1 = 0, $10_1 = 0, $105_1 = 0, $115_1 = 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($3_1 | 0) < (1 | 0)) {
     break label$2
    }
    $4_1 = 0;
    $5_1 = 0;
    label$3 : while (1) {
     $6_1 = $2_1 + Math_imul($5_1, 20) | 0;
     if (($1_1 | 0) == ($6_1 | 0)) {
      break label$1
     }
     label$4 : {
      label$5 : {
       $7_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
       $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($8_1 | 0)) {
        break label$5
       }
       if ($7_1 - $8_1 | 0) {
        break label$4
       }
       break label$1;
      }
      label$6 : {
       $7_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       $8_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($8_1 | 0)) {
        break label$6
       }
       if ($7_1 - $8_1 | 0) {
        break label$4
       }
       break label$1;
      }
      label$7 : {
       $7_1 = HEAP32[$6_1 >> 2] | 0;
       $8_1 = ($7_1 >>> 8 | 0) & 255 | 0;
       $9_1 = HEAP32[$1_1 >> 2] | 0;
       $10_1 = ($9_1 >>> 8 | 0) & 255 | 0;
       if (($8_1 | 0) == ($10_1 | 0)) {
        break label$7
       }
       if ($8_1 - $10_1 | 0) {
        break label$4
       }
       break label$1;
      }
      label$8 : {
       $7_1 = ($7_1 >>> 16 | 0) & 15 | 0;
       $8_1 = ($9_1 >>> 16 | 0) & 15 | 0;
       if (($7_1 | 0) == ($8_1 | 0)) {
        break label$8
       }
       if ($7_1 - $8_1 | 0) {
        break label$4
       }
       break label$1;
      }
      if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0) - (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0)) {
       break label$1
      }
     }
     $5_1 = $5_1 + 1 | 0;
     if (($5_1 | 0) != ($3_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   label$9 : {
    if (($3_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
     break label$9
    }
    label$10 : {
     $2_1 = $458($2_1 | 0, Math_imul($3_1, 20) + 640 | 0 | 0) | 0;
     if ($2_1) {
      break label$10
     }
     return 0 | 0;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 32 | 0;
   }
   $5_1 = $2_1 + Math_imul($3_1, 20) | 0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $105_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1;
   HEAP32[$5_1 >> 2] = $105_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$2 = $1_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $115_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $115_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $4_1 = 1;
   $1_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
   $921(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0, 20 | 0, 362 | 0);
  }
  return $4_1 | 0;
 }
 
 function $933($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : {
   $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$2
   }
   return $2_1 - $3_1 | 0 | 0;
  }
  label$3 : {
   $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$3
   }
   return $2_1 - $3_1 | 0 | 0;
  }
  label$4 : {
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   $3_1 = ($2_1 >>> 8 | 0) & 255 | 0;
   $4_1 = HEAP32[$0_1 >> 2] | 0;
   $5_1 = ($4_1 >>> 8 | 0) & 255 | 0;
   if (($3_1 | 0) == ($5_1 | 0)) {
    break label$4
   }
   return $3_1 - $5_1 | 0 | 0;
  }
  label$5 : {
   $2_1 = ($2_1 >>> 16 | 0) & 15 | 0;
   $3_1 = ($4_1 >>> 16 | 0) & 15 | 0;
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$5
   }
   return $2_1 - $3_1 | 0 | 0;
  }
  return (HEAP32[($1_1 + 12 | 0) >> 2] | 0) - (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0 | 0;
 }
 
 function $934($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $10_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $7_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $12_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1_1) {
      break label$3
     }
     if ($2_1) {
      break label$2
     }
    }
    HEAP32[$3_1 >> 2] = 67009;
    $260(73395 | 0, $3_1 | 0) | 0;
    $2_1 = 0;
    break label$1;
   }
   label$4 : {
    $4_1 = HEAP32[$1_1 >> 2] | 0;
    if ($4_1) {
     break label$4
    }
    $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   }
   label$5 : {
    $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    if ($5_1) {
     break label$5
    }
    $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   $6_1 = ($4_1 >>> 8 | 0) & 255 | 0;
   $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $8_1 = 0;
   $9_1 = 0;
   label$6 : while (1) {
    label$7 : {
     if ($7_1) {
      break label$7
     }
     $7_1 = 0;
     $10_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
     $11_1 = HEAP32[($10_1 + 32 | 0) >> 2] | 0;
     if (!$11_1) {
      break label$7
     }
     FUNCTION_TABLE[$11_1 | 0]($10_1, $0_1);
     $921(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, 20 | 0, 362 | 0);
     $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    label$8 : {
     label$9 : {
      label$10 : {
       label$11 : {
        if (($8_1 | 0) >= ($7_1 | 0)) {
         break label$11
        }
        label$12 : {
         $10_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + Math_imul($8_1, 20) | 0;
         $11_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
         if (!$11_1) {
          break label$12
         }
         if (($11_1 | 0) < (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
          break label$11
         }
        }
        $12_1 = HEAP32[($10_1 + 8 | 0) >> 2] | 0;
        if (!$12_1) {
         break label$10
        }
        if (($12_1 | 0) >= (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
         break label$10
        }
        if (!$11_1) {
         break label$9
        }
        if (($11_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
         break label$9
        }
       }
       if ($9_1) {
        break label$8
       }
       $2_1 = 0;
       break label$1;
      }
      label$13 : {
       if ($9_1) {
        break label$13
       }
       $9_1 = $10_1;
       $8_1 = $8_1 + 1 | 0;
       continue label$6;
      }
      label$14 : {
       if (($11_1 | 0) >= (HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0)) {
        break label$14
       }
       $9_1 = $10_1;
       $8_1 = $8_1 + 1 | 0;
       continue label$6;
      }
      label$15 : {
       if (($12_1 | 0) >= (HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0)) {
        break label$15
       }
       $9_1 = $10_1;
       $8_1 = $8_1 + 1 | 0;
       continue label$6;
      }
      label$16 : {
       $11_1 = HEAP32[$10_1 >> 2] | 0;
       if (($11_1 | 0) == (HEAP32[$9_1 >> 2] | 0 | 0)) {
        break label$16
       }
       label$17 : {
        if (($11_1 | 0) != ($4_1 | 0)) {
         break label$17
        }
        $9_1 = $10_1;
        $8_1 = $8_1 + 1 | 0;
        continue label$6;
       }
       if ((($11_1 >>> 8 | 0) & 255 | 0) >>> 0 < $6_1 >>> 0) {
        break label$9
       }
       if (($11_1 ^ $4_1 | 0) & 251658240 | 0) {
        break label$9
       }
       $9_1 = $10_1;
       $8_1 = $8_1 + 1 | 0;
       continue label$6;
      }
      $11_1 = HEAP32[($10_1 + 12 | 0) >> 2] | 0;
      $9_1 = ($11_1 | 0) == (HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0) ? $9_1 : ($11_1 | 0) < ($5_1 | 0) ? $9_1 : $10_1;
     }
     $8_1 = $8_1 + 1 | 0;
     continue label$6;
    }
    break label$6;
   };
   label$18 : {
    $8_1 = HEAP32[$9_1 >> 2] | 0;
    if ($8_1) {
     break label$18
    }
    $8_1 = HEAP32[$1_1 >> 2] | 0;
   }
   HEAP32[$2_1 >> 2] = $8_1;
   label$19 : {
    label$20 : {
     $10_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
     if (!$10_1) {
      break label$20
     }
     $7_1 = HEAP32[($9_1 + 8 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$20
     }
     HEAP32[($2_1 + 8 | 0) >> 2] = $7_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $10_1;
     $7_1 = 0;
     $11_1 = 0;
     break label$19;
    }
    $10_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $10_1;
    $7_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $7_1;
    $11_1 = !$10_1;
    $7_1 = !$7_1;
   }
   label$21 : {
    $10_1 = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
    if ($10_1) {
     break label$21
    }
    $10_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   }
   HEAP32[($2_1 + 12 | 0) >> 2] = $10_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($9_1 + 16 | 0) >> 2] | 0;
   label$22 : {
    if ($8_1) {
     break label$22
    }
    HEAP32[$2_1 >> 2] = 370546692;
   }
   label$23 : {
    if (!$11_1) {
     break label$23
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = 640;
   }
   if (!$7_1) {
    break label$1
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = 480;
  }
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $935($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $19_1 = 0, $7_1 = 0, $10_1 = 0, $10$hi = 0, $85_1 = 0, $93_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = (($3_1 | 0) / (2 | 0) | 0) + $1_1 | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = (($2_1 | 0) / (2 | 0) | 0) + $0_1 | 0;
  $5_1 = -1;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     if ((HEAP32[($3_1 + 392 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$3
     }
     $2_1 = 2147483647;
     $3_1 = 0;
     $5_1 = -1;
     label$4 : while (1) {
      $931($3_1 | 0, $4_1 + 8 | 0 | 0) | 0;
      if ($493($4_1 + 24 | 0 | 0, 1 | 0, $4_1 + 8 | 0 | 0, 0 | 0) | 0) {
       break label$2
      }
      $0_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      $6_1 = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + $0_1 | 0;
      $7_1 = $6_1 + -1 | 0;
      label$5 : {
       $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$0 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$1;
       $9_1 = i64toi32_i32$0;
       if (($8_1 | 0) > ($9_1 | 0)) {
        break label$5
       }
       $1_1 = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + $8_1 | 0;
       $8_1 = ($1_1 | 0) > ($9_1 | 0) ? $9_1 : $1_1 + -1 | 0;
      }
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$2 = $10_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $19_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $19_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $1_1 = $19_1;
      $1_1 = $1_1 - (($0_1 | 0) > ($1_1 | 0) ? $0_1 : ($6_1 | 0) > ($1_1 | 0) ? $1_1 : $7_1) | 0;
      $85_1 = Math_imul($1_1, $1_1);
      $1_1 = $9_1 - $8_1 | 0;
      $1_1 = $85_1 + Math_imul($1_1, $1_1) | 0;
      $93_1 = $1_1;
      $1_1 = ($1_1 | 0) < ($2_1 | 0);
      $2_1 = $1_1 ? $93_1 : $2_1;
      $5_1 = $1_1 ? $3_1 : $5_1;
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) < (HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 392 | 0) >> 2] | 0 | 0)) {
       continue label$4
      }
      break label$4;
     };
     if (($5_1 | 0) > (-1 | 0)) {
      break label$1
     }
    }
    $260(67852 | 0, 0 | 0) | 0;
    break label$1;
   }
   $5_1 = $3_1;
  }
  global$0 = $4_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $936($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if ($1_1) {
    break label$1
   }
   $260(73441 | 0, 0 | 0) | 0;
   return -1 | 0;
  }
  label$2 : {
   label$3 : {
    if (!$0_1) {
     break label$3
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($1_1 + 408 | 0 | 0)) {
     break label$2
    }
   }
   $260(66102 | 0, 0 | 0) | 0;
   return -1 | 0;
  }
  label$4 : {
   label$5 : {
    $2_1 = HEAP32[($1_1 + 144 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$5
    }
    $1_1 = FUNCTION_TABLE[$2_1 | 0]($1_1, $0_1) | 0;
    if (($1_1 | 0) > (-1 | 0)) {
     break label$4
    }
   }
   label$6 : {
    label$7 : {
     $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     $1_1 = $2_1 & -65536 | 0;
     if (($1_1 | 0) == (805240832 | 0)) {
      break label$7
     }
     if (($1_1 | 0) != (536805376 | 0)) {
      break label$6
     }
    }
    $0_1 = $2_1 & 65535 | 0;
    return (($0_1 | 0) < (HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 392 | 0) >> 2] | 0 | 0) ? $0_1 : 0) | 0;
   }
   label$8 : {
    label$9 : {
     $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     $1_1 = $3_1 & -65536 | 0;
     if (($1_1 | 0) == (805240832 | 0)) {
      break label$9
     }
     if (($1_1 | 0) != (536805376 | 0)) {
      break label$8
     }
    }
    $0_1 = $3_1 & 65535 | 0;
    return (($0_1 | 0) < (HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 392 | 0) >> 2] | 0 | 0) ? $0_1 : 0) | 0;
   }
   $1_1 = 0;
   $4_1 = $935($2_1 | 0, $3_1 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) | 0;
   label$10 : {
    $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    $3_1 = HEAP32[($2_1 + 392 | 0) >> 2] | 0;
    if (($3_1 | 0) < (1 | 0)) {
     break label$10
    }
    $2_1 = HEAP32[($2_1 + 396 | 0) >> 2] | 0;
    label$11 : while (1) {
     label$12 : {
      $5_1 = $2_1 + Math_imul($1_1, 72) | 0;
      if ((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
       break label$12
      }
      if (($4_1 | 0) == ($1_1 | 0)) {
       break label$10
      }
      if (($4_1 | 0) < (0 | 0)) {
       break label$4
      }
      $1_1 = $5_1 + 60 | 0;
      label$13 : {
       $2_1 = $2_1 + Math_imul($4_1, 72) | 0;
       if (HEAP32[($2_1 + 60 | 0) >> 2] | 0) {
        break label$13
       }
       HEAP32[($2_1 + 60 | 0) >> 2] = $0_1;
      }
      HEAP32[$1_1 >> 2] = 0;
      break label$10;
     }
     $1_1 = $1_1 + 1 | 0;
     if (($1_1 | 0) != ($3_1 | 0)) {
      continue label$11
     }
     break label$11;
    };
   }
   $1_1 = $4_1;
  }
  return $1_1 | 0;
 }
 
 function $937($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   $0_1 = $936($0_1 | 0) | 0;
   if (($0_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = (HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 396 | 0) >> 2] | 0) + Math_imul($0_1, 72) | 0;
  }
  return $1_1 | 0;
 }
 
 function $938($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $4_1 = 0, $32_1 = 0, $35_1 = 0, $68_1 = 0, $71_1 = 0, $92_1 = 0, $104_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $260(73441 | 0, 0 | 0) | 0;
    $0_1 = -1;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!$0_1) {
      break label$4
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($3_1 + 408 | 0 | 0)) {
      break label$3
     }
    }
    $260(66102 | 0, 0 | 0) | 0;
    $0_1 = -1;
    break label$1;
   }
   label$5 : {
    if ($1_1) {
     break label$5
    }
    HEAP32[$2_1 >> 2] = 73e3;
    $0_1 = $260(73395 | 0, $2_1 | 0) | 0;
    break label$1;
   }
   HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
   i64toi32_i32$2 = $0_1 + 84 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $32_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1 + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $32_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
   $35_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = $35_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$0;
   label$6 : {
    if (HEAP32[($2_1 + 12 | 0) >> 2] | 0) {
     break label$6
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   }
   label$7 : {
    if (HEAP32[($2_1 + 16 | 0) >> 2] | 0) {
     break label$7
    }
    HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   }
   $3_1 = 0;
   label$8 : {
    $4_1 = $936($0_1 | 0) | 0;
    if (($4_1 | 0) < (0 | 0)) {
     break label$8
    }
    $3_1 = (HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 396 | 0) >> 2] | 0) + Math_imul($4_1, 72) | 0;
   }
   label$9 : {
    label$10 : {
     if (((HEAP32[($0_1 + 48 | 0) >> 2] | 0) & 4097 | 0 | 0) != (4097 | 0)) {
      break label$10
     }
     HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = $3_1 + 24 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $68_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + 16 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $68_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
     $71_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 8 | 0) >> 2] = $71_1;
     HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$0;
     break label$9;
    }
    $3_1 = 0;
    label$11 : {
     $0_1 = $936($0_1 | 0) | 0;
     if (($0_1 | 0) < (0 | 0)) {
      break label$11
     }
     $3_1 = (HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 396 | 0) >> 2] | 0) + Math_imul($0_1, 72) | 0;
    }
    if ($934($3_1 | 0, $2_1 + 8 | 0 | 0, $2_1 + 8 | 0 | 0) | 0) {
     break label$9
    }
    $536($1_1 | 0, 0 | 0, 20 | 0) | 0;
    $0_1 = $260(71729 | 0, 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   $92_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[i64toi32_i32$0 >> 2] = $92_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = HEAP32[(($2_1 + 8 | 0) + 16 | 0) >> 2] | 0;
   i64toi32_i32$2 = ($2_1 + 8 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $104_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $104_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $0_1 = 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $939($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $4_1 = 0, $24_1 = 0, $57_1 = 0, $69_1 = 0, $72_1 = 0, $82_1 = 0, $85_1 = 0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  label$1 : {
   if ((HEAPU8[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 428 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!$1_1) {
      break label$3
     }
     HEAP32[(($2_1 + 40 | 0) + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $24_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($2_1 + 40 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $24_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 40 | 0) >> 2] = $4_1;
     HEAP32[($2_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     label$4 : {
      if ($4_1) {
       break label$4
      }
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
     }
     label$5 : {
      if (HEAP32[($2_1 + 44 | 0) >> 2] | 0) {
       break label$5
      }
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
     }
     label$6 : {
      if (HEAP32[($2_1 + 48 | 0) >> 2] | 0) {
       break label$6
      }
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
     }
     label$7 : {
      if (HEAP32[($2_1 + 52 | 0) >> 2] | 0) {
       break label$7
      }
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     }
     if ($934($0_1 | 0, $2_1 + 40 | 0 | 0, $2_1 + 40 | 0 | 0) | 0) {
      break label$2
     }
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = HEAP32[($2_1 + 44 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
     $57_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1;
     HEAP32[$2_1 >> 2] = $57_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     $3_1 = $260(74178 | 0, $2_1 | 0) | 0;
     break label$1;
    }
    HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = $0_1 + 24 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $69_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1 + 48 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $69_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    $72_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[($2_1 + 40 | 0) >> 2] = $72_1;
    HEAP32[($2_1 + 44 | 0) >> 2] = i64toi32_i32$1;
   }
   HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   i64toi32_i32$2 = $0_1 + 44 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $82_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $82_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   $85_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $85_1;
   HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$1;
   if (!($538($2_1 + 40 | 0 | 0, $2_1 + 16 | 0 | 0, 20 | 0) | 0)) {
    break label$1
   }
   label$8 : {
    $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    $3_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
    if ($3_1) {
     break label$8
    }
    $3_1 = $260(72950 | 0, 0 | 0) | 0;
    break label$1;
   }
   HEAP32[($1_1 + 424 | 0) >> 2] = 1;
   $1_1 = FUNCTION_TABLE[$3_1 | 0]($1_1, $0_1, $2_1 + 40 | 0) | 0;
   HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 424 | 0) >> 2] = 0;
   label$9 : {
    if (($1_1 | 0) >= (0 | 0)) {
     break label$9
    }
    $3_1 = -1;
    break label$1;
   }
   $535($0_1 + 36 | 0 | 0, $2_1 + 40 | 0 | 0, 20 | 0) | 0;
   $3_1 = 0;
  }
  global$0 = $2_1 + 64 | 0;
  return $3_1 | 0;
 }
 
 function $940() {
  var $0_1 = 0, $1_1 = 0;
  label$1 : {
   $0_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   if (!(HEAP32[($0_1 + 364 | 0) >> 2] | 0)) {
    break label$1
   }
   $1_1 = 1;
   label$2 : {
    if (($321(4096 | 0, -1 | 0) | 0 | 0) == (1 | 0)) {
     break label$2
    }
    $1_1 = ($321(4097 | 0, -1 | 0) | 0 | 0) == (1 | 0);
   }
   $0_1 = HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 400 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$3 : while (1) {
    FUNCTION_TABLE[HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 364 | 0) >> 2] | 0 | 0]($0_1, $1_1);
    $0_1 = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
    if ($0_1) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function $941($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $7_1 = 0, $6_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $6_1 = global$0 - 128 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  label$1 : {
   label$2 : {
    $8_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($8_1) {
     break label$2
    }
    if (($317(32 | 0) | 0 | 0) < (0 | 0)) {
     break label$1
    }
    $8_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$1
    }
   }
   label$3 : {
    $7_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
    if (!$7_1) {
     break label$3
    }
    FUNCTION_TABLE[$7_1 | 0]($8_1);
   }
   label$4 : {
    $7_1 = $5_1 & 917504 | 0;
    if (!($7_1 & ($7_1 + -1 | 0) | 0)) {
     break label$4
    }
    $7_1 = 0;
    $260(73839 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$5 : {
    label$6 : {
     if (($3_1 | 0) > (16384 | 0)) {
      break label$6
     }
     if (($4_1 | 0) < (16385 | 0)) {
      break label$5
     }
    }
    $7_1 = 0;
    $260(78354 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$7 : {
    $7_1 = $5_1 & 805306370 | 0;
    if (!($7_1 & ($7_1 + -1 | 0) | 0)) {
     break label$7
    }
    $7_1 = 0;
    $260(73839 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$8 : {
    if ($7_1) {
     break label$8
    }
    $383(74852 | 0, 0 | 0) | 0;
   }
   label$9 : {
    if (!($5_1 & 2 | 0)) {
     break label$9
    }
    $7_1 = 0;
    label$10 : {
     $8_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
     if (HEAP32[($8_1 + 212 | 0) >> 2] | 0) {
      break label$10
     }
     HEAP32[($6_1 + 52 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
     HEAP32[($6_1 + 48 | 0) >> 2] = 76355;
     $260(70839 | 0, $6_1 + 48 | 0 | 0) | 0;
     break label$1;
    }
    label$11 : {
     label$12 : {
      label$13 : {
       $7_1 = HEAP32[($8_1 + 540 | 0) >> 2] | 0;
       if ($7_1) {
        break label$13
       }
       label$14 : {
        $7_1 = HEAP32[($8_1 + 200 | 0) >> 2] | 0;
        if ($7_1) {
         break label$14
        }
        HEAP32[($6_1 + 68 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
        HEAP32[($6_1 + 64 | 0) >> 2] = 76355;
        $9_1 = $260(81596 | 0, $6_1 + 64 | 0 | 0) | 0;
        break label$11;
       }
       $9_1 = FUNCTION_TABLE[$7_1 | 0]($8_1, 0) | 0;
       $8_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
       if ($9_1) {
        break label$12
       }
       $7_1 = HEAP32[($8_1 + 540 | 0) >> 2] | 0;
      }
      HEAP32[($8_1 + 540 | 0) >> 2] = $7_1 + 1 | 0;
      break label$9;
     }
     $7_1 = HEAP32[($8_1 + 208 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$11
     }
     FUNCTION_TABLE[$7_1 | 0]($8_1);
    }
    $7_1 = 0;
    if (($9_1 | 0) < (0 | 0)) {
     break label$1
    }
   }
   label$15 : {
    if (!($5_1 & 268435456 | 0)) {
     break label$15
    }
    $7_1 = 0;
    label$16 : {
     $8_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
     if (HEAP32[($8_1 + 256 | 0) >> 2] | 0) {
      break label$16
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
     HEAP32[($6_1 + 16 | 0) >> 2] = 70767;
     $260(70839 | 0, $6_1 + 16 | 0 | 0) | 0;
     break label$1;
    }
    label$17 : {
     label$18 : {
      $7_1 = HEAP32[($8_1 + 832 | 0) >> 2] | 0;
      if ($7_1) {
       break label$18
      }
      label$19 : {
       $7_1 = HEAP32[($8_1 + 244 | 0) >> 2] | 0;
       if ($7_1) {
        break label$19
       }
       HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
       HEAP32[($6_1 + 32 | 0) >> 2] = 70767;
       $8_1 = $260(81596 | 0, $6_1 + 32 | 0 | 0) | 0;
       break label$17;
      }
      $8_1 = FUNCTION_TABLE[$7_1 | 0]($8_1, 0) | 0;
      if ($8_1) {
       break label$17
      }
      $8_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
      $7_1 = HEAP32[($8_1 + 832 | 0) >> 2] | 0;
     }
     HEAP32[($8_1 + 832 | 0) >> 2] = $7_1 + 1 | 0;
     break label$15;
    }
    $7_1 = 0;
    if (($8_1 | 0) < (0 | 0)) {
     break label$1
    }
   }
   label$20 : {
    if (!($5_1 & 536870912 | 0)) {
     break label$20
    }
    $7_1 = 0;
    $8_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if (HEAP32[($8_1 + 264 | 0) >> 2] | 0) {
     break label$20
    }
    HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
    HEAP32[$6_1 >> 2] = 71229;
    $260(70839 | 0, $6_1 | 0) | 0;
    break label$1;
   }
   label$21 : {
    if (!($5_1 & 8192 | 0)) {
     break label$21
    }
    $5_1 = $383(77718 | 0, 0 | 0) | 0 ? $5_1 & -8193 | 0 : $5_1;
   }
   label$22 : {
    $7_1 = $457(1 | 0, 176 | 0) | 0;
    if ($7_1) {
     break label$22
    }
    $7_1 = 0;
    $262(0 | 0) | 0;
    break label$1;
   }
   $9_1 = 0;
   $8_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   HEAP32[$7_1 >> 2] = $8_1 + 408 | 0;
   $10_1 = HEAP32[($8_1 + 412 | 0) >> 2] | 0;
   HEAP32[($8_1 + 412 | 0) >> 2] = $10_1 + 1 | 0;
   $11_1 = ($4_1 | 0) > (1 | 0) ? $4_1 : 1;
   HEAP32[($7_1 + 28 | 0) >> 2] = $11_1;
   $12_1 = ($3_1 | 0) > (1 | 0) ? $3_1 : 1;
   HEAP32[($7_1 + 24 | 0) >> 2] = $12_1;
   HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($7_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($7_1 + 4 | 0) >> 2] = $10_1;
   label$23 : {
    label$24 : {
     label$25 : {
      label$26 : {
       $10_1 = $1_1 & -65536 | 0;
       if (($10_1 | 0) == (536805376 | 0)) {
        break label$26
       }
       label$27 : {
        if (($10_1 | 0) == (805240832 | 0)) {
         break label$27
        }
        $8_1 = $2_1 & -65536 | 0;
        if (($8_1 | 0) == (805240832 | 0)) {
         break label$27
        }
        if (($8_1 | 0) == (536805376 | 0)) {
         break label$27
        }
        $8_1 = $11_1;
        $3_1 = $12_1;
        break label$23;
       }
       $8_1 = 0;
       $4_1 = $936($7_1 | 0) | 0;
       $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
       $3_1 = 0;
       label$28 : {
        if (($4_1 | 0) < (0 | 0)) {
         break label$28
        }
        $3_1 = (HEAP32[($1_1 + 396 | 0) >> 2] | 0) + Math_imul($4_1, 72) | 0;
       }
       label$29 : {
        $4_1 = HEAP32[($1_1 + 392 | 0) >> 2] | 0;
        if (($4_1 | 0) < (1 | 0)) {
         break label$29
        }
        $1_1 = HEAP32[($1_1 + 396 | 0) >> 2] | 0;
        $8_1 = 0;
        label$30 : while (1) {
         if (($3_1 | 0) == ($1_1 + Math_imul($8_1, 72) | 0 | 0)) {
          break label$29
         }
         $8_1 = $8_1 + 1 | 0;
         if (($8_1 | 0) != ($4_1 | 0)) {
          continue label$30
         }
         break label$30;
        };
        $8_1 = 0;
       }
       $931($8_1 | 0, $6_1 + 92 | 0 | 0) | 0;
       if (($10_1 | 0) == (536805376 | 0)) {
        break label$25
       }
       if (($10_1 | 0) == (805240832 | 0)) {
        break label$25
       }
       break label$24;
      }
      $3_1 = $936($7_1 | 0) | 0;
      $8_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
      label$31 : {
       if (($3_1 | 0) < (0 | 0)) {
        break label$31
       }
       $9_1 = (HEAP32[($8_1 + 396 | 0) >> 2] | 0) + Math_imul($3_1, 72) | 0;
      }
      label$32 : {
       label$33 : {
        $3_1 = HEAP32[($8_1 + 392 | 0) >> 2] | 0;
        if (($3_1 | 0) < (1 | 0)) {
         break label$33
        }
        $4_1 = HEAP32[($8_1 + 396 | 0) >> 2] | 0;
        $8_1 = 0;
        label$34 : while (1) {
         if (($9_1 | 0) == ($4_1 + Math_imul($8_1, 72) | 0 | 0)) {
          break label$32
         }
         $8_1 = $8_1 + 1 | 0;
         if (($8_1 | 0) != ($3_1 | 0)) {
          continue label$34
         }
         break label$34;
        };
       }
       $8_1 = 0;
      }
      $931($8_1 | 0, $6_1 + 92 | 0 | 0) | 0;
     }
     HEAP32[($7_1 + 16 | 0) >> 2] = (((HEAP32[($6_1 + 100 | 0) >> 2] | 0) - $12_1 | 0 | 0) / (2 | 0) | 0) + (HEAP32[($6_1 + 92 | 0) >> 2] | 0) | 0;
    }
    label$35 : {
     label$36 : {
      $8_1 = $2_1 & -65536 | 0;
      if (($8_1 | 0) == (536805376 | 0)) {
       break label$36
      }
      if (($8_1 | 0) == (805240832 | 0)) {
       break label$36
      }
      $2_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
      break label$35;
     }
     $2_1 = (((HEAP32[($6_1 + 104 | 0) >> 2] | 0) - $11_1 | 0 | 0) / (2 | 0) | 0) + (HEAP32[($6_1 + 96 | 0) >> 2] | 0) | 0;
     HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
    }
    $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
    $3_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
    $1_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
   }
   HEAP32[($7_1 + 72 | 0) >> 2] = $8_1;
   HEAP32[($7_1 + 68 | 0) >> 2] = $3_1;
   HEAP32[($7_1 + 64 | 0) >> 2] = $2_1;
   HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
   label$37 : {
    if (!($5_1 & 1 | 0)) {
     break label$37
    }
    $8_1 = 0;
    $4_1 = $936($7_1 | 0) | 0;
    $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    $3_1 = 0;
    label$38 : {
     if (($4_1 | 0) < (0 | 0)) {
      break label$38
     }
     $3_1 = (HEAP32[($2_1 + 396 | 0) >> 2] | 0) + Math_imul($4_1, 72) | 0;
    }
    label$39 : {
     $4_1 = HEAP32[($2_1 + 392 | 0) >> 2] | 0;
     if (($4_1 | 0) < (1 | 0)) {
      break label$39
     }
     $2_1 = HEAP32[($2_1 + 396 | 0) >> 2] | 0;
     $8_1 = 0;
     label$40 : while (1) {
      if (($3_1 | 0) == ($2_1 + Math_imul($8_1, 72) | 0 | 0)) {
       break label$39
      }
      $8_1 = $8_1 + 1 | 0;
      if (($8_1 | 0) != ($4_1 | 0)) {
       continue label$40
      }
      break label$40;
     };
     $8_1 = 0;
    }
    $931($8_1 | 0, $6_1 + 112 | 0 | 0) | 0;
    label$41 : {
     if (($5_1 & 4097 | 0 | 0) == (4097 | 0)) {
      break label$41
     }
     label$42 : {
      if ((HEAP32[($6_1 + 120 | 0) >> 2] | 0 | 0) != ($12_1 | 0)) {
       break label$42
      }
      if ((HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0) == ($11_1 | 0)) {
       break label$41
      }
     }
     $536($6_1 + 92 | 0 | 0, 0 | 0, 20 | 0) | 0;
     HEAP32[($6_1 + 100 | 0) >> 2] = $11_1;
     HEAP32[($6_1 + 96 | 0) >> 2] = $12_1;
     if (!($934($3_1 | 0, $6_1 + 92 | 0 | 0, $6_1 + 72 | 0 | 0) | 0)) {
      break label$41
     }
     i64toi32_i32$1 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
     HEAP32[($6_1 + 120 | 0) >> 2] = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
     HEAP32[($6_1 + 124 | 0) >> 2] = i64toi32_i32$1;
    }
    $8_1 = HEAP32[($6_1 + 120 | 0) >> 2] | 0;
    HEAP32[($7_1 + 80 | 0) >> 2] = $8_1;
    $3_1 = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
    HEAP32[($7_1 + 84 | 0) >> 2] = $3_1;
    HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 112 | 0) >> 2] | 0;
    $4_1 = HEAP32[($6_1 + 116 | 0) >> 2] | 0;
    HEAP32[($7_1 + 28 | 0) >> 2] = $3_1;
    HEAP32[($7_1 + 24 | 0) >> 2] = $8_1;
    HEAP32[($7_1 + 20 | 0) >> 2] = $4_1;
   }
   i64toi32_i32$1 = 1065353216;
   HEAP32[($7_1 + 96 | 0) >> 2] = 1065353216;
   HEAP32[($7_1 + 100 | 0) >> 2] = i64toi32_i32$1;
   $8_1 = $5_1 & 806330482 | 0 | 8 | 0;
   HEAP32[($7_1 + 52 | 0) >> 2] = $8_1;
   HEAP32[($7_1 + 48 | 0) >> 2] = $8_1;
   $8_1 = HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 400 | 0) >> 2] | 0;
   HEAP32[($7_1 + 124 | 0) >> 2] = 0;
   HEAP32[($7_1 + 172 | 0) >> 2] = $8_1;
   HEAP32[($7_1 + 56 | 0) >> 2] = $936($7_1 | 0) | 0;
   label$43 : {
    $8_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    $3_1 = HEAP32[($8_1 + 400 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$43
    }
    HEAP32[($3_1 + 168 | 0) >> 2] = $7_1;
   }
   HEAP32[($8_1 + 400 | 0) >> 2] = $7_1;
   label$44 : {
    $3_1 = HEAP32[($8_1 + 40 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$44
    }
    if ((FUNCTION_TABLE[$3_1 | 0]($8_1, $7_1) | 0 | 0) > (-1 | 0)) {
     break label$44
    }
    $925($7_1 | 0);
    $7_1 = 0;
    break label$1;
   }
   label$45 : {
    $8_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
    if (!($8_1 & 64 | 0)) {
     break label$45
    }
    HEAP32[($7_1 + 48 | 0) >> 2] = $8_1 & -65 | 0;
   }
   label$46 : {
    if (!$0_1) {
     break label$46
    }
    $942($7_1 | 0, $0_1 | 0);
   }
   $943($7_1 | 0, $5_1 | 0);
   $8_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
   $944($7_1 | 0, ($8_1 & 5 | 0 | 0) == (5 | 0) & (($8_1 ^ -1 | 0) >>> 6 | 0) | 0 | 0) | 0;
  }
  global$0 = $6_1 + 128 | 0;
  return $7_1 | 0;
 }
 
 function $942($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if ($2_1) {
    break label$1
   }
   $260(73441 | 0, 0 | 0) | 0;
   return;
  }
  label$2 : {
   label$3 : {
    if (!$0_1) {
     break label$3
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($2_1 + 408 | 0 | 0)) {
     break label$2
    }
   }
   $260(66102 | 0, 0 | 0) | 0;
   return;
  }
  label$4 : {
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (($1_1 | 0) == ($2_1 | 0)) {
    break label$4
   }
   $459($2_1 | 0);
   HEAP32[($0_1 + 8 | 0) >> 2] = $543(($1_1 ? $1_1 : 87288) | 0) | 0;
   $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   $1_1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$4
   }
   FUNCTION_TABLE[$1_1 | 0]($2_1, $0_1);
  }
 }
 
 function $943($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 364 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = 1;
   label$2 : {
    if (($321(4096 | 0, -1 | 0) | 0 | 0) == (1 | 0)) {
     break label$2
    }
    $3_1 = ($321(4097 | 0, -1 | 0) | 0 | 0) == (1 | 0);
   }
   FUNCTION_TABLE[$2_1 | 0]($0_1, $3_1);
  }
  label$3 : {
   if (!($1_1 & 128 | 0)) {
    break label$3
   }
   label$4 : {
    $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($2_1) {
     break label$4
    }
    $260(73441 | 0, 0 | 0) | 0;
    break label$3;
   }
   label$5 : {
    label$6 : {
     if (!$0_1) {
      break label$6
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($2_1 + 408 | 0 | 0)) {
      break label$5
     }
    }
    $260(66102 | 0, 0 | 0) | 0;
    break label$3;
   }
   if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 128 | 0) {
    break label$3
   }
   $3_1 = HEAP32[($2_1 + 104 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$3
   }
   FUNCTION_TABLE[$3_1 | 0]($2_1, $0_1);
  }
  label$7 : {
   if (!($1_1 & 64 | 0)) {
    break label$7
   }
   label$8 : {
    $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($2_1) {
     break label$8
    }
    $260(73441 | 0, 0 | 0) | 0;
    break label$7;
   }
   label$9 : {
    label$10 : {
     if (!$0_1) {
      break label$10
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($2_1 + 408 | 0 | 0)) {
      break label$9
     }
    }
    $260(66102 | 0, 0 | 0) | 0;
    break label$7;
   }
   if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 64 | 0) {
    break label$7
   }
   $3_1 = HEAP32[($2_1 + 108 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$7
   }
   label$11 : {
    if ((HEAPU8[($2_1 + 428 | 0) >> 0] | 0) & 2 | 0) {
     break label$11
    }
    $944($0_1 | 0, 0 | 0) | 0;
    $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    $3_1 = HEAP32[($2_1 + 108 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$7
    }
   }
   FUNCTION_TABLE[$3_1 | 0]($2_1, $0_1);
  }
  label$12 : {
   if (!($1_1 & 1 | 0)) {
    break label$12
   }
   $947($0_1 | 0, $1_1 | 0) | 0;
  }
  label$13 : {
   if (!($1_1 & 256 | 0)) {
    break label$13
   }
   $948($0_1 | 0, 1 | 0);
  }
  label$14 : {
   if (!($1_1 & 1048576 | 0)) {
    break label$14
   }
   label$15 : {
    $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($2_1) {
     break label$15
    }
    $260(73441 | 0, 0 | 0) | 0;
    break label$14;
   }
   label$16 : {
    label$17 : {
     if (!$0_1) {
      break label$17
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($2_1 + 408 | 0 | 0)) {
      break label$16
     }
    }
    $260(66102 | 0, 0 | 0) | 0;
    break label$14;
   }
   $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if ($2_1 & 1048576 | 0) {
    break label$14
   }
   HEAP32[($0_1 + 48 | 0) >> 2] = $2_1 | 1048576 | 0;
   $949($0_1 | 0);
  }
  label$18 : {
   if ($1_1 & 8 | 0) {
    break label$18
   }
   label$19 : {
    $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($1_1) {
     break label$19
    }
    $260(73441 | 0, 0 | 0) | 0;
    return;
   }
   label$20 : {
    label$21 : {
     if (!$0_1) {
      break label$21
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($1_1 + 408 | 0 | 0)) {
      break label$20
     }
    }
    $260(66102 | 0, 0 | 0) | 0;
    return;
   }
   if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 4 | 0) {
    break label$18
   }
   label$22 : {
    $2_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$22
    }
    FUNCTION_TABLE[$2_1 | 0]($1_1, $0_1);
   }
   $975($0_1 | 0, 1 | 0, 0 | 0, 0 | 0) | 0;
  }
 }
 
 function $944($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $3_1 = 0, $2_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $141_1 = 0, $144_1 = 0, $150_1 = 0, $159_1 = 0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $260(73441 | 0, 0 | 0) | 0;
    $3_1 = -1;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!$0_1) {
      break label$4
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($3_1 + 408 | 0 | 0)) {
      break label$3
     }
    }
    $260(66102 | 0, 0 | 0) | 0;
    $3_1 = -1;
    break label$1;
   }
   label$5 : {
    if (!$1_1) {
     break label$5
    }
    $3_1 = 0;
    if (HEAP32[($0_1 + 120 | 0) >> 2] | 0) {
     break label$1
    }
   }
   $3_1 = 0;
   $4_1 = $936($0_1 | 0) | 0;
   if (($4_1 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = 0;
   $5_1 = HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 396 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$1
   }
   $5_1 = $5_1 + Math_imul($4_1, 72) | 0;
   label$6 : {
    if (!$1_1) {
     break label$6
    }
    $4_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$6
    }
    if (($4_1 | 0) == ($0_1 | 0)) {
     break label$6
    }
    $950($4_1 | 0);
   }
   label$7 : {
    label$8 : {
     label$9 : {
      if (($1_1 | 0) == ((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) == ($0_1 | 0) | 0)) {
       break label$9
      }
      $3_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
      break label$8;
     }
     $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     if (!(($4_1 ^ (HEAP32[($0_1 + 52 | 0) >> 2] | 0) | 0) & 4097 | 0)) {
      break label$1
     }
     $3_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
     if ($1_1) {
      break label$8
     }
     label$10 : {
      $1_1 = HEAP32[($3_1 + 128 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$10
      }
      FUNCTION_TABLE[$1_1 | 0]($3_1, $0_1, $5_1, 0);
      $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     }
     HEAP32[($0_1 + 52 | 0) >> 2] = $4_1;
     break label$7;
    }
    label$11 : {
     $4_1 = HEAP32[($3_1 + 400 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$11
     }
     label$12 : while (1) {
      label$13 : {
       label$14 : {
        label$15 : {
         if (($4_1 | 0) == ($0_1 | 0)) {
          break label$15
         }
         if (((HEAP32[($4_1 + 48 | 0) >> 2] | 0) & 69 | 0 | 0) != (5 | 0)) {
          break label$13
         }
         $3_1 = 0;
         label$16 : {
          $6_1 = $936($4_1 | 0) | 0;
          if (($6_1 | 0) < (0 | 0)) {
           break label$16
          }
          $3_1 = (HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 396 | 0) >> 2] | 0) + Math_imul($6_1, 72) | 0;
         }
         if (($3_1 | 0) == ($5_1 | 0)) {
          break label$14
         }
         break label$13;
        }
        if (!$1_1) {
         break label$13
        }
       }
       $536($2_1 + 12 | 0 | 0, 0 | 0, 20 | 0) | 0;
       if ($938($4_1 | 0, $2_1 + 12 | 0 | 0) | 0) {
        break label$13
       }
       $1_1 = 0;
       label$17 : {
        if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0)) {
         break label$17
        }
        $1_1 = (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) == (HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0);
       }
       label$18 : {
        label$19 : {
         if (((HEAP32[($4_1 + 48 | 0) >> 2] | 0) & 4097 | 0 | 0) == (4097 | 0)) {
          break label$19
         }
         if (($939($5_1 | 0, $2_1 + 12 | 0 | 0) | 0 | 0) >= (0 | 0)) {
          break label$18
         }
         $3_1 = -1;
         break label$1;
        }
        if ((HEAPU8[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 428 | 0) >> 0] | 0) & 1 | 0) {
         break label$18
        }
        HEAP32[(($2_1 + 56 | 0) + 16 | 0) >> 2] = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$2 = $5_1 + 24 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $141_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($2_1 + 56 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $141_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
        $144_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $2_1;
        HEAP32[($2_1 + 56 | 0) >> 2] = $144_1;
        HEAP32[($2_1 + 60 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $5_1 + 44 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $150_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($2_1 + 32 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $150_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[(($2_1 + 32 | 0) + 16 | 0) >> 2] = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
        $159_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $2_1;
        HEAP32[($2_1 + 32 | 0) >> 2] = $159_1;
        HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
        if (!($538($2_1 + 56 | 0 | 0, $2_1 + 32 | 0 | 0, 20 | 0) | 0)) {
         break label$18
        }
        label$20 : {
         $3_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
         $6_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
         if (!$6_1) {
          break label$20
         }
         HEAP32[($3_1 + 424 | 0) >> 2] = 1;
         $6_1 = FUNCTION_TABLE[$6_1 | 0]($3_1, $5_1, $2_1 + 56 | 0) | 0;
         HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 424 | 0) >> 2] = 0;
         $3_1 = -1;
         if (($6_1 | 0) <= (-1 | 0)) {
          break label$1
         }
         $535($5_1 + 36 | 0 | 0, $2_1 + 56 | 0 | 0, 20 | 0) | 0;
         break label$18;
        }
        if (($260(72950 | 0, 0 | 0) | 0 | 0) >= (0 | 0)) {
         break label$18
        }
        $3_1 = -1;
        break label$1;
       }
       label$21 : {
        $3_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
        $6_1 = HEAP32[($3_1 + 128 | 0) >> 2] | 0;
        if (!$6_1) {
         break label$21
        }
        FUNCTION_TABLE[$6_1 | 0]($3_1, $4_1, $5_1, 1);
       }
       HEAP32[($5_1 + 60 | 0) >> 2] = $4_1;
       label$22 : {
        label$23 : {
         if ($1_1) {
          break label$23
         }
         $975($4_1 | 0, 5 | 0, HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
         break label$22;
        }
        $3_1 = $936($4_1 | 0) | 0;
        HEAP32[($4_1 + 116 | 0) >> 2] = 0;
        if (HEAP32[($4_1 + 124 | 0) >> 2] | 0) {
         break label$22
        }
        $975($4_1 | 0, 6 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
        if (($3_1 | 0) == (-1 | 0)) {
         break label$22
        }
        if (($3_1 | 0) == (HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0)) {
         break label$22
        }
        HEAP32[($4_1 + 56 | 0) >> 2] = $3_1;
        $975($4_1 | 0, 18 | 0, $3_1 | 0, 0 | 0) | 0;
       }
       label$24 : {
        if (($4_1 | 0) != ($473() | 0 | 0)) {
         break label$24
        }
        $484($2_1 + 56 | 0 | 0, $2_1 + 32 | 0 | 0) | 0;
        $486($4_1 | 0, HEAP32[($2_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 32 | 0) >> 2] | 0 | 0);
       }
       HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       break label$7;
      }
      $4_1 = HEAP32[($4_1 + 172 | 0) >> 2] | 0;
      if ($4_1) {
       continue label$12
      }
      break label$12;
     };
    }
    $3_1 = 0;
    $939($5_1 | 0, 0 | 0) | 0;
    label$25 : {
     $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
     $4_1 = HEAP32[($1_1 + 128 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$25
     }
     FUNCTION_TABLE[$4_1 | 0]($1_1, $0_1, $5_1, 0);
    }
    HEAP32[($5_1 + 60 | 0) >> 2] = 0;
    $951($0_1 | 0);
    $952($0_1 | 0);
    HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    break label$1;
   }
   $3_1 = 0;
  }
  global$0 = $2_1 + 80 | 0;
  return $3_1 | 0;
 }
 
 function $945($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($2_1) {
     break label$2
    }
    $0_1 = $260(73441 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     label$5 : {
      if (!(HEAP32[($2_1 + 540 | 0) >> 2] | 0)) {
       break label$5
      }
      if (!$0_1) {
       break label$4
      }
      label$6 : {
       if ($552($0_1 | 0, $2_1 + 544 | 0 | 0) | 0) {
        break label$6
       }
       $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
       break label$4;
      }
      $0_1 = $260(73921 | 0, 0 | 0) | 0;
      break label$1;
     }
     label$7 : {
      $3_1 = HEAP32[($2_1 + 200 | 0) >> 2] | 0;
      if ($3_1) {
       break label$7
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$1_1 >> 2] = 76355;
      $0_1 = $260(81596 | 0, $1_1 | 0) | 0;
      break label$1;
     }
     $0_1 = FUNCTION_TABLE[$3_1 | 0]($2_1, $0_1) | 0;
     $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
     if ($0_1) {
      break label$3
     }
    }
    HEAP32[($2_1 + 540 | 0) >> 2] = (HEAP32[($2_1 + 540 | 0) >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break label$1;
   }
   $3_1 = HEAP32[($2_1 + 208 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   FUNCTION_TABLE[$3_1 | 0]($2_1);
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $946($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if ($2_1) {
    break label$1
   }
   return $260(73441 | 0, 0 | 0) | 0 | 0;
  }
  label$2 : {
   if (($0_1 | 0) != ($845(HEAP32[($2_1 + 812 | 0) >> 2] | 0 | 0) | 0 | 0)) {
    break label$2
   }
   $2_1 = 0;
   label$3 : {
    label$4 : {
     $3_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
     if ($3_1) {
      break label$4
     }
     $260(73441 | 0, 0 | 0) | 0;
     break label$3;
    }
    $2_1 = $845(HEAP32[($3_1 + 816 | 0) >> 2] | 0 | 0) | 0;
   }
   if (($1_1 | 0) != ($2_1 | 0)) {
    break label$2
   }
   return 0 | 0;
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if ($1_1) {
      break label$7
     }
     $0_1 = 0;
     $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
     break label$6;
    }
    $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    label$8 : {
     if (!$0_1) {
      break label$8
     }
     label$9 : {
      if ($2_1) {
       break label$9
      }
      $260(73441 | 0, 0 | 0) | 0;
      return -1 | 0;
     }
     label$10 : {
      if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($2_1 + 408 | 0 | 0)) {
       break label$10
      }
      $260(66102 | 0, 0 | 0) | 0;
      return -1 | 0;
     }
     if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 2 | 0) {
      break label$6
     }
     return $260(66117 | 0, 0 | 0) | 0 | 0;
    }
    $0_1 = 0;
    if (HEAP32[($2_1 + 820 | 0) >> 2] | 0) {
     break label$6
    }
    $2_1 = $260(70774 | 0, 0 | 0) | 0;
    break label$5;
   }
   $2_1 = FUNCTION_TABLE[HEAP32[($2_1 + 216 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0;
   if ($2_1) {
    break label$5
   }
   $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   HEAP32[($2_1 + 808 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 804 | 0) >> 2] = $0_1;
   $846(HEAP32[($2_1 + 812 | 0) >> 2] | 0 | 0, $0_1 | 0, 0 | 0) | 0;
   $846(HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 816 | 0) >> 2] | 0 | 0, $1_1 | 0, 0 | 0) | 0;
   return 0 | 0;
  }
  return $2_1 | 0;
 }
 
 function $947($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
     if ($2_1) {
      break label$3
     }
     $260(73441 | 0, 0 | 0) | 0;
     break label$2;
    }
    label$4 : {
     label$5 : {
      if (!$0_1) {
       break label$5
      }
      if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($2_1 + 408 | 0 | 0)) {
       break label$4
      }
     }
     $260(66102 | 0, 0 | 0) | 0;
     break label$2;
    }
    $2_1 = 0;
    $3_1 = $1_1 & 4097 | 0;
    $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    $5_1 = $4_1 & 4097 | 0;
    if (($3_1 | 0) == ($5_1 | 0)) {
     break label$1
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1 & -4098 | 0 | $3_1 | 0;
    if (!($944($0_1 | 0, (((($4_1 ^ -1 | 0) >>> 6 | 0) & ($4_1 >>> 2 | 0) | 0) & $1_1 | 0) & 1 | 0 | 0) | 0)) {
     break label$1
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = (HEAP32[($0_1 + 48 | 0) >> 2] | 0) & -4098 | 0 | $5_1 | 0;
   }
   $2_1 = -1;
  }
  return $2_1 | 0;
 }
 
 function $948($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if ($2_1) {
    break label$1
   }
   $260(73441 | 0, 0 | 0) | 0;
   return;
  }
  label$2 : {
   label$3 : {
    if (!$0_1) {
     break label$3
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($2_1 + 408 | 0 | 0)) {
     break label$2
    }
   }
   $260(66102 | 0, 0 | 0) | 0;
   return;
  }
  label$4 : {
   $2_1 = ($1_1 | 0) != (0 | 0);
   $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if ($2_1 ^ !($3_1 & 256 | 0) | 0) {
    break label$4
   }
   HEAP32[($0_1 + 48 | 0) >> 2] = $3_1 & -257 | 0 | ($2_1 << 8 | 0) | 0;
   $949($0_1 | 0);
  }
  label$5 : {
   if (!($383(77213 | 0, 0 | 0) | 0)) {
    break label$5
   }
   label$6 : {
    $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($2_1) {
     break label$6
    }
    $260(73441 | 0, 0 | 0) | 0;
    return;
   }
   label$7 : {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($2_1 + 408 | 0 | 0)) {
     break label$7
    }
    $260(66102 | 0, 0 | 0) | 0;
    return;
   }
   $2_1 = ($1_1 | 0) != (0 | 0);
   $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if ($2_1 ^ !($1_1 & 1048576 | 0) | 0) {
    break label$5
   }
   HEAP32[($0_1 + 48 | 0) >> 2] = $1_1 & -1048577 | 0 | ($2_1 << 20 | 0) | 0;
   $949($0_1 | 0);
  }
 }
 
 function $949($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $4_1 = 0, $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = 0;
  $2_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!((HEAPU8[($0_1 + 49 | 0) >> 0] | 0) & 2 | 0)) {
    break label$1
   }
   $4_1 = $470() | 0;
   $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $3_1 = HEAP32[($4_1 + 84 | 0) >> 2] | 0 ? 1 : ($5_1 >>> 8 | 0) & 1 | 0;
   $1_1 = ($5_1 & 1048576 | 0) >>> 20 | 0;
   $2_1 = $1_1;
  }
  $4_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
  $5_1 = HEAP32[($4_1 + 404 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     if ($1_1) {
      break label$4
     }
     if (!$3_1) {
      break label$3
     }
    }
    label$5 : {
     if (!$5_1) {
      break label$5
     }
     if (($5_1 | 0) == ($0_1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 48 | 0) >> 2] = (HEAP32[($5_1 + 48 | 0) >> 2] | 0) & -1048833 | 0;
     label$6 : {
      $1_1 = HEAP32[($4_1 + 152 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$6
      }
      FUNCTION_TABLE[$1_1 | 0]($4_1, $5_1, 0);
      $4_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
     }
     $5_1 = HEAP32[($4_1 + 156 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$5
     }
     FUNCTION_TABLE[$5_1 | 0]($4_1, HEAP32[($4_1 + 404 | 0) >> 2] | 0, 0);
     $4_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 404 | 0) >> 2] = $0_1;
    break label$2;
   }
   if (($5_1 | 0) != ($0_1 | 0)) {
    break label$2
   }
   HEAP32[($4_1 + 404 | 0) >> 2] = 0;
  }
  label$7 : {
   $5_1 = HEAP32[($4_1 + 152 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$7
   }
   FUNCTION_TABLE[$5_1 | 0]($4_1, $0_1, $3_1);
   $4_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
  }
  label$8 : {
   $5_1 = HEAP32[($4_1 + 156 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$8
   }
   FUNCTION_TABLE[$5_1 | 0]($4_1, $0_1, $2_1);
  }
 }
 
 function $950($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if ($1_1) {
    break label$1
   }
   $260(73441 | 0, 0 | 0) | 0;
   return;
  }
  label$2 : {
   label$3 : {
    if (!$0_1) {
     break label$3
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($1_1 + 408 | 0 | 0)) {
     break label$2
    }
   }
   $260(66102 | 0, 0 | 0) | 0;
   return;
  }
  label$4 : {
   if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 64 | 0) {
    break label$4
   }
   $2_1 = HEAP32[($1_1 + 108 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$4
   }
   label$5 : {
    if ((HEAPU8[($1_1 + 428 | 0) >> 0] | 0) & 2 | 0) {
     break label$5
    }
    $944($0_1 | 0, 0 | 0) | 0;
    $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    $2_1 = HEAP32[($1_1 + 108 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$4
    }
   }
   FUNCTION_TABLE[$2_1 | 0]($1_1, $0_1);
  }
 }
 
 function $951($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $936($0_1 | 0) | 0;
  HEAP32[($0_1 + 116 | 0) >> 2] = 0;
  label$1 : {
   if (HEAP32[($0_1 + 124 | 0) >> 2] | 0) {
    break label$1
   }
   $975($0_1 | 0, 6 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) | 0;
   if (($1_1 | 0) == (-1 | 0)) {
    break label$1
   }
   if (($1_1 | 0) == (HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
   $975($0_1 | 0, 18 | 0, $1_1 | 0, 0 | 0) | 0;
  }
 }
 
 function $952($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (($0_1 | 0) != ($473() | 0 | 0)) {
    break label$1
   }
   $484($1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0) | 0;
   $486($0_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $953() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $0_1 = (HEAP32[($1_1 + 400 | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $954($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if ($1_1) {
    break label$1
   }
   $260(73441 | 0, 0 | 0) | 0;
   return 0 | 0;
  }
  label$2 : {
   label$3 : {
    if (!$0_1) {
     break label$3
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($1_1 + 408 | 0 | 0)) {
     break label$2
    }
   }
   $260(66102 | 0, 0 | 0) | 0;
   return 0 | 0;
  }
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $955($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $3_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if ($3_1) {
    break label$1
   }
   $260(73441 | 0, 0 | 0) | 0;
   return;
  }
  label$2 : {
   label$3 : {
    if (!$0_1) {
     break label$3
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($3_1 + 408 | 0 | 0)) {
     break label$2
    }
   }
   $260(66102 | 0, 0 | 0) | 0;
   return;
  }
  label$4 : {
   if (!$1_1) {
    break label$4
   }
   HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  }
  label$5 : {
   if (!$2_1) {
    break label$5
   }
   HEAP32[$2_1 >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  }
 }
 
 function $956($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($4_1) {
     break label$2
    }
    $260(73441 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!$0_1) {
      break label$4
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($4_1 + 408 | 0 | 0)) {
      break label$3
     }
    }
    $260(66102 | 0, 0 | 0) | 0;
    break label$1;
   }
   $2_1 = $2_1 ? $2_1 : $3_1 + 12 | 0;
   $1_1 = $1_1 ? $1_1 : $3_1 + 12 | 0;
   label$5 : {
    $5_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$5
    }
    FUNCTION_TABLE[$5_1 | 0]($4_1, $0_1, $1_1, $2_1);
    break label$1;
   }
   HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $957($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if ($1_1) {
    break label$1
   }
   $260(73441 | 0, 0 | 0) | 0;
   return 0 | 0;
  }
  label$2 : {
   label$3 : {
    if (!$0_1) {
     break label$3
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($1_1 + 408 | 0 | 0)) {
     break label$2
    }
   }
   $260(66102 | 0, 0 | 0) | 0;
   return 0 | 0;
  }
  label$4 : {
   if ((HEAP32[($0_1 + 140 | 0) >> 2] | 0 | 0) >= (1 | 0)) {
    break label$4
   }
   return 0 | 0;
  }
  return ((HEAP32[($0_1 + 144 | 0) >> 2] | 0 | 0) > (0 | 0) ? $0_1 + 132 | 0 : 0) | 0;
 }
 
 function $958($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (((HEAP32[($0_1 + 48 | 0) >> 2] | 0) & 69 | 0 | 0) != (5 | 0)) {
    break label$1
   }
   $944($0_1 | 0, 1 | 0) | 0;
  }
 }
 
 function $959($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (((HEAP32[($0_1 + 48 | 0) >> 2] | 0) & 69 | 0 | 0) != (5 | 0)) {
    break label$1
   }
   $944($0_1 | 0, 1 | 0) | 0;
  }
 }
 
 function $960($0_1) {
  $0_1 = $0_1 | 0;
  $944($0_1 | 0, 0 | 0) | 0;
 }
 
 function $961($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $936($0_1 | 0) | 0;
  label$1 : {
   if (HEAP32[($0_1 + 124 | 0) >> 2] | 0) {
    break label$1
   }
   if (($1_1 | 0) == (-1 | 0)) {
    break label$1
   }
   if (($1_1 | 0) == (HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
   $975($0_1 | 0, 18 | 0, $1_1 | 0, 0 | 0) | 0;
  }
 }
 
 function $962($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 428 | 0) >> 0] | 0) & 2 | 0) {
    break label$1
   }
   $944($0_1 | 0, 0 | 0) | 0;
  }
 }
 
 function $963($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   $2_1 = HEAP32[($1_1 + 176 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[$2_1 | 0]($1_1, $0_1);
  }
 }
 
 function $964($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $965($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = $470() | 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   $4_1 = HEAP32[($3_1 + 132 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   FUNCTION_TABLE[$4_1 | 0]($3_1, $0_1, $2_1) | 0;
  }
  label$2 : {
   if (!$1_1) {
    break label$2
   }
   if (!(HEAP32[($1_1 + 84 | 0) >> 2] | 0)) {
    break label$2
   }
   $474($0_1 | 0);
   if (!(HEAP32[($1_1 + 88 | 0) >> 2] | 0)) {
    break label$2
   }
   $485($0_1 | 0, (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) / (2 | 0) | 0 | 0, (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) / (2 | 0) | 0 | 0, 1 | 0);
  }
  $949($0_1 | 0);
 }
 
 function $966($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   $2_1 = HEAP32[($1_1 + 132 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[$2_1 | 0]($1_1, $0_1, HEAP32[($0_1 + 108 | 0) >> 2] | 0) | 0;
  }
  $949($0_1 | 0);
  label$2 : {
   if (!((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 1 | 0)) {
    break label$2
   }
   if (HEAP32[($0_1 + 124 | 0) >> 2] | 0) {
    break label$2
   }
   label$3 : {
    label$4 : {
     label$5 : {
      $1_1 = $381(75326 | 0) | 0;
      if (!$1_1) {
       break label$5
      }
      if (!(HEAPU8[$1_1 >> 0] | 0)) {
       break label$5
      }
      if ($554($1_1 | 0, 70478 | 0) | 0) {
       break label$4
      }
     }
     if (((HEAP32[($0_1 + 48 | 0) >> 2] | 0) & 4097 | 0 | 0) == (4097 | 0)) {
      break label$2
     }
     $1_1 = ((HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 428 | 0) >> 2] | 0) ^ -1 | 0) & 1 | 0;
     break label$3;
    }
    $1_1 = $383(75326 | 0, 0 | 0) | 0;
   }
   if (!$1_1) {
    break label$2
   }
   label$6 : {
    $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($1_1) {
     break label$6
    }
    $260(73441 | 0, 0 | 0) | 0;
    return;
   }
   label$7 : {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($1_1 + 408 | 0 | 0)) {
     break label$7
    }
    $260(66102 | 0, 0 | 0) | 0;
    return;
   }
   if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 64 | 0) {
    break label$2
   }
   $2_1 = HEAP32[($1_1 + 108 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$2
   }
   label$8 : {
    if ((HEAPU8[($1_1 + 428 | 0) >> 0] | 0) & 2 | 0) {
     break label$8
    }
    $944($0_1 | 0, 0 | 0) | 0;
    $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    $2_1 = HEAP32[($1_1 + 108 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
   }
   FUNCTION_TABLE[$2_1 | 0]($1_1, $0_1);
  }
 }
 
 function $967($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $1_1 = 0, $5_1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   if ($544($0_1 | 0, 32 | 0) | 0) {
    break label$1
   }
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = $378($0_1 | 0) | 0;
    if (!$3_1) {
     break label$2
    }
    if ((HEAPU8[$3_1 >> 0] | 0 | 0) == (48 | 0)) {
     break label$1
    }
   }
   $2_1 = 0;
   label$3 : {
    $3_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($3_1) {
     break label$3
    }
    $260(73441 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$4 : {
    label$5 : {
     $4_1 = HEAP32[($3_1 + 204 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$5
     }
     if (HEAP32[($3_1 + 540 | 0) >> 2] | 0) {
      break label$4
     }
     $2_1 = 0;
     $260(73951 | 0, 0 | 0) | 0;
     break label$1;
    }
    HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
    $260(81651 | 0, $1_1 | 0) | 0;
    $2_1 = 0;
    break label$1;
   }
   $2_1 = 0;
   $3_1 = FUNCTION_TABLE[$4_1 | 0]($3_1, 71867) | 0;
   if (!$3_1) {
    break label$1
   }
   label$6 : {
    $4_1 = FUNCTION_TABLE[$3_1 | 0](7938) | 0;
    if (!$4_1) {
     break label$6
    }
    if (($549($4_1 | 0) | 0 | 0) < (3 | 0)) {
     break label$6
    }
    $4_1 = 0;
    HEAP32[($1_1 + 44 | 0) >> 2] = 0;
    label$7 : {
     label$8 : {
      $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
      if ($2_1) {
       break label$8
      }
      $260(73441 | 0, 0 | 0) | 0;
      break label$7;
     }
     label$9 : {
      $3_1 = HEAP32[($2_1 + 204 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$9
      }
      label$10 : {
       if (!(HEAP32[($2_1 + 540 | 0) >> 2] | 0)) {
        break label$10
       }
       $4_1 = FUNCTION_TABLE[$3_1 | 0]($2_1, 71538) | 0;
       break label$7;
      }
      $4_1 = 0;
      $260(73951 | 0, 0 | 0) | 0;
      break label$7;
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
     $260(81651 | 0, $1_1 + 32 | 0 | 0) | 0;
     $4_1 = 0;
    }
    $2_1 = 0;
    label$11 : {
     $3_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
     if ($3_1) {
      break label$11
     }
     $260(73441 | 0, 0 | 0) | 0;
     break label$1;
    }
    label$12 : {
     label$13 : {
      $5_1 = HEAP32[($3_1 + 204 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$13
      }
      if (HEAP32[($3_1 + 540 | 0) >> 2] | 0) {
       break label$12
      }
      $2_1 = 0;
      $260(73951 | 0, 0 | 0) | 0;
      break label$1;
     }
     HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
     $260(81651 | 0, $1_1 + 16 | 0 | 0) | 0;
     $2_1 = 0;
     break label$1;
    }
    $2_1 = 0;
    $3_1 = FUNCTION_TABLE[$5_1 | 0]($3_1, 66228) | 0;
    if (!$4_1) {
     break label$1
    }
    if (!$3_1) {
     break label$1
    }
    FUNCTION_TABLE[$3_1 | 0](33309, $1_1 + 44 | 0);
    $2_1 = 0;
    if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) <= (0 | 0)) {
     break label$1
    }
    $3_1 = 0;
    label$14 : {
     label$15 : while (1) {
      if (!($552(FUNCTION_TABLE[$4_1 | 0](7939, $3_1) | 0 | 0, $0_1 | 0) | 0)) {
       break label$14
      }
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) >= (HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      continue label$15;
     };
    }
    $2_1 = 1;
    break label$1;
   }
   $5_1 = FUNCTION_TABLE[$3_1 | 0](7939) | 0;
   if (!$5_1) {
    break label$1
   }
   $3_1 = $545($5_1 | 0, $0_1 | 0) | 0;
   if (!$3_1) {
    break label$1
   }
   label$16 : while (1) {
    $4_1 = $3_1 + ($539($0_1 | 0) | 0) | 0;
    label$17 : {
     label$18 : {
      if (($3_1 | 0) == ($5_1 | 0)) {
       break label$18
      }
      if ((HEAPU8[($3_1 + -1 | 0) >> 0] | 0 | 0) != (32 | 0)) {
       break label$17
      }
     }
     if ((HEAPU8[$4_1 >> 0] | 0 | 32 | 0 | 0) != (32 | 0)) {
      break label$17
     }
     $2_1 = 1;
     break label$1;
    }
    $3_1 = $545($4_1 | 0, $0_1 | 0) | 0;
    if ($3_1) {
     continue label$16
    }
    break label$16;
   };
  }
  global$0 = $1_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $968($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $1_1 = $260(73441 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    switch ($0_1 | 0) {
    case 0:
     HEAP32[($3_1 + 432 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 1:
     HEAP32[($3_1 + 436 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 2:
     HEAP32[($3_1 + 440 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 3:
     HEAP32[($3_1 + 444 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 5:
     HEAP32[($3_1 + 460 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 4:
     HEAP32[($3_1 + 452 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 6:
     HEAP32[($3_1 + 448 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 7:
     HEAP32[($3_1 + 456 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 8:
     HEAP32[($3_1 + 464 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 9:
     HEAP32[($3_1 + 468 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 10:
     HEAP32[($3_1 + 472 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 11:
     HEAP32[($3_1 + 476 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 12:
     HEAP32[($3_1 + 480 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 13:
     HEAP32[($3_1 + 484 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 14:
     HEAP32[($3_1 + 488 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 27:
     HEAP32[($3_1 + 492 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 15:
     HEAP32[($3_1 + 496 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 16:
     HEAP32[($3_1 + 536 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 17:
     HEAP32[($3_1 + 500 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 18:
     HEAP32[($3_1 + 504 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 19:
     label$32 : {
      if (!$1_1) {
       break label$32
      }
      HEAP32[($3_1 + 512 | 0) >> 2] = 4;
      $1_1 = 0;
      break label$1;
     }
     $1_1 = 0;
     HEAP32[($3_1 + 512 | 0) >> 2] = 0;
     break label$1;
    case 20:
     label$33 : {
      if ($1_1 >>> 0 < 16 >>> 0) {
       break label$33
      }
      HEAP32[$2_1 >> 2] = $1_1;
      $1_1 = $260(74215 | 0, $2_1 | 0) | 0;
      break label$1;
     }
     HEAP32[($3_1 + 508 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 21:
     label$34 : {
      label$35 : {
       if ($1_1 >>> 0 > 4 >>> 0) {
        break label$35
       }
       if (($1_1 | 0) != (3 | 0)) {
        break label$34
       }
      }
      HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
      $1_1 = $260(74246 | 0, $2_1 + 16 | 0 | 0) | 0;
      break label$1;
     }
     HEAP32[($3_1 + 512 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 22:
     HEAP32[($3_1 + 516 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 23:
     HEAP32[($3_1 + 528 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 24:
     HEAP32[($3_1 + 520 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 25:
     HEAP32[($3_1 + 524 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    case 26:
     HEAP32[($3_1 + 532 | 0) >> 2] = $1_1;
     $1_1 = 0;
     break label$1;
    default:
     break label$3;
    };
   }
   $1_1 = $260(72396 | 0, 0 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $969($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if ($1_1) {
    break label$1
   }
   $260(73441 | 0, 0 | 0) | 0;
   return 0 | 0;
  }
  label$2 : {
   label$3 : {
    if (!$0_1) {
     break label$3
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($1_1 + 408 | 0 | 0)) {
     break label$2
    }
   }
   $260(66102 | 0, 0 | 0) | 0;
   return 0 | 0;
  }
  label$4 : {
   if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 2 | 0) {
    break label$4
   }
   $260(66117 | 0, 0 | 0) | 0;
   return 0 | 0;
  }
  label$5 : {
   $1_1 = FUNCTION_TABLE[HEAP32[($1_1 + 212 | 0) >> 2] | 0 | 0]($1_1, $0_1) | 0;
   if ($1_1) {
    break label$5
   }
   return 0 | 0;
  }
  $2_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
  HEAP32[($2_1 + 808 | 0) >> 2] = $1_1;
  HEAP32[($2_1 + 804 | 0) >> 2] = $0_1;
  $846(HEAP32[($2_1 + 812 | 0) >> 2] | 0 | 0, $0_1 | 0, 0 | 0) | 0;
  $846(HEAP32[((HEAP32[(0 + 131072 | 0) >> 2] | 0) + 816 | 0) >> 2] | 0 | 0, $1_1 | 0, 0 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $970() {
  var $0_1 = 0;
  label$1 : {
   $0_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if ($0_1) {
    break label$1
   }
   $260(73441 | 0, 0 | 0) | 0;
   return 0 | 0;
  }
  return $845(HEAP32[($0_1 + 816 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $971($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if ($1_1) {
    break label$1
   }
   return $260(73441 | 0, 0 | 0) | 0 | 0;
  }
  label$2 : {
   if ($845(HEAP32[($1_1 + 816 | 0) >> 2] | 0 | 0) | 0) {
    break label$2
   }
   return $260(67258 | 0, 0 | 0) | 0 | 0;
  }
  label$3 : {
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   $2_1 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$3
   }
   return FUNCTION_TABLE[$2_1 | 0]($1_1, $0_1) | 0 | 0;
  }
  return $260(73566 | 0, 0 | 0) | 0 | 0;
 }
 
 function $972($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
   if ($1_1) {
    break label$1
   }
   $260(73441 | 0, 0 | 0) | 0;
   return -1 | 0;
  }
  label$2 : {
   label$3 : {
    if (!$0_1) {
     break label$3
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($1_1 + 408 | 0 | 0)) {
     break label$2
    }
   }
   $260(66102 | 0, 0 | 0) | 0;
   return -1 | 0;
  }
  label$4 : {
   if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 2 | 0) {
    break label$4
   }
   return $260(66117 | 0, 0 | 0) | 0 | 0;
  }
  label$5 : {
   if (($845(HEAP32[($1_1 + 812 | 0) >> 2] | 0 | 0) | 0 | 0) == ($0_1 | 0)) {
    break label$5
   }
   return $260(67211 | 0, 0 | 0) | 0 | 0;
  }
  $1_1 = HEAP32[(0 + 131072 | 0) >> 2] | 0;
  return FUNCTION_TABLE[HEAP32[($1_1 + 232 | 0) >> 2] | 0 | 0]($1_1, $0_1) | 0 | 0;
 }
 
 function $973($0_1) {
  $0_1 = $0_1 | 0;
  $972($0_1 | 0) | 0;
 }
 
 function $974() {
  return $259(131076 | 0) | 0 | 0;
 }
 
 function $975($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     switch ($1_1 + -1 | 0 | 0) {
     case 0:
      $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if ($6_1 & 4 | 0) {
       break label$1
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $6_1 & -77 | 0 | 4 | 0;
      $958($0_1 | 0);
      break label$2;
     case 1:
      $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if (!($6_1 & 4 | 0)) {
       break label$1
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $6_1 & -13 | 0 | 8 | 0;
      $960($0_1 | 0);
      break label$2;
     case 3:
      if (($2_1 & -65536 | 0 | 0) == (536805376 | 0)) {
       break label$1
      }
      if (($3_1 & -65536 | 0 | 0) == (536805376 | 0)) {
       break label$1
      }
      label$14 : {
       if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 1 | 0) {
        break label$14
       }
       HEAP32[($0_1 + 64 | 0) >> 2] = $3_1;
       HEAP32[($0_1 + 60 | 0) >> 2] = $2_1;
      }
      label$15 : {
       if (($2_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
        break label$15
       }
       if (($3_1 | 0) == (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
        break label$1
       }
      }
      HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($0_1 + 16 | 0) >> 2] = $2_1;
      $961($0_1 | 0);
      break label$2;
     case 4:
      label$16 : {
       if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 1 | 0) {
        break label$16
       }
       HEAP32[($0_1 + 72 | 0) >> 2] = $3_1;
       HEAP32[($0_1 + 68 | 0) >> 2] = $2_1;
      }
      label$17 : {
       if (($2_1 | 0) != (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0)) {
        break label$17
       }
       if (($3_1 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
        break label$1
       }
      }
      HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $2_1;
      $951($0_1 | 0);
      break label$2;
     case 6:
      $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if ($6_1 & 64 | 0) {
       break label$1
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $6_1 & -193 | 0 | 64 | 0;
      $962($0_1 | 0);
      break label$2;
     case 7:
      $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if ($6_1 & 128 | 0) {
       break label$1
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $6_1 & -193 | 0 | 128 | 0;
      break label$2;
     case 8:
      $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if (!($6_1 & 192 | 0)) {
       break label$1
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $6_1 & -193 | 0;
      $959($0_1 | 0);
      break label$2;
     case 9:
      $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if ($6_1 & 1024 | 0) {
       break label$1
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $6_1 | 1024 | 0;
      $963($0_1 | 0);
      break label$2;
     case 10:
      $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if (!($6_1 & 1024 | 0)) {
       break label$1
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $6_1 & -1025 | 0;
      $964($0_1 | 0);
      break label$2;
     case 11:
      $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if ($6_1 & 512 | 0) {
       break label$1
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $6_1 | 512 | 0;
      $965($0_1 | 0);
      break label$2;
     case 12:
      break label$3;
     default:
      break label$2;
     };
    }
    $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!($6_1 & 512 | 0)) {
     break label$1
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = $6_1 & -513 | 0;
    $966($0_1 | 0);
   }
   $5_1 = 0;
   label$18 : {
    label$19 : {
     if (($321(512 | 0, -1 | 0) | 0 | 0) != (1 | 0)) {
      break label$19
     }
     HEAP32[($4_1 + 28 | 0) >> 2] = $3_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
     HEAP32[($4_1 + 8 | 0) >> 2] = 512;
     HEAP8[($4_1 + 20 | 0) >> 0] = $1_1;
     HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     label$20 : {
      label$21 : {
       switch ($1_1 + -3 | 0 | 0) {
       case 3:
        HEAP32[($4_1 + 4 | 0) >> 2] = 0;
        HEAP32[$4_1 >> 2] = $4_1 + 8 | 0;
        $333(363 | 0, $4_1 | 0);
        if (!(HEAP32[($4_1 + 4 | 0) >> 2] | 0)) {
         break label$20
        }
        HEAP8[($4_1 + 20 | 0) >> 0] = 5;
        if (($327($4_1 + 8 | 0 | 0) | 0 | 0) < (1 | 0)) {
         break label$18
        }
        HEAP8[($4_1 + 20 | 0) >> 0] = 6;
        break label$20;
       case 1:
        $333(364 | 0, $4_1 + 8 | 0 | 0);
        break label$20;
       case 0:
        break label$21;
       default:
        break label$20;
       };
      }
      $333(365 | 0, $4_1 + 8 | 0 | 0);
     }
     $5_1 = ($327($4_1 + 8 | 0 | 0) | 0 | 0) > (0 | 0);
    }
    if (($1_1 | 0) != (14 | 0)) {
     break label$1
    }
    if (HEAP32[($0_1 + 168 | 0) >> 2] | 0) {
     break label$1
    }
    if (HEAP32[($0_1 + 172 | 0) >> 2] | 0) {
     break label$1
    }
    if (!($383(76711 | 0, 1 | 0) | 0)) {
     break label$1
    }
    $491() | 0;
    break label$1;
   }
   $5_1 = 0;
  }
  global$0 = $4_1 + 64 | 0;
  return $5_1 | 0;
 }
 
 function $976($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = 1;
  label$1 : {
   if ((HEAP32[$1_1 >> 2] | 0 | 0) != (512 | 0)) {
    break label$1
   }
   $2_1 = 1;
   $3_1 = HEAPU8[($1_1 + 12 | 0) >> 0] | 0;
   if ((($3_1 + -5 | 0) & 255 | 0) >>> 0 > 1 >>> 0) {
    break label$1
   }
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $2_1 = 0;
   if (($3_1 & 255 | 0 | 0) != (5 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = 1;
  }
  return $2_1 | 0;
 }
 
 function $977($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[$1_1 >> 2] | 0 | 0) != (512 | 0)) {
     break label$2
    }
    if ((HEAPU8[($1_1 + 12 | 0) >> 0] | 0 | 0) != (4 | 0)) {
     break label$2
    }
    $2_1 = 0;
    if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   $2_1 = 1;
  }
  return $2_1 | 0;
 }
 
 function $978($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[$1_1 >> 2] | 0 | 0) != (512 | 0)) {
     break label$2
    }
    if ((HEAPU8[($1_1 + 12 | 0) >> 0] | 0 | 0) != (3 | 0)) {
     break label$2
    }
    $2_1 = 0;
    if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   $2_1 = 1;
  }
  return $2_1 | 0;
 }
 
 function $979($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $3_1 = $381(76829 | 0) | 0;
      if (!$3_1) {
       break label$4
      }
      HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($2_1 + 20 | 0) >> 2] = $1_1;
      $556($2_1 + 32 | 0 | 0, 32 | 0, 78182 | 0, $2_1 + 16 | 0 | 0) | 0;
      $4_1 = $545($3_1 | 0, $2_1 + 32 | 0 | 0) | 0;
      if ($4_1) {
       break label$3
      }
      HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
      HEAP32[$2_1 >> 2] = $0_1;
      $556($2_1 + 32 | 0 | 0, 32 | 0, 78197 | 0, $2_1 | 0) | 0;
      $4_1 = $545($3_1 | 0, $2_1 + 32 | 0 | 0) | 0;
      if ($4_1) {
       break label$3
      }
     }
     $0_1 = $0_1 << 16 | 0 | $1_1 | 0;
     $3_1 = 0;
     label$5 : while (1) {
      $4_1 = Math_imul($3_1, 12);
      $1_1 = $4_1 + 100960 | 0;
      if (($0_1 | 0) == (HEAP32[$1_1 >> 2] | 0 | 0)) {
       break label$2
      }
      $1_1 = $4_1 + 100972 | 0;
      if (($0_1 | 0) == (HEAP32[$1_1 >> 2] | 0 | 0)) {
       break label$2
      }
      $1_1 = $4_1 + 100984 | 0;
      if (($0_1 | 0) == (HEAP32[$1_1 >> 2] | 0 | 0)) {
       break label$2
      }
      $3_1 = $3_1 + 3 | 0;
      if (($3_1 | 0) != (522 | 0)) {
       continue label$5
      }
      break label$5;
     };
     $0_1 = 30;
     break label$1;
    }
    $0_1 = $4_1 + ($539($2_1 + 32 | 0 | 0) | 0) | 0;
    label$6 : {
     $0_1 = $0_1 + ($553($0_1 | 0, 74441 | 0, 18 | 0) | 0 ? 0 : 18) | 0;
     if ($546($0_1 | 0, 78283 | 0, 7 | 0) | 0) {
      break label$6
     }
     $0_1 = 31;
     break label$1;
    }
    label$7 : {
     if ($546($0_1 | 0, 72654 | 0, 7 | 0) | 0) {
      break label$7
     }
     $0_1 = 32;
     break label$1;
    }
    label$8 : {
     if ($546($0_1 | 0, 78257 | 0, 3 | 0) | 0) {
      break label$8
     }
     $0_1 = 33;
     break label$1;
    }
    label$9 : {
     if ($546($0_1 | 0, 78245 | 0, 3 | 0) | 0) {
      break label$9
     }
     $0_1 = 34;
     break label$1;
    }
    label$10 : {
     if ($546($0_1 | 0, 78233 | 0, 3 | 0) | 0) {
      break label$10
     }
     $0_1 = 45;
     break label$1;
    }
    label$11 : {
     if ($546($0_1 | 0, 70494 | 0, 9 | 0) | 0) {
      break label$11
     }
     $0_1 = 38;
     break label$1;
    }
    $0_1 = $546($0_1 | 0, 71070 | 0, 5 | 0) | 0 ? 30 : 2;
    break label$1;
   }
   $0_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  }
  global$0 = $2_1 + 64 | 0;
  return $0_1 | 0;
 }
 
 function $980($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $0_1 = $0_1 << 16 | 0 | $1_1 | 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = Math_imul($2_1, 12);
    $1_1 = $3_1 + 100960 | 0;
    if (($0_1 | 0) == (HEAP32[$1_1 >> 2] | 0 | 0)) {
     break label$1
    }
    $1_1 = $3_1 + 100972 | 0;
    if (($0_1 | 0) == (HEAP32[$1_1 >> 2] | 0 | 0)) {
     break label$1
    }
    $1_1 = $3_1 + 100984 | 0;
    if (($0_1 | 0) == (HEAP32[$1_1 >> 2] | 0 | 0)) {
     break label$1
    }
    $2_1 = $2_1 + 3 | 0;
    if (($2_1 | 0) != (522 | 0)) {
     continue label$2
    }
    break label$2;
   };
   return 0 | 0;
  }
  return HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $981($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $0_1 = $1080($1146(($1083($0_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $0_1 | 0) | 0;
   $1_1 = $1088($0_1 | 0, 74891 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP8[$1_1 >> 0] = 0;
  }
  label$2 : {
   $1_1 = $1088($0_1 | 0, 78156 | 0) | 0;
   if (!$1_1) {
    break label$2
   }
   HEAP8[$1_1 >> 0] = 0;
  }
  label$3 : {
   $1_1 = $1088($0_1 | 0, 75600 | 0) | 0;
   if (!$1_1) {
    break label$3
   }
   HEAP8[$1_1 >> 0] = 0;
  }
  label$4 : {
   $1_1 = $1088($0_1 | 0, 77018 | 0) | 0;
   if (!$1_1) {
    break label$4
   }
   HEAP8[$1_1 >> 0] = 0;
  }
  label$5 : {
   $1_1 = $1088($0_1 | 0, 76419 | 0) | 0;
   if (!$1_1) {
    break label$5
   }
   HEAP8[$1_1 >> 0] = 0;
  }
  label$6 : {
   $1_1 = $984($0_1 | 0) | 0;
   if ($1_1) {
    break label$6
   }
   $1_1 = $983($0_1 | 0) | 0;
  }
  $1148($0_1 | 0);
  return $1_1 | 0;
 }
 
 function $982($0_1) {
  $0_1 = $0_1 | 0;
  return $981($0_1 | 0) | 0 | 0;
 }
 
 function $983($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($1078($0_1 | 0, 68485 | 0) | 0) {
    break label$1
   }
   return 366 | 0;
  }
  label$2 : {
   if ($1078($0_1 | 0, 68498 | 0) | 0) {
    break label$2
   }
   return 367 | 0;
  }
  label$3 : {
   if ($1078($0_1 | 0, 65629 | 0) | 0) {
    break label$3
   }
   return 368 | 0;
  }
  label$4 : {
   if ($1078($0_1 | 0, 65639 | 0) | 0) {
    break label$4
   }
   return 369 | 0;
  }
  label$5 : {
   if ($1078($0_1 | 0, 65652 | 0) | 0) {
    break label$5
   }
   return 370 | 0;
  }
  label$6 : {
   if ($1078($0_1 | 0, 68981 | 0) | 0) {
    break label$6
   }
   return 371 | 0;
  }
  label$7 : {
   if ($1078($0_1 | 0, 66256 | 0) | 0) {
    break label$7
   }
   return 372 | 0;
  }
  label$8 : {
   if ($1078($0_1 | 0, 66289 | 0) | 0) {
    break label$8
   }
   return 373 | 0;
  }
  label$9 : {
   if ($1078($0_1 | 0, 66269 | 0) | 0) {
    break label$9
   }
   return 374 | 0;
  }
  label$10 : {
   if ($1078($0_1 | 0, 66826 | 0) | 0) {
    break label$10
   }
   return 375 | 0;
  }
  label$11 : {
   if ($1078($0_1 | 0, 66804 | 0) | 0) {
    break label$11
   }
   return 376 | 0;
  }
  label$12 : {
   if ($1078($0_1 | 0, 65752 | 0) | 0) {
    break label$12
   }
   return 377 | 0;
  }
  label$13 : {
   if ($1078($0_1 | 0, 67818 | 0) | 0) {
    break label$13
   }
   return 378 | 0;
  }
  label$14 : {
   if ($1078($0_1 | 0, 67800 | 0) | 0) {
    break label$14
   }
   return 379 | 0;
  }
  label$15 : {
   if ($1078($0_1 | 0, 65736 | 0) | 0) {
    break label$15
   }
   return 380 | 0;
  }
  label$16 : {
   if ($1078($0_1 | 0, 68225 | 0) | 0) {
    break label$16
   }
   return 381 | 0;
  }
  label$17 : {
   if ($1078($0_1 | 0, 73980 | 0) | 0) {
    break label$17
   }
   return 382 | 0;
  }
  label$18 : {
   if ($1078($0_1 | 0, 74002 | 0) | 0) {
    break label$18
   }
   return 383 | 0;
  }
  return ($1078($0_1 | 0, 68783 | 0) | 0 ? 0 : 384) | 0;
 }
 
 function $984($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($1078($0_1 | 0, 72624 | 0) | 0) {
    break label$1
   }
   return 385 | 0;
  }
  label$2 : {
   if ($1078($0_1 | 0, 70255 | 0) | 0) {
    break label$2
   }
   return 386 | 0;
  }
  label$3 : {
   if ($1078($0_1 | 0, 70689 | 0) | 0) {
    break label$3
   }
   return 387 | 0;
  }
  label$4 : {
   if ($1078($0_1 | 0, 70204 | 0) | 0) {
    break label$4
   }
   return 388 | 0;
  }
  label$5 : {
   if ($1078($0_1 | 0, 70175 | 0) | 0) {
    break label$5
   }
   return 389 | 0;
  }
  label$6 : {
   if ($1078($0_1 | 0, 70140 | 0) | 0) {
    break label$6
   }
   return 390 | 0;
  }
  label$7 : {
   if ($1078($0_1 | 0, 72640 | 0) | 0) {
    break label$7
   }
   return 391 | 0;
  }
  label$8 : {
   if ($1078($0_1 | 0, 68879 | 0) | 0) {
    break label$8
   }
   return 392 | 0;
  }
  label$9 : {
   if ($1078($0_1 | 0, 70632 | 0) | 0) {
    break label$9
   }
   return 393 | 0;
  }
  label$10 : {
   if ($1078($0_1 | 0, 72518 | 0) | 0) {
    break label$10
   }
   return 394 | 0;
  }
  label$11 : {
   if ($1078($0_1 | 0, 74366 | 0) | 0) {
    break label$11
   }
   return 395 | 0;
  }
  label$12 : {
   if ($1078($0_1 | 0, 72586 | 0) | 0) {
    break label$12
   }
   return 396 | 0;
  }
  label$13 : {
   if ($1078($0_1 | 0, 74406 | 0) | 0) {
    break label$13
   }
   return 397 | 0;
  }
  label$14 : {
   if ($1078($0_1 | 0, 74419 | 0) | 0) {
    break label$14
   }
   return 398 | 0;
  }
  label$15 : {
   if ($1078($0_1 | 0, 67921 | 0) | 0) {
    break label$15
   }
   return 399 | 0;
  }
  label$16 : {
   if ($1078($0_1 | 0, 70331 | 0) | 0) {
    break label$16
   }
   return 400 | 0;
  }
  label$17 : {
   if ($1078($0_1 | 0, 68866 | 0) | 0) {
    break label$17
   }
   return 401 | 0;
  }
  label$18 : {
   if ($1078($0_1 | 0, 72074 | 0) | 0) {
    break label$18
   }
   return 402 | 0;
  }
  label$19 : {
   if ($1078($0_1 | 0, 71162 | 0) | 0) {
    break label$19
   }
   return 403 | 0;
  }
  label$20 : {
   if ($1078($0_1 | 0, 71247 | 0) | 0) {
    break label$20
   }
   return 404 | 0;
  }
  label$21 : {
   if ($1078($0_1 | 0, 70315 | 0) | 0) {
    break label$21
   }
   return 405 | 0;
  }
  label$22 : {
   if ($1078($0_1 | 0, 78028 | 0) | 0) {
    break label$22
   }
   return 406 | 0;
  }
  label$23 : {
   if ($1078($0_1 | 0, 78087 | 0) | 0) {
    break label$23
   }
   return 407 | 0;
  }
  label$24 : {
   if ($1078($0_1 | 0, 77998 | 0) | 0) {
    break label$24
   }
   return 408 | 0;
  }
  label$25 : {
   if ($1078($0_1 | 0, 78051 | 0) | 0) {
    break label$25
   }
   return 409 | 0;
  }
  label$26 : {
   if ($1078($0_1 | 0, 71023 | 0) | 0) {
    break label$26
   }
   return 410 | 0;
  }
  label$27 : {
   if ($1078($0_1 | 0, 70300 | 0) | 0) {
    break label$27
   }
   return 411 | 0;
  }
  label$28 : {
   if ($1078($0_1 | 0, 73375 | 0) | 0) {
    break label$28
   }
   return 412 | 0;
  }
  label$29 : {
   if ($1078($0_1 | 0, 68267 | 0) | 0) {
    break label$29
   }
   return 413 | 0;
  }
  label$30 : {
   if ($1078($0_1 | 0, 68204 | 0) | 0) {
    break label$30
   }
   return 414 | 0;
  }
  label$31 : {
   if ($1078($0_1 | 0, 71007 | 0) | 0) {
    break label$31
   }
   return 415 | 0;
  }
  label$32 : {
   if ($1078($0_1 | 0, 68103 | 0) | 0) {
    break label$32
   }
   return 416 | 0;
  }
  label$33 : {
   if ($1078($0_1 | 0, 70285 | 0) | 0) {
    break label$33
   }
   return 417 | 0;
  }
  label$34 : {
   if ($1078($0_1 | 0, 68400 | 0) | 0) {
    break label$34
   }
   return 418 | 0;
  }
  label$35 : {
   if ($1078($0_1 | 0, 74354 | 0) | 0) {
    break label$35
   }
   return 419 | 0;
  }
  label$36 : {
   if ($1078($0_1 | 0, 71273 | 0) | 0) {
    break label$36
   }
   return 420 | 0;
  }
  label$37 : {
   if ($1078($0_1 | 0, 72088 | 0) | 0) {
    break label$37
   }
   return 421 | 0;
  }
  label$38 : {
   if ($1078($0_1 | 0, 70270 | 0) | 0) {
    break label$38
   }
   return 422 | 0;
  }
  label$39 : {
   if ($1078($0_1 | 0, 72715 | 0) | 0) {
    break label$39
   }
   return 423 | 0;
  }
  label$40 : {
   if ($1078($0_1 | 0, 65770 | 0) | 0) {
    break label$40
   }
   return 424 | 0;
  }
  label$41 : {
   if ($1078($0_1 | 0, 67839 | 0) | 0) {
    break label$41
   }
   return 425 | 0;
  }
  label$42 : {
   if ($1078($0_1 | 0, 67973 | 0) | 0) {
    break label$42
   }
   return 426 | 0;
  }
  label$43 : {
   if ($1078($0_1 | 0, 72725 | 0) | 0) {
    break label$43
   }
   return 427 | 0;
  }
  label$44 : {
   if ($1078($0_1 | 0, 65797 | 0) | 0) {
    break label$44
   }
   return 428 | 0;
  }
  label$45 : {
   if ($1078($0_1 | 0, 71720 | 0) | 0) {
    break label$45
   }
   return 429 | 0;
  }
  label$46 : {
   if ($1078($0_1 | 0, 71712 | 0) | 0) {
    break label$46
   }
   return 430 | 0;
  }
  label$47 : {
   if ($1078($0_1 | 0, 70114 | 0) | 0) {
    break label$47
   }
   return 431 | 0;
  }
  label$48 : {
   if ($1078($0_1 | 0, 77975 | 0) | 0) {
    break label$48
   }
   return 432 | 0;
  }
  label$49 : {
   if ($1078($0_1 | 0, 73363 | 0) | 0) {
    break label$49
   }
   return 433 | 0;
  }
  label$50 : {
   if ($1078($0_1 | 0, 68254 | 0) | 0) {
    break label$50
   }
   return 434 | 0;
  }
  label$51 : {
   if ($1078($0_1 | 0, 70399 | 0) | 0) {
    break label$51
   }
   return 435 | 0;
  }
  label$52 : {
   if ($1078($0_1 | 0, 68186 | 0) | 0) {
    break label$52
   }
   return 436 | 0;
  }
  label$53 : {
   if ($1078($0_1 | 0, 68084 | 0) | 0) {
    break label$53
   }
   return 437 | 0;
  }
  label$54 : {
   if ($1078($0_1 | 0, 68386 | 0) | 0) {
    break label$54
   }
   return 438 | 0;
  }
  label$55 : {
   if ($1078($0_1 | 0, 74384 | 0) | 0) {
    break label$55
   }
   return 439 | 0;
  }
  label$56 : {
   if ($1078($0_1 | 0, 70944 | 0) | 0) {
    break label$56
   }
   return 440 | 0;
  }
  label$57 : {
   if ($1078($0_1 | 0, 68283 | 0) | 0) {
    break label$57
   }
   return 441 | 0;
  }
  label$58 : {
   if ($1078($0_1 | 0, 70669 | 0) | 0) {
    break label$58
   }
   return 442 | 0;
  }
  label$59 : {
   if ($1078($0_1 | 0, 66242 | 0) | 0) {
    break label$59
   }
   return 443 | 0;
  }
  label$60 : {
   if ($1078($0_1 | 0, 66412 | 0) | 0) {
    break label$60
   }
   return 444 | 0;
  }
  label$61 : {
   if ($1078($0_1 | 0, 68855 | 0) | 0) {
    break label$61
   }
   return 445 | 0;
  }
  label$62 : {
   if ($1078($0_1 | 0, 66190 | 0) | 0) {
    break label$62
   }
   return 446 | 0;
  }
  label$63 : {
   if ($1078($0_1 | 0, 66345 | 0) | 0) {
    break label$63
   }
   return 447 | 0;
  }
  label$64 : {
   if ($1078($0_1 | 0, 66228 | 0) | 0) {
    break label$64
   }
   return 448 | 0;
  }
  label$65 : {
   if ($1078($0_1 | 0, 66464 | 0) | 0) {
    break label$65
   }
   return 449 | 0;
  }
  label$66 : {
   if ($1078($0_1 | 0, 71791 | 0) | 0) {
    break label$66
   }
   return 450 | 0;
  }
  label$67 : {
   if ($1078($0_1 | 0, 66383 | 0) | 0) {
    break label$67
   }
   return 451 | 0;
  }
  label$68 : {
   if ($1078($0_1 | 0, 66435 | 0) | 0) {
    break label$68
   }
   return 452 | 0;
  }
  label$69 : {
   if ($1078($0_1 | 0, 71772 | 0) | 0) {
    break label$69
   }
   return 453 | 0;
  }
  label$70 : {
   if ($1078($0_1 | 0, 67773 | 0) | 0) {
    break label$70
   }
   return 454 | 0;
  }
  label$71 : {
   if ($1078($0_1 | 0, 73011 | 0) | 0) {
    break label$71
   }
   return 455 | 0;
  }
  label$72 : {
   if ($1078($0_1 | 0, 71867 | 0) | 0) {
    break label$72
   }
   return 456 | 0;
  }
  label$73 : {
   if ($1078($0_1 | 0, 66551 | 0) | 0) {
    break label$73
   }
   return 457 | 0;
  }
  label$74 : {
   if ($1078($0_1 | 0, 66308 | 0) | 0) {
    break label$74
   }
   return 458 | 0;
  }
  label$75 : {
   if ($1078($0_1 | 0, 66588 | 0) | 0) {
    break label$75
   }
   return 459 | 0;
  }
  label$76 : {
   if ($1078($0_1 | 0, 66449 | 0) | 0) {
    break label$76
   }
   return 460 | 0;
  }
  label$77 : {
   if ($1078($0_1 | 0, 70648 | 0) | 0) {
    break label$77
   }
   return 461 | 0;
  }
  label$78 : {
   if ($1078($0_1 | 0, 66603 | 0) | 0) {
    break label$78
   }
   return 462 | 0;
  }
  label$79 : {
   if ($1078($0_1 | 0, 66479 | 0) | 0) {
    break label$79
   }
   return 463 | 0;
  }
  label$80 : {
   if ($1078($0_1 | 0, 66202 | 0) | 0) {
    break label$80
   }
   return 464 | 0;
  }
  label$81 : {
   if ($1078($0_1 | 0, 67169 | 0) | 0) {
    break label$81
   }
   return 465 | 0;
  }
  label$82 : {
   if ($1078($0_1 | 0, 70193 | 0) | 0) {
    break label$82
   }
   return 466 | 0;
  }
  label$83 : {
   if ($1078($0_1 | 0, 73827 | 0) | 0) {
    break label$83
   }
   return 467 | 0;
  }
  label$84 : {
   if ($1078($0_1 | 0, 70159 | 0) | 0) {
    break label$84
   }
   return 468 | 0;
  }
  label$85 : {
   if ($1078($0_1 | 0, 70981 | 0) | 0) {
    break label$85
   }
   return 469 | 0;
  }
  label$86 : {
   if ($1078($0_1 | 0, 70097 | 0) | 0) {
    break label$86
   }
   return 470 | 0;
  }
  label$87 : {
   if ($1078($0_1 | 0, 70244 | 0) | 0) {
    break label$87
   }
   return 471 | 0;
  }
  label$88 : {
   if ($1078($0_1 | 0, 72612 | 0) | 0) {
    break label$88
   }
   return 472 | 0;
  }
  label$89 : {
   if ($1078($0_1 | 0, 71700 | 0) | 0) {
    break label$89
   }
   return 473 | 0;
  }
  label$90 : {
   if ($1078($0_1 | 0, 70993 | 0) | 0) {
    break label$90
   }
   return 474 | 0;
  }
  label$91 : {
   if ($1078($0_1 | 0, 71551 | 0) | 0) {
    break label$91
   }
   return 475 | 0;
  }
  label$92 : {
   if ($1078($0_1 | 0, 67431 | 0) | 0) {
    break label$92
   }
   return 476 | 0;
  }
  label$93 : {
   if ($1078($0_1 | 0, 68347 | 0) | 0) {
    break label$93
   }
   return 477 | 0;
  }
  label$94 : {
   if ($1078($0_1 | 0, 70048 | 0) | 0) {
    break label$94
   }
   return 478 | 0;
  }
  label$95 : {
   if ($1078($0_1 | 0, 72911 | 0) | 0) {
    break label$95
   }
   return 479 | 0;
  }
  label$96 : {
   if ($1078($0_1 | 0, 72933 | 0) | 0) {
    break label$96
   }
   return 480 | 0;
  }
  label$97 : {
   if ($1078($0_1 | 0, 68773 | 0) | 0) {
    break label$97
   }
   return 481 | 0;
  }
  label$98 : {
   if ($1078($0_1 | 0, 65663 | 0) | 0) {
    break label$98
   }
   return 482 | 0;
  }
  label$99 : {
   if ($1078($0_1 | 0, 73029 | 0) | 0) {
    break label$99
   }
   return 483 | 0;
  }
  label$100 : {
   if ($1078($0_1 | 0, 74340 | 0) | 0) {
    break label$100
   }
   return 484 | 0;
  }
  label$101 : {
   if ($1078($0_1 | 0, 72564 | 0) | 0) {
    break label$101
   }
   return 485 | 0;
  }
  label$102 : {
   if ($1078($0_1 | 0, 71259 | 0) | 0) {
    break label$102
   }
   return 486 | 0;
  }
  label$103 : {
   if ($1078($0_1 | 0, 72542 | 0) | 0) {
    break label$103
   }
   return 487 | 0;
  }
  label$104 : {
   if ($1078($0_1 | 0, 70416 | 0) | 0) {
    break label$104
   }
   return 488 | 0;
  }
  label$105 : {
   if ($1078($0_1 | 0, 72498 | 0) | 0) {
    break label$105
   }
   return 489 | 0;
  }
  label$106 : {
   if ($1078($0_1 | 0, 78015 | 0) | 0) {
    break label$106
   }
   return 490 | 0;
  }
  label$107 : {
   if ($1078($0_1 | 0, 72054 | 0) | 0) {
    break label$107
   }
   return 491 | 0;
  }
  label$108 : {
   if ($1078($0_1 | 0, 66571 | 0) | 0) {
    break label$108
   }
   return 492 | 0;
  }
  label$109 : {
   if ($1078($0_1 | 0, 71522 | 0) | 0) {
    break label$109
   }
   return 493 | 0;
  }
  label$110 : {
   if ($1078($0_1 | 0, 66328 | 0) | 0) {
    break label$110
   }
   return 494 | 0;
  }
  label$111 : {
   if ($1078($0_1 | 0, 78071 | 0) | 0) {
    break label$111
   }
   return 495 | 0;
  }
  label$112 : {
   if ($1078($0_1 | 0, 72189 | 0) | 0) {
    break label$112
   }
   return 496 | 0;
  }
  label$113 : {
   if ($1078($0_1 | 0, 66773 | 0) | 0) {
    break label$113
   }
   return 497 | 0;
  }
  label$114 : {
   if ($1078($0_1 | 0, 71601 | 0) | 0) {
    break label$114
   }
   return 498 | 0;
  }
  label$115 : {
   if ($1078($0_1 | 0, 66538 | 0) | 0) {
    break label$115
   }
   return 499 | 0;
  }
  label$116 : {
   if ($1078($0_1 | 0, 72160 | 0) | 0) {
    break label$116
   }
   return 500 | 0;
  }
  label$117 : {
   if ($1078($0_1 | 0, 66742 | 0) | 0) {
    break label$117
   }
   return 501 | 0;
  }
  label$118 : {
   if ($1078($0_1 | 0, 71589 | 0) | 0) {
    break label$118
   }
   return 502 | 0;
  }
  label$119 : {
   if ($1078($0_1 | 0, 66525 | 0) | 0) {
    break label$119
   }
   return 503 | 0;
  }
  label$120 : {
   if ($1078($0_1 | 0, 72131 | 0) | 0) {
    break label$120
   }
   return 504 | 0;
  }
  label$121 : {
   if ($1078($0_1 | 0, 66692 | 0) | 0) {
    break label$121
   }
   return 505 | 0;
  }
  label$122 : {
   if ($1078($0_1 | 0, 71577 | 0) | 0) {
    break label$122
   }
   return 506 | 0;
  }
  label$123 : {
   if ($1078($0_1 | 0, 66512 | 0) | 0) {
    break label$123
   }
   return 507 | 0;
  }
  label$124 : {
   if ($1078($0_1 | 0, 72102 | 0) | 0) {
    break label$124
   }
   return 508 | 0;
  }
  label$125 : {
   if ($1078($0_1 | 0, 66642 | 0) | 0) {
    break label$125
   }
   return 509 | 0;
  }
  label$126 : {
   if ($1078($0_1 | 0, 71565 | 0) | 0) {
    break label$126
   }
   return 510 | 0;
  }
  label$127 : {
   if ($1078($0_1 | 0, 66499 | 0) | 0) {
    break label$127
   }
   return 511 | 0;
  }
  label$128 : {
   if ($1078($0_1 | 0, 66723 | 0) | 0) {
    break label$128
   }
   return 512 | 0;
  }
  label$129 : {
   if ($1078($0_1 | 0, 66673 | 0) | 0) {
    break label$129
   }
   return 513 | 0;
  }
  label$130 : {
   if ($1078($0_1 | 0, 66623 | 0) | 0) {
    break label$130
   }
   return 514 | 0;
  }
  label$131 : {
   if ($1078($0_1 | 0, 71057 | 0) | 0) {
    break label$131
   }
   return 515 | 0;
  }
  label$132 : {
   if ($1078($0_1 | 0, 71039 | 0) | 0) {
    break label$132
   }
   return 516 | 0;
  }
  label$133 : {
   if ($1078($0_1 | 0, 72201 | 0) | 0) {
    break label$133
   }
   return 517 | 0;
  }
  label$134 : {
   if ($1078($0_1 | 0, 66786 | 0) | 0) {
    break label$134
   }
   return 518 | 0;
  }
  label$135 : {
   if ($1078($0_1 | 0, 72172 | 0) | 0) {
    break label$135
   }
   return 519 | 0;
  }
  label$136 : {
   if ($1078($0_1 | 0, 66755 | 0) | 0) {
    break label$136
   }
   return 520 | 0;
  }
  label$137 : {
   if ($1078($0_1 | 0, 72143 | 0) | 0) {
    break label$137
   }
   return 521 | 0;
  }
  label$138 : {
   if ($1078($0_1 | 0, 66705 | 0) | 0) {
    break label$138
   }
   return 522 | 0;
  }
  label$139 : {
   if ($1078($0_1 | 0, 72114 | 0) | 0) {
    break label$139
   }
   return 523 | 0;
  }
  label$140 : {
   if ($1078($0_1 | 0, 66655 | 0) | 0) {
    break label$140
   }
   return 524 | 0;
  }
  label$141 : {
   if ($1078($0_1 | 0, 69004 | 0) | 0) {
    break label$141
   }
   return 525 | 0;
  }
  label$142 : {
   if ($1078($0_1 | 0, 67095 | 0) | 0) {
    break label$142
   }
   return 526 | 0;
  }
  label$143 : {
   if ($1078($0_1 | 0, 74745 | 0) | 0) {
    break label$143
   }
   return 366 | 0;
  }
  label$144 : {
   if ($1078($0_1 | 0, 74761 | 0) | 0) {
    break label$144
   }
   return 367 | 0;
  }
  label$145 : {
   if ($1078($0_1 | 0, 74592 | 0) | 0) {
    break label$145
   }
   return 368 | 0;
  }
  label$146 : {
   if ($1078($0_1 | 0, 74605 | 0) | 0) {
    break label$146
   }
   return 369 | 0;
  }
  label$147 : {
   if ($1078($0_1 | 0, 74621 | 0) | 0) {
    break label$147
   }
   return 370 | 0;
  }
  label$148 : {
   if ($1078($0_1 | 0, 74780 | 0) | 0) {
    break label$148
   }
   return 371 | 0;
  }
  label$149 : {
   if ($1078($0_1 | 0, 74635 | 0) | 0) {
    break label$149
   }
   return 372 | 0;
  }
  label$150 : {
   if ($1078($0_1 | 0, 74674 | 0) | 0) {
    break label$150
   }
   return 373 | 0;
  }
  label$151 : {
   if ($1078($0_1 | 0, 74651 | 0) | 0) {
    break label$151
   }
   return 374 | 0;
  }
  label$152 : {
   if ($1078($0_1 | 0, 74721 | 0) | 0) {
    break label$152
   }
   return 375 | 0;
  }
  label$153 : {
   if ($1078($0_1 | 0, 74696 | 0) | 0) {
    break label$153
   }
   return 376 | 0;
  }
  label$154 : {
   if ($1078($0_1 | 0, 75538 | 0) | 0) {
    break label$154
   }
   return 377 | 0;
  }
  label$155 : {
   if ($1078($0_1 | 0, 75580 | 0) | 0) {
    break label$155
   }
   return 378 | 0;
  }
  label$156 : {
   if ($1078($0_1 | 0, 75559 | 0) | 0) {
    break label$156
   }
   return 379 | 0;
  }
  label$157 : {
   if ($1078($0_1 | 0, 75519 | 0) | 0) {
    break label$157
   }
   return 380 | 0;
  }
  label$158 : {
   if ($1078($0_1 | 0, 76387 | 0) | 0) {
    break label$158
   }
   return 381 | 0;
  }
  label$159 : {
   if ($1078($0_1 | 0, 76968 | 0) | 0) {
    break label$159
   }
   return 382 | 0;
  }
  label$160 : {
   if ($1078($0_1 | 0, 76995 | 0) | 0) {
    break label$160
   }
   return 383 | 0;
  }
  label$161 : {
   if ($1078($0_1 | 0, 76941 | 0) | 0) {
    break label$161
   }
   return 384 | 0;
  }
  label$162 : {
   if ($1078($0_1 | 0, 74798 | 0) | 0) {
    break label$162
   }
   return 527 | 0;
  }
  label$163 : {
   if ($1078($0_1 | 0, 74822 | 0) | 0) {
    break label$163
   }
   return 528 | 0;
  }
  return ($1078($0_1 | 0, 76406 | 0) | 0 ? 0 : 529) | 0;
 }
 
 function $985($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $2_1 = 0;
   label$2 : {
    label$3 : while (1) {
     $3_1 = HEAP8[$0_1 >> 0] | 0;
     if (!$3_1) {
      break label$2
     }
     $0_1 = $0_1 + 1 | 0;
     $2_1 = (($2_1 << 3 | 0) ^ $3_1 | 0) ^ -265557048 | 0;
     continue label$3;
    };
   }
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              label$15 : {
               label$16 : {
                label$17 : {
                 label$18 : {
                  label$19 : {
                   label$20 : {
                    label$21 : {
                     label$22 : {
                      label$23 : {
                       label$24 : {
                        label$25 : {
                         label$26 : {
                          label$27 : {
                           label$28 : {
                            label$29 : {
                             label$30 : {
                              label$31 : {
                               label$32 : {
                                label$33 : {
                                 label$34 : {
                                  label$35 : {
                                   label$36 : {
                                    label$37 : {
                                     label$38 : {
                                      label$39 : {
                                       label$40 : {
                                        label$41 : {
                                         label$42 : {
                                          label$43 : {
                                           label$44 : {
                                            label$45 : {
                                             label$46 : {
                                              label$47 : {
                                               label$48 : {
                                                label$49 : {
                                                 label$50 : {
                                                  label$51 : {
                                                   label$52 : {
                                                    label$53 : {
                                                     label$54 : {
                                                      label$55 : {
                                                       label$56 : {
                                                        label$57 : {
                                                         label$58 : {
                                                          label$59 : {
                                                           label$60 : {
                                                            label$61 : {
                                                             label$62 : {
                                                              label$63 : {
                                                               label$64 : {
                                                                label$65 : {
                                                                 label$66 : {
                                                                  label$67 : {
                                                                   label$68 : {
                                                                    label$69 : {
                                                                     label$70 : {
                                                                      label$71 : {
                                                                       label$72 : {
                                                                        label$73 : {
                                                                         label$74 : {
                                                                          label$75 : {
                                                                           label$76 : {
                                                                            label$77 : {
                                                                             label$78 : {
                                                                              label$79 : {
                                                                               label$80 : {
                                                                                label$81 : {
                                                                                 label$82 : {
                                                                                  label$83 : {
                                                                                   label$84 : {
                                                                                    label$85 : {
                                                                                     label$86 : {
                                                                                      label$87 : {
                                                                                       label$88 : {
                                                                                        label$89 : {
                                                                                         label$90 : {
                                                                                          label$91 : {
                                                                                           label$92 : {
                                                                                            label$93 : {
                                                                                             label$94 : {
                                                                                              label$95 : {
                                                                                               label$96 : {
                                                                                                label$97 : {
                                                                                                 label$98 : {
                                                                                                  label$99 : {
                                                                                                   label$100 : {
                                                                                                    label$101 : {
                                                                                                     label$102 : {
                                                                                                      label$103 : {
                                                                                                       label$104 : {
                                                                                                        label$105 : {
                                                                                                         label$106 : {
                                                                                                          label$107 : {
                                                                                                           label$108 : {
                                                                                                            label$109 : {
                                                                                                             label$110 : {
                                                                                                              label$111 : {
                                                                                                               label$112 : {
                                                                                                                label$113 : {
                                                                                                                 label$114 : {
                                                                                                                  label$115 : {
                                                                                                                   label$116 : {
                                                                                                                    label$117 : {
                                                                                                                     label$118 : {
                                                                                                                      label$119 : {
                                                                                                                       label$120 : {
                                                                                                                        label$121 : {
                                                                                                                         label$122 : {
                                                                                                                          label$123 : {
                                                                                                                           label$124 : {
                                                                                                                            label$125 : {
                                                                                                                             label$126 : {
                                                                                                                              label$127 : {
                                                                                                                               label$128 : {
                                                                                                                                label$129 : {
                                                                                                                                 label$130 : {
                                                                                                                                  switch ($2_1 + -744053569 | 0 | 0) {
                                                                                                                                  default:
                                                                                                                                   label$141 : {
                                                                                                                                    switch ($2_1 + -2072926120 | 0 | 0) {
                                                                                                                                    case 5:
                                                                                                                                    case 6:
                                                                                                                                    case 7:
                                                                                                                                     break label$1;
                                                                                                                                    case 4:
                                                                                                                                     break label$51;
                                                                                                                                    case 3:
                                                                                                                                     break label$56;
                                                                                                                                    case 2:
                                                                                                                                     break label$57;
                                                                                                                                    case 1:
                                                                                                                                     break label$58;
                                                                                                                                    case 0:
                                                                                                                                     break label$59;
                                                                                                                                    case 17:
                                                                                                                                     break label$60;
                                                                                                                                    case 16:
                                                                                                                                     break label$61;
                                                                                                                                    case 15:
                                                                                                                                     break label$62;
                                                                                                                                    case 14:
                                                                                                                                     break label$63;
                                                                                                                                    case 13:
                                                                                                                                     break label$64;
                                                                                                                                    case 12:
                                                                                                                                     break label$65;
                                                                                                                                    case 11:
                                                                                                                                     break label$66;
                                                                                                                                    case 10:
                                                                                                                                     break label$68;
                                                                                                                                    case 9:
                                                                                                                                     break label$69;
                                                                                                                                    case 8:
                                                                                                                                     break label$87;
                                                                                                                                    default:
                                                                                                                                     break label$141;
                                                                                                                                    };
                                                                                                                                   }
                                                                                                                                   label$142 : {
                                                                                                                                    switch ($2_1 + 920257328 | 0 | 0) {
                                                                                                                                    case 2:
                                                                                                                                    case 3:
                                                                                                                                    case 4:
                                                                                                                                    case 5:
                                                                                                                                    case 6:
                                                                                                                                    case 7:
                                                                                                                                     break label$1;
                                                                                                                                    case 8:
                                                                                                                                     break label$73;
                                                                                                                                    case 11:
                                                                                                                                     break label$74;
                                                                                                                                    case 10:
                                                                                                                                     break label$75;
                                                                                                                                    case 9:
                                                                                                                                     break label$76;
                                                                                                                                    case 14:
                                                                                                                                     break label$78;
                                                                                                                                    case 13:
                                                                                                                                     break label$79;
                                                                                                                                    case 12:
                                                                                                                                     break label$80;
                                                                                                                                    case 1:
                                                                                                                                     break label$82;
                                                                                                                                    case 0:
                                                                                                                                     break label$83;
                                                                                                                                    case 15:
                                                                                                                                     break label$84;
                                                                                                                                    default:
                                                                                                                                     break label$142;
                                                                                                                                    };
                                                                                                                                   }
                                                                                                                                   label$143 : {
                                                                                                                                    label$144 : {
                                                                                                                                     label$145 : {
                                                                                                                                      label$146 : {
                                                                                                                                       label$147 : {
                                                                                                                                        switch ($2_1 + -1730482256 | 0 | 0) {
                                                                                                                                        default:
                                                                                                                                         label$158 : {
                                                                                                                                          switch ($2_1 + -1903474560 | 0 | 0) {
                                                                                                                                          case 2:
                                                                                                                                          case 3:
                                                                                                                                          case 4:
                                                                                                                                          case 5:
                                                                                                                                          case 6:
                                                                                                                                          case 7:
                                                                                                                                          case 8:
                                                                                                                                           break label$1;
                                                                                                                                          case 1:
                                                                                                                                           break label$88;
                                                                                                                                          case 0:
                                                                                                                                           break label$89;
                                                                                                                                          case 15:
                                                                                                                                           break label$90;
                                                                                                                                          case 14:
                                                                                                                                           break label$91;
                                                                                                                                          case 13:
                                                                                                                                           break label$92;
                                                                                                                                          case 12:
                                                                                                                                           break label$93;
                                                                                                                                          case 11:
                                                                                                                                           break label$94;
                                                                                                                                          case 10:
                                                                                                                                           break label$95;
                                                                                                                                          case 9:
                                                                                                                                           break label$96;
                                                                                                                                          default:
                                                                                                                                           break label$158;
                                                                                                                                          };
                                                                                                                                         }
                                                                                                                                         label$159 : {
                                                                                                                                          switch ($2_1 + 1830728447 | 0 | 0) {
                                                                                                                                          case 0:
                                                                                                                                           break label$53;
                                                                                                                                          case 1:
                                                                                                                                           break label$54;
                                                                                                                                          default:
                                                                                                                                           break label$159;
                                                                                                                                          };
                                                                                                                                         }
                                                                                                                                         label$160 : {
                                                                                                                                          switch ($2_1 + -923716153 | 0 | 0) {
                                                                                                                                          case 1:
                                                                                                                                           break label$38;
                                                                                                                                          case 0:
                                                                                                                                           break label$7;
                                                                                                                                          default:
                                                                                                                                           break label$160;
                                                                                                                                          };
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1830778227 | 0)) {
                                                                                                                                          break label$46
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1830778059 | 0)) {
                                                                                                                                          break label$86
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1830775022 | 0)) {
                                                                                                                                          break label$14
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1830773579 | 0)) {
                                                                                                                                          break label$98
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1830771656 | 0)) {
                                                                                                                                          break label$102
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1830767219 | 0)) {
                                                                                                                                          break label$115
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1830728237 | 0)) {
                                                                                                                                          break label$146
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1830706751 | 0)) {
                                                                                                                                          break label$104
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1830697518 | 0)) {
                                                                                                                                          break label$127
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1830696540 | 0)) {
                                                                                                                                          break label$35
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1830683732 | 0)) {
                                                                                                                                          break label$145
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1786434132 | 0)) {
                                                                                                                                          break label$72
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1561773101 | 0)) {
                                                                                                                                          break label$12
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1198604420 | 0)) {
                                                                                                                                          break label$30
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1191516357 | 0)) {
                                                                                                                                          break label$97
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1188444788 | 0)) {
                                                                                                                                          break label$17
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1175141107 | 0)) {
                                                                                                                                          break label$55
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1167276528 | 0)) {
                                                                                                                                          break label$33
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-1164961890 | 0)) {
                                                                                                                                          break label$20
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-978927748 | 0)) {
                                                                                                                                          break label$101
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-921397876 | 0)) {
                                                                                                                                          break label$99
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-920930672 | 0)) {
                                                                                                                                          break label$26
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-920862420 | 0)) {
                                                                                                                                          break label$50
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-920287429 | 0)) {
                                                                                                                                          break label$28
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-919519364 | 0)) {
                                                                                                                                          break label$16
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-919217522 | 0)) {
                                                                                                                                          break label$48
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-870442610 | 0)) {
                                                                                                                                          break label$71
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-840100037 | 0)) {
                                                                                                                                          break label$85
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-555040900 | 0)) {
                                                                                                                                          break label$128
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-535914547 | 0)) {
                                                                                                                                          break label$15
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-531065460 | 0)) {
                                                                                                                                          break label$126
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-364575987 | 0)) {
                                                                                                                                          break label$39
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-364570722 | 0)) {
                                                                                                                                          break label$34
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (-219234436 | 0)) {
                                                                                                                                          break label$40
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (31227283 | 0)) {
                                                                                                                                          break label$45
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (186468664 | 0)) {
                                                                                                                                          break label$11
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (189334076 | 0)) {
                                                                                                                                          break label$9
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (359450128 | 0)) {
                                                                                                                                          break label$33
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (381625400 | 0)) {
                                                                                                                                          break label$70
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (649172364 | 0)) {
                                                                                                                                          break label$113
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (654778782 | 0)) {
                                                                                                                                          break label$116
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (709165837 | 0)) {
                                                                                                                                          break label$39
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (709171102 | 0)) {
                                                                                                                                          break label$34
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (718463356 | 0)) {
                                                                                                                                          break label$42
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (719110444 | 0)) {
                                                                                                                                          break label$49
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (744049073 | 0)) {
                                                                                                                                          break label$43
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (744054232 | 0)) {
                                                                                                                                          break label$29
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (744054597 | 0)) {
                                                                                                                                          break label$27
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (756812597 | 0)) {
                                                                                                                                          break label$37
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (918494389 | 0)) {
                                                                                                                                          break label$144
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (918496312 | 0)) {
                                                                                                                                          break label$112
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (918500749 | 0)) {
                                                                                                                                          break label$114
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (923719404 | 0)) {
                                                                                                                                          break label$6
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (932783500 | 0)) {
                                                                                                                                          break label$24
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (932788126 | 0)) {
                                                                                                                                          break label$21
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (940285068 | 0)) {
                                                                                                                                          break label$77
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (958627712 | 0)) {
                                                                                                                                          break label$36
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (962871164 | 0)) {
                                                                                                                                          break label$16
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (967460260 | 0)) {
                                                                                                                                          break label$4
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (967526546 | 0)) {
                                                                                                                                          break label$5
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1063672440 | 0)) {
                                                                                                                                          break label$13
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1171789196 | 0)) {
                                                                                                                                          break label$129
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1228427136 | 0)) {
                                                                                                                                          break label$10
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1228433595 | 0)) {
                                                                                                                                          break label$8
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1228439365 | 0)) {
                                                                                                                                          break label$32
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1289961340 | 0)) {
                                                                                                                                          break label$23
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1566890641 | 0)) {
                                                                                                                                          break label$100
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1587800228 | 0)) {
                                                                                                                                          break label$81
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1730373004 | 0)) {
                                                                                                                                          break label$17
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1730397815 | 0)) {
                                                                                                                                          break label$52
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1730399020 | 0)) {
                                                                                                                                          break label$19
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (2072925660 | 0)) {
                                                                                                                                          break label$22
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1730528525 | 0)) {
                                                                                                                                          break label$18
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1731170832 | 0)) {
                                                                                                                                          break label$25
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1731197652 | 0)) {
                                                                                                                                          break label$103
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1823814285 | 0)) {
                                                                                                                                          break label$31
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1939055041 | 0)) {
                                                                                                                                          break label$47
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1939064274 | 0)) {
                                                                                                                                          break label$41
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (1939078060 | 0)) {
                                                                                                                                          break label$67
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (2072924642 | 0)) {
                                                                                                                                          break label$143
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) == (2072925332 | 0)) {
                                                                                                                                          break label$44
                                                                                                                                         }
                                                                                                                                         if (($2_1 | 0) != (1730427437 | 0)) {
                                                                                                                                          break label$1
                                                                                                                                         }
                                                                                                                                         return 1 | 0;
                                                                                                                                        case 8:
                                                                                                                                         return 2 | 0;
                                                                                                                                        case 9:
                                                                                                                                         return 3 | 0;
                                                                                                                                        case 10:
                                                                                                                                         return 4 | 0;
                                                                                                                                        case 11:
                                                                                                                                         return 5 | 0;
                                                                                                                                        case 12:
                                                                                                                                         return 6 | 0;
                                                                                                                                        case 13:
                                                                                                                                         return 7 | 0;
                                                                                                                                        case 14:
                                                                                                                                         return 8 | 0;
                                                                                                                                        case 15:
                                                                                                                                         return 9 | 0;
                                                                                                                                        case 0:
                                                                                                                                         return 10 | 0;
                                                                                                                                        case 2:
                                                                                                                                        case 3:
                                                                                                                                        case 4:
                                                                                                                                        case 5:
                                                                                                                                        case 6:
                                                                                                                                        case 7:
                                                                                                                                         break label$1;
                                                                                                                                        case 1:
                                                                                                                                         break label$147;
                                                                                                                                        };
                                                                                                                                       }
                                                                                                                                       return 11 | 0;
                                                                                                                                      }
                                                                                                                                      return 12 | 0;
                                                                                                                                     }
                                                                                                                                     return 13 | 0;
                                                                                                                                    }
                                                                                                                                    return 14 | 0;
                                                                                                                                   }
                                                                                                                                   return 15 | 0;
                                                                                                                                  case 16:
                                                                                                                                   return 16 | 0;
                                                                                                                                  case 22:
                                                                                                                                   return 17 | 0;
                                                                                                                                  case 4:
                                                                                                                                   return 18 | 0;
                                                                                                                                  case 17:
                                                                                                                                   return 19 | 0;
                                                                                                                                  case 19:
                                                                                                                                   return 20 | 0;
                                                                                                                                  case 24:
                                                                                                                                   return 21 | 0;
                                                                                                                                  case 20:
                                                                                                                                   return 22 | 0;
                                                                                                                                  case 8:
                                                                                                                                   return 23 | 0;
                                                                                                                                  case 14:
                                                                                                                                   return 24 | 0;
                                                                                                                                  case 12:
                                                                                                                                   break label$105;
                                                                                                                                  case 13:
                                                                                                                                   break label$106;
                                                                                                                                  case 1:
                                                                                                                                   break label$107;
                                                                                                                                  case 21:
                                                                                                                                   break label$108;
                                                                                                                                  case 2:
                                                                                                                                   break label$109;
                                                                                                                                  case 23:
                                                                                                                                   break label$110;
                                                                                                                                  case 25:
                                                                                                                                   break label$111;
                                                                                                                                  case 11:
                                                                                                                                   break label$117;
                                                                                                                                  case 10:
                                                                                                                                   break label$118;
                                                                                                                                  case 9:
                                                                                                                                   break label$119;
                                                                                                                                  case 7:
                                                                                                                                   break label$120;
                                                                                                                                  case 6:
                                                                                                                                   break label$121;
                                                                                                                                  case 5:
                                                                                                                                   break label$122;
                                                                                                                                  case 3:
                                                                                                                                   break label$123;
                                                                                                                                  case 18:
                                                                                                                                   break label$124;
                                                                                                                                  case 0:
                                                                                                                                   break label$125;
                                                                                                                                  case 15:
                                                                                                                                   break label$130;
                                                                                                                                  };
                                                                                                                                 }
                                                                                                                                 return 25 | 0;
                                                                                                                                }
                                                                                                                                return 26 | 0;
                                                                                                                               }
                                                                                                                               return 27 | 0;
                                                                                                                              }
                                                                                                                              return 28 | 0;
                                                                                                                             }
                                                                                                                             return 29 | 0;
                                                                                                                            }
                                                                                                                            return 30 | 0;
                                                                                                                           }
                                                                                                                           return 31 | 0;
                                                                                                                          }
                                                                                                                          return 32 | 0;
                                                                                                                         }
                                                                                                                         return 33 | 0;
                                                                                                                        }
                                                                                                                        return 34 | 0;
                                                                                                                       }
                                                                                                                       return 35 | 0;
                                                                                                                      }
                                                                                                                      return 36 | 0;
                                                                                                                     }
                                                                                                                     return 37 | 0;
                                                                                                                    }
                                                                                                                    return 38 | 0;
                                                                                                                   }
                                                                                                                   return 39 | 0;
                                                                                                                  }
                                                                                                                  return 40 | 0;
                                                                                                                 }
                                                                                                                 return 41 | 0;
                                                                                                                }
                                                                                                                return 42 | 0;
                                                                                                               }
                                                                                                               return 43 | 0;
                                                                                                              }
                                                                                                              return 44 | 0;
                                                                                                             }
                                                                                                             return 45 | 0;
                                                                                                            }
                                                                                                            return 46 | 0;
                                                                                                           }
                                                                                                           return 47 | 0;
                                                                                                          }
                                                                                                          return 48 | 0;
                                                                                                         }
                                                                                                         return 49 | 0;
                                                                                                        }
                                                                                                        return 50 | 0;
                                                                                                       }
                                                                                                       return 51 | 0;
                                                                                                      }
                                                                                                      return 52 | 0;
                                                                                                     }
                                                                                                     return 53 | 0;
                                                                                                    }
                                                                                                    return 54 | 0;
                                                                                                   }
                                                                                                   return 55 | 0;
                                                                                                  }
                                                                                                  return 56 | 0;
                                                                                                 }
                                                                                                 return 57 | 0;
                                                                                                }
                                                                                                return 58 | 0;
                                                                                               }
                                                                                               return 59 | 0;
                                                                                              }
                                                                                              return 60 | 0;
                                                                                             }
                                                                                             return 61 | 0;
                                                                                            }
                                                                                            return 62 | 0;
                                                                                           }
                                                                                           return 63 | 0;
                                                                                          }
                                                                                          return 64 | 0;
                                                                                         }
                                                                                         return 65 | 0;
                                                                                        }
                                                                                        return 66 | 0;
                                                                                       }
                                                                                       return 67 | 0;
                                                                                      }
                                                                                      return 68 | 0;
                                                                                     }
                                                                                     return 69 | 0;
                                                                                    }
                                                                                    return 70 | 0;
                                                                                   }
                                                                                   return 71 | 0;
                                                                                  }
                                                                                  return 72 | 0;
                                                                                 }
                                                                                 return 73 | 0;
                                                                                }
                                                                                return 74 | 0;
                                                                               }
                                                                               return 75 | 0;
                                                                              }
                                                                              return 76 | 0;
                                                                             }
                                                                             return 77 | 0;
                                                                            }
                                                                            return 78 | 0;
                                                                           }
                                                                           return 79 | 0;
                                                                          }
                                                                          return 80 | 0;
                                                                         }
                                                                         return 81 | 0;
                                                                        }
                                                                        return 82 | 0;
                                                                       }
                                                                       return 83 | 0;
                                                                      }
                                                                      return 84 | 0;
                                                                     }
                                                                     return 86 | 0;
                                                                    }
                                                                    return 87 | 0;
                                                                   }
                                                                   return 88 | 0;
                                                                  }
                                                                  return 89 | 0;
                                                                 }
                                                                 return 100 | 0;
                                                                }
                                                                return 101 | 0;
                                                               }
                                                               return 102 | 0;
                                                              }
                                                              return 103 | 0;
                                                             }
                                                             return 104 | 0;
                                                            }
                                                            return 105 | 0;
                                                           }
                                                           return 106 | 0;
                                                          }
                                                          return 107 | 0;
                                                         }
                                                         return 108 | 0;
                                                        }
                                                        return 109 | 0;
                                                       }
                                                       return 110 | 0;
                                                      }
                                                      return 112 | 0;
                                                     }
                                                     return 113 | 0;
                                                    }
                                                    return 114 | 0;
                                                   }
                                                   return 115 | 0;
                                                  }
                                                  return 118 | 0;
                                                 }
                                                 return 121 | 0;
                                                }
                                                return 123 | 0;
                                               }
                                               return 125 | 0;
                                              }
                                              return 126 | 0;
                                             }
                                             return 57354 | 0;
                                            }
                                            return 57360 | 0;
                                           }
                                           return 57367 | 0;
                                          }
                                          return 57368 | 0;
                                         }
                                         return 57369 | 0;
                                        }
                                        return 57372 | 0;
                                       }
                                       return 57373 | 0;
                                      }
                                      return 57376 | 0;
                                     }
                                     return 57377 | 0;
                                    }
                                    return 57378 | 0;
                                   }
                                   return 57380 | 0;
                                  }
                                  return 57388 | 0;
                                 }
                                 return 57390 | 0;
                                }
                                return 57392 | 0;
                               }
                               return 57394 | 0;
                              }
                              return 57397 | 0;
                             }
                             return 57400 | 0;
                            }
                            return 57403 | 0;
                           }
                           return 57413 | 0;
                          }
                          return 57415 | 0;
                         }
                         return 57416 | 0;
                        }
                        return 57417 | 0;
                       }
                       return 57419 | 0;
                      }
                      return 57421 | 0;
                     }
                     return 57423 | 0;
                    }
                    return 57424 | 0;
                   }
                   return 57425 | 0;
                  }
                  return 57426 | 0;
                 }
                 return 57427 | 0;
                }
                return 57435 | 0;
               }
               return 57436 | 0;
              }
              return 57437 | 0;
             }
             return 57438 | 0;
            }
            return 57445 | 0;
           }
           return 57446 | 0;
          }
          return 57447 | 0;
         }
         return 57448 | 0;
        }
        return 57449 | 0;
       }
       return 57450 | 0;
      }
      return 57451 | 0;
     }
     return 57452 | 0;
    }
    return 57453 | 0;
   }
   $1_1 = 57453;
  }
  return $1_1 | 0;
 }
 
 function $986() {
  return 131080 | 0;
 }
 
 function $987($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $5_1 = 0.0, $2_1 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $4_1 = 0.0, $1_1 = 0, $21_1 = 0, $6_1 = 0.0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $1$hi = 0, $17_1 = 0, $17$hi = 0, $20_1 = 0, $20$hi = 0, $22_1 = 0.0, $124_1 = 0.0, $125_1 = 0.0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $1_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $21_1 & 2147483647 | 0;
   if ($2_1 >>> 0 < 1141899264 >>> 0) {
    break label$1
   }
   wasm2js_scratch_store_f64(+(1.5707963267948966));
   i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$2 = 2147483647;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $17_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   $17$hi = i64toi32_i32$2;
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$0 = -2147483648;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $20_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $20$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$2 = $17_1;
   i64toi32_i32$1 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
   $22_1 = +wasm2js_scratch_load_f64();
   i64toi32_i32$1 = $988(+$0_1) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 2146435072;
   i64toi32_i32$3 = 0;
   return +(i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0 ? $0_1 : $22_1);
  }
  label$2 : {
   label$3 : {
    label$4 : {
     if ($2_1 >>> 0 > 1071382527 >>> 0) {
      break label$4
     }
     $3_1 = -1;
     if ($2_1 >>> 0 >= 1044381696 >>> 0) {
      break label$3
     }
     break label$2;
    }
    $0_1 = +$1009(+$0_1);
    label$5 : {
     if ($2_1 >>> 0 > 1072889855 >>> 0) {
      break label$5
     }
     label$6 : {
      if ($2_1 >>> 0 > 1072037887 >>> 0) {
       break label$6
      }
      $0_1 = ($0_1 + $0_1 + -1.0) / ($0_1 + 2.0);
      $3_1 = 0;
      break label$3;
     }
     $0_1 = ($0_1 + -1.0) / ($0_1 + 1.0);
     $3_1 = 1;
     break label$3;
    }
    label$7 : {
     if ($2_1 >>> 0 > 1073971199 >>> 0) {
      break label$7
     }
     $0_1 = ($0_1 + -1.5) / ($0_1 * 1.5 + 1.0);
     $3_1 = 2;
     break label$3;
    }
    $0_1 = -1.0 / $0_1;
    $3_1 = 3;
   }
   $4_1 = $0_1 * $0_1;
   $5_1 = $4_1 * $4_1;
   $6_1 = $5_1 * ($5_1 * ($5_1 * ($5_1 * ($5_1 * -.036531572744216916 + -.058335701337905735) + -.0769187620504483) + -.11111110405462356) + -.19999999999876483);
   $5_1 = $4_1 * ($5_1 * ($5_1 * ($5_1 * ($5_1 * ($5_1 * .016285820115365782 + .049768779946159324) + .06661073137387531) + .09090887133436507) + .14285714272503466) + .3333333333333293);
   label$8 : {
    if ($2_1 >>> 0 > 1071382527 >>> 0) {
     break label$8
    }
    return +($0_1 - $0_1 * ($6_1 + $5_1));
   }
   $2_1 = $3_1 << 3 | 0;
   $0_1 = +HEAPF64[($2_1 + 107232 | 0) >> 3] - ($0_1 * ($6_1 + $5_1) - +HEAPF64[($2_1 + 107264 | 0) >> 3] - $0_1);
   $124_1 = -$0_1;
   $125_1 = $0_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
    $23_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
      $24_1 = 0
     } else {
      $24_1 = 1
     }
     $25_1 = $24_1;
    } else {
     $25_1 = 0
    }
    $23_1 = $25_1;
   }
   $0_1 = $23_1 ? $124_1 : $125_1;
  }
  return +$0_1;
 }
 
 function $988($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $989($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $2_1 = 0, $8_1 = 0.0, $7_1 = 0, $2$hi = 0, $6_1 = 0, $24_1 = 0, $5_1 = 0, $25_1 = 0, $26_1 = 0, $4_1 = 0, $36_1 = 0, $59_1 = 0, $59$hi = 0, $62_1 = 0, $62$hi = 0, $80_1 = 0, $80$hi = 0, $83_1 = 0, $83$hi = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $990(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $990(+$0_1) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$2 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$2 = 1;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$1
    }
   }
   return +($0_1 + $1_1);
  }
  label$3 : {
   wasm2js_scratch_store_f64(+$1_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $24_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $24_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $24_1;
   i64toi32_i32$1 = $2$hi;
   $4_1 = $2_1;
   if ($3_1 + -1072693248 | 0 | $2_1 | 0) {
    break label$3
   }
   return +(+$987(+$0_1));
  }
  $5_1 = ($3_1 >>> 30 | 0) & 2 | 0;
  $36_1 = $5_1;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $2$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $25_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $25_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $36_1 | $25_1 | 0;
  label$4 : {
   label$5 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $26_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $26_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7_1 = $26_1 & 2147483647 | 0;
    i64toi32_i32$0 = $2$hi;
    if ($7_1 | $2_1 | 0) {
     break label$5
    }
    $8_1 = $0_1;
    label$6 : {
     switch ($6_1 | 0) {
     case 2:
      return +(3.141592653589793);
     case 3:
      break label$6;
     default:
      break label$4;
     };
    }
    return +(-3.141592653589793);
   }
   label$8 : {
    $3_1 = $3_1 & 2147483647 | 0;
    if ($3_1 | $4_1 | 0) {
     break label$8
    }
    wasm2js_scratch_store_f64(+(1.5707963267948966));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $59_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $59$hi = i64toi32_i32$1;
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = -2147483648;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $62_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $62$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $59$hi;
    i64toi32_i32$1 = $59_1;
    i64toi32_i32$0 = $62$hi;
    i64toi32_i32$3 = $62_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    return +(+wasm2js_scratch_load_f64());
   }
   label$9 : {
    label$10 : {
     if (($3_1 | 0) != (2146435072 | 0)) {
      break label$10
     }
     if (($7_1 | 0) != (2146435072 | 0)) {
      break label$9
     }
     return +(+HEAPF64[(($6_1 << 3 | 0) + 107296 | 0) >> 3]);
    }
    label$11 : {
     label$12 : {
      if (($7_1 | 0) == (2146435072 | 0)) {
       break label$12
      }
      if (($3_1 + 67108864 | 0) >>> 0 >= $7_1 >>> 0) {
       break label$11
      }
     }
     wasm2js_scratch_store_f64(+(1.5707963267948966));
     i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $80_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $80$hi = i64toi32_i32$1;
     wasm2js_scratch_store_f64(+$0_1);
     i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$2 = -2147483648;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $83_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $83$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $80$hi;
     i64toi32_i32$1 = $80_1;
     i64toi32_i32$0 = $83$hi;
     i64toi32_i32$3 = $83_1;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
     wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
     return +(+wasm2js_scratch_load_f64());
    }
    label$13 : {
     label$14 : {
      if (!$5_1) {
       break label$14
      }
      $8_1 = 0.0;
      if (($7_1 + 67108864 | 0) >>> 0 < $3_1 >>> 0) {
       break label$13
      }
     }
     $8_1 = +$987(+(+$1009(+($0_1 / $1_1))));
    }
    label$15 : {
     switch ($6_1 | 0) {
     case 1:
      return +-$8_1;
     case 2:
      return +(3.141592653589793 - ($8_1 + -1.2246467991473532e-16));
     case 3:
      break label$15;
     default:
      break label$4;
     };
    }
    return +($8_1 + -1.2246467991473532e-16 + -3.141592653589793);
   }
   $8_1 = +HEAPF64[(($6_1 << 3 | 0) + 107328 | 0) >> 3];
  }
  return +$8_1;
 }
 
 function $990($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $991($0_1) {
  $0_1 = $0_1 | 0;
  return +(+$1107($0_1 | 0, 0 | 0));
 }
 
 function $992($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  label$1 : while (1) {
   $1_1 = $0_1;
   $0_1 = $0_1 + 1 | 0;
   $2_1 = HEAP8[$1_1 >> 0] | 0;
   if ($993($2_1 | 0) | 0) {
    continue label$1
   }
   break label$1;
  };
  $3_1 = 1;
  label$2 : {
   switch (($2_1 & 255 | 0) + -43 | 0 | 0) {
   case 2:
    $3_1 = 0;
   case 0:
    $2_1 = HEAP8[$0_1 >> 0] | 0;
    $1_1 = $0_1;
    break;
   default:
    break label$2;
   };
  }
  $0_1 = 0;
  label$5 : {
   $2_1 = $2_1 + -48 | 0;
   if ($2_1 >>> 0 > 9 >>> 0) {
    break label$5
   }
   $0_1 = 0;
   label$6 : while (1) {
    $0_1 = Math_imul($0_1, 10) - $2_1 | 0;
    $2_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -48 | 0;
    if ($2_1 >>> 0 < 10 >>> 0) {
     continue label$6
    }
    break label$6;
   };
  }
  return ($3_1 ? 0 - $0_1 | 0 : $0_1) | 0;
 }
 
 function $993($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $994($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $2_1 = 0.0, $3_1 = 0.0, $4_1 = 0.0, $16_1 = 0.0;
  $2_1 = $0_1 * $0_1;
  $3_1 = $2_1 * .5;
  $4_1 = 1.0 - $3_1;
  $16_1 = 1.0 - $4_1 - $3_1;
  $3_1 = $2_1 * $2_1;
  return +($4_1 + ($16_1 + ($2_1 * ($2_1 * ($2_1 * ($2_1 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + $3_1 * $3_1 * ($2_1 * ($2_1 * -1.1359647557788195e-11 + 2.087572321298175e-09) + -2.7557314351390663e-07)) - $0_1 * $1_1)));
 }
 
 function $995($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $21_1 = 0.0, $11_1 = 0, $6_1 = 0, $5_1 = 0, $13_1 = 0, $22_1 = 0.0, $10_1 = 0, $8_1 = 0, $9_1 = 0, $20_1 = 0, $12_1 = 0, $14_1 = 0, $23_1 = 0.0, $7_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, $15_1 = 0, $17_1 = 0, $205_1 = 0, $208_1 = 0, $522_1 = 0.0, $560_1 = 0.0;
  $5_1 = global$0 - 560 | 0;
  global$0 = $5_1;
  $6_1 = ($2_1 + -3 | 0 | 0) / (24 | 0) | 0;
  $7_1 = ($6_1 | 0) > (0 | 0) ? $6_1 : 0;
  $8_1 = Math_imul($7_1, -24) + $2_1 | 0;
  label$1 : {
   $9_1 = HEAP32[(($4_1 << 2 | 0) + 107360 | 0) >> 2] | 0;
   $10_1 = $3_1 + -1 | 0;
   if (($9_1 + $10_1 | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $11_1 = $9_1 + $3_1 | 0;
   $2_1 = $7_1 - $10_1 | 0;
   $6_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (($2_1 | 0) >= (0 | 0)) {
       break label$4
      }
      $21_1 = 0.0;
      break label$3;
     }
     $21_1 = +(HEAP32[(($2_1 << 2 | 0) + 107376 | 0) >> 2] | 0 | 0);
    }
    HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = $21_1;
    $2_1 = $2_1 + 1 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($11_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $12_1 = $8_1 + -24 | 0;
  $11_1 = 0;
  $13_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
  $14_1 = ($3_1 | 0) < (1 | 0);
  label$5 : while (1) {
   label$6 : {
    label$7 : {
     if (!$14_1) {
      break label$7
     }
     $21_1 = 0.0;
     break label$6;
    }
    $6_1 = $11_1 + $10_1 | 0;
    $2_1 = 0;
    $21_1 = 0.0;
    label$8 : while (1) {
     $21_1 = +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3] + $21_1;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($3_1 | 0)) {
      continue label$8
     }
     break label$8;
    };
   }
   HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $21_1;
   $2_1 = ($11_1 | 0) == ($13_1 | 0);
   $11_1 = $11_1 + 1 | 0;
   if (!$2_1) {
    continue label$5
   }
   break label$5;
  };
  $15_1 = 47 - $8_1 | 0;
  $16_1 = 48 - $8_1 | 0;
  $17_1 = $8_1 + -25 | 0;
  $11_1 = $9_1;
  label$9 : {
   label$10 : while (1) {
    $21_1 = +HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3];
    $2_1 = 0;
    $6_1 = $11_1;
    label$11 : {
     $18_1 = ($11_1 | 0) < (1 | 0);
     if ($18_1) {
      break label$11
     }
     label$12 : while (1) {
      label$13 : {
       label$14 : {
        $22_1 = $21_1 * 5.9604644775390625e-08;
        if (!(Math_abs($22_1) < 2147483648.0)) {
         break label$14
        }
        $13_1 = ~~$22_1;
        break label$13;
       }
       $13_1 = -2147483648;
      }
      $14_1 = ($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0;
      label$15 : {
       label$16 : {
        $22_1 = +($13_1 | 0);
        $21_1 = $22_1 * -16777216.0 + $21_1;
        if (!(Math_abs($21_1) < 2147483648.0)) {
         break label$16
        }
        $13_1 = ~~$21_1;
        break label$15;
       }
       $13_1 = -2147483648;
      }
      HEAP32[$14_1 >> 2] = $13_1;
      $6_1 = $6_1 + -1 | 0;
      $21_1 = +HEAPF64[($5_1 + ($6_1 << 3 | 0) | 0) >> 3] + $22_1;
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != ($11_1 | 0)) {
       continue label$12
      }
      break label$12;
     };
    }
    $21_1 = +$1069(+$21_1, $12_1 | 0);
    label$17 : {
     label$18 : {
      $21_1 = $21_1 + +$1016(+($21_1 * .125)) * -8.0;
      if (!(Math_abs($21_1) < 2147483648.0)) {
       break label$18
      }
      $10_1 = ~~$21_1;
      break label$17;
     }
     $10_1 = -2147483648;
    }
    $21_1 = $21_1 - +($10_1 | 0);
    label$19 : {
     label$20 : {
      label$21 : {
       label$22 : {
        label$23 : {
         $19_1 = ($12_1 | 0) < (1 | 0);
         if ($19_1) {
          break label$23
         }
         $2_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
         $205_1 = $2_1;
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         $208_1 = $2_1;
         $2_1 = $2_1 >> $16_1 | 0;
         $6_1 = $208_1 - ($2_1 << $16_1 | 0) | 0;
         HEAP32[$205_1 >> 2] = $6_1;
         $20_1 = $6_1 >> $15_1 | 0;
         $10_1 = $2_1 + $10_1 | 0;
         break label$22;
        }
        if ($12_1) {
         break label$21
        }
        $20_1 = (HEAP32[((($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($20_1 | 0) < (1 | 0)) {
        break label$19
       }
       break label$20;
      }
      $20_1 = 2;
      if ($21_1 >= .5) {
       break label$20
      }
      $20_1 = 0;
      break label$19;
     }
     $2_1 = 0;
     $13_1 = 0;
     label$24 : {
      if ($18_1) {
       break label$24
      }
      label$25 : while (1) {
       $14_1 = ($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0;
       $6_1 = HEAP32[$14_1 >> 2] | 0;
       label$26 : {
        label$27 : {
         label$28 : {
          label$29 : {
           if (!$13_1) {
            break label$29
           }
           $13_1 = 16777215;
           break label$28;
          }
          if (!$6_1) {
           break label$27
          }
          $13_1 = 16777216;
         }
         HEAP32[$14_1 >> 2] = $13_1 - $6_1 | 0;
         $13_1 = 1;
         break label$26;
        }
        $13_1 = 0;
       }
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) != ($11_1 | 0)) {
        continue label$25
       }
       break label$25;
      };
     }
     label$30 : {
      if ($19_1) {
       break label$30
      }
      $2_1 = 8388607;
      label$31 : {
       switch ($17_1 | 0) {
       case 1:
        $2_1 = 4194303;
        break;
       case 0:
        break label$31;
       default:
        break label$30;
       };
      }
      $6_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) & $2_1 | 0;
     }
     $10_1 = $10_1 + 1 | 0;
     if (($20_1 | 0) != (2 | 0)) {
      break label$19
     }
     $21_1 = 1.0 - $21_1;
     $20_1 = 2;
     if (!$13_1) {
      break label$19
     }
     $21_1 = $21_1 - +$1069(+(1.0), $12_1 | 0);
    }
    label$33 : {
     if ($21_1 != 0.0) {
      break label$33
     }
     $6_1 = 0;
     $2_1 = $11_1;
     label$34 : {
      if (($2_1 | 0) <= ($9_1 | 0)) {
       break label$34
      }
      label$35 : while (1) {
       $2_1 = $2_1 + -1 | 0;
       $6_1 = HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | $6_1 | 0;
       if (($2_1 | 0) > ($9_1 | 0)) {
        continue label$35
       }
       break label$35;
      };
      if (!$6_1) {
       break label$34
      }
      $8_1 = $12_1;
      label$36 : while (1) {
       $8_1 = $8_1 + -24 | 0;
       $11_1 = $11_1 + -1 | 0;
       if (!(HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] | 0)) {
        continue label$36
       }
       break label$9;
      };
     }
     $2_1 = 1;
     label$37 : while (1) {
      $6_1 = $2_1;
      $2_1 = $2_1 + 1 | 0;
      if (!(HEAP32[(($5_1 + 480 | 0) + (($9_1 - $6_1 | 0) << 2 | 0) | 0) >> 2] | 0)) {
       continue label$37
      }
      break label$37;
     };
     $13_1 = $6_1 + $11_1 | 0;
     label$38 : while (1) {
      $6_1 = $11_1 + $3_1 | 0;
      $11_1 = $11_1 + 1 | 0;
      HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = +(HEAP32[((($11_1 + $7_1 | 0) << 2 | 0) + 107376 | 0) >> 2] | 0 | 0);
      $2_1 = 0;
      $21_1 = 0.0;
      label$39 : {
       if (($3_1 | 0) < (1 | 0)) {
        break label$39
       }
       label$40 : while (1) {
        $21_1 = +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3] + $21_1;
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != ($3_1 | 0)) {
         continue label$40
        }
        break label$40;
       };
      }
      HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $21_1;
      if (($11_1 | 0) < ($13_1 | 0)) {
       continue label$38
      }
      break label$38;
     };
     $11_1 = $13_1;
     continue label$10;
    }
    break label$10;
   };
   label$41 : {
    label$42 : {
     $21_1 = +$1069(+$21_1, 24 - $8_1 | 0 | 0);
     if (!($21_1 >= 16777216.0)) {
      break label$42
     }
     $3_1 = $11_1 << 2 | 0;
     label$43 : {
      label$44 : {
       $22_1 = $21_1 * 5.9604644775390625e-08;
       if (!(Math_abs($22_1) < 2147483648.0)) {
        break label$44
       }
       $2_1 = ~~$22_1;
       break label$43;
      }
      $2_1 = -2147483648;
     }
     $3_1 = ($5_1 + 480 | 0) + $3_1 | 0;
     label$45 : {
      label$46 : {
       $21_1 = +($2_1 | 0) * -16777216.0 + $21_1;
       if (!(Math_abs($21_1) < 2147483648.0)) {
        break label$46
       }
       $6_1 = ~~$21_1;
       break label$45;
      }
      $6_1 = -2147483648;
     }
     HEAP32[$3_1 >> 2] = $6_1;
     $11_1 = $11_1 + 1 | 0;
     break label$41;
    }
    label$47 : {
     label$48 : {
      if (!(Math_abs($21_1) < 2147483648.0)) {
       break label$48
      }
      $2_1 = ~~$21_1;
      break label$47;
     }
     $2_1 = -2147483648;
    }
    $8_1 = $12_1;
   }
   HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
  $21_1 = +$1069(+(1.0), $8_1 | 0);
  label$49 : {
   if (($11_1 | 0) <= (-1 | 0)) {
    break label$49
   }
   $3_1 = $11_1;
   label$50 : while (1) {
    $2_1 = $3_1;
    HEAPF64[($5_1 + ($2_1 << 3 | 0) | 0) >> 3] = $21_1 * +(HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
    $3_1 = $2_1 + -1 | 0;
    $21_1 = $21_1 * 5.9604644775390625e-08;
    if ($2_1) {
     continue label$50
    }
    break label$50;
   };
   if (($11_1 | 0) <= (-1 | 0)) {
    break label$49
   }
   $6_1 = $11_1;
   label$51 : while (1) {
    $21_1 = 0.0;
    $2_1 = 0;
    label$52 : {
     $13_1 = $11_1 - $6_1 | 0;
     $0_1 = ($9_1 | 0) < ($13_1 | 0) ? $9_1 : $13_1;
     if (($0_1 | 0) < (0 | 0)) {
      break label$52
     }
     label$53 : while (1) {
      $21_1 = +HEAPF64[(($2_1 << 3 | 0) + 110144 | 0) >> 3] * +HEAPF64[($5_1 + (($2_1 + $6_1 | 0) << 3 | 0) | 0) >> 3] + $21_1;
      $3_1 = ($2_1 | 0) != ($0_1 | 0);
      $2_1 = $2_1 + 1 | 0;
      if ($3_1) {
       continue label$53
      }
      break label$53;
     };
    }
    HEAPF64[(($5_1 + 160 | 0) + ($13_1 << 3 | 0) | 0) >> 3] = $21_1;
    $2_1 = ($6_1 | 0) > (0 | 0);
    $6_1 = $6_1 + -1 | 0;
    if ($2_1) {
     continue label$51
    }
    break label$51;
   };
  }
  label$54 : {
   label$55 : {
    label$56 : {
     switch ($4_1 | 0) {
     case 3:
      $23_1 = 0.0;
      label$59 : {
       if (($11_1 | 0) < (1 | 0)) {
        break label$59
       }
       $21_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label$60 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $22_1 = +HEAPF64[$6_1 >> 3];
        $522_1 = $22_1;
        $22_1 = $22_1 + $21_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $21_1 + ($522_1 - $22_1);
        HEAPF64[$6_1 >> 3] = $22_1;
        $6_1 = $2_1 >>> 0 > 1 >>> 0;
        $21_1 = $22_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$60
        }
        break label$60;
       };
       if (($11_1 | 0) == (1 | 0)) {
        break label$59
       }
       $21_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label$61 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $22_1 = +HEAPF64[$6_1 >> 3];
        $560_1 = $22_1;
        $22_1 = $22_1 + $21_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $21_1 + ($560_1 - $22_1);
        HEAPF64[$6_1 >> 3] = $22_1;
        $6_1 = $2_1 >>> 0 > 2 >>> 0;
        $21_1 = $22_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$61
        }
        break label$61;
       };
       $23_1 = 0.0;
       if (($11_1 | 0) == (1 | 0)) {
        break label$59
       }
       label$62 : while (1) {
        $23_1 = $23_1 + +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
        $2_1 = ($11_1 | 0) > (2 | 0);
        $11_1 = $11_1 + -1 | 0;
        if ($2_1) {
         continue label$62
        }
        break label$62;
       };
      }
      $21_1 = +HEAPF64[($5_1 + 160 | 0) >> 3];
      if ($20_1) {
       break label$55
      }
      HEAPF64[$1_1 >> 3] = $21_1;
      $21_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
      HEAPF64[($1_1 + 16 | 0) >> 3] = $23_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $21_1;
      break label$54;
     case 0:
      $21_1 = 0.0;
      label$63 : {
       if (($11_1 | 0) < (0 | 0)) {
        break label$63
       }
       label$64 : while (1) {
        $2_1 = $11_1;
        $11_1 = $2_1 + -1 | 0;
        $21_1 = $21_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
        if ($2_1) {
         continue label$64
        }
        break label$64;
       };
      }
      HEAPF64[$1_1 >> 3] = $20_1 ? -$21_1 : $21_1;
      break label$54;
     case 1:
     case 2:
      break label$56;
     default:
      break label$54;
     };
    }
    $21_1 = 0.0;
    label$65 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$65
     }
     $3_1 = $11_1;
     label$66 : while (1) {
      $2_1 = $3_1;
      $3_1 = $2_1 + -1 | 0;
      $21_1 = $21_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      if ($2_1) {
       continue label$66
      }
      break label$66;
     };
    }
    HEAPF64[$1_1 >> 3] = $20_1 ? -$21_1 : $21_1;
    $21_1 = +HEAPF64[($5_1 + 160 | 0) >> 3] - $21_1;
    $2_1 = 1;
    label$67 : {
     if (($11_1 | 0) < (1 | 0)) {
      break label$67
     }
     label$68 : while (1) {
      $21_1 = $21_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      $3_1 = ($2_1 | 0) != ($11_1 | 0);
      $2_1 = $2_1 + 1 | 0;
      if ($3_1) {
       continue label$68
      }
      break label$68;
     };
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $20_1 ? -$21_1 : $21_1;
    break label$54;
   }
   HEAPF64[$1_1 >> 3] = -$21_1;
   $21_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
   HEAPF64[($1_1 + 16 | 0) >> 3] = -$23_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = -$21_1;
  }
  global$0 = $5_1 + 560 | 0;
  return $10_1 & 7 | 0 | 0;
 }
 
 function $996($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $9_1 = 0.0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $10_1 = 0.0, $4_1 = 0, $5_1 = 0, $11_1 = 0.0, $12_1 = 0.0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $189_1 = 0, $215_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      wasm2js_scratch_store_f64(+$0_1);
      i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
      $8_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      $8$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $8_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $3_1 = $21_1;
      $4_1 = $3_1 & 2147483647 | 0;
      if ($4_1 >>> 0 > 1074752122 >>> 0) {
       break label$4
      }
      if (($3_1 & 1048575 | 0 | 0) == (598523 | 0)) {
       break label$3
      }
      label$5 : {
       if ($4_1 >>> 0 > 1073928572 >>> 0) {
        break label$5
       }
       label$6 : {
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$0 = $8_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $22_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $23_1 = 0
          } else {
           $23_1 = 1
          }
          $24_1 = $23_1;
         } else {
          $24_1 = 0
         }
         $22_1 = $24_1;
        }
        if ($22_1) {
         break label$6
        }
        $0_1 = $0_1 + -1.5707963267341256;
        $9_1 = $0_1 + -6.077100506506192e-11;
        HEAPF64[$1_1 >> 3] = $9_1;
        HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + -6.077100506506192e-11;
        $3_1 = 1;
        break label$1;
       }
       $0_1 = $0_1 + 1.5707963267341256;
       $9_1 = $0_1 + 6.077100506506192e-11;
       HEAPF64[$1_1 >> 3] = $9_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + 6.077100506506192e-11;
       $3_1 = -1;
       break label$1;
      }
      label$7 : {
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$3 = $8_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $25_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $26_1 = 0
         } else {
          $26_1 = 1
         }
         $27_1 = $26_1;
        } else {
         $27_1 = 0
        }
        $25_1 = $27_1;
       }
       if ($25_1) {
        break label$7
       }
       $0_1 = $0_1 + -3.1415926534682512;
       $9_1 = $0_1 + -1.2154201013012384e-10;
       HEAPF64[$1_1 >> 3] = $9_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + -1.2154201013012384e-10;
       $3_1 = 2;
       break label$1;
      }
      $0_1 = $0_1 + 3.1415926534682512;
      $9_1 = $0_1 + 1.2154201013012384e-10;
      HEAPF64[$1_1 >> 3] = $9_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + 1.2154201013012384e-10;
      $3_1 = -2;
      break label$1;
     }
     label$8 : {
      if ($4_1 >>> 0 > 1075594811 >>> 0) {
       break label$8
      }
      label$9 : {
       if ($4_1 >>> 0 > 1075183036 >>> 0) {
        break label$9
       }
       if (($4_1 | 0) == (1074977148 | 0)) {
        break label$3
       }
       label$10 : {
        i64toi32_i32$3 = $8$hi;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
         $28_1 = 1
        } else {
         if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
           $29_1 = 0
          } else {
           $29_1 = 1
          }
          $30_1 = $29_1;
         } else {
          $30_1 = 0
         }
         $28_1 = $30_1;
        }
        if ($28_1) {
         break label$10
        }
        $0_1 = $0_1 + -4.712388980202377;
        $9_1 = $0_1 + -1.8231301519518578e-10;
        HEAPF64[$1_1 >> 3] = $9_1;
        HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + -1.8231301519518578e-10;
        $3_1 = 3;
        break label$1;
       }
       $0_1 = $0_1 + 4.712388980202377;
       $9_1 = $0_1 + 1.8231301519518578e-10;
       HEAPF64[$1_1 >> 3] = $9_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + 1.8231301519518578e-10;
       $3_1 = -3;
       break label$1;
      }
      if (($4_1 | 0) == (1075388923 | 0)) {
       break label$3
      }
      label$11 : {
       i64toi32_i32$2 = $8$hi;
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
        $31_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $32_1 = 0
         } else {
          $32_1 = 1
         }
         $33_1 = $32_1;
        } else {
         $33_1 = 0
        }
        $31_1 = $33_1;
       }
       if ($31_1) {
        break label$11
       }
       $0_1 = $0_1 + -6.2831853069365025;
       $9_1 = $0_1 + -2.430840202602477e-10;
       HEAPF64[$1_1 >> 3] = $9_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + -2.430840202602477e-10;
       $3_1 = 4;
       break label$1;
      }
      $0_1 = $0_1 + 6.2831853069365025;
      $9_1 = $0_1 + 2.430840202602477e-10;
      HEAPF64[$1_1 >> 3] = $9_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $9_1 + 2.430840202602477e-10;
      $3_1 = -4;
      break label$1;
     }
     if ($4_1 >>> 0 > 1094263290 >>> 0) {
      break label$2
     }
    }
    $9_1 = $0_1 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $10_1 = $0_1 + $9_1 * -1.5707963267341256;
    $11_1 = $9_1 * 6.077100506506192e-11;
    $12_1 = $10_1 - $11_1;
    $5_1 = $12_1 < -.7853981633974483;
    label$12 : {
     label$13 : {
      if (!(Math_abs($9_1) < 2147483648.0)) {
       break label$13
      }
      $3_1 = ~~$9_1;
      break label$12;
     }
     $3_1 = -2147483648;
    }
    label$14 : {
     label$15 : {
      if (!$5_1) {
       break label$15
      }
      $3_1 = $3_1 + -1 | 0;
      $9_1 = $9_1 + -1.0;
      $11_1 = $9_1 * 6.077100506506192e-11;
      $10_1 = $0_1 + $9_1 * -1.5707963267341256;
      break label$14;
     }
     if (!($12_1 > .7853981633974483)) {
      break label$14
     }
     $3_1 = $3_1 + 1 | 0;
     $9_1 = $9_1 + 1.0;
     $11_1 = $9_1 * 6.077100506506192e-11;
     $10_1 = $0_1 + $9_1 * -1.5707963267341256;
    }
    $0_1 = $10_1 - $11_1;
    HEAPF64[$1_1 >> 3] = $0_1;
    label$16 : {
     $5_1 = $4_1 >>> 20 | 0;
     $189_1 = $5_1;
     wasm2js_scratch_store_f64(+$0_1);
     i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 52;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $34_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $34_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     if (($189_1 - ($34_1 & 2047 | 0) | 0 | 0) < (17 | 0)) {
      break label$16
     }
     $0_1 = $9_1 * 6.077100506303966e-11;
     $12_1 = $10_1 - $0_1;
     $11_1 = $9_1 * 2.0222662487959506e-21 - ($10_1 - $12_1 - $0_1);
     $0_1 = $12_1 - $11_1;
     HEAPF64[$1_1 >> 3] = $0_1;
     label$17 : {
      $215_1 = $5_1;
      wasm2js_scratch_store_f64(+$0_1);
      i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 52;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $35_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $35_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      if (($215_1 - ($35_1 & 2047 | 0) | 0 | 0) >= (50 | 0)) {
       break label$17
      }
      $10_1 = $12_1;
      break label$16;
     }
     $0_1 = $9_1 * 2.0222662487111665e-21;
     $10_1 = $12_1 - $0_1;
     $11_1 = $9_1 * 8.4784276603689e-32 - ($12_1 - $10_1 - $0_1);
     $0_1 = $10_1 - $11_1;
     HEAPF64[$1_1 >> 3] = $0_1;
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $10_1 - $0_1 - $11_1;
    break label$1;
   }
   label$18 : {
    if ($4_1 >>> 0 < 2146435072 >>> 0) {
     break label$18
    }
    $0_1 = $0_1 - $0_1;
    HEAPF64[$1_1 >> 3] = $0_1;
    HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
    $3_1 = 0;
    break label$1;
   }
   $6_1 = $2_1 + 16 | 0 | 8 | 0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$2 = $8_1;
   i64toi32_i32$1 = 1048575;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 1096810496;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
   $3_1 = $2_1 + 16 | 0;
   $5_1 = 1;
   label$19 : while (1) {
    label$20 : {
     label$21 : {
      if (!(Math_abs($0_1) < 2147483648.0)) {
       break label$21
      }
      $7_1 = ~~$0_1;
      break label$20;
     }
     $7_1 = -2147483648;
    }
    $9_1 = +($7_1 | 0);
    HEAPF64[$3_1 >> 3] = $9_1;
    $0_1 = ($0_1 - $9_1) * 16777216.0;
    $7_1 = $5_1 & 1 | 0;
    $5_1 = 0;
    $3_1 = $6_1;
    if ($7_1) {
     continue label$19
    }
    break label$19;
   };
   HEAPF64[($2_1 + 32 | 0) >> 3] = $0_1;
   $3_1 = 2;
   label$22 : while (1) {
    $5_1 = $3_1;
    $3_1 = $3_1 + -1 | 0;
    if (+HEAPF64[(($2_1 + 16 | 0) + ($5_1 << 3 | 0) | 0) >> 3] == 0.0) {
     continue label$22
    }
    break label$22;
   };
   $3_1 = $995($2_1 + 16 | 0 | 0, $2_1 | 0, ($4_1 >>> 20 | 0) + -1046 | 0 | 0, $5_1 + 1 | 0 | 0, 1 | 0) | 0;
   $0_1 = +HEAPF64[$2_1 >> 3];
   label$23 : {
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
     $36_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $37_1 = 0
      } else {
       $37_1 = 1
      }
      $38_1 = $37_1;
     } else {
      $38_1 = 0
     }
     $36_1 = $38_1;
    }
    if ($36_1) {
     break label$23
    }
    HEAPF64[$1_1 >> 3] = -$0_1;
    HEAPF64[($1_1 + 8 | 0) >> 3] = -+HEAPF64[($2_1 + 8 | 0) >> 3];
    $3_1 = 0 - $3_1 | 0;
    break label$1;
   }
   HEAPF64[$1_1 >> 3] = $0_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = +HEAPF64[($2_1 + 8 | 0) >> 3];
  }
  global$0 = $2_1 + 48 | 0;
  return $3_1 | 0;
 }
 
 function $997($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $3_1 = 0.0, $5_1 = 0.0, $4_1 = 0.0;
  $3_1 = $0_1 * $0_1;
  $4_1 = $3_1 * ($3_1 * $3_1) * ($3_1 * 1.58969099521155e-10 + -2.5050760253406863e-08) + ($3_1 * ($3_1 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
  $5_1 = $0_1 * $3_1;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return +($5_1 * ($3_1 * $4_1 + -.16666666666666632) + $0_1);
  }
  return +($0_1 - ($3_1 * ($1_1 * .5 - $5_1 * $4_1) - $1_1 + $5_1 * .16666666666666632));
 }
 
 function $998($0_1) {
  $0_1 = +$0_1;
  var $3_1 = 0.0, $1_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $9_1 = 0, i64toi32_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $9_1 & 2147483647 | 0;
    if ($2_1 >>> 0 > 1072243195 >>> 0) {
     break label$2
    }
    $3_1 = 1.0;
    if ($2_1 >>> 0 < 1044816030 >>> 0) {
     break label$1
    }
    $3_1 = +$994(+$0_1, +(0.0));
    break label$1;
   }
   label$3 : {
    if ($2_1 >>> 0 < 2146435072 >>> 0) {
     break label$3
    }
    $3_1 = $0_1 - $0_1;
    break label$1;
   }
   $2_1 = $996(+$0_1, $1_1 | 0) | 0;
   $0_1 = +HEAPF64[($1_1 + 8 | 0) >> 3];
   $3_1 = +HEAPF64[$1_1 >> 3];
   label$4 : {
    switch ($2_1 & 3 | 0 | 0) {
    default:
     $3_1 = +$994(+$3_1, +$0_1);
     break label$1;
    case 1:
     $3_1 = -+$997(+$3_1, +$0_1, 1 | 0);
     break label$1;
    case 2:
     $3_1 = -+$994(+$3_1, +$0_1);
     break label$1;
    case 3:
     break label$4;
    };
   }
   $3_1 = +$997(+$3_1, +$0_1, 1 | 0);
  }
  global$0 = $1_1 + 16 | 0;
  return +$3_1;
 }
 
 function $999($0_1) {
  $0_1 = $0_1 | 0;
  return $1003($0_1 | 0) | 0 | 0;
 }
 
 function $1000($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[(0 + 131084 | 0) >> 2] | 0;
  $3_1 = ($2_1 | 0) == ($0_1 | 0);
  HEAP32[(0 + 131084 | 0) >> 2] = $3_1 ? $1_1 : $2_1;
  return ($3_1 ? $0_1 : $2_1) | 0;
 }
 
 function $1001($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : while (1) {
    $1_1 = HEAP32[(0 + 131084 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    if (($1000($1_1 | 0, 0 | 0) | 0 | 0) != ($1_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   label$3 : while (1) {
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    $1148($1_1 | 0);
    $1_1 = $3_1;
    if ($1_1) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $3_1 = -1;
  label$4 : {
   $1_1 = $1056() | 0;
   $4_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
   if (($4_1 | 0) == (-1 | 0)) {
    break label$4
   }
   $1148($4_1 | 0);
  }
  label$5 : {
   $4_1 = $1129(0 | 0, 0 | 0, $0_1 | 0, HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   $5_1 = ($4_1 >>> 0 > 4 >>> 0 ? $4_1 : 4) + 1 | 0;
   $4_1 = $1146($5_1 | 0) | 0;
   if (!$4_1) {
    break label$5
   }
   $1129($4_1 | 0, $5_1 | 0, $0_1 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) | 0;
   $3_1 = $4_1;
  }
  HEAP32[($1_1 + 104 | 0) >> 2] = $3_1;
  HEAP8[($1_1 + 42 | 0) >> 0] = HEAPU8[($1_1 + 42 | 0) >> 0] | 0 | 2 | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1002($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1001($0_1 | 0, $1_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1003($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = $0_1;
  $1002(70428 | 0, $1_1 | 0);
  global$0 = $1_1 + 16 | 0;
  return 1 | 0;
 }
 
 function $1004($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$254($0_1 | 0, $1_1 | 0, $2_1 | 0);
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0_1 & 3 | 0) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if ($2_1) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (!($2_1 & 3 | 0)) {
       break label$4
      }
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    $4_1 = $3_1 & -4 | 0;
    label$8 : {
     if ($3_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($0_1 >>> 0 <= $4_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $1005($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = $2_1 + $0_1 | 0;
    if (($1_1 - $3_1 | 0) >>> 0 > (0 - ($2_1 << 1 | 0) | 0) >>> 0) {
     break label$2
    }
    return $1004($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
   }
   $4_1 = ($1_1 ^ $0_1 | 0) & 3 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$5
      }
      label$6 : {
       if (!$4_1) {
        break label$6
       }
       $3_1 = $0_1;
       break label$3;
      }
      label$7 : {
       if ($0_1 & 3 | 0) {
        break label$7
       }
       $3_1 = $0_1;
       break label$4;
      }
      $3_1 = $0_1;
      label$8 : while (1) {
       if (!$2_1) {
        break label$1
       }
       HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = $3_1 + 1 | 0;
       if (!($3_1 & 3 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     label$9 : {
      if ($4_1) {
       break label$9
      }
      label$10 : {
       if (!($3_1 & 3 | 0)) {
        break label$10
       }
       label$11 : while (1) {
        if (!$2_1) {
         break label$1
        }
        $2_1 = $2_1 + -1 | 0;
        $3_1 = $0_1 + $2_1 | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
        if ($3_1 & 3 | 0) {
         continue label$11
        }
        break label$11;
       };
      }
      if ($2_1 >>> 0 <= 3 >>> 0) {
       break label$9
      }
      label$12 : while (1) {
       $2_1 = $2_1 + -4 | 0;
       HEAP32[($0_1 + $2_1 | 0) >> 2] = HEAP32[($1_1 + $2_1 | 0) >> 2] | 0;
       if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$2_1) {
      break label$1
     }
     label$13 : while (1) {
      $2_1 = $2_1 + -1 | 0;
      HEAP8[($0_1 + $2_1 | 0) >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$1;
     };
    }
    if ($2_1 >>> 0 <= 3 >>> 0) {
     break label$3
    }
    label$14 : while (1) {
     HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$14
     }
     break label$14;
    };
   }
   if (!$2_1) {
    break label$1
   }
   label$15 : while (1) {
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $1006($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $6$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = $1_1;
   $3_1 = $0_1 + $2_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $1007($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0.0, i64toi32_i32$0 = 0.0, i64toi32_i32$2 = 0, $5_1 = 0, $4_1 = 0.0, $10_1 = 0, $11_1 = 0, $5$hi = 0, $2_1 = 0;
  label$1 : {
   if (HEAPU8[(0 + 131088 | 0) >> 0] | 0) {
    break label$1
   }
   $2_1 = fimport$256() | 0;
   HEAP8[(0 + 131088 | 0) >> 0] = 1;
   HEAP8[(0 + 131089 | 0) >> 0] = $2_1;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      switch ($0_1 | 0) {
      case 0:
       break label$3;
      case 1:
      case 4:
       break label$5;
      default:
       break label$4;
      };
     }
     if ((HEAPU8[(0 + 131089 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$4
     }
     $3_1 = +fimport$257();
     break label$2;
    }
    HEAP32[($986() | 0) >> 2] = 28;
    return -1 | 0;
   }
   $3_1 = +fimport$255();
  }
  label$6 : {
   label$7 : {
    $4_1 = $3_1 / 1.0e3;
    if (!(Math_abs($4_1) < 9223372036854775808.0)) {
     break label$7
    }
    i64toi32_i32$0 = $4_1;
    if (Math_abs(i64toi32_i32$0) >= 1.0) {
     if (i64toi32_i32$0 > 0.0) {
      $10_1 = ~~Math_min(Math_floor(i64toi32_i32$0 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
     } else {
      $10_1 = ~~Math_ceil((i64toi32_i32$0 - +(~~i64toi32_i32$0 >>> 0 >>> 0)) / 4294967296.0) >>> 0
     }
     $11_1 = $10_1;
    } else {
     $11_1 = 0
    }
    i64toi32_i32$1 = $11_1;
    $5_1 = ~~i64toi32_i32$0 >>> 0;
    $5$hi = i64toi32_i32$1;
    break label$6;
   }
   i64toi32_i32$1 = -2147483648;
   $5_1 = 0;
   $5$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$2 = $1_1;
  HEAP32[i64toi32_i32$2 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$8 : {
   label$9 : {
    i64toi32_i32$2 = 0;
    i64toi32_i32$2 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $3_1 = ($3_1 - (+(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0))) * 1.0e3 * 1.0e3;
    if (!(Math_abs($3_1) < 2147483648.0)) {
     break label$9
    }
    $0_1 = ~~$3_1;
    break label$8;
   }
   $0_1 = -2147483648;
  }
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  return 0 | 0;
 }
 
 function $1008($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0.0, i64toi32_i32$2 = 0, $2_1 = 0.0, $4_1 = 0, $3_1 = 0.0, $10_1 = 0, $11_1 = 0, $4$hi = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = +fimport$255();
    $3_1 = $2_1 / 1.0e3;
    if (!(Math_abs($3_1) < 9223372036854775808.0)) {
     break label$2
    }
    i64toi32_i32$0 = $3_1;
    if (Math_abs(i64toi32_i32$0) >= 1.0) {
     if (i64toi32_i32$0 > 0.0) {
      $10_1 = ~~Math_min(Math_floor(i64toi32_i32$0 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
     } else {
      $10_1 = ~~Math_ceil((i64toi32_i32$0 - +(~~i64toi32_i32$0 >>> 0 >>> 0)) / 4294967296.0) >>> 0
     }
     $11_1 = $10_1;
    } else {
     $11_1 = 0
    }
    i64toi32_i32$1 = $11_1;
    $4_1 = ~~i64toi32_i32$0 >>> 0;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = -2147483648;
   $4_1 = 0;
   $4$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$3 : {
   label$4 : {
    i64toi32_i32$2 = 0;
    i64toi32_i32$2 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $2_1 = ($2_1 - (+(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0))) * 1.0e3;
    if (!(Math_abs($2_1) < 2147483648.0)) {
     break label$4
    }
    $5_1 = ~~$2_1;
    break label$3;
   }
   $5_1 = -2147483648;
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
  return 0 | 0;
 }
 
 function $1009($0_1) {
  $0_1 = +$0_1;
  return +Math_abs($0_1);
 }
 
 function $1010($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1011($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1012($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1013($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $5_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1_1 = 1;
    break label$1;
   }
   $1_1 = !($1010($0_1 | 0) | 0);
  }
  $2_1 = $1015($0_1 | 0) | 0;
  $3_1 = FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0]($0_1) | 0;
  label$3 : {
   if ($1_1) {
    break label$3
   }
   $1011($0_1 | 0);
  }
  label$4 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 1 | 0) {
    break label$4
   }
   $1012($0_1 | 0);
   $4_1 = $1052() | 0;
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   label$5 : {
    $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$5
    }
    HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
   }
   label$6 : {
    if (!$1_1) {
     break label$6
    }
    HEAP32[($1_1 + 52 | 0) >> 2] = $5_1;
   }
   label$7 : {
    if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$7
    }
    HEAP32[$4_1 >> 2] = $1_1;
   }
   $1053();
   $1148(HEAP32[($0_1 + 96 | 0) >> 2] | 0 | 0);
   $1148($0_1 | 0);
  }
  return $3_1 | $2_1 | 0 | 0;
 }
 
 function $1014($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    break label$1;
   }
   $2_1 = $1010($0_1 | 0) | 0;
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $1011($0_1 | 0);
  }
  return ($1_1 >>> 5 | 0) & 1 | 0 | 0;
 }
 
 function $1015($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $1_1 = 0;
   label$2 : {
    if (!(HEAP32[(0 + 117928 | 0) >> 2] | 0)) {
     break label$2
    }
    $1_1 = $1015(HEAP32[(0 + 117928 | 0) >> 2] | 0 | 0) | 0;
   }
   label$3 : {
    if (!(HEAP32[(0 + 117776 | 0) >> 2] | 0)) {
     break label$3
    }
    $1_1 = $1015(HEAP32[(0 + 117776 | 0) >> 2] | 0 | 0) | 0 | $1_1 | 0;
   }
   label$4 : {
    $0_1 = HEAP32[($1052() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$4
    }
    label$5 : while (1) {
     $2_1 = 0;
     label$6 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$6
      }
      $2_1 = $1010($0_1 | 0) | 0;
     }
     label$7 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
       break label$7
      }
      $1_1 = $1015($0_1 | 0) | 0 | $1_1 | 0;
     }
     label$8 : {
      if (!$2_1) {
       break label$8
      }
      $1011($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $1053();
   return $1_1 | 0;
  }
  label$9 : {
   label$10 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break label$10
    }
    $2_1 = 1;
    break label$9;
   }
   $2_1 = !($1010($0_1 | 0) | 0);
  }
  label$11 : {
   label$12 : {
    label$13 : {
     if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
     if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
      break label$13
     }
     $1_1 = -1;
     if (!$2_1) {
      break label$12
     }
     break label$11;
    }
    label$14 : {
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (($1_1 | 0) == ($3_1 | 0)) {
      break label$14
     }
     i64toi32_i32$1 = $1_1 - $3_1 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    }
    $1_1 = 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$1 = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$1 = 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
    if ($2_1) {
     break label$11
    }
   }
   $1011($0_1 | 0);
  }
  return $1_1 | 0;
 }
 
 function $1016($0_1) {
  $0_1 = +$0_1;
  return +Math_floor($0_1);
 }
 
 function $1017($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 2;
  label$1 : {
   if ($1076($0_1 | 0, 43 | 0) | 0) {
    break label$1
   }
   $1_1 = (HEAPU8[$0_1 >> 0] | 0 | 0) != (114 | 0);
  }
  $1_1 = $1076($0_1 | 0, 120 | 0) | 0 ? $1_1 | 128 | 0 : $1_1;
  $1_1 = $1076($0_1 | 0, 101 | 0) | 0 ? $1_1 | 524288 | 0 : $1_1;
  $0_1 = HEAPU8[$0_1 >> 0] | 0;
  $1_1 = ($0_1 | 0) == (114 | 0) ? $1_1 : $1_1 | 64 | 0;
  $1_1 = ($0_1 | 0) == (119 | 0) ? $1_1 | 512 | 0 : $1_1;
  return (($0_1 | 0) == (97 | 0) ? $1_1 | 1024 | 0 : $1_1) | 0;
 }
 
 function $1018($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $1048(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1019($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $4_1 = $3_1 + 16 | 0;
  $7_1 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!($1141(fimport$261(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        break label$5
       }
       $5_1 = $4_1;
       break label$4;
      }
      label$6 : while (1) {
       $1_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($1_1 | 0)) {
        break label$3
       }
       label$7 : {
        if (($1_1 | 0) > (-1 | 0)) {
         break label$7
        }
        $5_1 = $4_1;
        break label$2;
       }
       $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       $9_1 = $1_1 >>> 0 > $8_1 >>> 0;
       $5_1 = $4_1 + ($9_1 << 3 | 0) | 0;
       $8_1 = $1_1 - ($9_1 ? $8_1 : 0) | 0;
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + $8_1 | 0;
       $4_1 = $4_1 + ($9_1 ? 12 : 4) | 0;
       HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $1_1 | 0;
       $4_1 = $5_1;
       $7_1 = $7_1 - $9_1 | 0;
       if (!($1141(fimport$261(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $4_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$6
       }
       break label$6;
      };
     }
     if (($6_1 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $1_1 = $2_1;
    break label$1;
   }
   $1_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$1
   }
   $1_1 = $2_1 - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1020($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = 0;
  $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($5_1 | 0) != (0 | 0)) | 0;
  $6_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
  $5_1 = 32;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1141(fimport$262(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
      break label$3
     }
     $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($5_1 | 0) > (0 | 0)) {
      break label$2
     }
     $5_1 = $5_1 ? 32 : 16;
    }
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | $5_1 | 0;
    break label$1;
   }
   $4_1 = $5_1;
   $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   if ($5_1 >>> 0 <= $6_1 >>> 0) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $4_1 + ($5_1 - $6_1 | 0) | 0;
   label$4 : {
    if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[(($1_1 + $2_1 | 0) + -1 | 0) >> 0] = HEAPU8[$4_1 >> 0] | 0;
   }
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $1021($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1022($0_1) {
  $0_1 = $0_1 | 0;
  return $1141(fimport$263($1021(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1023($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $34_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1076(74402 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
       break label$4
      }
      HEAP32[($986() | 0) >> 2] = 28;
      break label$3;
     }
     $3_1 = $1146(1176 | 0) | 0;
     if ($3_1) {
      break label$2
     }
    }
    $3_1 = 0;
    break label$1;
   }
   $1006($3_1 | 0, 0 | 0, 144 | 0) | 0;
   label$5 : {
    if ($1076($1_1 | 0, 43 | 0) | 0) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = (HEAPU8[$1_1 >> 0] | 0 | 0) == (114 | 0) ? 8 : 4;
   }
   label$6 : {
    label$7 : {
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (97 | 0)) {
      break label$7
     }
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     break label$6;
    }
    label$8 : {
     $1_1 = fimport$259($0_1 | 0, 3 | 0, 0 | 0) | 0;
     if ($1_1 & 1024 | 0) {
      break label$8
     }
     i64toi32_i32$1 = $1_1 | 1024 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $34_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $34_1;
     HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     fimport$259($0_1 | 0, 4 | 0, $2_1 + 16 | 0 | 0) | 0;
    }
    $1_1 = HEAP32[$3_1 >> 2] | 0 | 128 | 0;
    HEAP32[$3_1 >> 2] = $1_1;
   }
   HEAP32[($3_1 + 80 | 0) >> 2] = -1;
   HEAP32[($3_1 + 48 | 0) >> 2] = 1024;
   HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $3_1 + 152 | 0;
   label$9 : {
    if ($1_1 & 8 | 0) {
     break label$9
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $2_1;
    HEAP32[$2_1 >> 2] = $2_1 + 24 | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    if (fimport$260($0_1 | 0, 21523 | 0, $2_1 | 0) | 0) {
     break label$9
    }
    HEAP32[($3_1 + 80 | 0) >> 2] = 10;
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = 530;
   HEAP32[($3_1 + 36 | 0) >> 2] = 531;
   HEAP32[($3_1 + 32 | 0) >> 2] = 532;
   HEAP32[($3_1 + 12 | 0) >> 2] = 533;
   label$10 : {
    if (HEAPU8[(0 + 131097 | 0) >> 0] | 0) {
     break label$10
    }
    HEAP32[($3_1 + 76 | 0) >> 2] = -1;
   }
   $3_1 = $1054($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $1024($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1076(74402 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
      break label$3
     }
     HEAP32[($986() | 0) >> 2] = 28;
     break label$2;
    }
    $3_1 = $1017($1_1 | 0) | 0;
    HEAP32[$2_1 >> 2] = 438;
    HEAP32[($2_1 + 4 | 0) >> 2] = 0;
    $4_1 = 0;
    $0_1 = $1111(fimport$258(-100 | 0, $0_1 | 0, $3_1 | 32768 | 0 | 0, $2_1 | 0) | 0 | 0) | 0;
    if (($0_1 | 0) < (0 | 0)) {
     break label$1
    }
    $4_1 = $1023($0_1 | 0, $1_1 | 0) | 0;
    if ($4_1) {
     break label$1
    }
    fimport$263($0_1 | 0) | 0;
   }
   $4_1 = 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1025($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $1128($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1026($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $1027($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $4_1 = 1;
    break label$1;
   }
   $4_1 = !($1010($3_1 | 0) | 0);
  }
  $5_1 = Math_imul($2_1, $1_1);
  $6_1 = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
  HEAP32[($3_1 + 72 | 0) >> 2] = $6_1 + -1 | 0 | $6_1 | 0;
  label$3 : {
   label$4 : {
    $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    if (($6_1 | 0) != ($7_1 | 0)) {
     break label$4
    }
    $6_1 = $5_1;
    break label$3;
   }
   $7_1 = $7_1 - $6_1 | 0;
   $7_1 = $7_1 >>> 0 < $5_1 >>> 0 ? $7_1 : $5_1;
   $1004($0_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + $7_1 | 0;
   $6_1 = $5_1 - $7_1 | 0;
   $0_1 = $0_1 + $7_1 | 0;
  }
  label$5 : {
   if (!$6_1) {
    break label$5
   }
   label$6 : while (1) {
    label$7 : {
     label$8 : {
      if ($1026($3_1 | 0) | 0) {
       break label$8
      }
      $7_1 = FUNCTION_TABLE[HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0]($3_1, $0_1, $6_1) | 0;
      if ($7_1) {
       break label$7
      }
     }
     label$9 : {
      if ($4_1) {
       break label$9
      }
      $1011($3_1 | 0);
     }
     return (($5_1 - $6_1 | 0) >>> 0) / ($1_1 >>> 0) | 0 | 0;
    }
    $0_1 = $0_1 + $7_1 | 0;
    $6_1 = $6_1 - $7_1 | 0;
    if ($6_1) {
     continue label$6
    }
    break label$6;
   };
  }
  $0_1 = $1_1 ? $2_1 : 0;
  label$10 : {
   if ($4_1) {
    break label$10
   }
   $1011($3_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1028($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $18_1 = 0, $18$hi = 0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 < 3 >>> 0) {
     break label$2
    }
    HEAP32[($986() | 0) >> 2] = 28;
    break label$1;
   }
   label$3 : {
    if (($2_1 | 0) != (1 | 0)) {
     break label$3
    }
    $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$3
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $3_1 - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$3 = $18_1;
    i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $1_1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    $1$hi = i64toi32_i32$5;
   }
   label$4 : {
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
     break label$4
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$5 = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1, i64toi32_i32$5, $2_1) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $13_1 = 0
     } else {
      $13_1 = 1
     }
     $14_1 = $13_1;
    } else {
     $14_1 = 0
    }
    $12_1 = $14_1;
   }
   if ($12_1) {
    break label$1
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -17 | 0;
   return 0 | 0;
  }
  return -1 | 0;
 }
 
 function $1029($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   return $1028($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
  }
  $3_1 = $1010($0_1 | 0) | 0;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $1028($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   $1011($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $1030($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $1_1 = 0, $3$hi = 0, $3_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, i64toi32_i32$4 = 0, $37_1 = 0, $37$hi = 0;
  $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $2_1 = 1;
  label$1 : {
   if (!((HEAPU8[$0_1 >> 0] | 0) & 128 | 0)) {
    break label$1
   }
   $2_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) ? 1 : 2;
  }
  label$2 : {
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = FUNCTION_TABLE[$1_1 | 0]($0_1, 0, i64toi32_i32$0, $2_1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $13_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $14_1 = 0
     } else {
      $14_1 = 1
     }
     $15_1 = $14_1;
    } else {
     $15_1 = 0
    }
    $13_1 = $15_1;
   }
   if ($13_1) {
    break label$2
   }
   label$3 : {
    label$4 : {
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$4
     }
     $1_1 = 4;
     break label$3;
    }
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    $1_1 = 20;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + $1_1 | 0) >> 2] | 0) - $2_1 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $37_1 = i64toi32_i32$1;
   $37$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $37$hi;
   i64toi32_i32$0 = $37_1;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3_1 = i64toi32_i32$4;
   $3$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$3 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$3 | 0;
 }
 
 function $1031($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0, $2$hi = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1030($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return i64toi32_i32$0 | 0;
  }
  $1_1 = $1010($0_1 | 0) | 0;
  i64toi32_i32$0 = $1030($0_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  label$2 : {
   if (!$1_1) {
    break label$2
   }
   $1011($0_1 | 0);
  }
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1032($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $1033($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($1032($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if ($1_1 >>> 0 <= ($3_1 - $4_1 | 0) >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP32[($2_1 + 80 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     if (!$1_1) {
      break label$5
     }
     $3_1 = $1_1;
     label$6 : {
      label$7 : while (1) {
       $5_1 = $0_1 + $3_1 | 0;
       if ((HEAPU8[($5_1 + -1 | 0) >> 0] | 0 | 0) == (10 | 0)) {
        break label$6
       }
       $3_1 = $3_1 + -1 | 0;
       if (!$3_1) {
        break label$5
       }
       continue label$7;
      };
     }
     $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
     if ($4_1 >>> 0 < $3_1 >>> 0) {
      break label$1
     }
     $1_1 = $1_1 - $3_1 | 0;
     $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
     break label$4;
    }
    $5_1 = $0_1;
    $3_1 = 0;
   }
   $1004($4_1 | 0, $5_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $3_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $1034($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = Math_imul($2_1, $1_1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0_1 = $1033($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $5_1 = $1010($3_1 | 0) | 0;
   $0_1 = $1033($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   $1011($3_1 | 0);
  }
  label$3 : {
   if (($0_1 | 0) != ($4_1 | 0)) {
    break label$3
   }
   return ($1_1 ? $2_1 : 0) | 0;
  }
  return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
 }
 
 function $1035() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  label$1 : {
   if (fimport$264($0_1 + 12 | 0 | 0, $0_1 + 8 | 0 | 0) | 0) {
    break label$1
   }
   $1_1 = $1146(((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) + 4 | 0 | 0) | 0;
   HEAP32[(0 + 131092 | 0) >> 2] = $1_1;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $1146(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    HEAP32[((HEAP32[(0 + 131092 | 0) >> 2] | 0) + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    if (!(fimport$265(HEAP32[(0 + 131092 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 131092 | 0) >> 2] = 0;
  }
  global$0 = $0_1 + 16 | 0;
 }
 
 function $1036($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = $1077($0_1 | 0, 61 | 0) | 0;
   if (($1_1 | 0) != ($0_1 | 0)) {
    break label$1
   }
   return 0 | 0;
  }
  $2_1 = 0;
  label$2 : {
   $3_1 = $1_1 - $0_1 | 0;
   if (HEAPU8[($0_1 + $3_1 | 0) >> 0] | 0) {
    break label$2
   }
   $1_1 = HEAP32[(0 + 131092 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$4_1) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     label$5 : {
      if ($1085($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0) {
       break label$5
      }
      $4_1 = (HEAP32[$1_1 >> 2] | 0) + $3_1 | 0;
      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == (61 | 0)) {
       break label$3
      }
     }
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     if ($4_1) {
      continue label$4
     }
     break label$2;
    };
   }
   $2_1 = $4_1 + 1 | 0;
  }
  return $2_1 | 0;
 }
 
 function $1037() {
  return 42 | 0;
 }
 
 function $1038() {
  return $1037() | 0 | 0;
 }
 
 function $1039($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -97 | 0) >>> 0 < 26 >>> 0 | 0;
 }
 
 function $1040($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -32 | 0) >>> 0 < 95 >>> 0 | 0;
 }
 
 function $1041($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -65 | 0) >>> 0 < 26 >>> 0 | 0;
 }
 
 function $1042($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $1043($0_1) {
  $0_1 = +$0_1;
 }
 
 function $1044($0_1) {
  $0_1 = +$0_1;
  $1043(+$0_1);
 }
 
 function $1045($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1046($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1047($0_1) {
  $0_1 = +$0_1;
  var $2_1 = 0.0, $1_1 = 0.0;
  $1_1 = +fimport$257();
  $2_1 = $1_1;
  label$1 : while (1) {
   $1044(+$2_1);
   $2_1 = +fimport$257();
   if ($2_1 - $1_1 < $0_1) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1048($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $1141($1346($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  global$0 = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $2_1 ? -1 : $1_1;
  i64toi32_i32$2 = $2_1 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function $1049($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 < 4 >>> 0) {
      break label$3
     }
     if (($1_1 | $0_1 | 0) & 3 | 0) {
      break label$2
     }
     label$4 : while (1) {
      if ((HEAP32[$0_1 >> 2] | 0 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
       break label$2
      }
      $1_1 = $1_1 + 4 | 0;
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$2_1) {
     break label$1
    }
   }
   label$5 : {
    label$6 : while (1) {
     $3_1 = HEAPU8[$0_1 >> 0] | 0;
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($3_1 | 0) != ($4_1 | 0)) {
      break label$5
     }
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break label$1
     }
     continue label$6;
    };
   }
   return $3_1 - $4_1 | 0 | 0;
  }
  return 0 | 0;
 }
 
 function $1050($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $7$hi = 0, $7_1 = 0, $4_1 = 0, $5_1 = 0, $8$hi = 0, i64toi32_i32$5 = 0, $6_1 = 0, $8_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = 28;
  label$1 : {
   if (($0_1 | 0) == (3 | 0)) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   if ($6_1 >>> 0 > 999999999 >>> 0) {
    break label$1
   }
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $16_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $17_1 = 0
     } else {
      $17_1 = 1
     }
     $18_1 = $17_1;
    } else {
     $18_1 = 0
    }
    $16_1 = $18_1;
   }
   if ($16_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($1_1 & 1 | 0)) {
      break label$3
     }
     $1007($0_1 | 0, $4_1 | 0) | 0;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $7_1 = i64toi32_i32$2;
     $7$hi = i64toi32_i32$1;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $8_1 = i64toi32_i32$1;
     $8$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $8_1;
     if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
      $19_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
        $20_1 = 0
       } else {
        $20_1 = 1
       }
       $21_1 = $20_1;
      } else {
       $21_1 = 0
      }
      $19_1 = $21_1;
     }
     if ($19_1) {
      break label$2
     }
     $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     label$4 : {
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$3 = $8$hi;
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$1 = $8_1;
      if ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
       break label$4
      }
      if (($2_1 | 0) <= ($5_1 | 0)) {
       break label$2
      }
     }
     $6_1 = $2_1 - $5_1 | 0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     $7_1 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     $7$hi = i64toi32_i32$5;
    }
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = 0;
    $1047(+((+(i64toi32_i32$1 >>> 0) + 4294967296.0 * +($7$hi | 0)) * 1.0e3 + +($6_1 | 0) / 1.0e6));
   }
   $5_1 = 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1051($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1111(0 - ($1050(0 | 0, 0 | 0, $0_1 | 0, $1_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1052() {
  $1045(131152 | 0);
  return 131156 | 0;
 }
 
 function $1053() {
  $1046(131152 | 0);
 }
 
 function $1054($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $1052() | 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = $2_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP32[($2_1 + 52 | 0) >> 2] = $0_1;
  }
  HEAP32[$1_1 >> 2] = $0_1;
  $1053();
  return $0_1 | 0;
 }
 
 function $1055($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1124(117784 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1056() {
  return 131160 | 0;
 }
 
 function $1057() {
  HEAP32[(0 + 131256 | 0) >> 2] = 131128;
  HEAP32[(0 + 131184 | 0) >> 2] = $1038() | 0;
 }
 
 function $1058($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $9_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $34_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = 1;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   $6_1 = Math_imul($2_1, $1_1);
   if (!$6_1) {
    break label$1
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
   $7_1 = 0 - $2_1 | 0;
   $1_1 = $2_1;
   $8_1 = $1_1;
   $9_1 = 2;
   label$2 : while (1) {
    $34_1 = $8_1 + $2_1 | 0;
    $8_1 = $1_1;
    $1_1 = $34_1 + $1_1 | 0;
    HEAP32[(($5_1 + 16 | 0) + ($9_1 << 2 | 0) | 0) >> 2] = $1_1;
    $9_1 = $9_1 + 1 | 0;
    if ($1_1 >>> 0 < $6_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
   label$3 : {
    label$4 : {
     $8_1 = ($0_1 + $6_1 | 0) + $7_1 | 0;
     if ($0_1 >>> 0 < $8_1 >>> 0) {
      break label$4
     }
     $1_1 = 1;
     break label$3;
    }
    $9_1 = 1;
    $1_1 = 1;
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       if (($9_1 & 3 | 0 | 0) != (3 | 0)) {
        break label$7
       }
       $1059($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $1_1 | 0, $5_1 + 16 | 0 | 0);
       $1060($5_1 + 8 | 0 | 0, 2 | 0);
       $1_1 = $1_1 + 2 | 0;
       break label$6;
      }
      label$8 : {
       label$9 : {
        $9_1 = $1_1 + -1 | 0;
        if ((HEAP32[(($5_1 + 16 | 0) + ($9_1 << 2 | 0) | 0) >> 2] | 0) >>> 0 < ($8_1 - $0_1 | 0) >>> 0) {
         break label$9
        }
        $1061($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 + 8 | 0 | 0, $1_1 | 0, 0 | 0, $5_1 + 16 | 0 | 0);
        break label$8;
       }
       $1059($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $1_1 | 0, $5_1 + 16 | 0 | 0);
      }
      label$10 : {
       if (($1_1 | 0) != (1 | 0)) {
        break label$10
       }
       $1062($5_1 + 8 | 0 | 0, 1 | 0);
       $1_1 = 0;
       break label$6;
      }
      $1062($5_1 + 8 | 0 | 0, $9_1 | 0);
      $1_1 = 1;
     }
     $9_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($5_1 + 8 | 0) >> 2] = $9_1;
     $0_1 = $0_1 + $2_1 | 0;
     if ($0_1 >>> 0 < $8_1 >>> 0) {
      continue label$5
     }
     break label$5;
    };
   }
   $1061($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 + 8 | 0 | 0, $1_1 | 0, 0 | 0, $5_1 + 16 | 0 | 0);
   label$11 : {
    if (($1_1 | 0) != (1 | 0)) {
     break label$11
    }
    if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$11
    }
    if (!(HEAP32[($5_1 + 12 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   label$12 : while (1) {
    label$13 : {
     label$14 : {
      if (($1_1 | 0) > (1 | 0)) {
       break label$14
      }
      $9_1 = $1063($5_1 + 8 | 0 | 0) | 0;
      $1060($5_1 + 8 | 0 | 0, $9_1 | 0);
      $1_1 = $9_1 + $1_1 | 0;
      break label$13;
     }
     $1062($5_1 + 8 | 0 | 0, 2 | 0);
     HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) ^ 7 | 0;
     $1060($5_1 + 8 | 0 | 0, 1 | 0);
     $8_1 = $0_1 + $7_1 | 0;
     $9_1 = $1_1 + -2 | 0;
     $1061($8_1 - (HEAP32[(($5_1 + 16 | 0) + ($9_1 << 2 | 0) | 0) >> 2] | 0) | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 + 8 | 0 | 0, $1_1 + -1 | 0 | 0, 1 | 0, $5_1 + 16 | 0 | 0);
     $1062($5_1 + 8 | 0 | 0, 1 | 0);
     HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 1 | 0;
     $1061($8_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 + 8 | 0 | 0, $9_1 | 0, 1 | 0, $5_1 + 16 | 0 | 0);
     $1_1 = $9_1;
    }
    $0_1 = $0_1 + $7_1 | 0;
    if (($1_1 | 0) != (1 | 0)) {
     continue label$12
    }
    if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     continue label$12
    }
    if (HEAP32[($5_1 + 12 | 0) >> 2] | 0) {
     continue label$12
    }
    break label$12;
   };
  }
  global$0 = $5_1 + 208 | 0;
 }
 
 function $1059($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $9_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0, $12_1 = 0, $8_1 = 0;
  $6_1 = global$0 - 240 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 >> 2] = $0_1;
  $7_1 = 1;
  label$1 : {
   if (($4_1 | 0) < (2 | 0)) {
    break label$1
   }
   $8_1 = 0 - $1_1 | 0;
   $7_1 = 1;
   $9_1 = $0_1;
   label$2 : while (1) {
    label$3 : {
     $9_1 = $9_1 + $8_1 | 0;
     $10_1 = $4_1 + -2 | 0;
     $11_1 = $9_1 - (HEAP32[($5_1 + ($10_1 << 2 | 0) | 0) >> 2] | 0) | 0;
     if ((FUNCTION_TABLE[$2_1 | 0]($0_1, $11_1, $3_1) | 0 | 0) < (0 | 0)) {
      break label$3
     }
     if ((FUNCTION_TABLE[$2_1 | 0]($0_1, $9_1, $3_1) | 0 | 0) > (-1 | 0)) {
      break label$1
     }
    }
    $12_1 = (FUNCTION_TABLE[$2_1 | 0]($11_1, $9_1, $3_1) | 0 | 0) > (-1 | 0);
    $9_1 = $12_1 ? $11_1 : $9_1;
    HEAP32[($6_1 + ($7_1 << 2 | 0) | 0) >> 2] = $9_1;
    $7_1 = $7_1 + 1 | 0;
    $4_1 = $12_1 ? $4_1 + -1 | 0 : $10_1;
    if (($4_1 | 0) > (1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $1064($1_1 | 0, $6_1 | 0, $7_1 | 0);
  global$0 = $6_1 + 240 | 0;
 }
 
 function $1060($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($1_1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $4_1 = $2_1;
    break label$1;
   }
   $1_1 = $1_1 + -32 | 0;
   $4_1 = 0;
   $3_1 = $2_1;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 >>> $1_1 | 0;
  HEAP32[$0_1 >> 2] = $4_1 << (32 - $1_1 | 0) | 0 | ($3_1 >>> $1_1 | 0) | 0;
 }
 
 function $1061($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $12_1 = 0, $11_1 = 0, $13_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 240 | 0;
  global$0 = $8_1;
  $9_1 = HEAP32[$4_1 >> 2] | 0;
  HEAP32[($8_1 + 232 | 0) >> 2] = $9_1;
  $4_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[$8_1 >> 2] = $0_1;
  HEAP32[($8_1 + 236 | 0) >> 2] = $4_1;
  $10_1 = 0 - $1_1 | 0;
  $11_1 = !$6_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($9_1 | 0) == (1 | 0)) {
        break label$5
       }
       $9_1 = $0_1;
       $6_1 = 1;
       break label$4;
      }
      $9_1 = $0_1;
      $6_1 = 1;
      if ($4_1) {
       break label$4
      }
      $6_1 = 1;
      $4_1 = $9_1;
      break label$3;
     }
     label$6 : while (1) {
      label$7 : {
       $12_1 = $7_1 + ($5_1 << 2 | 0) | 0;
       $4_1 = $9_1 - (HEAP32[$12_1 >> 2] | 0) | 0;
       if ((FUNCTION_TABLE[$2_1 | 0]($4_1, $0_1, $3_1) | 0 | 0) >= (1 | 0)) {
        break label$7
       }
       $4_1 = $9_1;
       break label$3;
      }
      $13_1 = $11_1 ^ -1 | 0;
      $11_1 = 1;
      label$8 : {
       label$9 : {
        if (($13_1 | ($5_1 | 0) < (2 | 0) | 0) & 1 | 0) {
         break label$9
        }
        $13_1 = HEAP32[($12_1 + -8 | 0) >> 2] | 0;
        $12_1 = $9_1 + $10_1 | 0;
        if ((FUNCTION_TABLE[$2_1 | 0]($12_1, $4_1, $3_1) | 0 | 0) > (-1 | 0)) {
         break label$8
        }
        if ((FUNCTION_TABLE[$2_1 | 0]($12_1 - $13_1 | 0, $4_1, $3_1) | 0 | 0) > (-1 | 0)) {
         break label$8
        }
       }
       HEAP32[($8_1 + ($6_1 << 2 | 0) | 0) >> 2] = $4_1;
       $9_1 = $1063($8_1 + 232 | 0 | 0) | 0;
       $1060($8_1 + 232 | 0 | 0, $9_1 | 0);
       $6_1 = $6_1 + 1 | 0;
       $5_1 = $9_1 + $5_1 | 0;
       $9_1 = $4_1;
       if ((HEAP32[($8_1 + 232 | 0) >> 2] | 0 | 0) != (1 | 0)) {
        continue label$6
       }
       $9_1 = $4_1;
       if (HEAP32[($8_1 + 236 | 0) >> 2] | 0) {
        continue label$6
       }
       break label$2;
      }
      break label$6;
     };
     $4_1 = $9_1;
     break label$2;
    }
    if (!($11_1 & 1 | 0)) {
     break label$1
    }
   }
   $1064($1_1 | 0, $8_1 | 0, $6_1 | 0);
   $1059($4_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $5_1 | 0, $7_1 | 0);
  }
  global$0 = $8_1 + 240 | 0;
 }
 
 function $1062($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2_1 = $0_1 + 4 | 0;
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    break label$1;
   }
   $1_1 = $1_1 + -32 | 0;
   $3_1 = 0;
   $2_1 = $0_1;
  }
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $3_1 << $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 >>> (32 - $1_1 | 0) | 0 | ($2_1 << $1_1 | 0) | 0;
 }
 
 function $1063($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $1065((HEAP32[$0_1 >> 2] | 0) + -1 | 0 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   $0_1 = $1065(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   $1_1 = $0_1 ? $0_1 + 32 | 0 : 0;
  }
  return $1_1 | 0;
 }
 
 function $1064($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $5_1 = 0, $3_1 = 0, $7_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 256 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($2_1 | 0) < (2 | 0)) {
    break label$1
   }
   $4_1 = $1_1 + ($2_1 << 2 | 0) | 0;
   HEAP32[$4_1 >> 2] = $3_1;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    $5_1 = $0_1 >>> 0 < 256 >>> 0 ? $0_1 : 256;
    $1004(HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $5_1 | 0) | 0;
    $6_1 = 0;
    label$3 : while (1) {
     $7_1 = $1_1 + ($6_1 << 2 | 0) | 0;
     $6_1 = $6_1 + 1 | 0;
     $1004(HEAP32[$7_1 >> 2] | 0 | 0, HEAP32[($1_1 + ($6_1 << 2 | 0) | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
     HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + $5_1 | 0;
     if (($6_1 | 0) != ($2_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $0_1 = $0_1 - $5_1 | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $3_1 + 256 | 0;
 }
 
 function $1065($0_1) {
  $0_1 = $0_1 | 0;
  return $1066($0_1 | 0) | 0 | 0;
 }
 
 function $1066($0_1) {
  $0_1 = $0_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  return (wasm2js_i32$0 = __wasm_ctz_i32($0_1 | 0) | 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = $0_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0;
 }
 
 function $1067($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1058($0_1 | 0, $1_1 | 0, $2_1 | 0, 534 | 0, $3_1 | 0);
 }
 
 function $1068($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[$2_1 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $1069($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if ($1_1 >>> 0 >= 2047 >>> 0) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = ($1_1 >>> 0 < 3069 >>> 0 ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   label$4 : {
    if ($1_1 >>> 0 <= -1992 >>> 0) {
     break label$4
    }
    $1_1 = $1_1 + 969 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   $1_1 = ($1_1 >>> 0 > -2960 >>> 0 ? $1_1 : -2960) + 1938 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $1070($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 < 65 >>> 0) {
    break label$1
   }
   HEAP32[($986() | 0) >> 2] = 28;
   return -1 | 0;
  }
  label$2 : {
   if (!$2_1) {
    break label$2
   }
   $1004($2_1 | 0, Math_imul($0_1, 140) + 131296 | 0 | 0, 140 | 0) | 0;
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   $1004(Math_imul($0_1, 140) + 131296 | 0 | 0, $1_1 | 0, 140 | 0) | 0;
  }
  return 0 | 0;
 }
 
 function $1071($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 288 | 0;
  global$0 = $2_1;
  $1006($2_1 + 12 | 0 | 0, 0 | 0, 136 | 0) | 0;
  HEAP32[($2_1 + 140 | 0) >> 2] = 268435456;
  HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
  $1_1 = $1070($0_1 | 0, $2_1 + 8 | 0 | 0, $2_1 + 148 | 0 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 148 | 0) >> 2] | 0;
  global$0 = $2_1 + 288 | 0;
  return (($1_1 | 0) < (0 | 0) ? -1 : $0_1) | 0;
 }
 
 function $1072($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $3_1 = 0.0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $9_1 = 0, i64toi32_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $9_1 & 2147483647 | 0;
    if ($2_1 >>> 0 > 1072243195 >>> 0) {
     break label$2
    }
    if ($2_1 >>> 0 < 1045430272 >>> 0) {
     break label$1
    }
    $0_1 = +$997(+$0_1, +(0.0), 0 | 0);
    break label$1;
   }
   label$3 : {
    if ($2_1 >>> 0 < 2146435072 >>> 0) {
     break label$3
    }
    $0_1 = $0_1 - $0_1;
    break label$1;
   }
   $2_1 = $996(+$0_1, $1_1 | 0) | 0;
   $0_1 = +HEAPF64[($1_1 + 8 | 0) >> 3];
   $3_1 = +HEAPF64[$1_1 >> 3];
   label$4 : {
    switch ($2_1 & 3 | 0 | 0) {
    default:
     $0_1 = +$997(+$3_1, +$0_1, 1 | 0);
     break label$1;
    case 1:
     $0_1 = +$994(+$3_1, +$0_1);
     break label$1;
    case 2:
     $0_1 = -+$997(+$3_1, +$0_1, 1 | 0);
     break label$1;
    case 3:
     break label$4;
    };
   }
   $0_1 = -+$994(+$3_1, +$0_1);
  }
  global$0 = $1_1 + 16 | 0;
  return +$0_1;
 }
 
 function $1073($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1074($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $1075($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAPU8[$0_1 >> 0] | 0;
    if ($2_1) {
     break label$2
    }
    $0_1 = 0;
    break label$1;
   }
   label$3 : {
    label$4 : while (1) {
     $3_1 = HEAPU8[$1_1 >> 0] | 0;
     if (!$3_1) {
      break label$3
     }
     label$5 : {
      $2_1 = $2_1 & 255 | 0;
      if (($2_1 | 0) == ($3_1 | 0)) {
       break label$5
      }
      if (($1112($2_1 | 0) | 0 | 0) == ($1112(HEAPU8[$1_1 >> 0] | 0 | 0) | 0 | 0)) {
       break label$5
      }
      $2_1 = HEAPU8[$0_1 >> 0] | 0;
      break label$3;
     }
     $1_1 = $1_1 + 1 | 0;
     $2_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($2_1) {
      continue label$4
     }
     break label$4;
    };
    $2_1 = 0;
   }
   $0_1 = $2_1 & 255 | 0;
  }
  return ($1112($0_1 | 0) | 0) - ($1112(HEAPU8[$1_1 >> 0] | 0 | 0) | 0) | 0 | 0;
 }
 
 function $1076($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $1077($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $1077($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2_1 = $1_1 & 255 | 0;
      if (!$2_1) {
       break label$4
      }
      label$5 : {
       if (!($0_1 & 3 | 0)) {
        break label$5
       }
       $3_1 = $1_1 & 255 | 0;
       label$6 : while (1) {
        $4_1 = HEAPU8[$0_1 >> 0] | 0;
        if (!$4_1) {
         break label$1
        }
        if (($4_1 | 0) == ($3_1 | 0)) {
         break label$1
        }
        $0_1 = $0_1 + 1 | 0;
        if ($0_1 & 3 | 0) {
         continue label$6
        }
        break label$6;
       };
      }
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      if (((16843008 - $3_1 | 0 | $3_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
       break label$3
      }
      $2_1 = Math_imul($2_1, 16843009);
      label$7 : while (1) {
       $4_1 = $3_1 ^ $2_1 | 0;
       if (((16843008 - $4_1 | 0 | $4_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
        break label$3
       }
       $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $4_1 = $0_1 + 4 | 0;
       $0_1 = $4_1;
       if ((($3_1 | (16843008 - $3_1 | 0) | 0) & -2139062144 | 0 | 0) == (-2139062144 | 0)) {
        continue label$7
       }
       break label$2;
      };
     }
     return $0_1 + ($1083($0_1 | 0) | 0) | 0 | 0;
    }
    $4_1 = $0_1;
   }
   label$8 : while (1) {
    $0_1 = $4_1;
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $4_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) != ($1_1 & 255 | 0 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
  return $0_1 | 0;
 }
 
 function $1078($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $1079($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(($1_1 ^ $0_1 | 0) & 3 | 0)) {
      break label$3
     }
     $2_1 = HEAPU8[$1_1 >> 0] | 0;
     break label$2;
    }
    label$4 : {
     if (!($1_1 & 3 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      $2_1 = HEAPU8[$1_1 >> 0] | 0;
      HEAP8[$0_1 >> 0] = $2_1;
      if (!$2_1) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      if ($1_1 & 3 | 0) {
       continue label$5
      }
      break label$5;
     };
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if (((16843008 - $2_1 | 0 | $2_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
     break label$2
    }
    label$6 : while (1) {
     HEAP32[$0_1 >> 2] = $2_1;
     $0_1 = $0_1 + 4 | 0;
     $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     if ((($2_1 | (16843008 - $2_1 | 0) | 0) & -2139062144 | 0 | 0) == (-2139062144 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   HEAP8[$0_1 >> 0] = $2_1;
   if (!($2_1 & 255 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return $0_1 | 0;
 }
 
 function $1080($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1079($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1081($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = $1087($0_1 | 0, $2_1 | 0) | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     break label$2
    }
    $2_1 = $1083($1_1 | 0) | 0;
    break label$1;
   }
   $2_1 = $1082($0_1 + $3_1 | 0 | 0, $1_1 | 0, $2_1 - $3_1 | 0 | 0) | 0;
  }
  return $2_1 + $3_1 | 0 | 0;
 }
 
 function $1082($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    $2_1 = $0_1;
    break label$1;
   }
   $3_1 = $2_1 + -1 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       if (!(($1_1 ^ $0_1 | 0) & 3 | 0)) {
        break label$6
       }
       $2_1 = $0_1;
       break label$5;
      }
      $4_1 = ($3_1 | 0) != (0 | 0);
      label$7 : {
       label$8 : {
        if (!($1_1 & 3 | 0)) {
         break label$8
        }
        if (!$3_1) {
         break label$8
        }
        $2_1 = $0_1;
        label$9 : while (1) {
         $4_1 = HEAPU8[$1_1 >> 0] | 0;
         HEAP8[$2_1 >> 0] = $4_1;
         if (!$4_1) {
          break label$4
         }
         $2_1 = $2_1 + 1 | 0;
         $3_1 = $3_1 + -1 | 0;
         $4_1 = ($3_1 | 0) != (0 | 0);
         $1_1 = $1_1 + 1 | 0;
         if (!($1_1 & 3 | 0)) {
          break label$7
         }
         if ($3_1) {
          continue label$9
         }
         break label$7;
        };
       }
       $2_1 = $0_1;
      }
      if (!$4_1) {
       break label$3
      }
      if (!(HEAPU8[$1_1 >> 0] | 0)) {
       break label$5
      }
      if ($3_1 >>> 0 < 4 >>> 0) {
       break label$5
      }
      label$10 : while (1) {
       $4_1 = HEAP32[$1_1 >> 2] | 0;
       if (((16843008 - $4_1 | 0 | $4_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
        break label$4
       }
       HEAP32[$2_1 >> 2] = $4_1;
       $2_1 = $2_1 + 4 | 0;
       $1_1 = $1_1 + 4 | 0;
       $3_1 = $3_1 + -4 | 0;
       if ($3_1 >>> 0 > 3 >>> 0) {
        continue label$10
       }
       break label$10;
      };
     }
     if (!$3_1) {
      break label$3
     }
    }
    label$11 : while (1) {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     HEAP8[$2_1 >> 0] = $4_1;
     if (!$4_1) {
      break label$3
     }
     $2_1 = $2_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     $3_1 = $3_1 + -1 | 0;
     if ($3_1) {
      continue label$11
     }
     break label$11;
    };
   }
   HEAP8[$2_1 >> 0] = 0;
  }
  return ($2_1 - $0_1 | 0) + ($1083($1_1 | 0) | 0) | 0 | 0;
 }
 
 function $1083($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($1_1 & 3 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[$1_1 >> 0] | 0) {
      break label$3
     }
     return $1_1 - $1_1 | 0 | 0;
    }
    $1_1 = $0_1;
    label$4 : while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3 | 0)) {
      break label$2
     }
     if (HEAPU8[$1_1 >> 0] | 0) {
      continue label$4
     }
     break label$1;
    };
   }
   label$5 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (((16843008 - $3_1 | 0 | $3_1 | 0) & -2139062144 | 0 | 0) == (-2139062144 | 0)) {
     continue label$5
    }
    break label$5;
   };
   label$6 : while (1) {
    $1_1 = $2_1;
    $2_1 = $1_1 + 1 | 0;
    if (HEAPU8[$1_1 >> 0] | 0) {
     continue label$6
    }
    break label$6;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1084($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : {
   label$3 : {
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    if ($3_1) {
     break label$3
    }
    $0_1 = 0;
    break label$2;
   }
   label$4 : {
    label$5 : while (1) {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if (!$4_1) {
      break label$4
     }
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break label$4
     }
     label$6 : {
      $3_1 = $3_1 & 255 | 0;
      if (($3_1 | 0) == ($4_1 | 0)) {
       break label$6
      }
      if (($1112($3_1 | 0) | 0 | 0) == ($1112(HEAPU8[$1_1 >> 0] | 0 | 0) | 0 | 0)) {
       break label$6
      }
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      break label$4;
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($3_1) {
      continue label$5
     }
     break label$5;
    };
    $3_1 = 0;
   }
   $0_1 = $3_1 & 255 | 0;
  }
  return ($1112($0_1 | 0) | 0) - ($1112(HEAPU8[$1_1 >> 0] | 0 | 0) | 0) | 0 | 0;
 }
 
 function $1085($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : {
   label$3 : {
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    if ($3_1) {
     break label$3
    }
    $0_1 = 0;
    break label$2;
   }
   label$4 : {
    label$5 : while (1) {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($3_1 & 255 | 0 | 0) != ($4_1 | 0)) {
      break label$4
     }
     if (!$4_1) {
      break label$4
     }
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break label$4
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($3_1) {
      continue label$5
     }
     break label$5;
    };
    $3_1 = 0;
   }
   $0_1 = $3_1 & 255 | 0;
  }
  return $0_1 - (HEAPU8[$1_1 >> 0] | 0) | 0 | 0;
 }
 
 function $1086($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     if (!$2_1) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      $0_1 = $0_1 + 1 | 0;
      if (!($0_1 & 3 | 0)) {
       break label$3
      }
      if ($2_1) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
    label$5 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
      break label$5
     }
     if ($2_1 >>> 0 < 4 >>> 0) {
      break label$5
     }
     $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
     label$6 : while (1) {
      $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
      if (((16843008 - $3_1 | 0 | $3_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
       break label$2
      }
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label$6
      }
      break label$6;
     };
    }
    if (!$2_1) {
     break label$1
    }
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $1087($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1086($0_1 | 0, 0 | 0, $1_1 | 0) | 0;
  return ($2_1 ? $2_1 - $0_1 | 0 : $1_1) | 0;
 }
 
 function $1088($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAP8[$1_1 >> 0] | 0;
   if ($2_1) {
    break label$1
   }
   return $0_1 | 0;
  }
  $3_1 = 0;
  label$2 : {
   $0_1 = $1076($0_1 | 0, $2_1 | 0) | 0;
   if (!$0_1) {
    break label$2
   }
   label$3 : {
    if (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) {
     break label$3
    }
    return $0_1 | 0;
   }
   if (!(HEAPU8[($0_1 + 1 | 0) >> 0] | 0)) {
    break label$2
   }
   label$4 : {
    if (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) {
     break label$4
    }
    return $1089($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   if (!(HEAPU8[($0_1 + 2 | 0) >> 0] | 0)) {
    break label$2
   }
   label$5 : {
    if (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) {
     break label$5
    }
    return $1090($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   if (!(HEAPU8[($0_1 + 3 | 0) >> 0] | 0)) {
    break label$2
   }
   label$6 : {
    if (HEAPU8[($1_1 + 4 | 0) >> 0] | 0) {
     break label$6
    }
    return $1091($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   $3_1 = $1092($0_1 | 0, $1_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $1089($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $2_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $4_1 = (HEAPU8[$0_1 >> 0] | 0) << 8 | 0 | $2_1 | 0;
   $5_1 = (HEAPU8[$1_1 >> 0] | 0) << 8 | 0 | (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) | 0;
   if (($4_1 | 0) == ($5_1 | 0)) {
    break label$1
   }
   $1_1 = $0_1 + 1 | 0;
   label$2 : while (1) {
    $0_1 = $1_1;
    $2_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    $3_1 = ($2_1 | 0) != (0 | 0);
    if (!$2_1) {
     break label$1
    }
    $1_1 = $0_1 + 1 | 0;
    $4_1 = ($4_1 << 8 | 0) & 65280 | 0 | $2_1 | 0;
    if (($4_1 | 0) != ($5_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return ($3_1 ? $0_1 : 0) | 0;
 }
 
 function $1090($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = $0_1 + 2 | 0;
  $3_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
  $4_1 = ($3_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    $3_1 = (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$0_1 >> 0] | 0) << 24 | 0) | 0 | ($3_1 << 8 | 0) | 0;
    $5_1 = (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$1_1 >> 0] | 0) << 24 | 0) | 0 | ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) << 8 | 0) | 0;
    if (($3_1 | 0) == ($5_1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     $1_1 = $2_1 + 1 | 0;
     $0_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
     $4_1 = ($0_1 | 0) != (0 | 0);
     if (!$0_1) {
      break label$1
     }
     $2_1 = $1_1;
     $3_1 = ($3_1 | $0_1 | 0) << 8 | 0;
     if (($3_1 | 0) != ($5_1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $1_1 = $2_1;
  }
  return ($4_1 ? $1_1 + -2 | 0 : 0) | 0;
 }
 
 function $1091($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0;
  $2_1 = $0_1 + 3 | 0;
  $3_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
  $4_1 = ($3_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    $5_1 = (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$0_1 >> 0] | 0) << 24 | 0) | 0 | ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0) << 8 | 0) | 0 | $3_1 | 0;
    $6_1 = $1_1;
    $0_1 = HEAPU8[$6_1 >> 0] | 0 | ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $1_1 = $0_1 << 24 | 0 | (($0_1 & 65280 | 0) << 8 | 0) | 0 | (($0_1 >>> 8 | 0) & 65280 | 0 | ($0_1 >>> 24 | 0) | 0) | 0;
    if (($5_1 | 0) == ($1_1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     $3_1 = $2_1 + 1 | 0;
     $0_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
     $4_1 = ($0_1 | 0) != (0 | 0);
     if (!$0_1) {
      break label$1
     }
     $2_1 = $3_1;
     $5_1 = $5_1 << 8 | 0 | $0_1 | 0;
     if (($5_1 | 0) != ($1_1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $3_1 = $2_1;
  }
  return ($4_1 ? $3_1 + -3 | 0 : 0) | 0;
 }
 
 function $1092($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0, $7_1 = 0, $2_1 = 0, $5_1 = 0, $11_1 = 0, $9_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $2_1 = global$0 - 1056 | 0;
  global$0 = $2_1;
  i64toi32_i32$1 = $2_1 + 1048 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 1040 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 1032 | 0) >> 2] = 0;
  HEAP32[($2_1 + 1036 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 1024 | 0) >> 2] = 0;
  HEAP32[($2_1 + 1028 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $4_1 = HEAPU8[$1_1 >> 0] | 0;
        if ($4_1) {
         break label$6
        }
        $5_1 = -1;
        $6_1 = 1;
        break label$5;
       }
       label$7 : while (1) {
        if (!(HEAPU8[($0_1 + $3_1 | 0) >> 0] | 0)) {
         break label$4
        }
        $3_1 = $3_1 + 1 | 0;
        HEAP32[($2_1 + (($4_1 & 255 | 0) << 2 | 0) | 0) >> 2] = $3_1;
        $6_1 = ($2_1 + 1024 | 0) + (($4_1 >>> 3 | 0) & 28 | 0) | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] | 0 | (1 << $4_1 | 0) | 0;
        $4_1 = HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0;
        if ($4_1) {
         continue label$7
        }
        break label$7;
       };
       $6_1 = 1;
       $5_1 = -1;
       if ($3_1 >>> 0 > 1 >>> 0) {
        break label$3
       }
      }
      $7_1 = -1;
      $8_1 = 1;
      break label$2;
     }
     $8_1 = 0;
     break label$1;
    }
    $8_1 = 0;
    $9_1 = 1;
    $4_1 = 1;
    label$8 : while (1) {
     label$9 : {
      label$10 : {
       $7_1 = HEAPU8[(($1_1 + $5_1 | 0) + $4_1 | 0) >> 0] | 0;
       $10_1 = HEAPU8[($1_1 + $6_1 | 0) >> 0] | 0;
       if (($7_1 | 0) != ($10_1 | 0)) {
        break label$10
       }
       label$11 : {
        if (($4_1 | 0) != ($9_1 | 0)) {
         break label$11
        }
        $8_1 = $9_1 + $8_1 | 0;
        $4_1 = 1;
        break label$9;
       }
       $4_1 = $4_1 + 1 | 0;
       break label$9;
      }
      label$12 : {
       if ($7_1 >>> 0 <= $10_1 >>> 0) {
        break label$12
       }
       $9_1 = $6_1 - $5_1 | 0;
       $4_1 = 1;
       $8_1 = $6_1;
       break label$9;
      }
      $4_1 = 1;
      $5_1 = $8_1;
      $8_1 = $8_1 + 1 | 0;
      $9_1 = 1;
     }
     $6_1 = $4_1 + $8_1 | 0;
     if ($6_1 >>> 0 < $3_1 >>> 0) {
      continue label$8
     }
     break label$8;
    };
    $8_1 = 1;
    $7_1 = -1;
    label$13 : {
     if ($3_1 >>> 0 > 1 >>> 0) {
      break label$13
     }
     $6_1 = $9_1;
     break label$2;
    }
    $6_1 = 0;
    $11_1 = 1;
    $4_1 = 1;
    label$14 : while (1) {
     label$15 : {
      label$16 : {
       $10_1 = HEAPU8[(($1_1 + $7_1 | 0) + $4_1 | 0) >> 0] | 0;
       $12_1 = HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0;
       if (($10_1 | 0) != ($12_1 | 0)) {
        break label$16
       }
       label$17 : {
        if (($4_1 | 0) != ($11_1 | 0)) {
         break label$17
        }
        $6_1 = $11_1 + $6_1 | 0;
        $4_1 = 1;
        break label$15;
       }
       $4_1 = $4_1 + 1 | 0;
       break label$15;
      }
      label$18 : {
       if ($10_1 >>> 0 >= $12_1 >>> 0) {
        break label$18
       }
       $11_1 = $8_1 - $7_1 | 0;
       $4_1 = 1;
       $6_1 = $8_1;
       break label$15;
      }
      $4_1 = 1;
      $7_1 = $6_1;
      $6_1 = $6_1 + 1 | 0;
      $11_1 = 1;
     }
     $8_1 = $4_1 + $6_1 | 0;
     if ($8_1 >>> 0 < $3_1 >>> 0) {
      continue label$14
     }
     break label$14;
    };
    $6_1 = $9_1;
    $8_1 = $11_1;
   }
   label$19 : {
    label$20 : {
     $4_1 = ($7_1 + 1 | 0) >>> 0 > ($5_1 + 1 | 0) >>> 0;
     $13_1 = $4_1 ? $8_1 : $6_1;
     $11_1 = $4_1 ? $7_1 : $5_1;
     $10_1 = $11_1 + 1 | 0;
     if (!($1049($1_1 | 0, $1_1 + $13_1 | 0 | 0, $10_1 | 0) | 0)) {
      break label$20
     }
     $4_1 = $3_1 + ($11_1 ^ -1 | 0) | 0;
     $13_1 = ($11_1 >>> 0 > $4_1 >>> 0 ? $11_1 : $4_1) + 1 | 0;
     $14_1 = 0;
     break label$19;
    }
    $14_1 = $3_1 - $13_1 | 0;
   }
   $12_1 = $3_1 + -1 | 0;
   $9_1 = $3_1 | 63 | 0;
   $7_1 = 0;
   $6_1 = $0_1;
   label$21 : while (1) {
    label$22 : {
     if (($0_1 - $6_1 | 0) >>> 0 >= $3_1 >>> 0) {
      break label$22
     }
     $8_1 = 0;
     $4_1 = $1086($0_1 | 0, 0 | 0, $9_1 | 0) | 0;
     $0_1 = $4_1 ? $4_1 : $0_1 + $9_1 | 0;
     if (!$4_1) {
      break label$22
     }
     if (($4_1 - $6_1 | 0) >>> 0 < $3_1 >>> 0) {
      break label$1
     }
    }
    label$23 : {
     label$24 : {
      label$25 : {
       $4_1 = HEAPU8[($6_1 + $12_1 | 0) >> 0] | 0;
       if (((HEAP32[(($2_1 + 1024 | 0) + (($4_1 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> $4_1 | 0) & 1 | 0) {
        break label$25
       }
       $4_1 = $3_1;
       break label$24;
      }
      label$26 : {
       $4_1 = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$26
       }
       $4_1 = $3_1 - $4_1 | 0;
       $4_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $4_1 : $7_1;
       break label$24;
      }
      $4_1 = $10_1;
      label$27 : {
       label$28 : {
        $8_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $4_1 : $7_1;
        $5_1 = HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0;
        if (!$5_1) {
         break label$28
        }
        label$29 : while (1) {
         if (($5_1 & 255 | 0 | 0) != (HEAPU8[($6_1 + $8_1 | 0) >> 0] | 0 | 0)) {
          break label$27
         }
         $8_1 = $8_1 + 1 | 0;
         $5_1 = HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0;
         if ($5_1) {
          continue label$29
         }
         break label$29;
        };
        $4_1 = $10_1;
       }
       label$30 : while (1) {
        label$31 : {
         if ($4_1 >>> 0 > $7_1 >>> 0) {
          break label$31
         }
         $8_1 = $6_1;
         break label$1;
        }
        $4_1 = $4_1 + -1 | 0;
        if ((HEAPU8[($1_1 + $4_1 | 0) >> 0] | 0 | 0) == (HEAPU8[($6_1 + $4_1 | 0) >> 0] | 0 | 0)) {
         continue label$30
        }
        break label$30;
       };
       $4_1 = $13_1;
       $7_1 = $14_1;
       break label$23;
      }
      $4_1 = $8_1 - $11_1 | 0;
     }
     $7_1 = 0;
    }
    $6_1 = $6_1 + $4_1 | 0;
    continue label$21;
   };
  }
  global$0 = $2_1 + 1056 | 0;
  return $8_1 | 0;
 }
 
 function $1093($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($1026($0_1 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1094($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $14_1 = 0, $15_1 = 0, $13_1 = 0, $22_1 = 0, $22$hi = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = (HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0) - $2_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   if (!($1_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   i64toi32_i32$1 = $3_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $22_1 = i64toi32_i32$1;
   $22$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$3 = $22_1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      $14_1 = 0
     } else {
      $14_1 = 1
     }
     $15_1 = $14_1;
    } else {
     $15_1 = 0
    }
    $12_1 = $15_1;
   }
   if ($12_1) {
    break label$1
   }
   i64toi32_i32$2 = $1$hi;
   $3_1 = $2_1 + $1_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
 }
 
 function $1095($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $4$hi = 0, $2_1 = 0, $5$hi = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $7_1 = 0, $7$hi = 0, $15_1 = 0, $15$hi = 0, $35_1 = 0, $40_1 = 0, $40$hi = 0, $59_1 = 0, $59$hi = 0, $67_1 = 0, $74_1 = 0, $74$hi = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  $1_1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2_1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
  i64toi32_i32$0 = $1_1 - $2_1 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $15_1 = i64toi32_i32$0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$0 = $15$hi;
  i64toi32_i32$3 = $15_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $4_1 = i64toi32_i32$4;
  $4$hi = i64toi32_i32$5;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$5;
     $5$hi = i64toi32_i32$2;
     if (!(i64toi32_i32$5 | i64toi32_i32$2 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$5 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
      $26_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        $27_1 = 0
       } else {
        $27_1 = 1
       }
       $28_1 = $27_1;
      } else {
       $28_1 = 0
      }
      $26_1 = $28_1;
     }
     if ($26_1) {
      break label$2
     }
    }
    $2_1 = $1093($0_1 | 0) | 0;
    if (($2_1 | 0) > (-1 | 0)) {
     break label$1
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = -1;
   HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] = $1_1;
   $35_1 = i64toi32_i32$2;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = $2_1 - $1_1 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
   $40_1 = i64toi32_i32$2;
   $40$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = $40$hi;
   i64toi32_i32$5 = $40_1;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$3 = $35_1;
   HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] = i64toi32_i32$4;
   return -1 | 0;
  }
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = 1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $4_1 = i64toi32_i32$2;
  $4$hi = i64toi32_i32$0;
  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$4 : {
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
    break label$4
   }
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$3;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$5 = $3_1 - $1_1 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $59_1 = i64toi32_i32$5;
   $59$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $59$hi;
   i64toi32_i32$0 = $59_1;
   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
    $29_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      $30_1 = 0
     } else {
      $30_1 = 1
     }
     $31_1 = $30_1;
    } else {
     $31_1 = 0
    }
    $29_1 = $31_1;
   }
   if ($29_1) {
    break label$4
   }
   i64toi32_i32$4 = $5$hi;
   $3_1 = $1_1 + $5_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
  $67_1 = $0_1;
  i64toi32_i32$4 = $4$hi;
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  i64toi32_i32$2 = $3_1 - $1_1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
  $74_1 = i64toi32_i32$2;
  $74$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $74$hi;
  i64toi32_i32$5 = $74_1;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  i64toi32_i32$0 = $67_1;
  HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$3;
  label$5 : {
   if ($1_1 >>> 0 > $3_1 >>> 0) {
    break label$5
   }
   HEAP8[($1_1 + -1 | 0) >> 0] = $2_1;
  }
  return $2_1 | 0;
 }
 
 function $1096($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 2147418112;
  i64toi32_i32$3 = 0;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $23_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $11_1 | $23_1 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $20_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$1 = $24_1;
  i64toi32_i32$0 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $21_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $7_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1097($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $70_1 = 0, $71_1 = 0, $71$hi = 0, $72_1 = 0, $72$hi = 0, $76$hi = 0, $80_1 = 0, $83_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $1167($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if ($3_1 >>> 0 >= 32767 >>> 0) {
      break label$3
     }
     $3_1 = $3_1 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $1167($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = ($3_1 >>> 0 < 49149 >>> 0 ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 7471104;
   $1167($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if ($3_1 >>> 0 <= -32652 >>> 0) {
     break label$4
    }
    $3_1 = $3_1 + 16269 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 7471104;
   $1167($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = ($3_1 >>> 0 > -48920 >>> 0 ? $3_1 : -48920) + 32538 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $71_1 = $1_1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72_1 = $2_1;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  $1167($70_1 | 0, $71_1 | 0, i64toi32_i32$1 | 0, $72_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $83_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $1098($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $2_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $13_1 & 32767 | 0;
    if (($3_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $4_1 = 4;
    if ($3_1) {
     break label$1
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $4_1 | 0;
 }
 
 function $1099($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10_1 = 0, $9$hi = 0, $7_1 = 0, $9_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $11$hi = 0, $52_1 = 0, $6_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $11_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $123$hi = 0, $126_1 = 0, $127$hi = 0, $148_1 = 0, $148$hi = 0, $150$hi = 0, $153_1 = 0, $153$hi = 0, $155$hi = 0, $167$hi = 0, $170_1 = 0, $171$hi = 0, $200_1 = 0, $200$hi = 0, $202$hi = 0, $211_1 = 0, $212_1 = 0, $212$hi = 0, $214_1 = 0, $214$hi = 0, $220$hi = 0, $221_1 = 0, $221$hi = 0, $228_1 = 0, $228$hi = 0, $233$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($1157($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$1;
     if (!($1098($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $52_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $52_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $6_1 = $52_1;
     $7_1 = $6_1 & 32767 | 0;
     if (($7_1 | 0) != (32767 | 0)) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $1167($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $1159($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $9_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = 2147483647;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $10$hi;
    if (($1157($1_1 | 0, i64toi32_i32$2 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $10$hi;
     if (!($1157($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break label$1;
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    $1167($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$3 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $53_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $53_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   $8_1 = $53_1 & 32767 | 0;
   label$6 : {
    label$7 : {
     if (!$7_1) {
      break label$7
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$6;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1081540608;
    $1167($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$2;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $54_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $54_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7_1 = $54_1 + -120 | 0;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($8_1) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1081540608;
    $1167($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $5_1 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $55_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $55_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $55_1 + -120 | 0;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $11_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $9_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$1;
   label$9 : {
    if (($7_1 | 0) <= ($8_1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$1 = $9$hi;
       i64toi32_i32$1 = $11$hi;
       i64toi32_i32$1 = $9$hi;
       i64toi32_i32$2 = $9_1;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
       $123$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $126_1 = $4$hi >>> 0 < i64toi32_i32$2 >>> 0 | (($4$hi | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$1 = 0;
       $127$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $123$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $127$hi;
       i64toi32_i32$2 = $126_1;
       i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $56_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $57_1 = 0
         } else {
          $57_1 = 1
         }
         $58_1 = $57_1;
        } else {
         $58_1 = 0
        }
        $56_1 = $58_1;
       }
       if ($56_1) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$1 = $10_1;
        i64toi32_i32$2 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = 0;
        $1167($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$2 = $5_1 + 40 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$1;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$1;
        break label$1;
       }
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$2 = $10_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $59_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $59_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $148_1 = $59_1;
       $148$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $60_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $60_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $150$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $148$hi;
       i64toi32_i32$3 = $148_1;
       i64toi32_i32$1 = $150$hi;
       i64toi32_i32$0 = $60_1;
       i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
       $9_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       $9$hi = i64toi32_i32$1;
       break label$11;
      }
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$2 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $61_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $61_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $153_1 = $61_1;
      $153$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 63;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $62_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $62_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $155$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $153$hi;
      i64toi32_i32$3 = $153_1;
      i64toi32_i32$1 = $155$hi;
      i64toi32_i32$0 = $62_1;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $9_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $9$hi = i64toi32_i32$1;
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $63_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $63_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $4_1 = $63_1;
     $4$hi = i64toi32_i32$3;
     $7_1 = $7_1 + -1 | 0;
     if (($7_1 | 0) > ($8_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $7_1 = $8_1;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $167$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     $170_1 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $171$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $167$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = $171$hi;
     i64toi32_i32$1 = $170_1;
     i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
      $64_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        $65_1 = 0
       } else {
        $65_1 = 1
       }
       $66_1 = $65_1;
      } else {
       $66_1 = 0
      }
      $64_1 = $66_1;
     }
     if ($64_1) {
      break label$15
     }
     i64toi32_i32$3 = $9$hi;
     $10_1 = $9_1;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    $1167($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $5_1 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $67_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $67_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $67_1;
     $3$hi = i64toi32_i32$3;
     $7_1 = $7_1 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $68_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $68_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $68_1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $200_1 = $3_1;
     $200$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $69_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $69_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $202$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $200$hi;
     i64toi32_i32$2 = $200_1;
     i64toi32_i32$3 = $202$hi;
     i64toi32_i32$0 = $69_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$2 = 65536;
     i64toi32_i32$0 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $8_1 = $6_1 & 32768 | 0;
   label$18 : {
    if (($7_1 | 0) > (0 | 0)) {
     break label$18
    }
    $211_1 = $5_1 + 64 | 0;
    i64toi32_i32$1 = $4$hi;
    $212_1 = $4_1;
    $212$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $214_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    $214$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = $7_1 + 120 | 0 | $8_1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $70_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $70_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $214$hi;
    i64toi32_i32$3 = $214_1;
    i64toi32_i32$1 = $220$hi;
    i64toi32_i32$2 = $70_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $221_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $221$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $212$hi;
    i64toi32_i32$3 = $221$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1065811968;
    $1167($211_1 | 0, $212_1 | 0, i64toi32_i32$1 | 0, $221_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $5_1 + 72 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $228_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $228$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $7_1 | $8_1 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $71_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $71_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $233$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $228$hi;
   i64toi32_i32$0 = $228_1;
   i64toi32_i32$2 = $233$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
   $2_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $1100($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $1101($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $10_1 = 0, $10$hi = 0, $4_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $12_1 = 0, $12$hi = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $2_1 = $2_1 << 2 | 0;
    $5_1 = HEAP32[($2_1 + 110284 | 0) >> 2] | 0;
    $6_1 = HEAP32[($2_1 + 110272 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$4;
      }
      $2_1 = $1095($1_1 | 0) | 0;
     }
     if ($1102($2_1 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $7_1 = 1;
    label$6 : {
     label$7 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $7_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$8
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$6;
     }
     $2_1 = $1095($1_1 | 0) | 0;
    }
    $8_1 = 0;
    label$9 : {
     label$10 : {
      label$11 : {
       if (($2_1 & -33 | 0 | 0) != (73 | 0)) {
        break label$11
       }
       label$12 : while (1) {
        if (($8_1 | 0) == (7 | 0)) {
         break label$10
        }
        label$13 : {
         label$14 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$14
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$13;
         }
         $2_1 = $1095($1_1 | 0) | 0;
        }
        $9_1 = $8_1 + 65546 | 0;
        $8_1 = $8_1 + 1 | 0;
        if (($2_1 | 32 | 0 | 0) == (HEAP8[$9_1 >> 0] | 0 | 0)) {
         continue label$12
        }
        break label$12;
       };
      }
      label$15 : {
       if (($8_1 | 0) == (3 | 0)) {
        break label$15
       }
       if (($8_1 | 0) == (8 | 0)) {
        break label$10
       }
       if (!$3_1) {
        break label$9
       }
       if ($8_1 >>> 0 < 4 >>> 0) {
        break label$9
       }
       if (($8_1 | 0) == (8 | 0)) {
        break label$10
       }
      }
      label$16 : {
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $20_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $21_1 = 0
         } else {
          $21_1 = 1
         }
         $22_1 = $21_1;
        } else {
         $22_1 = 0
        }
        $20_1 = $22_1;
       }
       if ($20_1) {
        break label$16
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break label$10
      }
      if ($8_1 >>> 0 < 4 >>> 0) {
       break label$10
      }
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $23_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $24_1 = 0
        } else {
         $24_1 = 1
        }
        $25_1 = $24_1;
       } else {
        $25_1 = 0
       }
       $23_1 = $25_1;
      }
      $2_1 = $23_1;
      label$17 : while (1) {
       label$18 : {
        if ($2_1) {
         break label$18
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       $8_1 = $8_1 + -1 | 0;
       if ($8_1 >>> 0 > 3 >>> 0) {
        continue label$17
       }
       break label$17;
      };
     }
     $1161($4_1 | 0, Math_fround(Math_fround(Math_fround($7_1 | 0) * Math_fround(Infinity))));
     i64toi32_i32$0 = $4_1 + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$3;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       label$22 : {
        label$23 : {
         if ($8_1) {
          break label$23
         }
         $8_1 = 0;
         if (($2_1 & -33 | 0 | 0) != (78 | 0)) {
          break label$23
         }
         label$24 : while (1) {
          if (($8_1 | 0) == (2 | 0)) {
           break label$22
          }
          label$25 : {
           label$26 : {
            $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
             break label$26
            }
            HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
            $2_1 = HEAPU8[$2_1 >> 0] | 0;
            break label$25;
           }
           $2_1 = $1095($1_1 | 0) | 0;
          }
          $9_1 = $8_1 + 70764 | 0;
          $8_1 = $8_1 + 1 | 0;
          if (($2_1 | 32 | 0 | 0) == (HEAP8[$9_1 >> 0] | 0 | 0)) {
           continue label$24
          }
          break label$24;
         };
        }
        switch ($8_1 | 0) {
        case 0:
         break label$19;
        case 3:
         break label$22;
        default:
         break label$21;
        };
       }
       label$27 : {
        label$28 : {
         $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
         if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$28
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
         $2_1 = HEAPU8[$2_1 >> 0] | 0;
         break label$27;
        }
        $2_1 = $1095($1_1 | 0) | 0;
       }
       label$29 : {
        label$30 : {
         if (($2_1 | 0) != (40 | 0)) {
          break label$30
         }
         $8_1 = 1;
         break label$29;
        }
        i64toi32_i32$3 = 0;
        $10_1 = 0;
        $10$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 2147450880;
        $11_1 = 0;
        $11$hi = i64toi32_i32$3;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$3 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
         $26_1 = 1
        } else {
         if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
           $27_1 = 0
          } else {
           $27_1 = 1
          }
          $28_1 = $27_1;
         } else {
          $28_1 = 0
         }
         $26_1 = $28_1;
        }
        if ($26_1) {
         break label$1
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        break label$1;
       }
       label$31 : while (1) {
        label$32 : {
         label$33 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$33
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$32;
         }
         $2_1 = $1095($1_1 | 0) | 0;
        }
        $9_1 = $2_1 + -65 | 0;
        label$34 : {
         label$35 : {
          if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
           break label$35
          }
          if ($9_1 >>> 0 < 26 >>> 0) {
           break label$35
          }
          $9_1 = $2_1 + -97 | 0;
          if (($2_1 | 0) == (95 | 0)) {
           break label$35
          }
          if ($9_1 >>> 0 >= 26 >>> 0) {
           break label$34
          }
         }
         $8_1 = $8_1 + 1 | 0;
         continue label$31;
        }
        break label$31;
       };
       i64toi32_i32$0 = 2147450880;
       $11_1 = 0;
       $11$hi = i64toi32_i32$0;
       if (($2_1 | 0) == (41 | 0)) {
        break label$1
       }
       label$36 : {
        i64toi32_i32$1 = $1_1;
        i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
        $12_1 = i64toi32_i32$0;
        $12$hi = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
         $29_1 = 1
        } else {
         if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $30_1 = 0
          } else {
           $30_1 = 1
          }
          $31_1 = $30_1;
         } else {
          $31_1 = 0
         }
         $29_1 = $31_1;
        }
        if ($29_1) {
         break label$36
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       label$37 : {
        label$38 : {
         if (!$3_1) {
          break label$38
         }
         if ($8_1) {
          break label$37
         }
         i64toi32_i32$1 = 0;
         $10_1 = 0;
         $10$hi = i64toi32_i32$1;
         break label$1;
        }
        HEAP32[($986() | 0) >> 2] = 28;
        i64toi32_i32$1 = 0;
        $10_1 = 0;
        $10$hi = i64toi32_i32$1;
        break label$20;
       }
       label$39 : while (1) {
        label$40 : {
         i64toi32_i32$1 = $12$hi;
         i64toi32_i32$3 = $12_1;
         i64toi32_i32$2 = 0;
         i64toi32_i32$0 = 0;
         if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
          $32_1 = 1
         } else {
          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
           if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
            $33_1 = 0
           } else {
            $33_1 = 1
           }
           $34_1 = $33_1;
          } else {
           $34_1 = 0
          }
          $32_1 = $34_1;
         }
         if ($32_1) {
          break label$40
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$3 = 0;
        $10_1 = 0;
        $10$hi = i64toi32_i32$3;
        $8_1 = $8_1 + -1 | 0;
        if ($8_1) {
         continue label$39
        }
        break label$1;
       };
      }
      i64toi32_i32$3 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$3;
      label$41 : {
       i64toi32_i32$0 = $1_1;
       i64toi32_i32$3 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
        $35_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $36_1 = 0
         } else {
          $36_1 = 1
         }
         $37_1 = $36_1;
        } else {
         $37_1 = 0
        }
        $35_1 = $37_1;
       }
       if ($35_1) {
        break label$41
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      HEAP32[($986() | 0) >> 2] = 28;
     }
     i64toi32_i32$0 = $10$hi;
     $1094($1_1 | 0, $10_1 | 0, i64toi32_i32$0 | 0);
     break label$2;
    }
    label$42 : {
     if (($2_1 | 0) != (48 | 0)) {
      break label$42
     }
     label$43 : {
      label$44 : {
       $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($8_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$44
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
       $8_1 = HEAPU8[$8_1 >> 0] | 0;
       break label$43;
      }
      $8_1 = $1095($1_1 | 0) | 0;
     }
     label$45 : {
      if (($8_1 & -33 | 0 | 0) != (88 | 0)) {
       break label$45
      }
      $1103($4_1 + 16 | 0 | 0, $1_1 | 0, $6_1 | 0, $5_1 | 0, $7_1 | 0, $3_1 | 0);
      i64toi32_i32$2 = $4_1 + 24 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$1;
      $10$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
      $38_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $39_1 = 0
       } else {
        $39_1 = 1
       }
       $40_1 = $39_1;
      } else {
       $40_1 = 0
      }
      $38_1 = $40_1;
     }
     if ($38_1) {
      break label$42
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    $1104($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 | 0, $5_1 | 0, $7_1 | 0, $3_1 | 0);
    i64toi32_i32$3 = $4_1 + 40 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$2;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $10$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $11$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $1102($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $1103($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $7_1 = 0, $16$hi = 0, $19$hi = 0, $16_1 = 0, $19_1 = 0, $15$hi = 0, $17$hi = 0, $14$hi = 0, $15_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $12_1 = 0, $20_1 = 0, $11_1 = 0, $13_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $125_1 = 0, $127_1 = 0, $128_1 = 0, $129_1 = 0, $131_1 = 0, $132_1 = 0, $133_1 = 0, $134_1 = 0, $135_1 = 0, $136_1 = 0, $137_1 = 0, $138_1 = 0, $126_1 = 0, $126$hi = 0, $130_1 = 0, $130$hi = 0, $141_1 = 0, $141$hi = 0, $145_1 = 0, $145$hi = 0, $163_1 = 0, $163$hi = 0, $167_1 = 0, $167$hi = 0, $215_1 = 0, $215$hi = 0, $219_1 = 0, $219$hi = 0, $261_1 = 0, $261$hi = 0, $265_1 = 0, $265$hi = 0, $277$hi = 0, $284$hi = 0, $293_1 = 0, $293$hi = 0, $297_1 = 0, $297$hi = 0, $301_1 = 0, $301$hi = 0, $305_1 = 0, $305$hi = 0, $315_1 = 0, $315$hi = 0, $331$hi = 0, $139_1 = 0, $336_1 = 0, $336$hi = 0, $340$hi = 0, $140_1 = 0, $343_1 = 0, $343$hi = 0, $361$hi = 0, $369_1 = 0, $370_1 = 0, $373$hi = 0, $397_1 = 0, $397$hi = 0, $401_1 = 0, $401$hi = 0, $437_1 = 0, $437$hi = 0, $441_1 = 0, $441$hi = 0, $445_1 = 0, $445$hi = 0, $449_1 = 0, $449$hi = 0, $458_1 = 0, $458$hi = 0, $461_1 = 0, $461$hi = 0, $465_1 = 0, $465$hi = 0, $469_1 = 0, $469$hi = 0, $471_1 = 0, $471$hi = 0, $475_1 = 0, $475$hi = 0, $479_1 = 0, $479$hi = 0, $483_1 = 0, $483$hi = 0, $515_1 = 0, $515$hi = 0, $519_1 = 0, $519$hi = 0, $523_1 = 0, $523$hi = 0, $527_1 = 0, $527$hi = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$1;
   }
   $7_1 = $1095($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $14_1 = 0;
  $14$hi = i64toi32_i32$0;
  $9_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7_1 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$3
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$8
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$6;
      }
      $9_1 = 1;
      $7_1 = $1095($1_1 | 0) | 0;
      continue label$6;
     };
    }
    $7_1 = $1095($1_1 | 0) | 0;
   }
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   label$9 : {
    if (($7_1 | 0) == (48 | 0)) {
     break label$9
    }
    $8_1 = 1;
    break label$3;
   }
   label$10 : while (1) {
    label$11 : {
     label$12 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$12
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$11;
     }
     $7_1 = $1095($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label$10
    }
    break label$10;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $15_1 = 0;
  $15$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  label$13 : {
   label$14 : while (1) {
    $12_1 = $7_1;
    label$15 : {
     label$16 : {
      $13_1 = $7_1 + -48 | 0;
      if ($13_1 >>> 0 < 10 >>> 0) {
       break label$16
      }
      $12_1 = $7_1 | 32 | 0;
      label$17 : {
       if (($7_1 | 0) == (46 | 0)) {
        break label$17
       }
       if (($12_1 + -97 | 0) >>> 0 > 5 >>> 0) {
        break label$13
       }
      }
      if (($7_1 | 0) != (46 | 0)) {
       break label$16
      }
      if ($8_1) {
       break label$13
      }
      $8_1 = 1;
      i64toi32_i32$5 = $19$hi;
      $14_1 = $19_1;
      $14$hi = i64toi32_i32$5;
      break label$15;
     }
     $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
     label$18 : {
      label$19 : {
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$0 = $19_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $112_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $113_1 = 0
         } else {
          $113_1 = 1
         }
         $114_1 = $113_1;
        } else {
         $114_1 = 0
        }
        $112_1 = $114_1;
       }
       if ($112_1) {
        break label$19
       }
       $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
       break label$18;
      }
      label$20 : {
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = $19_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$20
       }
       $1162($6_1 + 48 | 0 | 0, $7_1 | 0);
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       $1167($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $126_1 = i64toi32_i32$5;
       $126$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $130_1 = i64toi32_i32$2;
       $130$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $126$hi;
       i64toi32_i32$2 = $130$hi;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       $1167($6_1 + 16 | 0 | 0, $126_1 | 0, i64toi32_i32$5 | 0, $130_1 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
       $141_1 = i64toi32_i32$3;
       $141$hi = i64toi32_i32$0;
       i64toi32_i32$2 = ($6_1 + 16 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $145_1 = i64toi32_i32$0;
       $145$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$3 = $141$hi;
       i64toi32_i32$0 = $145$hi;
       i64toi32_i32$2 = $16$hi;
       i64toi32_i32$5 = $17$hi;
       $1155($6_1 | 0, $141_1 | 0, i64toi32_i32$3 | 0, $145_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1 + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$2;
       $16$hi = i64toi32_i32$5;
       break label$18;
      }
      if (!$7_1) {
       break label$18
      }
      if ($11_1) {
       break label$18
      }
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      $1167($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
      $163_1 = i64toi32_i32$3;
      $163$hi = i64toi32_i32$0;
      i64toi32_i32$2 = ($6_1 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $167_1 = i64toi32_i32$0;
      $167$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = $163$hi;
      i64toi32_i32$0 = $167$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$5 = $17$hi;
      $1155($6_1 + 64 | 0 | 0, $163_1 | 0, i64toi32_i32$3 | 0, $167_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      $11_1 = 1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$0 = $19_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     $9_1 = 1;
    }
    label$21 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
      break label$21
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
     $7_1 = HEAPU8[$7_1 >> 0] | 0;
     continue label$14;
    }
    $7_1 = $1095($1_1 | 0) | 0;
    continue label$14;
   };
  }
  label$22 : {
   label$23 : {
    if ($9_1) {
     break label$23
    }
    label$24 : {
     label$25 : {
      label$26 : {
       i64toi32_i32$5 = $1_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
        $115_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
         if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $116_1 = 0
         } else {
          $116_1 = 1
         }
         $117_1 = $116_1;
        } else {
         $117_1 = 0
        }
        $115_1 = $117_1;
       }
       if ($115_1) {
        break label$26
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
       if (!$5_1) {
        break label$25
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
       if (!$8_1) {
        break label$24
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
       break label$24;
      }
      if ($5_1) {
       break label$24
      }
     }
     i64toi32_i32$5 = 0;
     $1094($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
    }
    wasm2js_scratch_store_f64(+(0.0));
    i64toi32_i32$5 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = 2147483647;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $215_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $215$hi = i64toi32_i32$0;
    wasm2js_scratch_store_f64(+(+($4_1 | 0)));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$5 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $219_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
    $219$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $215$hi;
    i64toi32_i32$0 = $215_1;
    i64toi32_i32$5 = $219$hi;
    i64toi32_i32$4 = $219_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$4 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
    $1160($6_1 + 96 | 0 | 0, +(+wasm2js_scratch_load_f64()));
    i64toi32_i32$3 = $6_1 + 104 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$5;
    break label$22;
   }
   label$27 : {
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$3 = $19_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 7;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $118_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $119_1 = 0
      } else {
       $119_1 = 1
      }
      $120_1 = $119_1;
     } else {
      $120_1 = 0
     }
     $118_1 = $120_1;
    }
    if ($118_1) {
     break label$27
    }
    i64toi32_i32$3 = $19$hi;
    $15_1 = $19_1;
    $15$hi = i64toi32_i32$3;
    label$28 : while (1) {
     $10_1 = $10_1 << 4 | 0;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $15_1 = i64toi32_i32$2;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 8;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
      continue label$28
     }
     break label$28;
    };
   }
   label$29 : {
    label$30 : {
     label$31 : {
      label$32 : {
       if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
        break label$32
       }
       i64toi32_i32$3 = $1105($1_1 | 0, $5_1 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $15_1 = i64toi32_i32$3;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = -2147483648;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$29
       }
       label$33 : {
        if (!$5_1) {
         break label$33
        }
        i64toi32_i32$4 = $1_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
         $121_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $122_1 = 0
          } else {
           $122_1 = 1
          }
          $123_1 = $122_1;
         } else {
          $123_1 = 0
         }
         $121_1 = $123_1;
        }
        if ($121_1) {
         break label$31
        }
        break label$30;
       }
       i64toi32_i32$4 = 0;
       $16_1 = 0;
       $16$hi = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       $1094($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$4 = 0;
       $19_1 = 0;
       $19$hi = i64toi32_i32$4;
       break label$22;
      }
      i64toi32_i32$4 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
       $124_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $125_1 = 0
        } else {
         $125_1 = 1
        }
        $127_1 = $125_1;
       } else {
        $127_1 = 0
       }
       $124_1 = $127_1;
      }
      if ($124_1) {
       break label$29
      }
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$3 = 0;
    $15_1 = 0;
    $15$hi = i64toi32_i32$3;
   }
   label$34 : {
    if ($10_1) {
     break label$34
    }
    wasm2js_scratch_store_f64(+(0.0));
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$4 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $261_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $261$hi = i64toi32_i32$1;
    wasm2js_scratch_store_f64(+(+($4_1 | 0)));
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = -2147483648;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $265_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $265$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $261$hi;
    i64toi32_i32$1 = $261_1;
    i64toi32_i32$3 = $265$hi;
    i64toi32_i32$4 = $265_1;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$4 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
    $1160($6_1 + 112 | 0 | 0, +(+wasm2js_scratch_load_f64()));
    i64toi32_i32$0 = $6_1 + 120 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$3;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$3;
    break label$22;
   }
   label$35 : {
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$5 = $8_1;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$4 = i64toi32_i32$5 ? $14_1 : $19_1;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$1;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 2;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     $128_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
     $128_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
    }
    $277$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$4 = $277$hi;
    i64toi32_i32$0 = $128_1;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$3 = $15_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -32;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $284$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$4 = $284$hi;
    i64toi32_i32$3 = 0 - $3_1 | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $129_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
       $131_1 = 0
      } else {
       $131_1 = 1
      }
      $132_1 = $131_1;
     } else {
      $132_1 = 0
     }
     $129_1 = $132_1;
    }
    if ($129_1) {
     break label$35
    }
    HEAP32[($986() | 0) >> 2] = 68;
    $1162($6_1 + 160 | 0 | 0, $4_1 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
    $293_1 = i64toi32_i32$2;
    $293$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 160 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $297_1 = i64toi32_i32$1;
    $297$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $293$hi;
    i64toi32_i32$1 = $297$hi;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = 2147418111;
    $1167($6_1 + 144 | 0 | 0, $293_1 | 0, i64toi32_i32$2 | 0, $297_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
    $301_1 = i64toi32_i32$4;
    $301$hi = i64toi32_i32$3;
    i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $305_1 = i64toi32_i32$3;
    $305$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $301$hi;
    i64toi32_i32$3 = $305$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $1167($6_1 + 128 | 0 | 0, $301_1 | 0, i64toi32_i32$4 | 0, $305_1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = ($6_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 132 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$2;
    break label$22;
   }
   label$36 : {
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$1 = $3_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $315_1 = i64toi32_i32$1;
    $315$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$3 = $19_1;
    i64toi32_i32$1 = $315$hi;
    i64toi32_i32$4 = $315_1;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
     $133_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$4 >>> 0) {
       $134_1 = 0
      } else {
       $134_1 = 1
      }
      $135_1 = $134_1;
     } else {
      $135_1 = 0
     }
     $133_1 = $135_1;
    }
    if ($133_1) {
     break label$36
    }
    label$37 : {
     if (($10_1 | 0) <= (-1 | 0)) {
      break label$37
     }
     label$38 : while (1) {
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = -1073807360;
      $1155($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 1073610752;
      $7_1 = $1158($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$4 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
      $331$hi = i64toi32_i32$2;
      i64toi32_i32$2 = i64toi32_i32$1;
      $7_1 = ($7_1 | 0) > (-1 | 0);
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$2 = $331$hi;
      $139_1 = i64toi32_i32$3;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$0 ? $139_1 : $16_1;
      i64toi32_i32$4 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$3;
      $336_1 = i64toi32_i32$1;
      $336$hi = i64toi32_i32$4;
      i64toi32_i32$0 = ($6_1 + 416 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $340$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$1 = $340$hi;
      $140_1 = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$2 = i64toi32_i32$3 ? $140_1 : $17_1;
      i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
      $343_1 = i64toi32_i32$2;
      $343$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$3 = $336$hi;
      i64toi32_i32$1 = $343$hi;
      $1155($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$4 | 0, $336_1 | 0, i64toi32_i32$3 | 0, $343_1 | 0, i64toi32_i32$1 | 0);
      $1_1 = $10_1 << 1 | 0;
      $10_1 = $1_1 | $7_1 | 0;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$2 = $19_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($6_1 + 400 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
      if (($1_1 | 0) > (-1 | 0)) {
       continue label$38
      }
      break label$38;
     };
    }
    label$39 : {
     label$40 : {
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $361$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$1 = $19_1;
      i64toi32_i32$2 = $361$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
      i64toi32_i32$4 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $14_1 = i64toi32_i32$2;
      $14$hi = i64toi32_i32$3;
      $7_1 = i64toi32_i32$2;
      $369_1 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
      $370_1 = $2_1;
      i64toi32_i32$3 = 0;
      $373$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$5 = $373$hi;
      i64toi32_i32$0 = $2_1;
      if ((i64toi32_i32$3 | 0) < (i64toi32_i32$5 | 0)) {
       $136_1 = 1
      } else {
       if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $137_1 = 0
        } else {
         $137_1 = 1
        }
        $138_1 = $137_1;
       } else {
        $138_1 = 0
       }
       $136_1 = $138_1;
      }
      $7_1 = $136_1 ? $369_1 : $370_1;
      if (($7_1 | 0) < (113 | 0)) {
       break label$40
      }
      $1162($6_1 + 384 | 0 | 0, $4_1 | 0);
      i64toi32_i32$0 = $6_1 + 392 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $14_1 = i64toi32_i32$4;
      $14$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 384 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 388 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $20_1 = 0;
      $20$hi = i64toi32_i32$4;
      break label$39;
     }
     $1160($6_1 + 352 | 0 | 0, +(+$1069(+(1.0), 144 - $7_1 | 0 | 0)));
     $1162($6_1 + 336 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 352 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 356 | 0) >> 2] | 0;
     $397_1 = i64toi32_i32$4;
     $397$hi = i64toi32_i32$3;
     i64toi32_i32$0 = (i64toi32_i32$0 + 352 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $401_1 = i64toi32_i32$3;
     $401$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 336 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 340 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$3;
     i64toi32_i32$0 = (i64toi32_i32$0 + 336 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $14_1 = i64toi32_i32$3;
     $14$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $397$hi;
     i64toi32_i32$3 = $401$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$5 = $14$hi;
     $1096($6_1 + 368 | 0 | 0, $397_1 | 0, i64toi32_i32$4 | 0, $401_1 | 0, i64toi32_i32$3 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$3 = ($6_1 + 368 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $6_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 368 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 372 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$0;
     $15$hi = i64toi32_i32$5;
    }
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$5 = $17$hi;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 0;
    $7_1 = !($10_1 & 1 | 0) & (($7_1 | 0) < (32 | 0) & ($1157($16_1 | 0, i64toi32_i32$5 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    $1163($6_1 + 320 | 0 | 0, $10_1 | $7_1 | 0 | 0);
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 320 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 324 | 0) >> 2] | 0;
    $437_1 = i64toi32_i32$4;
    $437$hi = i64toi32_i32$3;
    i64toi32_i32$0 = (i64toi32_i32$0 + 320 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $441_1 = i64toi32_i32$3;
    $441$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$0 = $437$hi;
    i64toi32_i32$5 = $441$hi;
    $1167($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$3 | 0, $437_1 | 0, i64toi32_i32$0 | 0, $441_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 304 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 308 | 0) >> 2] | 0;
    $445_1 = i64toi32_i32$5;
    $445$hi = i64toi32_i32$0;
    i64toi32_i32$3 = (i64toi32_i32$3 + 304 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $449_1 = i64toi32_i32$0;
    $449$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = $445$hi;
    i64toi32_i32$0 = $449$hi;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$4 = $20$hi;
    $1155($6_1 + 272 | 0 | 0, $445_1 | 0, i64toi32_i32$5 | 0, $449_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $16_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$4 : i64toi32_i32$3;
    $458_1 = i64toi32_i32$5;
    $458$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = $17$hi;
    i64toi32_i32$4 = i64toi32_i32$3 ? 0 : $17_1;
    i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$0 : i64toi32_i32$5;
    $461_1 = i64toi32_i32$4;
    $461$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$3 = $458$hi;
    i64toi32_i32$0 = $461$hi;
    $1167($6_1 + 288 | 0 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $14_1 | 0, i64toi32_i32$4 | 0, $458_1 | 0, i64toi32_i32$3 | 0, $461_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 288 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 292 | 0) >> 2] | 0;
    $465_1 = i64toi32_i32$0;
    $465$hi = i64toi32_i32$3;
    i64toi32_i32$4 = (i64toi32_i32$4 + 288 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $469_1 = i64toi32_i32$3;
    $469$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 272 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 276 | 0) >> 2] | 0;
    $471_1 = i64toi32_i32$0;
    $471$hi = i64toi32_i32$3;
    i64toi32_i32$4 = (i64toi32_i32$4 + 272 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $475_1 = i64toi32_i32$3;
    $475$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $465$hi;
    i64toi32_i32$3 = $469$hi;
    i64toi32_i32$4 = $471$hi;
    i64toi32_i32$1 = $475$hi;
    $1155($6_1 + 256 | 0 | 0, $465_1 | 0, i64toi32_i32$0 | 0, $469_1 | 0, i64toi32_i32$3 | 0, $471_1 | 0, i64toi32_i32$4 | 0, $475_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 256 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 260 | 0) >> 2] | 0;
    $479_1 = i64toi32_i32$1;
    $479$hi = i64toi32_i32$4;
    i64toi32_i32$3 = (i64toi32_i32$3 + 256 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $483_1 = i64toi32_i32$4;
    $483$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$1 = $479$hi;
    i64toi32_i32$4 = $483$hi;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$0 = $20$hi;
    $1169($6_1 + 240 | 0 | 0, $479_1 | 0, i64toi32_i32$1 | 0, $483_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$0 | 0);
    label$41 : {
     i64toi32_i32$4 = $6_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 240 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 244 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$4 = (i64toi32_i32$4 + 240 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 0;
     if ($1157($16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
      break label$41
     }
     HEAP32[($986() | 0) >> 2] = 68;
    }
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$4 = $17$hi;
    $1097($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0);
    i64toi32_i32$3 = ($6_1 + 224 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 224 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 228 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$4;
    break label$22;
   }
   HEAP32[($986() | 0) >> 2] = 68;
   $1162($6_1 + 208 | 0 | 0, $4_1 | 0);
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 208 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 212 | 0) >> 2] | 0;
   $515_1 = i64toi32_i32$4;
   $515$hi = i64toi32_i32$1;
   i64toi32_i32$3 = (i64toi32_i32$3 + 208 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $519_1 = i64toi32_i32$1;
   $519$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $515$hi;
   i64toi32_i32$1 = $519$hi;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 65536;
   $1167($6_1 + 192 | 0 | 0, $515_1 | 0, i64toi32_i32$4 | 0, $519_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
   $523_1 = i64toi32_i32$0;
   $523$hi = i64toi32_i32$3;
   i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $527_1 = i64toi32_i32$3;
   $527$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $523$hi;
   i64toi32_i32$3 = $527$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 65536;
   $1167($6_1 + 176 | 0 | 0, $523_1 | 0, i64toi32_i32$0 | 0, $527_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$3 = ($6_1 + 176 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$4;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 176 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 180 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $16$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $19$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$4;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $1104($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $7_1 = 0, i64toi32_i32$2 = 0, $18$hi = 0, $18_1 = 0, $14_1 = 0, $19$hi = 0, $19_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $15_1 = 0, $16_1 = 0, $21$hi = 0, $20$hi = 0, $8_1 = 0, $12_1 = 0, $21_1 = 0, $20_1 = 0, $9_1 = 0, $22$hi = 0, $23$hi = 0, $22_1 = 0, $23_1 = 0, $10_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $175_1 = 0, $176_1 = 0, $177_1 = 0, $178_1 = 0, $179_1 = 0, $180_1 = 0, $181_1 = 0, $182_1 = 0, $183_1 = 0, $184_1 = 0, $185_1 = 0, $186_1 = 0, $187_1 = 0, $188_1 = 0, $189_1 = 0, $190_1 = 0, $191_1 = 0, $192_1 = 0, $193_1 = 0, $194_1 = 0, $195_1 = 0, $17_1 = 0, $24_1 = 0.0, $124_1 = 0, $204_1 = 0, $204$hi = 0, $208_1 = 0, $208$hi = 0, $235_1 = 0, $235$hi = 0, $239_1 = 0, $239$hi = 0, $241_1 = 0, $241$hi = 0, $245_1 = 0, $245$hi = 0, $255$hi = 0, $264_1 = 0, $264$hi = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $272$hi = 0, $276_1 = 0, $276$hi = 0, $286_1 = 0, $286$hi = 0, $295_1 = 0, $295$hi = 0, $299_1 = 0, $299$hi = 0, $303_1 = 0, $303$hi = 0, $307_1 = 0, $307$hi = 0, $356_1 = 0, $356$hi = 0, $360_1 = 0, $360$hi = 0, $362_1 = 0, $362$hi = 0, $366_1 = 0, $366$hi = 0, $385_1 = 0, $385$hi = 0, $389_1 = 0, $389$hi = 0, $391_1 = 0, $391$hi = 0, $395_1 = 0, $395$hi = 0, $406_1 = 0, $406$hi = 0, $410_1 = 0, $410$hi = 0, $412_1 = 0, $412$hi = 0, $416_1 = 0, $416$hi = 0, $444_1 = 0, $444$hi = 0, $448_1 = 0, $448$hi = 0, $450_1 = 0, $450$hi = 0, $454_1 = 0, $454$hi = 0, $464_1 = 0, $464$hi = 0, $468_1 = 0, $468$hi = 0, $470_1 = 0, $470$hi = 0, $474_1 = 0, $474$hi = 0, $495_1 = 0, $496_1 = 0, $513_1 = 0, $591$hi = 0, $593$hi = 0, $601_1 = 0, $601$hi = 0, $742_1 = 0, $742$hi = 0, $746_1 = 0, $746$hi = 0, $748_1 = 0, $748$hi = 0, $752_1 = 0, $752$hi = 0, $771_1 = 0, $771$hi = 0, $775_1 = 0, $775$hi = 0, $817_1 = 0, $878_1 = 0, $878$hi = 0, $882_1 = 0, $882$hi = 0, $901_1 = 0, $901$hi = 0, $905_1 = 0, $905$hi = 0, $923_1 = 0, $923$hi = 0, $927_1 = 0, $927$hi = 0, $964_1 = 0, $964$hi = 0, $968_1 = 0, $968$hi = 0, $987_1 = 0, $987$hi = 0, $991_1 = 0, $991$hi = 0, $1014_1 = 0, $1014$hi = 0, $1018_1 = 0, $1018$hi = 0, $1034_1 = 0, $1034$hi = 0, $1038_1 = 0, $1038$hi = 0, $1052_1 = 0, $1052$hi = 0, $1056_1 = 0, $1056$hi = 0, $1077_1 = 0, $1077$hi = 0, $1081_1 = 0, $1081$hi = 0, $1104_1 = 0, $1104$hi = 0, $1108_1 = 0, $1108$hi = 0, $1113$hi = 0, $196_1 = 0, $1120$hi = 0, $197_1 = 0;
  $7_1 = global$0 - 8976 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $9_1 = 0 - $4_1 | 0;
  $10_1 = $9_1 - $3_1 | 0;
  i64toi32_i32$0 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$0;
  $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$1
       }
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$3
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       continue label$4;
      }
      $11_1 = 1;
      $2_1 = $1095($1_1 | 0) | 0;
      continue label$4;
     };
    }
    $2_1 = $1095($1_1 | 0) | 0;
   }
   i64toi32_i32$0 = 0;
   $18_1 = 0;
   $18$hi = i64toi32_i32$0;
   label$7 : {
    if (($2_1 | 0) != (48 | 0)) {
     break label$7
    }
    label$8 : while (1) {
     label$9 : {
      label$10 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$10
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$9;
      }
      $2_1 = $1095($1_1 | 0) | 0;
     }
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = $18$hi + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$5;
     if (($2_1 | 0) == (48 | 0)) {
      continue label$8
     }
     break label$8;
    };
    $11_1 = 1;
   }
   $8_1 = 1;
  }
  $12_1 = 0;
  HEAP32[($7_1 + 784 | 0) >> 2] = 0;
  $13_1 = $2_1 + -48 | 0;
  label$11 : {
   label$12 : {
    label$13 : {
     label$14 : {
      label$15 : {
       label$16 : {
        label$17 : {
         $14_1 = ($2_1 | 0) == (46 | 0);
         if ($14_1) {
          break label$17
         }
         i64toi32_i32$5 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$5;
         if ($13_1 >>> 0 <= 9 >>> 0) {
          break label$17
         }
         $15_1 = 0;
         $16_1 = 0;
         break label$16;
        }
        i64toi32_i32$5 = 0;
        $19_1 = 0;
        $19$hi = i64toi32_i32$5;
        $16_1 = 0;
        $15_1 = 0;
        $12_1 = 0;
        label$18 : while (1) {
         label$19 : {
          label$20 : {
           if (!($14_1 & 1 | 0)) {
            break label$20
           }
           label$21 : {
            if ($8_1) {
             break label$21
            }
            i64toi32_i32$5 = $19$hi;
            $18_1 = $19_1;
            $18$hi = i64toi32_i32$5;
            $8_1 = 1;
            break label$19;
           }
           $14_1 = !$11_1;
           break label$15;
          }
          i64toi32_i32$5 = $19$hi;
          i64toi32_i32$0 = $19_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $19_1 = i64toi32_i32$1;
          $19$hi = i64toi32_i32$4;
          label$22 : {
           if (($15_1 | 0) > (2044 | 0)) {
            break label$22
           }
           $14_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
           label$23 : {
            if (!$16_1) {
             break label$23
            }
            $13_1 = ($2_1 + Math_imul(HEAP32[$14_1 >> 2] | 0, 10) | 0) + -48 | 0;
           }
           i64toi32_i32$4 = $19$hi;
           $12_1 = ($2_1 | 0) == (48 | 0) ? $12_1 : $19_1;
           HEAP32[$14_1 >> 2] = $13_1;
           $11_1 = 1;
           $2_1 = $16_1 + 1 | 0;
           $124_1 = $2_1;
           $2_1 = ($2_1 | 0) == (9 | 0);
           $16_1 = $2_1 ? 0 : $124_1;
           $15_1 = $15_1 + $2_1 | 0;
           break label$19;
          }
          if (($2_1 | 0) == (48 | 0)) {
           break label$19
          }
          HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
          $12_1 = 18396;
         }
         label$24 : {
          label$25 : {
           $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$25
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
           $2_1 = HEAPU8[$2_1 >> 0] | 0;
           break label$24;
          }
          $2_1 = $1095($1_1 | 0) | 0;
         }
         $13_1 = $2_1 + -48 | 0;
         $14_1 = ($2_1 | 0) == (46 | 0);
         if ($14_1) {
          continue label$18
         }
         if ($13_1 >>> 0 < 10 >>> 0) {
          continue label$18
         }
         break label$18;
        };
       }
       i64toi32_i32$4 = $18$hi;
       i64toi32_i32$4 = $19$hi;
       i64toi32_i32$2 = $8_1;
       i64toi32_i32$4 = $18$hi;
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = i64toi32_i32$2 ? $18_1 : $19_1;
       i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
       $18_1 = i64toi32_i32$3;
       $18$hi = i64toi32_i32$5;
       label$26 : {
        if (!$11_1) {
         break label$26
        }
        if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
         break label$26
        }
        label$27 : {
         i64toi32_i32$5 = $1105($1_1 | 0, $6_1 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $20_1 = i64toi32_i32$5;
         $20$hi = i64toi32_i32$3;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break label$27
         }
         if (!$6_1) {
          break label$13
         }
         i64toi32_i32$2 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$2;
         i64toi32_i32$4 = $1_1;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
         i64toi32_i32$4 = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         i64toi32_i32$5 = 0;
         if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
          $171_1 = 1
         } else {
          if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
           if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$5 >>> 0) {
            $172_1 = 0
           } else {
            $172_1 = 1
           }
           $173_1 = $172_1;
          } else {
           $173_1 = 0
          }
          $171_1 = $173_1;
         }
         if ($171_1) {
          break label$27
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$5 = $20_1;
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$2 = $18_1;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $18_1 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$1;
        break label$12;
       }
       $14_1 = !$11_1;
       if (($2_1 | 0) < (0 | 0)) {
        break label$14
       }
      }
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
       $174_1 = 1
      } else {
       if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
         $175_1 = 0
        } else {
         $175_1 = 1
        }
        $176_1 = $175_1;
       } else {
        $176_1 = 0
       }
       $174_1 = $176_1;
      }
      if ($174_1) {
       break label$14
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     if (!$14_1) {
      break label$12
     }
     HEAP32[($986() | 0) >> 2] = 28;
    }
    i64toi32_i32$4 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $1094($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = 0;
    $18_1 = 0;
    $18$hi = i64toi32_i32$4;
    break label$11;
   }
   label$28 : {
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    if ($1_1) {
     break label$28
    }
    wasm2js_scratch_store_f64(+(0.0));
    i64toi32_i32$4 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$5 = 2147483647;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $204_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $204$hi = i64toi32_i32$5;
    wasm2js_scratch_store_f64(+(+($5_1 | 0)));
    i64toi32_i32$5 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$4 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = -2147483648;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $208_1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
    $208$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $204$hi;
    i64toi32_i32$5 = $204_1;
    i64toi32_i32$4 = $208$hi;
    i64toi32_i32$1 = $208_1;
    i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 | i64toi32_i32$1 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
    $1160($7_1 | 0, +(+wasm2js_scratch_load_f64()));
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    break label$11;
   }
   label$29 : {
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 9;
    if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
     $177_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $178_1 = 0
      } else {
       $178_1 = 1
      }
      $179_1 = $178_1;
     } else {
      $179_1 = 0
     }
     $177_1 = $179_1;
    }
    if ($177_1) {
     break label$29
    }
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$5 = $19_1;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | 0) {
     break label$29
    }
    label$30 : {
     if (($3_1 | 0) > (30 | 0)) {
      break label$30
     }
     if ($1_1 >>> $3_1 | 0) {
      break label$29
     }
    }
    $1162($7_1 + 48 | 0 | 0, $5_1 | 0);
    $1163($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
    $235_1 = i64toi32_i32$1;
    $235$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $239_1 = i64toi32_i32$2;
    $239$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    $241_1 = i64toi32_i32$1;
    $241$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $245_1 = i64toi32_i32$2;
    $245$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $235$hi;
    i64toi32_i32$2 = $239$hi;
    i64toi32_i32$5 = $241$hi;
    i64toi32_i32$4 = $245$hi;
    $1167($7_1 + 16 | 0 | 0, $235_1 | 0, i64toi32_i32$1 | 0, $239_1 | 0, i64toi32_i32$2 | 0, $241_1 | 0, i64toi32_i32$5 | 0, $245_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    break label$11;
   }
   label$31 : {
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = 0;
    $255$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$5 = $255$hi;
    i64toi32_i32$1 = $9_1 >>> 1 | 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
     $180_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
       $181_1 = 0
      } else {
       $181_1 = 1
      }
      $182_1 = $181_1;
     } else {
      $182_1 = 0
     }
     $180_1 = $182_1;
    }
    if ($180_1) {
     break label$31
    }
    HEAP32[($986() | 0) >> 2] = 68;
    $1162($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] | 0;
    $264_1 = i64toi32_i32$2;
    $264$hi = i64toi32_i32$4;
    i64toi32_i32$1 = (i64toi32_i32$1 + 96 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $268_1 = i64toi32_i32$4;
    $268$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $264$hi;
    i64toi32_i32$4 = $268$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = 2147418111;
    $1167($7_1 + 80 | 0 | 0, $264_1 | 0, i64toi32_i32$2 | 0, $268_1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
    $272_1 = i64toi32_i32$5;
    $272$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 80 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $276_1 = i64toi32_i32$1;
    $276$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $272$hi;
    i64toi32_i32$1 = $276$hi;
    i64toi32_i32$4 = -1;
    i64toi32_i32$2 = 2147418111;
    $1167($7_1 + 64 | 0 | 0, $272_1 | 0, i64toi32_i32$5 | 0, $276_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$1 = ($7_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$2;
    $18$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$2;
    break label$11;
   }
   label$32 : {
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$4 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
    $286_1 = i64toi32_i32$4;
    $286$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$4 = $286$hi;
    i64toi32_i32$5 = $286_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$4 | 0)) {
     $183_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       $184_1 = 0
      } else {
       $184_1 = 1
      }
      $185_1 = $184_1;
     } else {
      $185_1 = 0
     }
     $183_1 = $185_1;
    }
    if ($183_1) {
     break label$32
    }
    HEAP32[($986() | 0) >> 2] = 68;
    $1162($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 148 | 0) >> 2] | 0;
    $295_1 = i64toi32_i32$1;
    $295$hi = i64toi32_i32$2;
    i64toi32_i32$5 = (i64toi32_i32$5 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $299_1 = i64toi32_i32$2;
    $299$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $295$hi;
    i64toi32_i32$2 = $299$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 65536;
    $1167($7_1 + 128 | 0 | 0, $295_1 | 0, i64toi32_i32$1 | 0, $299_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $303_1 = i64toi32_i32$4;
    $303$hi = i64toi32_i32$5;
    i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $307_1 = i64toi32_i32$5;
    $307$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $303$hi;
    i64toi32_i32$5 = $307$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 65536;
    $1167($7_1 + 112 | 0 | 0, $303_1 | 0, i64toi32_i32$4 | 0, $307_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$5 = ($7_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    break label$11;
   }
   label$33 : {
    if (!$16_1) {
     break label$33
    }
    label$34 : {
     if (($16_1 | 0) > (8 | 0)) {
      break label$34
     }
     $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label$35 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != (9 | 0)) {
       continue label$35
      }
      break label$35;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $15_1 = $15_1 + 1 | 0;
   }
   i64toi32_i32$1 = $18$hi;
   $16_1 = $18_1;
   label$36 : {
    if (($12_1 | 0) >= (9 | 0)) {
     break label$36
    }
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 17;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
     $186_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $187_1 = 0
      } else {
       $187_1 = 1
      }
      $188_1 = $187_1;
     } else {
      $188_1 = 0
     }
     $186_1 = $188_1;
    }
    if ($186_1) {
     break label$36
    }
    if (($12_1 | 0) > ($16_1 | 0)) {
     break label$36
    }
    label$37 : {
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$4 = $18_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 9;
     if ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$37
     }
     $1162($7_1 + 192 | 0 | 0, $5_1 | 0);
     $1163($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 196 | 0) >> 2] | 0;
     $356_1 = i64toi32_i32$4;
     $356$hi = i64toi32_i32$5;
     i64toi32_i32$2 = ($7_1 + 192 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $360_1 = i64toi32_i32$5;
     $360$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 180 | 0) >> 2] | 0;
     $362_1 = i64toi32_i32$4;
     $362$hi = i64toi32_i32$5;
     i64toi32_i32$2 = ($7_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $366_1 = i64toi32_i32$5;
     $366$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $356$hi;
     i64toi32_i32$5 = $360$hi;
     i64toi32_i32$2 = $362$hi;
     i64toi32_i32$1 = $366$hi;
     $1167($7_1 + 160 | 0 | 0, $356_1 | 0, i64toi32_i32$4 | 0, $360_1 | 0, i64toi32_i32$5 | 0, $362_1 | 0, i64toi32_i32$2 | 0, $366_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$5 = ($7_1 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$1;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 164 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$1;
     break label$11;
    }
    label$38 : {
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$5 = $18_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 8;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
      $189_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0) {
        $190_1 = 0
       } else {
        $190_1 = 1
       }
       $191_1 = $190_1;
      } else {
       $191_1 = 0
      }
      $189_1 = $191_1;
     }
     if ($189_1) {
      break label$38
     }
     $1162($7_1 + 272 | 0 | 0, $5_1 | 0);
     $1163($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 272 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 276 | 0) >> 2] | 0;
     $385_1 = i64toi32_i32$5;
     $385$hi = i64toi32_i32$1;
     i64toi32_i32$4 = (i64toi32_i32$4 + 272 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $389_1 = i64toi32_i32$1;
     $389$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 256 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 260 | 0) >> 2] | 0;
     $391_1 = i64toi32_i32$5;
     $391$hi = i64toi32_i32$1;
     i64toi32_i32$4 = (i64toi32_i32$4 + 256 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $395_1 = i64toi32_i32$1;
     $395$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $385$hi;
     i64toi32_i32$1 = $389$hi;
     i64toi32_i32$4 = $391$hi;
     i64toi32_i32$2 = $395$hi;
     $1167($7_1 + 240 | 0 | 0, $385_1 | 0, i64toi32_i32$5 | 0, $389_1 | 0, i64toi32_i32$1 | 0, $391_1 | 0, i64toi32_i32$4 | 0, $395_1 | 0, i64toi32_i32$2 | 0);
     $1162($7_1 + 224 | 0 | 0, HEAP32[(((8 - $16_1 | 0) << 2 | 0) + 110240 | 0) >> 2] | 0 | 0);
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 240 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 244 | 0) >> 2] | 0;
     $406_1 = i64toi32_i32$2;
     $406$hi = i64toi32_i32$4;
     i64toi32_i32$1 = (i64toi32_i32$1 + 240 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $410_1 = i64toi32_i32$4;
     $410$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 224 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 228 | 0) >> 2] | 0;
     $412_1 = i64toi32_i32$2;
     $412$hi = i64toi32_i32$4;
     i64toi32_i32$1 = (i64toi32_i32$1 + 224 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $416_1 = i64toi32_i32$4;
     $416$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $406$hi;
     i64toi32_i32$4 = $410$hi;
     i64toi32_i32$1 = $412$hi;
     i64toi32_i32$5 = $416$hi;
     $1159($7_1 + 208 | 0 | 0, $406_1 | 0, i64toi32_i32$2 | 0, $410_1 | 0, i64toi32_i32$4 | 0, $412_1 | 0, i64toi32_i32$1 | 0, $416_1 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$4 = ($7_1 + 208 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$5;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 208 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 212 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$5;
     break label$11;
    }
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    label$39 : {
     $2_1 = ($3_1 + Math_imul($16_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break label$39
     }
     if ($1_1 >>> $2_1 | 0) {
      break label$36
     }
    }
    $1162($7_1 + 352 | 0 | 0, $5_1 | 0);
    $1163($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 352 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 356 | 0) >> 2] | 0;
    $444_1 = i64toi32_i32$5;
    $444$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 352 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $448_1 = i64toi32_i32$1;
    $448$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 336 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 340 | 0) >> 2] | 0;
    $450_1 = i64toi32_i32$5;
    $450$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 336 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $454_1 = i64toi32_i32$1;
    $454$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $444$hi;
    i64toi32_i32$1 = $448$hi;
    i64toi32_i32$4 = $450$hi;
    i64toi32_i32$2 = $454$hi;
    $1167($7_1 + 320 | 0 | 0, $444_1 | 0, i64toi32_i32$5 | 0, $448_1 | 0, i64toi32_i32$1 | 0, $450_1 | 0, i64toi32_i32$4 | 0, $454_1 | 0, i64toi32_i32$2 | 0);
    $1162($7_1 + 304 | 0 | 0, HEAP32[(($16_1 << 2 | 0) + 110200 | 0) >> 2] | 0 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 320 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 324 | 0) >> 2] | 0;
    $464_1 = i64toi32_i32$2;
    $464$hi = i64toi32_i32$4;
    i64toi32_i32$1 = (i64toi32_i32$1 + 320 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $468_1 = i64toi32_i32$4;
    $468$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 304 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 308 | 0) >> 2] | 0;
    $470_1 = i64toi32_i32$2;
    $470$hi = i64toi32_i32$4;
    i64toi32_i32$1 = (i64toi32_i32$1 + 304 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $474_1 = i64toi32_i32$4;
    $474$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $464$hi;
    i64toi32_i32$4 = $468$hi;
    i64toi32_i32$1 = $470$hi;
    i64toi32_i32$5 = $474$hi;
    $1167($7_1 + 288 | 0 | 0, $464_1 | 0, i64toi32_i32$2 | 0, $468_1 | 0, i64toi32_i32$4 | 0, $470_1 | 0, i64toi32_i32$1 | 0, $474_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = ($7_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$5;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 288 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 292 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$5;
    break label$11;
   }
   label$40 : while (1) {
    $14_1 = $15_1;
    $15_1 = $14_1 + -1 | 0;
    if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
     continue label$40
    }
    break label$40;
   };
   $12_1 = 0;
   label$41 : {
    label$42 : {
     $1_1 = ($16_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break label$42
     }
     $13_1 = 0;
     break label$41;
    }
    $495_1 = $1_1 + 9 | 0;
    $496_1 = $1_1;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $18_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
     $192_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $193_1 = 0
      } else {
       $193_1 = 1
      }
      $194_1 = $193_1;
     } else {
      $194_1 = 0
     }
     $192_1 = $194_1;
    }
    $9_1 = $192_1 ? $495_1 : $496_1;
    label$43 : {
     label$44 : {
      if ($14_1) {
       break label$44
      }
      $13_1 = 0;
      $14_1 = 0;
      break label$43;
     }
     $11_1 = HEAP32[(((8 - $9_1 | 0) << 2 | 0) + 110240 | 0) >> 2] | 0;
     $6_1 = (1e9 | 0) / ($11_1 | 0) | 0;
     $2_1 = 0;
     $1_1 = 0;
     $13_1 = 0;
     label$45 : while (1) {
      $15_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
      $513_1 = $15_1;
      $15_1 = HEAP32[$15_1 >> 2] | 0;
      $8_1 = ($15_1 >>> 0) / ($11_1 >>> 0) | 0;
      $2_1 = $8_1 + $2_1 | 0;
      HEAP32[$513_1 >> 2] = $2_1;
      $2_1 = ($1_1 | 0) == ($13_1 | 0) & !$2_1 | 0;
      $13_1 = $2_1 ? ($13_1 + 1 | 0) & 2047 | 0 : $13_1;
      $16_1 = $2_1 ? $16_1 + -9 | 0 : $16_1;
      $2_1 = Math_imul($6_1, $15_1 - Math_imul($8_1, $11_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($14_1 | 0)) {
       continue label$45
      }
      break label$45;
     };
     if (!$2_1) {
      break label$43
     }
     HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $2_1;
     $14_1 = $14_1 + 1 | 0;
    }
    $16_1 = ($16_1 - $9_1 | 0) + 9 | 0;
   }
   label$46 : while (1) {
    $9_1 = ($7_1 + 784 | 0) + ($13_1 << 2 | 0) | 0;
    $6_1 = ($16_1 | 0) < (36 | 0);
    label$47 : {
     label$48 : while (1) {
      label$49 : {
       if ($6_1) {
        break label$49
       }
       if (($16_1 | 0) != (36 | 0)) {
        break label$47
       }
       if ((HEAP32[$9_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$47
       }
      }
      $15_1 = $14_1 + 2047 | 0;
      $11_1 = 0;
      label$50 : while (1) {
       $2_1 = $14_1;
       label$51 : {
        label$52 : {
         $1_1 = $15_1 & 2047 | 0;
         $14_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $14_1;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$5 = 0;
         i64toi32_i32$2 = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         i64toi32_i32$1 = 29;
         i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $195_1 = 0;
         } else {
          i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
          $195_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $591$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $593$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $591$hi;
         i64toi32_i32$5 = $195_1;
         i64toi32_i32$2 = $593$hi;
         i64toi32_i32$1 = $11_1;
         i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
         i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $18_1 = i64toi32_i32$3;
         $18$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $18$hi;
         i64toi32_i32$0 = $18$hi;
         i64toi32_i32$4 = i64toi32_i32$3;
         i64toi32_i32$5 = 0;
         i64toi32_i32$1 = 1000000001;
         if ($18$hi >>> 0 > i64toi32_i32$5 >>> 0 | (($18$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
          break label$52
         }
         $11_1 = 0;
         break label$51;
        }
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($18_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $19_1 = i64toi32_i32$0;
        $19$hi = i64toi32_i32$4;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $601_1 = i64toi32_i32$0;
        $601$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$1 = $18_1;
        i64toi32_i32$0 = $601$hi;
        i64toi32_i32$5 = $601_1;
        i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
        i64toi32_i32$3 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
        $18_1 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $19$hi;
        $11_1 = $19_1;
       }
       i64toi32_i32$3 = $18$hi;
       HEAP32[$14_1 >> 2] = $18_1;
       $8_1 = ($2_1 + -1 | 0) & 2047 | 0;
       $14_1 = ($1_1 | 0) != ($8_1 | 0) ? $2_1 : ($1_1 | 0) == ($13_1 | 0) ? $2_1 : !($18_1 | i64toi32_i32$3 | 0) ? $1_1 : $2_1;
       $15_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($13_1 | 0)) {
        continue label$50
       }
       break label$50;
      };
      $12_1 = $12_1 + -29 | 0;
      $14_1 = $2_1;
      if (!$11_1) {
       continue label$48
      }
      break label$48;
     };
     label$53 : {
      label$54 : {
       $13_1 = ($13_1 + -1 | 0) & 2047 | 0;
       if (($13_1 | 0) == ($2_1 | 0)) {
        break label$54
       }
       $14_1 = $2_1;
       break label$53;
      }
      $1_1 = ($7_1 + 784 | 0) + ((($2_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | (HEAP32[(($7_1 + 784 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0) | 0;
      $14_1 = $8_1;
     }
     $16_1 = $16_1 + 9 | 0;
     HEAP32[(($7_1 + 784 | 0) + ($13_1 << 2 | 0) | 0) >> 2] = $11_1;
     continue label$46;
    }
    break label$46;
   };
   label$55 : {
    label$56 : while (1) {
     $17_1 = ($14_1 + 1 | 0) & 2047 | 0;
     $9_1 = ($7_1 + 784 | 0) + ((($14_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$57 : while (1) {
      $15_1 = ($16_1 | 0) > (45 | 0) ? 9 : 1;
      label$58 : {
       label$59 : while (1) {
        $11_1 = $13_1;
        $1_1 = 0;
        label$60 : {
         label$61 : {
          label$62 : while (1) {
           $2_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($2_1 | 0) == ($14_1 | 0)) {
            break label$61
           }
           $2_1 = HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0;
           $13_1 = HEAP32[(($1_1 << 2 | 0) + 110224 | 0) >> 2] | 0;
           if ($2_1 >>> 0 < $13_1 >>> 0) {
            break label$61
           }
           if ($2_1 >>> 0 > $13_1 >>> 0) {
            break label$60
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label$62
           }
           break label$62;
          };
         }
         if (($16_1 | 0) != (36 | 0)) {
          break label$60
         }
         i64toi32_i32$3 = 0;
         $18_1 = 0;
         $18$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$3;
         label$63 : while (1) {
          label$64 : {
           $2_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($2_1 | 0) != ($14_1 | 0)) {
            break label$64
           }
           $14_1 = ($14_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($14_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          $1163($7_1 + 768 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$1 = $19$hi;
          i64toi32_i32$4 = 0;
          i64toi32_i32$5 = 1075633366;
          $1167($7_1 + 752 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 1342177280 | 0, i64toi32_i32$5 | 0);
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 756 | 0) >> 2] | 0;
          $742_1 = i64toi32_i32$5;
          $742$hi = i64toi32_i32$4;
          i64toi32_i32$1 = (i64toi32_i32$1 + 752 | 0) + 8 | 0;
          i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $746_1 = i64toi32_i32$4;
          $746$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 768 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 772 | 0) >> 2] | 0;
          $748_1 = i64toi32_i32$5;
          $748$hi = i64toi32_i32$4;
          i64toi32_i32$1 = (i64toi32_i32$1 + 768 | 0) + 8 | 0;
          i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $752_1 = i64toi32_i32$4;
          $752$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $742$hi;
          i64toi32_i32$4 = $746$hi;
          i64toi32_i32$1 = $748$hi;
          i64toi32_i32$3 = $752$hi;
          $1155($7_1 + 736 | 0 | 0, $742_1 | 0, i64toi32_i32$5 | 0, $746_1 | 0, i64toi32_i32$4 | 0, $748_1 | 0, i64toi32_i32$1 | 0, $752_1 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$4 = ($7_1 + 736 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$3;
          $19$hi = i64toi32_i32$1;
          i64toi32_i32$4 = $7_1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 740 | 0) >> 2] | 0;
          $18_1 = i64toi32_i32$1;
          $18$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label$63
          }
          break label$63;
         };
         $1162(i64toi32_i32$4 + 720 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 720 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 724 | 0) >> 2] | 0;
         $771_1 = i64toi32_i32$3;
         $771$hi = i64toi32_i32$1;
         i64toi32_i32$4 = (i64toi32_i32$4 + 720 | 0) + 8 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
         $775_1 = i64toi32_i32$1;
         $775$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $18$hi;
         i64toi32_i32$1 = $19$hi;
         i64toi32_i32$4 = $771$hi;
         i64toi32_i32$5 = $775$hi;
         $1167($7_1 + 704 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $771_1 | 0, i64toi32_i32$4 | 0, $775_1 | 0, i64toi32_i32$5 | 0);
         i64toi32_i32$1 = ($7_1 + 704 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $19_1 = i64toi32_i32$5;
         $19$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $18_1 = 0;
         $18$hi = i64toi32_i32$4;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 708 | 0) >> 2] | 0;
         $20_1 = i64toi32_i32$4;
         $20$hi = i64toi32_i32$5;
         $13_1 = $12_1 + 113 | 0;
         $1_1 = $13_1 - $4_1 | 0;
         $8_1 = ($3_1 | 0) > ($1_1 | 0);
         $2_1 = $8_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if (($2_1 | 0) <= (112 | 0)) {
          break label$58
         }
         i64toi32_i32$5 = 0;
         $21_1 = 0;
         $21$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$5;
         break label$55;
        }
        $12_1 = $15_1 + $12_1 | 0;
        $13_1 = $14_1;
        if (($11_1 | 0) == ($14_1 | 0)) {
         continue label$59
        }
        break label$59;
       };
       $8_1 = 1e9 >>> $15_1 | 0;
       $6_1 = (-1 << $15_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $13_1 = $11_1;
       label$65 : while (1) {
        $2_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
        $817_1 = $2_1;
        $2_1 = HEAP32[$2_1 >> 2] | 0;
        $1_1 = ($2_1 >>> $15_1 | 0) + $1_1 | 0;
        HEAP32[$817_1 >> 2] = $1_1;
        $1_1 = ($11_1 | 0) == ($13_1 | 0) & !$1_1 | 0;
        $13_1 = $1_1 ? ($13_1 + 1 | 0) & 2047 | 0 : $13_1;
        $16_1 = $1_1 ? $16_1 + -9 | 0 : $16_1;
        $1_1 = Math_imul($2_1 & $6_1 | 0, $8_1);
        $11_1 = ($11_1 + 1 | 0) & 2047 | 0;
        if (($11_1 | 0) != ($14_1 | 0)) {
         continue label$65
        }
        break label$65;
       };
       if (!$1_1) {
        continue label$57
       }
       label$66 : {
        if (($17_1 | 0) == ($13_1 | 0)) {
         break label$66
        }
        HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $1_1;
        $14_1 = $17_1;
        continue label$56;
       }
       HEAP32[$9_1 >> 2] = HEAP32[$9_1 >> 2] | 0 | 1 | 0;
       continue label$57;
      }
      break label$57;
     };
     break label$56;
    };
    $1160($7_1 + 656 | 0 | 0, +(+$1069(+(1.0), 225 - $2_1 | 0 | 0)));
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 660 | 0) >> 2] | 0;
    $878_1 = i64toi32_i32$5;
    $878$hi = i64toi32_i32$4;
    i64toi32_i32$1 = (i64toi32_i32$1 + 656 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $882_1 = i64toi32_i32$4;
    $882$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $878$hi;
    i64toi32_i32$4 = $882$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    $1096($7_1 + 688 | 0 | 0, $878_1 | 0, i64toi32_i32$5 | 0, $882_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = ($7_1 + 688 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$3;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 692 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$3;
    $1160(i64toi32_i32$4 + 640 | 0 | 0, +(+$1069(+(1.0), 113 - $2_1 | 0 | 0)));
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 640 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 644 | 0) >> 2] | 0;
    $901_1 = i64toi32_i32$3;
    $901$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 640 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $905_1 = i64toi32_i32$1;
    $905$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$4 = $901$hi;
    i64toi32_i32$5 = $905$hi;
    $1099($7_1 + 672 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $901_1 | 0, i64toi32_i32$4 | 0, $905_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 676 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$5;
    $18$hi = i64toi32_i32$4;
    i64toi32_i32$1 = (i64toi32_i32$1 + 672 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$3 = $21$hi;
    $1169($7_1 + 624 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 624 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 628 | 0) >> 2] | 0;
    $923_1 = i64toi32_i32$3;
    $923$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 624 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $927_1 = i64toi32_i32$1;
    $927$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$1 = $23$hi;
    i64toi32_i32$4 = $923$hi;
    i64toi32_i32$5 = $927$hi;
    $1155($7_1 + 608 | 0 | 0, $22_1 | 0, i64toi32_i32$3 | 0, $23_1 | 0, i64toi32_i32$1 | 0, $923_1 | 0, i64toi32_i32$4 | 0, $927_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$1 = ($7_1 + 608 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 612 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$5;
   }
   label$67 : {
    $15_1 = ($11_1 + 4 | 0) & 2047 | 0;
    if (($15_1 | 0) == ($14_1 | 0)) {
     break label$67
    }
    label$68 : {
     label$69 : {
      $15_1 = HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0;
      if ($15_1 >>> 0 > 499999999 >>> 0) {
       break label$69
      }
      label$70 : {
       if ($15_1) {
        break label$70
       }
       if ((($11_1 + 5 | 0) & 2047 | 0 | 0) == ($14_1 | 0)) {
        break label$68
       }
      }
      $1160($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 500 | 0) >> 2] | 0;
      $964_1 = i64toi32_i32$5;
      $964$hi = i64toi32_i32$4;
      i64toi32_i32$1 = (i64toi32_i32$1 + 496 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $968_1 = i64toi32_i32$4;
      $968$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $964$hi;
      i64toi32_i32$3 = $968$hi;
      $1155($7_1 + 480 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $964_1 | 0, i64toi32_i32$1 | 0, $968_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$4 = ($7_1 + 480 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 484 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$3;
      break label$68;
     }
     label$71 : {
      if (($15_1 | 0) == (5e8 | 0)) {
       break label$71
      }
      $1160($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 592 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 596 | 0) >> 2] | 0;
      $987_1 = i64toi32_i32$3;
      $987$hi = i64toi32_i32$1;
      i64toi32_i32$4 = (i64toi32_i32$4 + 592 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $991_1 = i64toi32_i32$1;
      $991$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$4 = $987$hi;
      i64toi32_i32$5 = $991$hi;
      $1155($7_1 + 576 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $987_1 | 0, i64toi32_i32$4 | 0, $991_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = ($7_1 + 576 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 580 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$4;
      $18$hi = i64toi32_i32$5;
      break label$68;
     }
     $24_1 = +($5_1 | 0);
     label$72 : {
      if ((($11_1 + 5 | 0) & 2047 | 0 | 0) != ($14_1 | 0)) {
       break label$72
      }
      $1160($7_1 + 528 | 0 | 0, +($24_1 * .5));
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 528 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 532 | 0) >> 2] | 0;
      $1014_1 = i64toi32_i32$5;
      $1014$hi = i64toi32_i32$4;
      i64toi32_i32$1 = (i64toi32_i32$1 + 528 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $1018_1 = i64toi32_i32$4;
      $1018$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $1014$hi;
      i64toi32_i32$3 = $1018$hi;
      $1155($7_1 + 512 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $1014_1 | 0, i64toi32_i32$1 | 0, $1018_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$4 = ($7_1 + 512 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 516 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$3;
      break label$68;
     }
     $1160($7_1 + 560 | 0 | 0, +($24_1 * .75));
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 560 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 564 | 0) >> 2] | 0;
     $1034_1 = i64toi32_i32$3;
     $1034$hi = i64toi32_i32$1;
     i64toi32_i32$4 = (i64toi32_i32$4 + 560 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $1038_1 = i64toi32_i32$1;
     $1038$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$4 = $1034$hi;
     i64toi32_i32$5 = $1038$hi;
     $1155($7_1 + 544 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $1034_1 | 0, i64toi32_i32$4 | 0, $1038_1 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$1 = ($7_1 + 544 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 548 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$5;
    }
    if (($2_1 | 0) > (111 | 0)) {
     break label$67
    }
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    $1099($7_1 + 464 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 464 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 468 | 0) >> 2] | 0;
    $1052_1 = i64toi32_i32$3;
    $1052$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 464 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $1056_1 = i64toi32_i32$1;
    $1056$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1052$hi;
    i64toi32_i32$1 = $1056$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    if ($1157($1052_1 | 0, i64toi32_i32$3 | 0, $1056_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0) {
     break label$67
    }
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    $1155($7_1 + 448 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = ($7_1 + 448 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$3;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 452 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$3 = $18$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$4 = $18$hi;
   i64toi32_i32$5 = $21$hi;
   $1155($7_1 + 432 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 432 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 436 | 0) >> 2] | 0;
   $1077_1 = i64toi32_i32$5;
   $1077$hi = i64toi32_i32$4;
   i64toi32_i32$1 = (i64toi32_i32$1 + 432 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $1081_1 = i64toi32_i32$4;
   $1081$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $22$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$5 = $1077$hi;
   i64toi32_i32$4 = $1081$hi;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$3 = $23$hi;
   $1169($7_1 + 416 | 0 | 0, $1077_1 | 0, i64toi32_i32$5 | 0, $1081_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$4 = ($7_1 + 416 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$3;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$1;
   $20$hi = i64toi32_i32$3;
   label$73 : {
    if (($13_1 & 2147483647 | 0 | 0) <= ($10_1 + -2 | 0 | 0)) {
     break label$73
    }
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $19$hi;
    $1100(i64toi32_i32$4 + 400 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1073610752;
    $1167($7_1 + 384 | 0 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
    $1104_1 = i64toi32_i32$5;
    $1104$hi = i64toi32_i32$4;
    i64toi32_i32$3 = ($7_1 + 400 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $1108_1 = i64toi32_i32$4;
    $1108$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1104$hi;
    i64toi32_i32$4 = $1108$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 1081081856;
    $13_1 = $1158($1104_1 | 0, i64toi32_i32$5 | 0, $1108_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$4 = ($7_1 + 384 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $1113$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $19$hi;
    $14_1 = ($13_1 | 0) > (-1 | 0);
    i64toi32_i32$0 = $14_1;
    i64toi32_i32$3 = $1113$hi;
    $196_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$5 = $14_1 ? $196_1 : $19_1;
    i64toi32_i32$4 = $14_1 ? i64toi32_i32$3 : i64toi32_i32$1;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1120$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = $14_1;
    i64toi32_i32$5 = $1120$hi;
    $197_1 = i64toi32_i32$4;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $197_1 : $20_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    $20_1 = i64toi32_i32$3;
    $20$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 0;
    $11_1 = $1157($18_1 | 0, $18$hi | 0, $21_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    label$74 : {
     $12_1 = $12_1 + $14_1 | 0;
     if (($12_1 + 110 | 0 | 0) > ($10_1 | 0)) {
      break label$74
     }
     if (!(($8_1 & (($2_1 | 0) != ($1_1 | 0) | ($13_1 | 0) < (0 | 0) | 0) | 0) & ($11_1 | 0) != (0 | 0) | 0)) {
      break label$73
     }
    }
    HEAP32[($986() | 0) >> 2] = 68;
   }
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$5 = $19$hi;
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   $1097($7_1 + 368 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $12_1 | 0);
   i64toi32_i32$3 = ($7_1 + 368 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $18_1 = i64toi32_i32$1;
   $18$hi = i64toi32_i32$5;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $18_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  HEAP32[i64toi32_i32$5 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $7_1 + 8976 | 0;
 }
 
 function $1105($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $6$hi = 0, $6_1 = 0, $5_1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $88$hi = 0, $90_1 = 0, $90$hi = 0, $139$hi = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $3_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $3_1 = $1095($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      switch ($3_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       label$8 : {
        label$9 : {
         $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$9
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
         $2_1 = HEAPU8[$2_1 >> 0] | 0;
         break label$8;
        }
        $2_1 = $1095($0_1 | 0) | 0;
       }
       $4_1 = ($3_1 | 0) == (45 | 0);
       $5_1 = $2_1 + -58 | 0;
       if (!$1_1) {
        break label$5
       }
       if ($5_1 >>> 0 > -11 >>> 0) {
        break label$5
       }
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $18_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $19_1 = 0
         } else {
          $19_1 = 1
         }
         $20_1 = $19_1;
        } else {
         $20_1 = 0
        }
        $18_1 = $20_1;
       }
       if ($18_1) {
        break label$4
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       break label$4;
      default:
       break label$6;
      };
     }
     $5_1 = $3_1 + -58 | 0;
     $4_1 = 0;
     $2_1 = $3_1;
    }
    if ($5_1 >>> 0 < -10 >>> 0) {
     break label$4
    }
    i64toi32_i32$2 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$2;
    label$10 : {
     if (($2_1 + -48 | 0) >>> 0 >= 10 >>> 0) {
      break label$10
     }
     $3_1 = 0;
     label$11 : while (1) {
      $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
      label$12 : {
       label$13 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$13
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$12;
       }
       $2_1 = $1095($0_1 | 0) | 0;
      }
      $3_1 = $3_1 + -48 | 0;
      label$14 : {
       $5_1 = $2_1 + -48 | 0;
       if ($5_1 >>> 0 > 9 >>> 0) {
        break label$14
       }
       if (($3_1 | 0) < (214748364 | 0)) {
        continue label$11
       }
      }
      break label$11;
     };
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $6_1 = i64toi32_i32$1;
     $6$hi = i64toi32_i32$2;
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$10
     }
     label$15 : while (1) {
      i64toi32_i32$2 = 0;
      $88$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $90_1 = i64toi32_i32$1;
      $90$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $88$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$1 = $90$hi;
      i64toi32_i32$0 = $90_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$16 : {
       label$17 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$17
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$16;
       }
       $2_1 = $1095($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -48;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      label$18 : {
       $3_1 = $2_1 + -48 | 0;
       if ($3_1 >>> 0 > 9 >>> 0) {
        break label$18
       }
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$2 = 21474836;
       i64toi32_i32$0 = 2061584302;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
        $21_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $22_1 = 0
         } else {
          $22_1 = 1
         }
         $23_1 = $22_1;
        } else {
         $23_1 = 0
        }
        $21_1 = $23_1;
       }
       if ($21_1) {
        continue label$15
       }
      }
      break label$15;
     };
     if ($3_1 >>> 0 >= 10 >>> 0) {
      break label$10
     }
     label$19 : while (1) {
      label$20 : {
       label$21 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$21
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$20;
       }
       $2_1 = $1095($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$19
      }
      break label$19;
     };
    }
    label$22 : {
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$5 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
      $24_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
        $25_1 = 0
       } else {
        $25_1 = 1
       }
       $26_1 = $25_1;
      } else {
       $26_1 = 0
      }
      $24_1 = $26_1;
     }
     if ($24_1) {
      break label$22
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    i64toi32_i32$1 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $139$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $139$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
    $6_1 = i64toi32_i32$5;
    $6$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
    $27_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0) {
      $28_1 = 0
     } else {
      $28_1 = 1
     }
     $29_1 = $28_1;
    } else {
     $29_1 = 0
    }
    $27_1 = $29_1;
   }
   if ($27_1) {
    break label$3
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
   return i64toi32_i32$5 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$4 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$4 | 0;
 }
 
 function $1106($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = -1;
  i64toi32_i32$0 = 0;
  $1094($4_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  $1101($4_1 | 0, $4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = ($1_1 + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[($4_1 + 60 | 0) >> 2] | 0) | 0) | 0) + (HEAP32[($4_1 + 136 | 0) >> 2] | 0) | 0;
  }
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 160 | 0;
 }
 
 function $1107($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $11$hi = 0, $14_1 = 0, $14$hi = 0, $3_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1106($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $14$hi;
  $3_1 = +$1170($11_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $2_1 + 16 | 0;
  return +$3_1;
 }
 
 function $1108($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $7_1 = 0, $6_1 = 0, $12$hi = 0, $11$hi = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, $5_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $14$hi = 0, $13$hi = 0, $105_1 = 0, $105$hi = 0, $150$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($2_1 | 0) > (36 | 0)) {
       break label$4
      }
      $5_1 = 0;
      $6_1 = HEAPU8[$0_1 >> 0] | 0;
      if ($6_1) {
       break label$3
      }
      $7_1 = $0_1;
      break label$2;
     }
     HEAP32[($986() | 0) >> 2] = 28;
     i64toi32_i32$0 = 0;
     $3_1 = 0;
     $3$hi = i64toi32_i32$0;
     break label$1;
    }
    $7_1 = $0_1;
    label$5 : {
     label$6 : while (1) {
      if (!($1109($6_1 << 24 >> 24 | 0) | 0)) {
       break label$5
      }
      $6_1 = HEAPU8[($7_1 + 1 | 0) >> 0] | 0;
      $8_1 = $7_1 + 1 | 0;
      $7_1 = $8_1;
      if ($6_1) {
       continue label$6
      }
      break label$6;
     };
     break label$2;
    }
    label$7 : {
     $6_1 = $6_1 & 255 | 0;
     switch ($6_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$7;
     default:
      break label$2;
     };
    }
    $5_1 = ($6_1 | 0) == (45 | 0) ? -1 : 0;
    $7_1 = $7_1 + 1 | 0;
   }
   label$8 : {
    label$9 : {
     if (($2_1 | 16 | 0 | 0) != (16 | 0)) {
      break label$9
     }
     if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (48 | 0)) {
      break label$9
     }
     $9_1 = 1;
     label$10 : {
      if (((HEAPU8[($7_1 + 1 | 0) >> 0] | 0) & 223 | 0 | 0) != (88 | 0)) {
       break label$10
      }
      $7_1 = $7_1 + 2 | 0;
      $10_1 = 16;
      break label$8;
     }
     $7_1 = $7_1 + 1 | 0;
     $10_1 = $2_1 ? $2_1 : 8;
     break label$8;
    }
    $10_1 = $2_1 ? $2_1 : 10;
    $9_1 = 0;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $10_1;
   $11$hi = i64toi32_i32$0;
   $2_1 = 0;
   i64toi32_i32$0 = 0;
   $12_1 = 0;
   $12$hi = i64toi32_i32$0;
   label$11 : {
    label$12 : while (1) {
     label$13 : {
      $8_1 = HEAPU8[$7_1 >> 0] | 0;
      $6_1 = $8_1 + -48 | 0;
      if (($6_1 & 255 | 0) >>> 0 < 10 >>> 0) {
       break label$13
      }
      label$14 : {
       if ((($8_1 + -97 | 0) & 255 | 0) >>> 0 > 25 >>> 0) {
        break label$14
       }
       $6_1 = $8_1 + -87 | 0;
       break label$13;
      }
      if ((($8_1 + -65 | 0) & 255 | 0) >>> 0 > 25 >>> 0) {
       break label$11
      }
      $6_1 = $8_1 + -55 | 0;
     }
     if (($10_1 | 0) <= ($6_1 & 255 | 0 | 0)) {
      break label$11
     }
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$3 = 0;
     $1168($4_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $12_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
     $8_1 = 1;
     label$15 : {
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$15
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$2 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $13_1 = i64toi32_i32$2;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 255;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $14$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $14_1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $105_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
      $105$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$2 = $13_1;
      i64toi32_i32$1 = $105$hi;
      i64toi32_i32$3 = $105_1;
      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$15
      }
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$1 = $14_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $12_1 = i64toi32_i32$4;
      $12$hi = i64toi32_i32$5;
      $9_1 = 1;
      $8_1 = $2_1;
     }
     $7_1 = $7_1 + 1 | 0;
     $2_1 = $8_1;
     continue label$12;
    };
   }
   label$16 : {
    if (!$1_1) {
     break label$16
    }
    HEAP32[$1_1 >> 2] = $9_1 ? $7_1 : $0_1;
   }
   label$17 : {
    label$18 : {
     label$19 : {
      if (!$2_1) {
       break label$19
      }
      HEAP32[($986() | 0) >> 2] = 68;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $11_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $11$hi = i64toi32_i32$3;
      $5_1 = !($11_1 | i64toi32_i32$3 | 0) ? $5_1 : 0;
      i64toi32_i32$3 = i64toi32_i32$5;
      $12_1 = i64toi32_i32$2;
      $12$hi = i64toi32_i32$3;
      break label$18;
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$5 = $12_1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$17
     }
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $11_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$3;
    }
    label$20 : {
     i64toi32_i32$3 = $11$hi;
     if ($11_1) {
      break label$20
     }
     if ($5_1) {
      break label$20
     }
     HEAP32[($986() | 0) >> 2] = 68;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$4;
     break label$1;
    }
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$3 = $12_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$17
    }
    HEAP32[($986() | 0) >> 2] = 68;
    break label$1;
   }
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = i64toi32_i32$4 >> 31 | 0;
   $11_1 = i64toi32_i32$4;
   $11$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$5 = $11_1;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $150$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $150$hi;
   i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
   i64toi32_i32$0 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$3 | 0;
 }
 
 function $1109($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $1110($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $1108($0_1 | 0, $1_1 | 0, $2_1 | 0, -2147483648 | 0, i64toi32_i32$0 | 0) | 0;
  return i64toi32_i32$0 | 0;
 }
 
 function $1111($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 < -4095 >>> 0) {
    break label$1
   }
   HEAP32[($986() | 0) >> 2] = 0 - $0_1 | 0;
   $0_1 = -1;
  }
  return $0_1 | 0;
 }
 
 function $1112($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 + -65 | 0) >>> 0 < 26 >>> 0 ? $0_1 | 32 | 0 : $0_1) | 0;
 }
 
 function $1113($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 + -97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0;
 }
 
 function $1114($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $10_1 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $10_1 & 2047 | 0;
   if (($3_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $3_1 = 0;
      break label$3;
     }
     $0_1 = +$1114(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $3_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $3_1 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $1115($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $1006($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1116(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $4_1 = -1;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break label$4
     }
     $6_1 = 1;
     break label$3;
    }
    $6_1 = !($1010($0_1 | 0) | 0);
   }
   $7_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $7_1 & -33 | 0;
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       if (HEAP32[($0_1 + 48 | 0) >> 2] | 0) {
        break label$8
       }
       HEAP32[($0_1 + 48 | 0) >> 2] = 80;
       HEAP32[($0_1 + 28 | 0) >> 2] = 0;
       i64toi32_i32$0 = 0;
       HEAP32[($0_1 + 16 | 0) >> 2] = 0;
       HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
       HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
       break label$7;
      }
      $8_1 = 0;
      if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
       break label$6
      }
     }
     $2_1 = -1;
     if ($1032($0_1 | 0) | 0) {
      break label$5
     }
    }
    $2_1 = $1116($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   }
   $4_1 = $7_1 & 32 | 0;
   label$9 : {
    if (!$8_1) {
     break label$9
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $8_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    $2_1 = $3_1 ? $2_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $4_1 | 0;
   $4_1 = $3_1 & 32 | 0 ? -1 : $2_1;
   if ($6_1) {
    break label$1
   }
   $1011($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $4_1 | 0;
 }
 
 function $1116($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $15_1 = 0, $20_1 = 0, $17_1 = 0, i64toi32_i32$0 = 0, $14_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $13_1 = 0, $11_1 = 0, $16_1 = 0, $19_1 = 0, $22_1 = 0, $25_1 = 0, $25$hi = 0, i64toi32_i32$5 = 0, $9_1 = 0, $18_1 = 0, $24_1 = 0, $10_1 = 0, i64toi32_i32$3 = 0, $21_1 = 0, $23_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $8_1 = 0, $266_1 = 0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 39 | 0;
  $9_1 = $7_1 + 40 | 0;
  $10_1 = 0;
  $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       $12_1 = 0;
       label$6 : while (1) {
        $13_1 = $1_1;
        if (($12_1 | 0) > ($11_1 ^ 2147483647 | 0 | 0)) {
         break label$4
        }
        $11_1 = $12_1 + $11_1 | 0;
        $12_1 = $1_1;
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              $14_1 = HEAPU8[$12_1 >> 0] | 0;
              if (!$14_1) {
               break label$12
              }
              label$13 : while (1) {
               label$14 : {
                label$15 : {
                 label$16 : {
                  $14_1 = $14_1 & 255 | 0;
                  if ($14_1) {
                   break label$16
                  }
                  $1_1 = $12_1;
                  break label$15;
                 }
                 if (($14_1 | 0) != (37 | 0)) {
                  break label$14
                 }
                 $14_1 = $12_1;
                 label$17 : while (1) {
                  label$18 : {
                   if ((HEAPU8[($14_1 + 1 | 0) >> 0] | 0 | 0) == (37 | 0)) {
                    break label$18
                   }
                   $1_1 = $14_1;
                   break label$15;
                  }
                  $12_1 = $12_1 + 1 | 0;
                  $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
                  $1_1 = $14_1 + 2 | 0;
                  $14_1 = $1_1;
                  if (($15_1 | 0) == (37 | 0)) {
                   continue label$17
                  }
                  break label$17;
                 };
                }
                $12_1 = $12_1 - $13_1 | 0;
                $14_1 = $11_1 ^ 2147483647 | 0;
                if (($12_1 | 0) > ($14_1 | 0)) {
                 break label$4
                }
                label$19 : {
                 if (!$0_1) {
                  break label$19
                 }
                 $1117($0_1 | 0, $13_1 | 0, $12_1 | 0);
                }
                if ($12_1) {
                 continue label$6
                }
                HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                $12_1 = $1_1 + 1 | 0;
                $16_1 = -1;
                label$20 : {
                 $15_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                 if ($15_1 >>> 0 > 9 >>> 0) {
                  break label$20
                 }
                 if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                  break label$20
                 }
                 $12_1 = $1_1 + 3 | 0;
                 $10_1 = 1;
                 $16_1 = $15_1;
                }
                HEAP32[($7_1 + 60 | 0) >> 2] = $12_1;
                $17_1 = 0;
                label$21 : {
                 label$22 : {
                  $18_1 = HEAP8[$12_1 >> 0] | 0;
                  $1_1 = $18_1 + -32 | 0;
                  if ($1_1 >>> 0 <= 31 >>> 0) {
                   break label$22
                  }
                  $15_1 = $12_1;
                  break label$21;
                 }
                 $17_1 = 0;
                 $15_1 = $12_1;
                 $1_1 = 1 << $1_1 | 0;
                 if (!($1_1 & 75913 | 0)) {
                  break label$21
                 }
                 label$23 : while (1) {
                  $15_1 = $12_1 + 1 | 0;
                  HEAP32[($7_1 + 60 | 0) >> 2] = $15_1;
                  $17_1 = $1_1 | $17_1 | 0;
                  $18_1 = HEAP8[($12_1 + 1 | 0) >> 0] | 0;
                  $1_1 = $18_1 + -32 | 0;
                  if ($1_1 >>> 0 >= 32 >>> 0) {
                   break label$21
                  }
                  $12_1 = $15_1;
                  $1_1 = 1 << $1_1 | 0;
                  if ($1_1 & 75913 | 0) {
                   continue label$23
                  }
                  break label$23;
                 };
                }
                label$24 : {
                 label$25 : {
                  if (($18_1 | 0) != (42 | 0)) {
                   break label$25
                  }
                  label$26 : {
                   label$27 : {
                    $12_1 = (HEAP8[($15_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                    if ($12_1 >>> 0 > 9 >>> 0) {
                     break label$27
                    }
                    if ((HEAPU8[($15_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                     break label$27
                    }
                    label$28 : {
                     label$29 : {
                      if ($0_1) {
                       break label$29
                      }
                      HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] = 10;
                      $19_1 = 0;
                      break label$28;
                     }
                     $19_1 = HEAP32[($3_1 + ($12_1 << 3 | 0) | 0) >> 2] | 0;
                    }
                    $1_1 = $15_1 + 3 | 0;
                    $10_1 = 1;
                    break label$26;
                   }
                   if ($10_1) {
                    break label$11
                   }
                   $1_1 = $15_1 + 1 | 0;
                   label$30 : {
                    if ($0_1) {
                     break label$30
                    }
                    HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                    $10_1 = 0;
                    $19_1 = 0;
                    break label$24;
                   }
                   $12_1 = HEAP32[$2_1 >> 2] | 0;
                   HEAP32[$2_1 >> 2] = $12_1 + 4 | 0;
                   $19_1 = HEAP32[$12_1 >> 2] | 0;
                   $10_1 = 0;
                  }
                  HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                  if (($19_1 | 0) > (-1 | 0)) {
                   break label$24
                  }
                  $19_1 = 0 - $19_1 | 0;
                  $17_1 = $17_1 | 8192 | 0;
                  break label$24;
                 }
                 $19_1 = $1118($7_1 + 60 | 0 | 0) | 0;
                 if (($19_1 | 0) < (0 | 0)) {
                  break label$4
                 }
                 $1_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
                }
                $12_1 = 0;
                $20_1 = -1;
                label$31 : {
                 label$32 : {
                  if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (46 | 0)) {
                   break label$32
                  }
                  $21_1 = 0;
                  break label$31;
                 }
                 label$33 : {
                  if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                   break label$33
                  }
                  label$34 : {
                   label$35 : {
                    $15_1 = (HEAP8[($1_1 + 2 | 0) >> 0] | 0) + -48 | 0;
                    if ($15_1 >>> 0 > 9 >>> 0) {
                     break label$35
                    }
                    if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                     break label$35
                    }
                    label$36 : {
                     label$37 : {
                      if ($0_1) {
                       break label$37
                      }
                      HEAP32[($4_1 + ($15_1 << 2 | 0) | 0) >> 2] = 10;
                      $20_1 = 0;
                      break label$36;
                     }
                     $20_1 = HEAP32[($3_1 + ($15_1 << 3 | 0) | 0) >> 2] | 0;
                    }
                    $1_1 = $1_1 + 4 | 0;
                    break label$34;
                   }
                   if ($10_1) {
                    break label$11
                   }
                   $1_1 = $1_1 + 2 | 0;
                   label$38 : {
                    if ($0_1) {
                     break label$38
                    }
                    $20_1 = 0;
                    break label$34;
                   }
                   $15_1 = HEAP32[$2_1 >> 2] | 0;
                   HEAP32[$2_1 >> 2] = $15_1 + 4 | 0;
                   $20_1 = HEAP32[$15_1 >> 2] | 0;
                  }
                  HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                  $21_1 = ($20_1 | 0) > (-1 | 0);
                  break label$31;
                 }
                 HEAP32[($7_1 + 60 | 0) >> 2] = $1_1 + 1 | 0;
                 $21_1 = 1;
                 $20_1 = $1118($7_1 + 60 | 0 | 0) | 0;
                 $1_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
                }
                label$39 : while (1) {
                 $15_1 = $12_1;
                 $22_1 = 28;
                 $18_1 = $1_1;
                 $12_1 = HEAP8[$1_1 >> 0] | 0;
                 if (($12_1 + -123 | 0) >>> 0 < -58 >>> 0) {
                  break label$3
                 }
                 $1_1 = $1_1 + 1 | 0;
                 $12_1 = HEAPU8[(($12_1 + Math_imul($15_1, 58) | 0) + 110239 | 0) >> 0] | 0;
                 if (($12_1 + -1 | 0) >>> 0 < 8 >>> 0) {
                  continue label$39
                 }
                 break label$39;
                };
                HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                label$40 : {
                 label$41 : {
                  if (($12_1 | 0) == (27 | 0)) {
                   break label$41
                  }
                  if (!$12_1) {
                   break label$3
                  }
                  label$42 : {
                   if (($16_1 | 0) < (0 | 0)) {
                    break label$42
                   }
                   label$43 : {
                    if ($0_1) {
                     break label$43
                    }
                    HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $12_1;
                    continue label$5;
                   }
                   i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
                   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                   $266_1 = i64toi32_i32$0;
                   i64toi32_i32$0 = $7_1;
                   HEAP32[($7_1 + 48 | 0) >> 2] = $266_1;
                   HEAP32[($7_1 + 52 | 0) >> 2] = i64toi32_i32$1;
                   break label$40;
                  }
                  if (!$0_1) {
                   break label$7
                  }
                  $1119($7_1 + 48 | 0 | 0, $12_1 | 0, $2_1 | 0, $6_1 | 0);
                  break label$40;
                 }
                 if (($16_1 | 0) > (-1 | 0)) {
                  break label$3
                 }
                 $12_1 = 0;
                 if (!$0_1) {
                  continue label$6
                 }
                }
                if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                 break label$2
                }
                $23_1 = $17_1 & -65537 | 0;
                $17_1 = $17_1 & 8192 | 0 ? $23_1 : $17_1;
                $16_1 = 0;
                $24_1 = 65876;
                $22_1 = $9_1;
                label$44 : {
                 label$45 : {
                  label$46 : {
                   label$47 : {
                    label$48 : {
                     label$49 : {
                      label$50 : {
                       label$51 : {
                        label$52 : {
                         label$53 : {
                          label$54 : {
                           label$55 : {
                            label$56 : {
                             label$57 : {
                              label$58 : {
                               label$59 : {
                                label$60 : {
                                 $12_1 = HEAP8[$18_1 >> 0] | 0;
                                 $12_1 = $15_1 ? (($12_1 & 15 | 0 | 0) == (3 | 0) ? $12_1 & -45 | 0 : $12_1) : $12_1;
                                 switch ($12_1 + -88 | 0 | 0) {
                                 case 9:
                                 case 13:
                                 case 14:
                                 case 15:
                                  break label$44;
                                 case 27:
                                  break label$50;
                                 case 11:
                                  break label$51;
                                 case 12:
                                 case 17:
                                  break label$54;
                                 case 23:
                                  break label$55;
                                 case 0:
                                 case 32:
                                  break label$56;
                                 case 24:
                                  break label$57;
                                 case 22:
                                  break label$58;
                                 case 29:
                                  break label$59;
                                 case 1:
                                 case 2:
                                 case 3:
                                 case 4:
                                 case 5:
                                 case 6:
                                 case 7:
                                 case 8:
                                 case 10:
                                 case 16:
                                 case 18:
                                 case 19:
                                 case 20:
                                 case 21:
                                 case 25:
                                 case 26:
                                 case 28:
                                 case 30:
                                 case 31:
                                  break label$8;
                                 default:
                                  break label$60;
                                 };
                                }
                                $22_1 = $9_1;
                                label$61 : {
                                 switch ($12_1 + -65 | 0 | 0) {
                                 case 0:
                                 case 4:
                                 case 5:
                                 case 6:
                                  break label$44;
                                 case 2:
                                  break label$49;
                                 case 1:
                                 case 3:
                                  break label$8;
                                 default:
                                  break label$61;
                                 };
                                }
                                if (($12_1 | 0) == (83 | 0)) {
                                 break label$48
                                }
                                break label$9;
                               }
                               $16_1 = 0;
                               $24_1 = 65876;
                               i64toi32_i32$2 = $7_1;
                               i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                               i64toi32_i32$0 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                               $25_1 = i64toi32_i32$1;
                               $25$hi = i64toi32_i32$0;
                               break label$53;
                              }
                              $12_1 = 0;
                              label$62 : {
                               switch ($15_1 & 255 | 0 | 0) {
                               case 0:
                                HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] = $11_1;
                                continue label$6;
                               case 1:
                                HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] = $11_1;
                                continue label$6;
                               case 2:
                                i64toi32_i32$1 = $11_1;
                                i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                                i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                                HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                continue label$6;
                               case 3:
                                HEAP16[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 1] = $11_1;
                                continue label$6;
                               case 4:
                                HEAP8[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 0] = $11_1;
                                continue label$6;
                               case 6:
                                HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] = $11_1;
                                continue label$6;
                               case 7:
                                break label$62;
                               default:
                                continue label$6;
                               };
                              }
                              i64toi32_i32$1 = $11_1;
                              i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                              i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                              HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                              continue label$6;
                             }
                             $20_1 = $20_1 >>> 0 > 8 >>> 0 ? $20_1 : 8;
                             $17_1 = $17_1 | 8 | 0;
                             $12_1 = 120;
                            }
                            $16_1 = 0;
                            $24_1 = 65876;
                            i64toi32_i32$2 = $7_1;
                            i64toi32_i32$0 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                            i64toi32_i32$1 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                            $25_1 = i64toi32_i32$0;
                            $25$hi = i64toi32_i32$1;
                            $13_1 = $1120(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $12_1 & 32 | 0 | 0) | 0;
                            if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
                             break label$52
                            }
                            if (!($17_1 & 8 | 0)) {
                             break label$52
                            }
                            $24_1 = ($12_1 >>> 4 | 0) + 65876 | 0;
                            $16_1 = 2;
                            break label$52;
                           }
                           $16_1 = 0;
                           $24_1 = 65876;
                           i64toi32_i32$2 = $7_1;
                           i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                           i64toi32_i32$0 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                           $25_1 = i64toi32_i32$1;
                           $25$hi = i64toi32_i32$0;
                           $13_1 = $1121(i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $9_1 | 0) | 0;
                           if (!($17_1 & 8 | 0)) {
                            break label$52
                           }
                           $12_1 = $9_1 - $13_1 | 0;
                           $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1 + 1 | 0;
                           break label$52;
                          }
                          label$69 : {
                           i64toi32_i32$2 = $7_1;
                           i64toi32_i32$0 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                           i64toi32_i32$1 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                           $25_1 = i64toi32_i32$0;
                           $25$hi = i64toi32_i32$1;
                           i64toi32_i32$2 = i64toi32_i32$0;
                           i64toi32_i32$0 = -1;
                           i64toi32_i32$3 = -1;
                           if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
                            $33_1 = 1
                           } else {
                            if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
                             if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                              $34_1 = 0
                             } else {
                              $34_1 = 1
                             }
                             $35_1 = $34_1;
                            } else {
                             $35_1 = 0
                            }
                            $33_1 = $35_1;
                           }
                           if ($33_1) {
                            break label$69
                           }
                           i64toi32_i32$2 = $25$hi;
                           i64toi32_i32$2 = 0;
                           i64toi32_i32$3 = 0;
                           i64toi32_i32$1 = $25$hi;
                           i64toi32_i32$0 = $25_1;
                           i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
                           i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                           $25_1 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                           $25$hi = i64toi32_i32$5;
                           i64toi32_i32$3 = $7_1;
                           HEAP32[($7_1 + 48 | 0) >> 2] = $25_1;
                           HEAP32[($7_1 + 52 | 0) >> 2] = i64toi32_i32$5;
                           $16_1 = 1;
                           $24_1 = 65876;
                           break label$53;
                          }
                          label$70 : {
                           if (!($17_1 & 2048 | 0)) {
                            break label$70
                           }
                           $16_1 = 1;
                           $24_1 = 65877;
                           break label$53;
                          }
                          $16_1 = $17_1 & 1 | 0;
                          $24_1 = $16_1 ? 65878 : 65876;
                         }
                         i64toi32_i32$5 = $25$hi;
                         $13_1 = $1122($25_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                        }
                        if ($21_1 & ($20_1 | 0) < (0 | 0) | 0) {
                         break label$4
                        }
                        $17_1 = $21_1 ? $17_1 & -65537 | 0 : $17_1;
                        label$71 : {
                         i64toi32_i32$5 = $25$hi;
                         i64toi32_i32$2 = $25_1;
                         i64toi32_i32$3 = 0;
                         i64toi32_i32$0 = 0;
                         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
                          break label$71
                         }
                         if ($20_1) {
                          break label$71
                         }
                         $13_1 = $9_1;
                         $22_1 = $13_1;
                         $20_1 = 0;
                         break label$8;
                        }
                        i64toi32_i32$2 = $25$hi;
                        $12_1 = ($9_1 - $13_1 | 0) + !($25_1 | i64toi32_i32$2 | 0) | 0;
                        $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1;
                        break label$9;
                       }
                       i64toi32_i32$0 = $7_1;
                       i64toi32_i32$2 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                       i64toi32_i32$5 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                       $25_1 = i64toi32_i32$2;
                       $25$hi = i64toi32_i32$5;
                       break label$10;
                      }
                      $12_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                      $13_1 = $12_1 ? $12_1 : 81811;
                      $12_1 = $1087($13_1 | 0, ($20_1 >>> 0 < 2147483647 >>> 0 ? $20_1 : 2147483647) | 0) | 0;
                      $22_1 = $13_1 + $12_1 | 0;
                      label$72 : {
                       if (($20_1 | 0) <= (-1 | 0)) {
                        break label$72
                       }
                       $17_1 = $23_1;
                       $20_1 = $12_1;
                       break label$8;
                      }
                      $17_1 = $23_1;
                      $20_1 = $12_1;
                      if (HEAPU8[$22_1 >> 0] | 0) {
                       break label$4
                      }
                      break label$8;
                     }
                     i64toi32_i32$0 = $7_1;
                     i64toi32_i32$5 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                     i64toi32_i32$2 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                     $25_1 = i64toi32_i32$5;
                     $25$hi = i64toi32_i32$2;
                     if (!!(i64toi32_i32$5 | i64toi32_i32$2 | 0)) {
                      break label$47
                     }
                     i64toi32_i32$2 = 0;
                     $25_1 = 0;
                     $25$hi = i64toi32_i32$2;
                     break label$10;
                    }
                    label$73 : {
                     if (!$20_1) {
                      break label$73
                     }
                     $14_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                     break label$46;
                    }
                    $12_1 = 0;
                    $1123($0_1 | 0, 32 | 0, $19_1 | 0, 0 | 0, $17_1 | 0);
                    break label$45;
                   }
                   HEAP32[($7_1 + 12 | 0) >> 2] = 0;
                   i64toi32_i32$2 = $25$hi;
                   HEAP32[($7_1 + 8 | 0) >> 2] = $25_1;
                   HEAP32[($7_1 + 48 | 0) >> 2] = $7_1 + 8 | 0;
                   $14_1 = $7_1 + 8 | 0;
                   $20_1 = -1;
                  }
                  $12_1 = 0;
                  label$74 : {
                   label$75 : while (1) {
                    $15_1 = HEAP32[$14_1 >> 2] | 0;
                    if (!$15_1) {
                     break label$74
                    }
                    $15_1 = $1143($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                    if (($15_1 | 0) < (0 | 0)) {
                     break label$2
                    }
                    if ($15_1 >>> 0 > ($20_1 - $12_1 | 0) >>> 0) {
                     break label$74
                    }
                    $14_1 = $14_1 + 4 | 0;
                    $12_1 = $15_1 + $12_1 | 0;
                    if ($12_1 >>> 0 < $20_1 >>> 0) {
                     continue label$75
                    }
                    break label$75;
                   };
                  }
                  $22_1 = 61;
                  if (($12_1 | 0) < (0 | 0)) {
                   break label$3
                  }
                  $1123($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 | 0);
                  label$76 : {
                   if ($12_1) {
                    break label$76
                   }
                   $12_1 = 0;
                   break label$45;
                  }
                  $15_1 = 0;
                  $14_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                  label$77 : while (1) {
                   $13_1 = HEAP32[$14_1 >> 2] | 0;
                   if (!$13_1) {
                    break label$45
                   }
                   $13_1 = $1143($7_1 + 4 | 0 | 0, $13_1 | 0) | 0;
                   $15_1 = $13_1 + $15_1 | 0;
                   if ($15_1 >>> 0 > $12_1 >>> 0) {
                    break label$45
                   }
                   $1117($0_1 | 0, $7_1 + 4 | 0 | 0, $13_1 | 0);
                   $14_1 = $14_1 + 4 | 0;
                   if ($15_1 >>> 0 < $12_1 >>> 0) {
                    continue label$77
                   }
                   break label$77;
                  };
                 }
                 $1123($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 ^ 8192 | 0 | 0);
                 $12_1 = ($19_1 | 0) > ($12_1 | 0) ? $19_1 : $12_1;
                 continue label$6;
                }
                if ($21_1 & ($20_1 | 0) < (0 | 0) | 0) {
                 break label$4
                }
                $22_1 = 61;
                $12_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 48 | 0) >> 3], $19_1, $20_1, $17_1, $12_1) | 0;
                if (($12_1 | 0) >= (0 | 0)) {
                 continue label$6
                }
                break label$3;
               }
               $14_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
               $12_1 = $12_1 + 1 | 0;
               continue label$13;
              };
             }
             if ($0_1) {
              break label$1
             }
             if (!$10_1) {
              break label$7
             }
             $12_1 = 1;
             label$78 : {
              label$79 : while (1) {
               $14_1 = HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0;
               if (!$14_1) {
                break label$78
               }
               $1119($3_1 + ($12_1 << 3 | 0) | 0 | 0, $14_1 | 0, $2_1 | 0, $6_1 | 0);
               $11_1 = 1;
               $12_1 = $12_1 + 1 | 0;
               if (($12_1 | 0) != (10 | 0)) {
                continue label$79
               }
               break label$1;
              };
             }
             label$80 : {
              if ($12_1 >>> 0 < 10 >>> 0) {
               break label$80
              }
              $11_1 = 1;
              break label$1;
             }
             label$81 : while (1) {
              if (HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0) {
               break label$11
              }
              $11_1 = 1;
              $12_1 = $12_1 + 1 | 0;
              if (($12_1 | 0) == (10 | 0)) {
               break label$1
              }
              continue label$81;
             };
            }
            $22_1 = 28;
            break label$3;
           }
           i64toi32_i32$2 = $25$hi;
           HEAP8[($7_1 + 39 | 0) >> 0] = $25_1;
           $20_1 = 1;
           $13_1 = $8_1;
           $22_1 = $9_1;
           $17_1 = $23_1;
           break label$8;
          }
          $22_1 = $9_1;
         }
         $1_1 = $22_1 - $13_1 | 0;
         $18_1 = ($20_1 | 0) > ($1_1 | 0) ? $20_1 : $1_1;
         if (($18_1 | 0) > ($16_1 ^ 2147483647 | 0 | 0)) {
          break label$4
         }
         $22_1 = 61;
         $15_1 = $16_1 + $18_1 | 0;
         $12_1 = ($19_1 | 0) > ($15_1 | 0) ? $19_1 : $15_1;
         if (($12_1 | 0) > ($14_1 | 0)) {
          break label$3
         }
         $1123($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 | 0);
         $1117($0_1 | 0, $24_1 | 0, $16_1 | 0);
         $1123($0_1 | 0, 48 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 65536 | 0 | 0);
         $1123($0_1 | 0, 48 | 0, $18_1 | 0, $1_1 | 0, 0 | 0);
         $1117($0_1 | 0, $13_1 | 0, $1_1 | 0);
         $1123($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 8192 | 0 | 0);
         $1_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
         continue label$6;
        }
        break label$6;
       };
       break label$5;
      };
      $11_1 = 0;
      break label$1;
     }
     $22_1 = 61;
    }
    HEAP32[($986() | 0) >> 2] = $22_1;
   }
   $11_1 = -1;
  }
  global$0 = $7_1 + 64 | 0;
  return $11_1 | 0;
 }
 
 function $1117($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $1033($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $1118($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = (HEAP8[$2_1 >> 0] | 0) + -48 | 0;
   if ($3_1 >>> 0 <= 9 >>> 0) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : while (1) {
   $4_1 = -1;
   label$3 : {
    if ($1_1 >>> 0 > 214748364 >>> 0) {
     break label$3
    }
    $1_1 = Math_imul($1_1, 10);
    $4_1 = $3_1 >>> 0 > ($1_1 ^ 2147483647 | 0) >>> 0 ? -1 : $3_1 + $1_1 | 0;
   }
   $3_1 = $2_1 + 1 | 0;
   HEAP32[$0_1 >> 2] = $3_1;
   $5_1 = HEAP8[($2_1 + 1 | 0) >> 0] | 0;
   $1_1 = $4_1;
   $2_1 = $3_1;
   $3_1 = $5_1 + -48 | 0;
   if ($3_1 >>> 0 < 10 >>> 0) {
    continue label$2
   }
   break label$2;
  };
  return $1_1 | 0;
 }
 
 function $1119($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21_1 = 0, $29_1 = 0, $37_1 = 0, $45_1 = 0, $55_1 = 0, $63_1 = 0, $71_1 = 0, $79_1 = 0, $87_1 = 0, $97_1 = 0, $105_1 = 0, $115_1 = 0, $125_1 = 0, $133_1 = 0, $141_1 = 0;
  label$1 : {
   switch ($1_1 + -9 | 0 | 0) {
   case 0:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    return;
   case 1:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $21_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $21_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 2:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $29_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $29_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 4:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $37_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $37_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 5:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $45_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $45_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 3:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $55_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $55_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 6:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $63_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $63_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 7:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
    i64toi32_i32$1 = 0;
    $71_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $71_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 8:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $79_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $79_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 9:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
    i64toi32_i32$1 = 0;
    $87_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $87_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 10:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $97_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $97_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 11:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $105_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $105_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 12:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $115_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $115_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 13:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $125_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $125_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 14:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $133_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $133_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 15:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $141_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $141_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 16:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
    return;
   case 17:
    FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
    break;
   default:
    break label$1;
   };
  }
 }
 
 function $1120($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10_1 = 0, $3_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 110768 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 15;
    $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $10_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $10_1;
    $0$hi = i64toi32_i32$0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $1121($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $2_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 7;
    $2_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $9_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $1122($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $2$hi = 0, $4_1 = 0, $16_1 = 0, $16$hi = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = i64toi32_i32$0;
    $2_1 = $0_1;
    $2$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0_1 = $2_1;
    $0$hi = i64toi32_i32$2;
    if ($3_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $2$hi;
   if (!($2_1 | i64toi32_i32$2 | 0)) {
    break label$4
   }
   $3_1 = $2_1;
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $4_1 = ($3_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $3_1 - Math_imul($4_1, 10) | 0 | 48 | 0;
    $5_1 = $3_1 >>> 0 > 9 >>> 0;
    $3_1 = $4_1;
    if ($5_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $1123($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   $3_1 = $2_1 - $3_1 | 0;
   $2_1 = $3_1 >>> 0 < 256 >>> 0;
   $1006($5_1 | 0, $1_1 | 0, ($2_1 ? $3_1 : 256) | 0) | 0;
   label$2 : {
    if ($2_1) {
     break label$2
    }
    label$3 : while (1) {
     $1117($0_1 | 0, $5_1 | 0, 256 | 0);
     $3_1 = $3_1 + -256 | 0;
     if ($3_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $1117($0_1 | 0, $5_1 | 0, $3_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $1124($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1115($0_1 | 0, $1_1 | 0, $2_1 | 0, 537 | 0, 538 | 0) | 0 | 0;
 }
 
 function $1125($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $18_1 = 0, $21_1 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $6_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, i64toi32_i32$2 = 0, $19_1 = 0, $17_1 = 0, $8_1 = 0, $27_1 = 0.0, $13_1 = 0, $24_1 = 0, $14_1 = 0, $16_1 = 0, $24$hi = 0, $9_1 = 0, $20_1 = 0, $7_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $25$hi = 0, $47_1 = 0, $25_1 = 0, $168_1 = 0, $170$hi = 0, $172$hi = 0, $174_1 = 0, $174$hi = 0, $26$hi = 0, $180_1 = 0, $180$hi = 0, $388_1 = 0.0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1127(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $44_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $45_1 = 0
      } else {
       $45_1 = 1
      }
      $46_1 = $45_1;
     } else {
      $46_1 = 0
     }
     $44_1 = $46_1;
    }
    if ($44_1) {
     break label$2
    }
    $8_1 = 1;
    $9_1 = 65886;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $1127(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $8_1 = 1;
    $9_1 = 65889;
    break label$1;
   }
   $8_1 = $4_1 & 1 | 0;
   $9_1 = $8_1 ? 65892 : 65887;
   $7_1 = !$8_1;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10_1 = $8_1 + 3 | 0;
    $1123($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $1117($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $1117($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 70763 : 76351) : $11_1 ? 72070 : 76586) | 0, 3 | 0);
    $1123($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    $12_1 = ($2_1 | 0) > ($10_1 | 0) ? $2_1 : $10_1;
    break label$4;
   }
   $13_1 = $6_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1_1 = +$1114(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$9
       }
       $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $10_1 + -1 | 0;
       $14_1 = $5_1 | 32 | 0;
       if (($14_1 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $14_1 = $5_1 | 32 | 0;
      if (($14_1 | 0) == (97 | 0)) {
       break label$6
      }
      $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $16_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $16_1 = $10_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $16_1;
     $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $17_1 = ($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? 0 : 288) | 0;
    $11_1 = $17_1;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$12
       }
       $10_1 = ~~$1_1 >>> 0;
       break label$11;
      }
      $10_1 = 0;
     }
     HEAP32[$11_1 >> 2] = $10_1;
     $11_1 = $11_1 + 4 | 0;
     $1_1 = ($1_1 - +($10_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($16_1 | 0) >= (1 | 0)) {
       break label$14
      }
      $3_1 = $16_1;
      $10_1 = $11_1;
      $18_1 = $17_1;
      break label$13;
     }
     $18_1 = $17_1;
     $3_1 = $16_1;
     label$15 : while (1) {
      $3_1 = $3_1 >>> 0 < 29 >>> 0 ? $3_1 : 29;
      label$16 : {
       $10_1 = $11_1 + -4 | 0;
       if ($10_1 >>> 0 < $18_1 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25_1 = $3_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $168_1 = $10_1;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = HEAP32[$10_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $170$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $170$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $47_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $47_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $172$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $174_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $174$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $172$hi;
        i64toi32_i32$1 = $47_1;
        i64toi32_i32$2 = $174$hi;
        i64toi32_i32$3 = $174_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $26$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $180_1 = i64toi32_i32$1;
        $180$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $26$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $180$hi;
        i64toi32_i32$3 = $180_1;
        i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$168_1 >> 2] = i64toi32_i32$2;
        $10_1 = $10_1 + -4 | 0;
        if ($10_1 >>> 0 >= $18_1 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 1e9;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
        break label$16
       }
       $18_1 = $18_1 + -4 | 0;
       i64toi32_i32$5 = $24$hi;
       HEAP32[$18_1 >> 2] = $24_1;
      }
      label$18 : {
       label$19 : while (1) {
        $10_1 = $11_1;
        if ($10_1 >>> 0 <= $18_1 >>> 0) {
         break label$18
        }
        $11_1 = $10_1 + -4 | 0;
        if (!(HEAP32[$11_1 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $11_1 = $10_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    label$20 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$20
     }
     $19_1 = ((($15_1 + 25 | 0) >>> 0) / (9 >>> 0) | 0) + 1 | 0;
     $20_1 = ($14_1 | 0) == (102 | 0);
     label$21 : while (1) {
      $11_1 = 0 - $3_1 | 0;
      $21_1 = $11_1 >>> 0 < 9 >>> 0 ? $11_1 : 9;
      label$22 : {
       label$23 : {
        if ($18_1 >>> 0 < $10_1 >>> 0) {
         break label$23
        }
        $11_1 = !(HEAP32[$18_1 >> 2] | 0) << 2 | 0;
        break label$22;
       }
       $22_1 = 1e9 >>> $21_1 | 0;
       $23_1 = (-1 << $21_1 | 0) ^ -1 | 0;
       $3_1 = 0;
       $11_1 = $18_1;
       label$24 : while (1) {
        $12_1 = HEAP32[$11_1 >> 2] | 0;
        HEAP32[$11_1 >> 2] = ($12_1 >>> $21_1 | 0) + $3_1 | 0;
        $3_1 = Math_imul($12_1 & $23_1 | 0, $22_1);
        $11_1 = $11_1 + 4 | 0;
        if ($11_1 >>> 0 < $10_1 >>> 0) {
         continue label$24
        }
        break label$24;
       };
       $11_1 = !(HEAP32[$18_1 >> 2] | 0) << 2 | 0;
       if (!$3_1) {
        break label$22
       }
       HEAP32[$10_1 >> 2] = $3_1;
       $10_1 = $10_1 + 4 | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $21_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $18_1 = $18_1 + $11_1 | 0;
      $11_1 = $20_1 ? $17_1 : $18_1;
      $10_1 = (($10_1 - $11_1 | 0) >> 2 | 0 | 0) > ($19_1 | 0) ? $11_1 + ($19_1 << 2 | 0) | 0 : $10_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $3_1 = 0;
    label$25 : {
     if ($18_1 >>> 0 >= $10_1 >>> 0) {
      break label$25
     }
     $3_1 = Math_imul(($17_1 - $18_1 | 0) >> 2 | 0, 9);
     $11_1 = 10;
     $12_1 = HEAP32[$18_1 >> 2] | 0;
     if ($12_1 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $3_1 = $3_1 + 1 | 0;
      $11_1 = Math_imul($11_1, 10);
      if ($12_1 >>> 0 >= $11_1 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $11_1 = ($15_1 - (($14_1 | 0) == (102 | 0) ? 0 : $3_1) | 0) - (($15_1 | 0) != (0 | 0) & ($14_1 | 0) == (103 | 0) | 0) | 0;
     if (($11_1 | 0) >= (Math_imul(($10_1 - $17_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $12_1 = $11_1 + 9216 | 0;
     $22_1 = ($12_1 | 0) / (9 | 0) | 0;
     $21_1 = (($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? -4092 : -3804) | 0) + ($22_1 << 2 | 0) | 0;
     $11_1 = 10;
     label$28 : {
      $12_1 = $12_1 - Math_imul($22_1, 9) | 0;
      if (($12_1 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $11_1 = Math_imul($11_1, 10);
       $12_1 = $12_1 + 1 | 0;
       if (($12_1 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $23_1 = $21_1 + 4 | 0;
     label$30 : {
      label$31 : {
       $12_1 = HEAP32[$21_1 >> 2] | 0;
       $19_1 = ($12_1 >>> 0) / ($11_1 >>> 0) | 0;
       $22_1 = $12_1 - Math_imul($19_1, $11_1) | 0;
       if ($22_1) {
        break label$31
       }
       if (($23_1 | 0) == ($10_1 | 0)) {
        break label$30
       }
      }
      label$32 : {
       label$33 : {
        if ($19_1 & 1 | 0) {
         break label$33
        }
        $1_1 = 9007199254740992.0;
        if (($11_1 | 0) != (1e9 | 0)) {
         break label$32
        }
        if ($21_1 >>> 0 <= $18_1 >>> 0) {
         break label$32
        }
        if (!((HEAPU8[($21_1 + -4 | 0) >> 0] | 0) & 1 | 0)) {
         break label$32
        }
       }
       $1_1 = 9007199254740994.0;
      }
      $388_1 = ($23_1 | 0) == ($10_1 | 0) ? 1.0 : 1.5;
      $23_1 = $11_1 >>> 1 | 0;
      $27_1 = $22_1 >>> 0 < $23_1 >>> 0 ? .5 : ($22_1 | 0) == ($23_1 | 0) ? $388_1 : 1.5;
      label$34 : {
       if ($7_1) {
        break label$34
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$34
       }
       $27_1 = -$27_1;
       $1_1 = -$1_1;
      }
      $12_1 = $12_1 - $22_1 | 0;
      HEAP32[$21_1 >> 2] = $12_1;
      if ($1_1 + $27_1 == $1_1) {
       break label$30
      }
      $11_1 = $12_1 + $11_1 | 0;
      HEAP32[$21_1 >> 2] = $11_1;
      label$35 : {
       if ($11_1 >>> 0 < 1e9 >>> 0) {
        break label$35
       }
       label$36 : while (1) {
        HEAP32[$21_1 >> 2] = 0;
        label$37 : {
         $21_1 = $21_1 + -4 | 0;
         if ($21_1 >>> 0 >= $18_1 >>> 0) {
          break label$37
         }
         $18_1 = $18_1 + -4 | 0;
         HEAP32[$18_1 >> 2] = 0;
        }
        $11_1 = (HEAP32[$21_1 >> 2] | 0) + 1 | 0;
        HEAP32[$21_1 >> 2] = $11_1;
        if ($11_1 >>> 0 > 999999999 >>> 0) {
         continue label$36
        }
        break label$36;
       };
      }
      $3_1 = Math_imul(($17_1 - $18_1 | 0) >> 2 | 0, 9);
      $11_1 = 10;
      $12_1 = HEAP32[$18_1 >> 2] | 0;
      if ($12_1 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$38 : while (1) {
       $3_1 = $3_1 + 1 | 0;
       $11_1 = Math_imul($11_1, 10);
       if ($12_1 >>> 0 >= $11_1 >>> 0) {
        continue label$38
       }
       break label$38;
      };
     }
     $11_1 = $21_1 + 4 | 0;
     $10_1 = $10_1 >>> 0 > $11_1 >>> 0 ? $11_1 : $10_1;
    }
    label$39 : {
     label$40 : while (1) {
      $11_1 = $10_1;
      $12_1 = $10_1 >>> 0 <= $18_1 >>> 0;
      if ($12_1) {
       break label$39
      }
      $10_1 = $10_1 + -4 | 0;
      if (!(HEAP32[$10_1 >> 2] | 0)) {
       continue label$40
      }
      break label$40;
     };
    }
    label$41 : {
     label$42 : {
      if (($14_1 | 0) == (103 | 0)) {
       break label$42
      }
      $21_1 = $4_1 & 8 | 0;
      break label$41;
     }
     $10_1 = $15_1 ? $15_1 : 1;
     $21_1 = ($10_1 | 0) > ($3_1 | 0) & ($3_1 | 0) > (-5 | 0) | 0;
     $15_1 = ($21_1 ? $3_1 ^ -1 | 0 : -1) + $10_1 | 0;
     $5_1 = ($21_1 ? -1 : -2) + $5_1 | 0;
     $21_1 = $4_1 & 8 | 0;
     if ($21_1) {
      break label$41
     }
     $10_1 = -9;
     label$43 : {
      if ($12_1) {
       break label$43
      }
      $21_1 = HEAP32[($11_1 + -4 | 0) >> 2] | 0;
      if (!$21_1) {
       break label$43
      }
      $12_1 = 10;
      $10_1 = 0;
      if (($21_1 >>> 0) % (10 >>> 0) | 0) {
       break label$43
      }
      label$44 : while (1) {
       $22_1 = $10_1;
       $10_1 = $10_1 + 1 | 0;
       $12_1 = Math_imul($12_1, 10);
       if (!(($21_1 >>> 0) % ($12_1 >>> 0) | 0)) {
        continue label$44
       }
       break label$44;
      };
      $10_1 = $22_1 ^ -1 | 0;
     }
     $12_1 = Math_imul(($11_1 - $17_1 | 0) >> 2 | 0, 9);
     label$45 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$45
      }
      $21_1 = 0;
      $10_1 = ($12_1 + $10_1 | 0) + -9 | 0;
      $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
      $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
      break label$41;
     }
     $21_1 = 0;
     $10_1 = (($3_1 + $12_1 | 0) + $10_1 | 0) + -9 | 0;
     $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
     $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
    }
    $12_1 = -1;
    $22_1 = $15_1 | $21_1 | 0;
    if (($15_1 | 0) > (($22_1 ? 2147483645 : 2147483646) | 0)) {
     break label$4
    }
    $23_1 = ($15_1 + (($22_1 | 0) != (0 | 0)) | 0) + 1 | 0;
    label$46 : {
     label$47 : {
      $20_1 = $5_1 & -33 | 0;
      if (($20_1 | 0) != (70 | 0)) {
       break label$47
      }
      if (($3_1 | 0) > ($23_1 ^ 2147483647 | 0 | 0)) {
       break label$4
      }
      $10_1 = ($3_1 | 0) > (0 | 0) ? $3_1 : 0;
      break label$46;
     }
     label$48 : {
      $10_1 = $3_1 >> 31 | 0;
      i64toi32_i32$5 = 0;
      $10_1 = $1122(($3_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$5 | 0, $13_1 | 0) | 0;
      if (($13_1 - $10_1 | 0 | 0) > (1 | 0)) {
       break label$48
      }
      label$49 : while (1) {
       $10_1 = $10_1 + -1 | 0;
       HEAP8[$10_1 >> 0] = 48;
       if (($13_1 - $10_1 | 0 | 0) < (2 | 0)) {
        continue label$49
       }
       break label$49;
      };
     }
     $19_1 = $10_1 + -2 | 0;
     HEAP8[$19_1 >> 0] = $5_1;
     $12_1 = -1;
     HEAP8[($10_1 + -1 | 0) >> 0] = ($3_1 | 0) < (0 | 0) ? 45 : 43;
     $10_1 = $13_1 - $19_1 | 0;
     if (($10_1 | 0) > ($23_1 ^ 2147483647 | 0 | 0)) {
      break label$4
     }
    }
    $12_1 = -1;
    $10_1 = $10_1 + $23_1 | 0;
    if (($10_1 | 0) > ($8_1 ^ 2147483647 | 0 | 0)) {
     break label$4
    }
    $23_1 = $10_1 + $8_1 | 0;
    $1123($0_1 | 0, 32 | 0, $2_1 | 0, $23_1 | 0, $4_1 | 0);
    $1117($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $1123($0_1 | 0, 48 | 0, $2_1 | 0, $23_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$50 : {
     label$51 : {
      label$52 : {
       label$53 : {
        if (($20_1 | 0) != (70 | 0)) {
         break label$53
        }
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $12_1 = $18_1 >>> 0 > $17_1 >>> 0 ? $17_1 : $18_1;
        $18_1 = $12_1;
        label$54 : while (1) {
         i64toi32_i32$3 = $18_1;
         i64toi32_i32$5 = HEAP32[$18_1 >> 2] | 0;
         i64toi32_i32$4 = 0;
         $10_1 = $1122(i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, $3_1 | 0) | 0;
         label$55 : {
          label$56 : {
           if (($18_1 | 0) == ($12_1 | 0)) {
            break label$56
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$55
           }
           label$57 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$57
            }
            break label$55;
           };
          }
          if (($10_1 | 0) != ($3_1 | 0)) {
           break label$55
          }
          $10_1 = $10_1 + -1 | 0;
          HEAP8[$10_1 >> 0] = 48;
         }
         $1117($0_1 | 0, $10_1 | 0, $3_1 - $10_1 | 0 | 0);
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 <= $17_1 >>> 0) {
          continue label$54
         }
         break label$54;
        };
        label$58 : {
         if (!$22_1) {
          break label$58
         }
         $1117($0_1 | 0, 78419 | 0, 1 | 0);
        }
        if ($18_1 >>> 0 >= $11_1 >>> 0) {
         break label$52
        }
        if (($15_1 | 0) < (1 | 0)) {
         break label$52
        }
        label$59 : while (1) {
         label$60 : {
          i64toi32_i32$3 = $18_1;
          i64toi32_i32$4 = HEAP32[$18_1 >> 2] | 0;
          i64toi32_i32$5 = 0;
          $10_1 = $1122(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, $3_1 | 0) | 0;
          if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$60
          }
          label$61 : while (1) {
           $10_1 = $10_1 + -1 | 0;
           HEAP8[$10_1 >> 0] = 48;
           if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$61
           }
           break label$61;
          };
         }
         $1117($0_1 | 0, $10_1 | 0, (($15_1 | 0) < (9 | 0) ? $15_1 : 9) | 0);
         $10_1 = $15_1 + -9 | 0;
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 >= $11_1 >>> 0) {
          break label$51
         }
         $12_1 = ($15_1 | 0) > (9 | 0);
         $15_1 = $10_1;
         if ($12_1) {
          continue label$59
         }
         break label$51;
        };
       }
       label$62 : {
        if (($15_1 | 0) < (0 | 0)) {
         break label$62
        }
        $22_1 = $11_1 >>> 0 > $18_1 >>> 0 ? $11_1 : $18_1 + 4 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $11_1 = $18_1;
        label$63 : while (1) {
         label$64 : {
          i64toi32_i32$3 = $11_1;
          i64toi32_i32$5 = HEAP32[$11_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $10_1 = $1122(i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, $3_1 | 0) | 0;
          if (($10_1 | 0) != ($3_1 | 0)) {
           break label$64
          }
          $10_1 = $10_1 + -1 | 0;
          HEAP8[$10_1 >> 0] = 48;
         }
         label$65 : {
          label$66 : {
           if (($11_1 | 0) == ($18_1 | 0)) {
            break label$66
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$65
           }
           label$67 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$67
            }
            break label$65;
           };
          }
          $1117($0_1 | 0, $10_1 | 0, 1 | 0);
          $10_1 = $10_1 + 1 | 0;
          if (!($15_1 | $21_1 | 0)) {
           break label$65
          }
          $1117($0_1 | 0, 78419 | 0, 1 | 0);
         }
         $12_1 = $3_1 - $10_1 | 0;
         $1117($0_1 | 0, $10_1 | 0, (($15_1 | 0) > ($12_1 | 0) ? $12_1 : $15_1) | 0);
         $15_1 = $15_1 - $12_1 | 0;
         $11_1 = $11_1 + 4 | 0;
         if ($11_1 >>> 0 >= $22_1 >>> 0) {
          break label$62
         }
         if (($15_1 | 0) > (-1 | 0)) {
          continue label$63
         }
         break label$63;
        };
       }
       $1123($0_1 | 0, 48 | 0, $15_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $1117($0_1 | 0, $19_1 | 0, $13_1 - $19_1 | 0 | 0);
       break label$50;
      }
      $10_1 = $15_1;
     }
     $1123($0_1 | 0, 48 | 0, $10_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $1123($0_1 | 0, 32 | 0, $2_1 | 0, $23_1 | 0, $4_1 ^ 8192 | 0 | 0);
    $12_1 = ($2_1 | 0) > ($23_1 | 0) ? $2_1 : $23_1;
    break label$4;
   }
   $23_1 = $9_1 + ((($5_1 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
   label$68 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$68
    }
    $10_1 = 12 - $3_1 | 0;
    $27_1 = 16.0;
    label$69 : while (1) {
     $27_1 = $27_1 * 16.0;
     $10_1 = $10_1 + -1 | 0;
     if ($10_1) {
      continue label$69
     }
     break label$69;
    };
    label$70 : {
     if ((HEAPU8[$23_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$70
     }
     $1_1 = -($27_1 + (-$1_1 - $27_1));
     break label$68;
    }
    $1_1 = $1_1 + $27_1 - $27_1;
   }
   label$71 : {
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $10_1 = $11_1 >> 31 | 0;
    i64toi32_i32$4 = 0;
    $10_1 = $1122(($11_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$4 | 0, $13_1 | 0) | 0;
    if (($10_1 | 0) != ($13_1 | 0)) {
     break label$71
    }
    $10_1 = $10_1 + -1 | 0;
    HEAP8[$10_1 >> 0] = 48;
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   }
   $21_1 = $8_1 | 2 | 0;
   $18_1 = $5_1 & 32 | 0;
   $22_1 = $10_1 + -2 | 0;
   HEAP8[$22_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($10_1 + -1 | 0) >> 0] = ($11_1 | 0) < (0 | 0) ? 45 : 43;
   $12_1 = $4_1 & 8 | 0;
   $11_1 = $6_1 + 16 | 0;
   label$72 : while (1) {
    $10_1 = $11_1;
    label$73 : {
     label$74 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$74
      }
      $11_1 = ~~$1_1;
      break label$73;
     }
     $11_1 = -2147483648;
    }
    HEAP8[$10_1 >> 0] = HEAPU8[($11_1 + 110768 | 0) >> 0] | 0 | $18_1 | 0;
    $1_1 = ($1_1 - +($11_1 | 0)) * 16.0;
    label$75 : {
     $11_1 = $10_1 + 1 | 0;
     if (($11_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$75
     }
     label$76 : {
      if ($12_1) {
       break label$76
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$76
      }
      if ($1_1 == 0.0) {
       break label$75
      }
     }
     HEAP8[($10_1 + 1 | 0) >> 0] = 46;
     $11_1 = $10_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$72
    }
    break label$72;
   };
   $12_1 = -1;
   $18_1 = $13_1 - $22_1 | 0;
   $19_1 = $21_1 + $18_1 | 0;
   if (($3_1 | 0) > (2147483645 - $19_1 | 0 | 0)) {
    break label$4
   }
   $10_1 = $11_1 - ($6_1 + 16 | 0) | 0;
   $3_1 = $3_1 ? (($10_1 + -2 | 0 | 0) < ($3_1 | 0) ? $3_1 + 2 | 0 : $10_1) : $10_1;
   $11_1 = $19_1 + $3_1 | 0;
   $1123($0_1 | 0, 32 | 0, $2_1 | 0, $11_1 | 0, $4_1 | 0);
   $1117($0_1 | 0, $23_1 | 0, $21_1 | 0);
   $1123($0_1 | 0, 48 | 0, $2_1 | 0, $11_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $1117($0_1 | 0, $6_1 + 16 | 0 | 0, $10_1 | 0);
   $1123($0_1 | 0, 48 | 0, $3_1 - $10_1 | 0 | 0, 0 | 0, 0 | 0);
   $1117($0_1 | 0, $22_1 | 0, $18_1 | 0);
   $1123($0_1 | 0, 32 | 0, $2_1 | 0, $11_1 | 0, $4_1 ^ 8192 | 0 | 0);
   $12_1 = ($2_1 | 0) > ($11_1 | 0) ? $2_1 : $11_1;
  }
  global$0 = $6_1 + 560 | 0;
  return $12_1 | 0;
 }
 
 function $1126($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $15_1 = 0, $15$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 7 | 0) & -8 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $15$hi;
  HEAPF64[$0_1 >> 3] = +$1170($12_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $1127($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1128($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1115($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1129($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $0_1 = $1_1 ? $0_1 : $4_1 + 158 | 0;
  HEAP32[($4_1 + 148 | 0) >> 2] = $0_1;
  $5_1 = $1_1 + -1 | 0;
  HEAP32[($4_1 + 152 | 0) >> 2] = $5_1 >>> 0 > $1_1 >>> 0 ? 0 : $5_1;
  $4_1 = $1006($4_1 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = -1;
  HEAP32[($4_1 + 36 | 0) >> 2] = 539;
  HEAP32[($4_1 + 80 | 0) >> 2] = -1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $4_1 + 159 | 0;
  HEAP32[($4_1 + 84 | 0) >> 2] = $4_1 + 148 | 0;
  HEAP8[$0_1 >> 0] = 0;
  $1_1 = $1124($4_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 160 | 0;
  return $1_1 | 0;
 }
 
 function $1130($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = HEAP32[$3_1 >> 2] | 0;
  label$1 : {
   $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $7_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - $6_1 | 0;
   $7_1 = $5_1 >>> 0 < $7_1 >>> 0 ? $5_1 : $7_1;
   if (!$7_1) {
    break label$1
   }
   $1004($4_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
   $4_1 = (HEAP32[$3_1 >> 2] | 0) + $7_1 | 0;
   HEAP32[$3_1 >> 2] = $4_1;
   $5_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $7_1 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
  }
  label$2 : {
   $5_1 = $5_1 >>> 0 < $2_1 >>> 0 ? $5_1 : $2_1;
   if (!$5_1) {
    break label$2
   }
   $1004($4_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
   $4_1 = (HEAP32[$3_1 >> 2] | 0) + $5_1 | 0;
   HEAP32[$3_1 >> 2] = $4_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $5_1 | 0;
  }
  HEAP8[$4_1 >> 0] = 0;
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
  return $2_1 | 0;
 }
 
 function $1131($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $10$hi = 0, $10_1 = 0, $11$hi = 0, $7_1 = 0, $12$hi = 0, $11_1 = 0, $12_1 = 0, $13$hi = 0, $6_1 = 0, $13_1 = 0, $4_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $8_1 = 0, $9_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $195_1 = 0, $195$hi = 0, $249_1 = 0, $249$hi = 0, $348$hi = 0, $415$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 36 >>> 0) {
      break label$3
     }
     if (($1_1 | 0) != (1 | 0)) {
      break label$2
     }
    }
    HEAP32[($986() | 0) >> 2] = 28;
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    break label$1;
   }
   label$4 : while (1) {
    label$5 : {
     label$6 : {
      $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$6
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
      $5_1 = HEAPU8[$5_1 >> 0] | 0;
      break label$5;
     }
     $5_1 = $1095($0_1 | 0) | 0;
    }
    if ($1132($5_1 | 0) | 0) {
     continue label$4
    }
    break label$4;
   };
   $6_1 = 0;
   label$7 : {
    label$8 : {
     switch ($5_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$8;
     default:
      break label$7;
     };
    }
    $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
    label$9 : {
     $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
      break label$9
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
     $5_1 = HEAPU8[$5_1 >> 0] | 0;
     break label$7;
    }
    $5_1 = $1095($0_1 | 0) | 0;
   }
   label$10 : {
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : {
        if (($1_1 | 0) != (0 | 0) & ($1_1 | 0) != (16 | 0) | 0) {
         break label$14
        }
        if (($5_1 | 0) != (48 | 0)) {
         break label$14
        }
        label$15 : {
         label$16 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$16
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$15;
         }
         $5_1 = $1095($0_1 | 0) | 0;
        }
        label$17 : {
         if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
          break label$17
         }
         label$18 : {
          label$19 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$19
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$18;
          }
          $5_1 = $1095($0_1 | 0) | 0;
         }
         $1_1 = 16;
         if ((HEAPU8[($5_1 + 110785 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
          break label$12
         }
         i64toi32_i32$0 = 0;
         $3_1 = 0;
         $3$hi = i64toi32_i32$0;
         label$20 : {
          label$21 : {
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
            $31_1 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
             if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
              $32_1 = 0
             } else {
              $32_1 = 1
             }
             $33_1 = $32_1;
            } else {
             $33_1 = 0
            }
            $31_1 = $33_1;
           }
           if ($31_1) {
            break label$21
           }
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
           if (!$2_1) {
            break label$20
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
           break label$1;
          }
          if ($2_1) {
           break label$1
          }
         }
         i64toi32_i32$2 = 0;
         $3_1 = 0;
         $3$hi = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         $1094($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
         break label$1;
        }
        if ($1_1) {
         break label$13
        }
        $1_1 = 8;
        break label$12;
       }
       $1_1 = $1_1 ? $1_1 : 10;
       if ($1_1 >>> 0 > (HEAPU8[($5_1 + 110785 | 0) >> 0] | 0) >>> 0) {
        break label$13
       }
       i64toi32_i32$2 = 0;
       $3_1 = 0;
       $3$hi = i64toi32_i32$2;
       label$22 : {
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $34_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
           $35_1 = 0
          } else {
           $35_1 = 1
          }
          $36_1 = $35_1;
         } else {
          $36_1 = 0
         }
         $34_1 = $36_1;
        }
        if ($34_1) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       i64toi32_i32$3 = 0;
       $1094($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
       HEAP32[($986() | 0) >> 2] = 28;
       break label$1;
      }
      if (($1_1 | 0) != (10 | 0)) {
       break label$12
      }
      i64toi32_i32$3 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$3;
      label$23 : {
       $2_1 = $5_1 + -48 | 0;
       if ($2_1 >>> 0 > 9 >>> 0) {
        break label$23
       }
       $5_1 = 0;
       label$24 : while (1) {
        label$25 : {
         label$26 : {
          $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$26
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
          $1_1 = HEAPU8[$1_1 >> 0] | 0;
          break label$25;
         }
         $1_1 = $1095($0_1 | 0) | 0;
        }
        $5_1 = Math_imul($5_1, 10) + $2_1 | 0;
        label$27 : {
         $2_1 = $1_1 + -48 | 0;
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$27
         }
         if ($5_1 >>> 0 < 429496729 >>> 0) {
          continue label$24
         }
        }
        break label$24;
       };
       i64toi32_i32$3 = 0;
       $10_1 = $5_1;
       $10$hi = i64toi32_i32$3;
      }
      if ($2_1 >>> 0 > 9 >>> 0) {
       break label$10
      }
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $11_1 = i64toi32_i32$1;
      $11$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $12_1 = $2_1;
      $12$hi = i64toi32_i32$3;
      label$28 : while (1) {
       label$29 : {
        label$30 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$30
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$29;
        }
        $5_1 = $1095($0_1 | 0) | 0;
       }
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $12$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$0 = $11_1;
       i64toi32_i32$1 = $12$hi;
       i64toi32_i32$2 = $12_1;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $10_1 = i64toi32_i32$4;
       $10$hi = i64toi32_i32$5;
       label$31 : {
        label$32 : {
         label$33 : {
          $1_1 = $5_1 + -48 | 0;
          if ($1_1 >>> 0 > 9 >>> 0) {
           break label$33
          }
          i64toi32_i32$3 = i64toi32_i32$4;
          i64toi32_i32$0 = 429496729;
          i64toi32_i32$2 = -1717986918;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
           break label$32
          }
         }
         if ($1_1 >>> 0 <= 9 >>> 0) {
          break label$31
         }
         break label$10;
        }
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $11_1 = i64toi32_i32$5;
        $11$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        $12_1 = $1_1;
        $12$hi = i64toi32_i32$3;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
        $195_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
        $195$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$3 = $11_1;
        i64toi32_i32$2 = $195$hi;
        i64toi32_i32$0 = $195_1;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
         continue label$28
        }
       }
       break label$28;
      };
      $1_1 = 10;
      break label$11;
     }
     label$34 : {
      if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
       break label$34
      }
      i64toi32_i32$3 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$3;
      label$35 : {
       $7_1 = HEAPU8[($5_1 + 110785 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break label$35
       }
       $2_1 = 0;
       label$36 : while (1) {
        label$37 : {
         label$38 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$38
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$37;
         }
         $5_1 = $1095($0_1 | 0) | 0;
        }
        $2_1 = $7_1 + Math_imul($2_1, $1_1) | 0;
        label$39 : {
         $7_1 = HEAPU8[($5_1 + 110785 | 0) >> 0] | 0;
         if ($1_1 >>> 0 <= $7_1 >>> 0) {
          break label$39
         }
         if ($2_1 >>> 0 < 119304647 >>> 0) {
          continue label$36
         }
        }
        break label$36;
       };
       i64toi32_i32$3 = 0;
       $10_1 = $2_1;
       $10$hi = i64toi32_i32$3;
      }
      if ($1_1 >>> 0 <= $7_1 >>> 0) {
       break label$11
      }
      i64toi32_i32$3 = 0;
      $11_1 = $1_1;
      $11$hi = i64toi32_i32$3;
      label$40 : while (1) {
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$5 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $12_1 = i64toi32_i32$5;
       $12$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = $7_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 255;
       i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $13_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
       $13$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $13_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
       $249_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
       $249$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$5 = $12_1;
       i64toi32_i32$3 = $249$hi;
       i64toi32_i32$2 = $249_1;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$11
       }
       label$41 : {
        label$42 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$42
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$41;
        }
        $5_1 = $1095($0_1 | 0) | 0;
       }
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$5 = $13$hi;
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$2 = $12_1;
       i64toi32_i32$0 = $13$hi;
       i64toi32_i32$3 = $13_1;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $10_1 = i64toi32_i32$1;
       $10$hi = i64toi32_i32$4;
       $7_1 = HEAPU8[($5_1 + 110785 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break label$11
       }
       i64toi32_i32$4 = $11$hi;
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$4 = $11$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$3 = 0;
       $1168($4_1 | 0, $11_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$11
       }
       continue label$40;
      };
     }
     $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 111041 | 0) >> 0] | 0;
     i64toi32_i32$2 = 0;
     $10_1 = 0;
     $10$hi = i64toi32_i32$2;
     label$43 : {
      $2_1 = HEAPU8[($5_1 + 110785 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$43
      }
      $7_1 = 0;
      label$44 : while (1) {
       label$45 : {
        label$46 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$46
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$45;
        }
        $5_1 = $1095($0_1 | 0) | 0;
       }
       $9_1 = $7_1 << $8_1 | 0;
       $7_1 = $2_1 | $9_1 | 0;
       label$47 : {
        $2_1 = HEAPU8[($5_1 + 110785 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$47
        }
        if ($9_1 >>> 0 < 134217728 >>> 0) {
         continue label$44
        }
       }
       break label$44;
      };
      i64toi32_i32$2 = 0;
      $10_1 = $7_1;
      $10$hi = i64toi32_i32$2;
     }
     if ($1_1 >>> 0 <= $2_1 >>> 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $12_1 = $8_1;
     $12$hi = i64toi32_i32$2;
     i64toi32_i32$2 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$3 = $12_1;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $37_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $13_1 = $37_1;
     $13$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$2 = $13_1;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$3 = $10_1;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$11
     }
     label$48 : while (1) {
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 255;
      i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      $11_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $11$hi = i64toi32_i32$5;
      label$49 : {
       label$50 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break label$50
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$49;
       }
       $5_1 = $1095($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$2 = $10_1;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$4 = $12_1;
      i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
       $38_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
       $38_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      }
      $348$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $348$hi;
      i64toi32_i32$5 = $38_1;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$4 = $11_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $10_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $10$hi = i64toi32_i32$2;
      $2_1 = HEAPU8[($5_1 + 110785 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$11
      }
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$4 = $13_1;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
       continue label$48
      }
      break label$48;
     };
    }
    if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 110785 | 0) >> 0] | 0) >>> 0) {
     break label$10
    }
    label$51 : while (1) {
     label$52 : {
      label$53 : {
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$53
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
       $5_1 = HEAPU8[$5_1 >> 0] | 0;
       break label$52;
      }
      $5_1 = $1095($0_1 | 0) | 0;
     }
     if ($1_1 >>> 0 > (HEAPU8[($5_1 + 110785 | 0) >> 0] | 0) >>> 0) {
      continue label$51
     }
     break label$51;
    };
    HEAP32[($986() | 0) >> 2] = 68;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0) ? $6_1 : 0;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$2 = i64toi32_i32$3;
    $10_1 = i64toi32_i32$4;
    $10$hi = i64toi32_i32$3;
   }
   label$54 : {
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
     $39_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0) {
       $40_1 = 0
      } else {
       $40_1 = 1
      }
      $41_1 = $40_1;
     } else {
      $41_1 = 0
     }
     $39_1 = $41_1;
    }
    if ($39_1) {
     break label$54
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   label$55 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$55
    }
    label$56 : {
     i64toi32_i32$5 = i64toi32_i32$4;
     if (i64toi32_i32$2 & 1 | 0) {
      break label$56
     }
     if ($6_1) {
      break label$56
     }
     HEAP32[($986() | 0) >> 2] = 68;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
     break label$55
    }
    HEAP32[($986() | 0) >> 2] = 68;
    break label$1;
   }
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$4 = $10_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
   $415$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $415$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$0 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $1132($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $1133($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = $3_1 ? $3_1 : 141448;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1_1) {
       break label$4
      }
      if ($3_1) {
       break label$3
      }
      return 0 | 0;
     }
     $5_1 = -2;
     if (!$2_1) {
      break label$2
     }
     label$5 : {
      label$6 : {
       if (!$3_1) {
        break label$6
       }
       $5_1 = $2_1;
       break label$5;
      }
      label$7 : {
       $5_1 = HEAPU8[$1_1 >> 0] | 0;
       $3_1 = $5_1 << 24 >> 24;
       if (($3_1 | 0) < (0 | 0)) {
        break label$7
       }
       label$8 : {
        if (!$0_1) {
         break label$8
        }
        HEAP32[$0_1 >> 2] = $5_1;
       }
       return ($3_1 | 0) != (0 | 0) | 0;
      }
      label$9 : {
       if (HEAP32[(HEAP32[(($1056() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
        break label$9
       }
       $5_1 = 1;
       if (!$0_1) {
        break label$2
       }
       HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
       return 1 | 0;
      }
      $3_1 = $5_1 + -194 | 0;
      if ($3_1 >>> 0 > 50 >>> 0) {
       break label$3
      }
      $3_1 = HEAP32[(($3_1 << 2 | 0) + 111056 | 0) >> 2] | 0;
      $5_1 = $2_1 + -1 | 0;
      if (!$5_1) {
       break label$1
      }
      $1_1 = $1_1 + 1 | 0;
     }
     $6_1 = HEAPU8[$1_1 >> 0] | 0;
     $7_1 = $6_1 >>> 3 | 0;
     if (($7_1 + -16 | 0 | (($3_1 >> 26 | 0) + $7_1 | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
     }
     label$10 : while (1) {
      $5_1 = $5_1 + -1 | 0;
      label$11 : {
       $3_1 = ($6_1 & 255 | 0) + -128 | 0 | ($3_1 << 6 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break label$11
       }
       HEAP32[$4_1 >> 2] = 0;
       label$12 : {
        if (!$0_1) {
         break label$12
        }
        HEAP32[$0_1 >> 2] = $3_1;
       }
       return $2_1 - $5_1 | 0 | 0;
      }
      if (!$5_1) {
       break label$1
      }
      $1_1 = $1_1 + 1 | 0;
      $6_1 = HEAPU8[$1_1 >> 0] | 0;
      if (($6_1 & 192 | 0 | 0) == (128 | 0)) {
       continue label$10
      }
      break label$10;
     };
    }
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[($986() | 0) >> 2] = 25;
    $5_1 = -1;
   }
   return $5_1 | 0;
  }
  HEAP32[$4_1 >> 2] = $3_1;
  return -2 | 0;
 }
 
 function $1134($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $1135($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $9_1 = 0, i64toi32_i32$5 = 0, $14_1 = 0, $3_1 = 0, $11_1 = 0, $8_1 = 0, $13_1 = 0, $19$hi = 0, $12_1 = 0, $15_1 = 0, $20$hi = 0, $17_1 = 0, $6_1 = 0, $19_1 = 0, $10_1 = 0, $20_1 = 0, $21$hi = 0, $16_1 = 0, $18_1 = 0, $21_1 = 0, i64toi32_i32$6 = 0, $4_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $7_1 = 0, $80$hi = 0, $82$hi = 0, $87_1 = 0, $87$hi = 0, $146$hi = 0, $148$hi = 0, $154_1 = 0, $154$hi = 0, $282$hi = 0, $284$hi = 0, $289_1 = 0, $289$hi = 0, $329_1 = 0, $329$hi = 0, $335_1 = 0, $335$hi = 0, $336$hi = 0, $435_1 = 0, $435$hi = 0, $441_1 = 0, $441$hi = 0, $442$hi = 0, $653_1 = 0, $653$hi = 0, $658_1 = 0, $658$hi = 0, $686$hi = 0, $688$hi = 0, $694_1 = 0, $694$hi = 0;
  $3_1 = global$0 - 304 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $4_1 = 1;
    break label$1;
   }
   $4_1 = !($1010($0_1 | 0) | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
      break label$5
     }
     $1026($0_1 | 0) | 0;
     if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
      break label$4
     }
    }
    label$6 : {
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if ($5_1) {
      break label$6
     }
     $6_1 = 0;
     break label$3;
    }
    $7_1 = $3_1 + 16 | 0;
    i64toi32_i32$0 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$0;
    $6_1 = 0;
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : while (1) {
           label$14 : {
            label$15 : {
             $5_1 = $5_1 & 255 | 0;
             if (!($1136($5_1 | 0) | 0)) {
              break label$15
             }
             label$16 : while (1) {
              $5_1 = $1_1;
              $1_1 = $1_1 + 1 | 0;
              if ($1136(HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
               continue label$16
              }
              break label$16;
             };
             i64toi32_i32$0 = 0;
             $1094($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
             label$17 : while (1) {
              label$18 : {
               label$19 : {
                $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                 break label$19
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                $1_1 = HEAPU8[$1_1 >> 0] | 0;
                break label$18;
               }
               $1_1 = $1095($0_1 | 0) | 0;
              }
              if ($1136($1_1 | 0) | 0) {
               continue label$17
              }
              break label$17;
             };
             $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             label$20 : {
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
               $62_1 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                 $63_1 = 0
                } else {
                 $63_1 = 1
                }
                $64_1 = $63_1;
               } else {
                $64_1 = 0
               }
               $62_1 = $64_1;
              }
              if ($62_1) {
               break label$20
              }
              $1_1 = $1_1 + -1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
             }
             i64toi32_i32$3 = $0_1;
             i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
             $80$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $19$hi;
             i64toi32_i32$1 = $80$hi;
             i64toi32_i32$3 = i64toi32_i32$2;
             i64toi32_i32$2 = $19$hi;
             i64toi32_i32$0 = $19_1;
             i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
             i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
             if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $82$hi = i64toi32_i32$5;
             i64toi32_i32$3 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
             $87_1 = i64toi32_i32$3;
             $87$hi = i64toi32_i32$5;
             i64toi32_i32$5 = $82$hi;
             i64toi32_i32$1 = i64toi32_i32$4;
             i64toi32_i32$3 = $87$hi;
             i64toi32_i32$0 = $87_1;
             i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
             i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
             }
             $19_1 = i64toi32_i32$2;
             $19$hi = i64toi32_i32$4;
             break label$14;
            }
            label$21 : {
             label$22 : {
              label$23 : {
               label$24 : {
                if (($5_1 | 0) != (37 | 0)) {
                 break label$24
                }
                $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                if (($5_1 | 0) == (42 | 0)) {
                 break label$23
                }
                if (($5_1 | 0) != (37 | 0)) {
                 break label$22
                }
               }
               i64toi32_i32$4 = 0;
               $1094($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
               label$25 : {
                label$26 : {
                 if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (37 | 0)) {
                  break label$26
                 }
                 label$27 : while (1) {
                  label$28 : {
                   label$29 : {
                    $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                    if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                     break label$29
                    }
                    HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                    $5_1 = HEAPU8[$5_1 >> 0] | 0;
                    break label$28;
                   }
                   $5_1 = $1095($0_1 | 0) | 0;
                  }
                  if ($1136($5_1 | 0) | 0) {
                   continue label$27
                  }
                  break label$27;
                 };
                 $1_1 = $1_1 + 1 | 0;
                 break label$25;
                }
                label$30 : {
                 $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$30
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                 $5_1 = HEAPU8[$5_1 >> 0] | 0;
                 break label$25;
                }
                $5_1 = $1095($0_1 | 0) | 0;
               }
               label$31 : {
                if (($5_1 | 0) == (HEAPU8[$1_1 >> 0] | 0 | 0)) {
                 break label$31
                }
                label$32 : {
                 i64toi32_i32$5 = $0_1;
                 i64toi32_i32$4 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                 i64toi32_i32$5 = i64toi32_i32$4;
                 i64toi32_i32$4 = 0;
                 i64toi32_i32$0 = 0;
                 if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
                  $65_1 = 1
                 } else {
                  if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
                   if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
                    $66_1 = 0
                   } else {
                    $66_1 = 1
                   }
                   $67_1 = $66_1;
                  } else {
                   $67_1 = 0
                  }
                  $65_1 = $67_1;
                 }
                 if ($65_1) {
                  break label$32
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                }
                if (($5_1 | 0) > (-1 | 0)) {
                 break label$3
                }
                if ($6_1) {
                 break label$3
                }
                break label$4;
               }
               i64toi32_i32$0 = $0_1;
               i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
               $146$hi = i64toi32_i32$1;
               i64toi32_i32$1 = $19$hi;
               i64toi32_i32$1 = $146$hi;
               i64toi32_i32$0 = i64toi32_i32$5;
               i64toi32_i32$5 = $19$hi;
               i64toi32_i32$4 = $19_1;
               i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
               i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
               if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
               }
               $148$hi = i64toi32_i32$2;
               i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
               i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
               $154_1 = i64toi32_i32$0;
               $154$hi = i64toi32_i32$2;
               i64toi32_i32$2 = $148$hi;
               i64toi32_i32$1 = i64toi32_i32$3;
               i64toi32_i32$0 = $154$hi;
               i64toi32_i32$4 = $154_1;
               i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
               i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
               if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
               }
               $19_1 = i64toi32_i32$5;
               $19$hi = i64toi32_i32$3;
               $5_1 = $1_1;
               break label$14;
              }
              $5_1 = $1_1 + 2 | 0;
              $8_1 = 0;
              break label$21;
             }
             label$33 : {
              $9_1 = $5_1 + -48 | 0;
              if ($9_1 >>> 0 > 9 >>> 0) {
               break label$33
              }
              if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$33
              }
              $5_1 = $1_1 + 3 | 0;
              $8_1 = $1137($2_1 | 0, $9_1 | 0) | 0;
              break label$21;
             }
             $5_1 = $1_1 + 1 | 0;
             $8_1 = HEAP32[$2_1 >> 2] | 0;
             $2_1 = $2_1 + 4 | 0;
            }
            $10_1 = 0;
            $9_1 = 0;
            label$34 : {
             $1_1 = HEAPU8[$5_1 >> 0] | 0;
             if (($1_1 + -48 | 0) >>> 0 > 9 >>> 0) {
              break label$34
             }
             label$35 : while (1) {
              $9_1 = (Math_imul($9_1, 10) + $1_1 | 0) + -48 | 0;
              $1_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
              $5_1 = $5_1 + 1 | 0;
              if (($1_1 + -48 | 0) >>> 0 < 10 >>> 0) {
               continue label$35
              }
              break label$35;
             };
            }
            label$36 : {
             label$37 : {
              if (($1_1 | 0) == (109 | 0)) {
               break label$37
              }
              $11_1 = $5_1;
              break label$36;
             }
             $11_1 = $5_1 + 1 | 0;
             $12_1 = 0;
             $10_1 = ($8_1 | 0) != (0 | 0);
             $1_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
             $13_1 = 0;
            }
            $5_1 = $11_1 + 1 | 0;
            $14_1 = 3;
            $15_1 = $10_1;
            label$38 : {
             label$39 : {
              switch (($1_1 & 255 | 0) + -65 | 0 | 0) {
              case 39:
               $1_1 = (HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
               $5_1 = $1_1 ? $11_1 + 2 | 0 : $5_1;
               $14_1 = $1_1 ? -2 : -1;
               break label$38;
              case 43:
               $1_1 = (HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
               $5_1 = $1_1 ? $11_1 + 2 | 0 : $5_1;
               $14_1 = $1_1 ? 3 : 1;
               break label$38;
              case 51:
              case 57:
               $14_1 = 1;
               break label$38;
              case 11:
               $14_1 = 2;
               break label$38;
              case 41:
               break label$38;
              case 0:
              case 2:
              case 4:
              case 5:
              case 6:
              case 18:
              case 23:
              case 26:
              case 32:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 40:
              case 45:
              case 46:
              case 47:
              case 50:
              case 52:
              case 55:
               break label$39;
              default:
               break label$8;
              };
             }
             $14_1 = 0;
             $5_1 = $11_1;
            }
            $1_1 = HEAPU8[$5_1 >> 0] | 0;
            $11_1 = ($1_1 & 47 | 0 | 0) == (3 | 0);
            $16_1 = $11_1 ? 1 : $14_1;
            label$44 : {
             $17_1 = $11_1 ? $1_1 | 32 | 0 : $1_1;
             if (($17_1 | 0) == (91 | 0)) {
              break label$44
             }
             label$45 : {
              label$46 : {
               if (($17_1 | 0) == (110 | 0)) {
                break label$46
               }
               if (($17_1 | 0) != (99 | 0)) {
                break label$45
               }
               $9_1 = ($9_1 | 0) > (1 | 0) ? $9_1 : 1;
               break label$44;
              }
              i64toi32_i32$3 = $19$hi;
              $1138($8_1 | 0, $16_1 | 0, $19_1 | 0, i64toi32_i32$3 | 0);
              break label$14;
             }
             i64toi32_i32$3 = 0;
             $1094($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
             label$47 : while (1) {
              label$48 : {
               label$49 : {
                $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                 break label$49
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                $1_1 = HEAPU8[$1_1 >> 0] | 0;
                break label$48;
               }
               $1_1 = $1095($0_1 | 0) | 0;
              }
              if ($1136($1_1 | 0) | 0) {
               continue label$47
              }
              break label$47;
             };
             $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             label$50 : {
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$3 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$2 = i64toi32_i32$3;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
               $68_1 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
                if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0) {
                 $69_1 = 0
                } else {
                 $69_1 = 1
                }
                $70_1 = $69_1;
               } else {
                $70_1 = 0
               }
               $68_1 = $70_1;
              }
              if ($68_1) {
               break label$50
              }
              $1_1 = $1_1 + -1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
             }
             i64toi32_i32$4 = $0_1;
             i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
             $282$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $19$hi;
             i64toi32_i32$1 = $282$hi;
             i64toi32_i32$4 = i64toi32_i32$2;
             i64toi32_i32$2 = $19$hi;
             i64toi32_i32$3 = $19_1;
             i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
             i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
             if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $284$hi = i64toi32_i32$5;
             i64toi32_i32$4 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
             $289_1 = i64toi32_i32$4;
             $289$hi = i64toi32_i32$5;
             i64toi32_i32$5 = $284$hi;
             i64toi32_i32$1 = i64toi32_i32$0;
             i64toi32_i32$4 = $289$hi;
             i64toi32_i32$3 = $289_1;
             i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
             i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
             }
             $19_1 = i64toi32_i32$2;
             $19$hi = i64toi32_i32$0;
            }
            i64toi32_i32$1 = $9_1;
            i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
            $20_1 = i64toi32_i32$1;
            $20$hi = i64toi32_i32$0;
            $1094($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
            label$51 : {
             label$52 : {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
               break label$52
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
              break label$51;
             }
             if (($1095($0_1 | 0) | 0 | 0) < (0 | 0)) {
              break label$9
             }
            }
            label$53 : {
             i64toi32_i32$5 = $0_1;
             i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
             i64toi32_i32$5 = i64toi32_i32$0;
             i64toi32_i32$0 = 0;
             i64toi32_i32$3 = 0;
             if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
              $71_1 = 1
             } else {
              if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
               if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
                $72_1 = 0
               } else {
                $72_1 = 1
               }
               $73_1 = $72_1;
              } else {
               $73_1 = 0
              }
              $71_1 = $73_1;
             }
             if ($71_1) {
              break label$53
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
            }
            $1_1 = 16;
            label$54 : {
             label$55 : {
              label$56 : {
               label$57 : {
                label$58 : {
                 switch ($17_1 + -88 | 0 | 0) {
                 default:
                  $1_1 = $17_1 + -65 | 0;
                  if ($1_1 >>> 0 > 6 >>> 0) {
                   break label$54
                  }
                  if (!((1 << $1_1 | 0) & 113 | 0)) {
                   break label$54
                  }
                 case 9:
                 case 13:
                 case 14:
                 case 15:
                  $1101($3_1 + 8 | 0 | 0, $0_1 | 0, $16_1 | 0, 0 | 0);
                  i64toi32_i32$3 = $0_1;
                  i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                  $329_1 = i64toi32_i32$5;
                  $329$hi = i64toi32_i32$1;
                  i64toi32_i32$5 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                  i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
                  $335_1 = i64toi32_i32$5;
                  $335$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$5 = $335$hi;
                  i64toi32_i32$0 = $335_1;
                  i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                  i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
                  i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                  i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                  $336$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $329$hi;
                  i64toi32_i32$1 = $329_1;
                  i64toi32_i32$3 = $336$hi;
                  i64toi32_i32$0 = i64toi32_i32$4;
                  if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
                   break label$56
                  }
                  break label$10;
                 case 3:
                 case 11:
                 case 27:
                  label$64 : {
                   if (($17_1 | 16 | 0 | 0) != (115 | 0)) {
                    break label$64
                   }
                   $1006($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                   HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                   if (($17_1 | 0) != (115 | 0)) {
                    break label$55
                   }
                   HEAP8[($3_1 + 65 | 0) >> 0] = 0;
                   HEAP8[($3_1 + 46 | 0) >> 0] = 0;
                   $74_1 = 0;
                   HEAP16[($3_1 + 42 | 0) >> 1] = $74_1;
                   HEAP16[($3_1 + 44 | 0) >> 1] = $74_1 >>> 16 | 0;
                   break label$55;
                  }
                  $14_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                  $1_1 = ($14_1 | 0) == (94 | 0);
                  $1006($3_1 + 32 | 0 | 0, $1_1 | 0, 257 | 0) | 0;
                  HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                  $15_1 = $1_1 ? $5_1 + 2 | 0 : $5_1 + 1 | 0;
                  label$65 : {
                   label$66 : {
                    label$67 : {
                     label$68 : {
                      $1_1 = HEAPU8[($5_1 + ($1_1 ? 2 : 1) | 0) >> 0] | 0;
                      if (($1_1 | 0) == (45 | 0)) {
                       break label$68
                      }
                      if (($1_1 | 0) == (93 | 0)) {
                       break label$67
                      }
                      $11_1 = ($14_1 | 0) != (94 | 0);
                      $5_1 = $15_1;
                      break label$65;
                     }
                     $11_1 = ($14_1 | 0) != (94 | 0);
                     HEAP8[($3_1 + 78 | 0) >> 0] = $11_1;
                     break label$66;
                    }
                    $11_1 = ($14_1 | 0) != (94 | 0);
                    HEAP8[($3_1 + 126 | 0) >> 0] = $11_1;
                   }
                   $5_1 = $15_1 + 1 | 0;
                  }
                  label$69 : while (1) {
                   label$70 : {
                    label$71 : {
                     $14_1 = HEAPU8[$5_1 >> 0] | 0;
                     if (($14_1 | 0) == (45 | 0)) {
                      break label$71
                     }
                     if (!$14_1) {
                      break label$9
                     }
                     if (($14_1 | 0) == (93 | 0)) {
                      break label$55
                     }
                     break label$70;
                    }
                    $14_1 = 45;
                    $18_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                    if (!$18_1) {
                     break label$70
                    }
                    if (($18_1 | 0) == (93 | 0)) {
                     break label$70
                    }
                    $15_1 = $5_1 + 1 | 0;
                    label$72 : {
                     label$73 : {
                      $1_1 = HEAPU8[($5_1 + -1 | 0) >> 0] | 0;
                      if ($1_1 >>> 0 < $18_1 >>> 0) {
                       break label$73
                      }
                      $14_1 = $18_1;
                      break label$72;
                     }
                     label$74 : while (1) {
                      $1_1 = $1_1 + 1 | 0;
                      HEAP8[(($3_1 + 32 | 0) + $1_1 | 0) >> 0] = $11_1;
                      $14_1 = HEAPU8[$15_1 >> 0] | 0;
                      if ($1_1 >>> 0 < $14_1 >>> 0) {
                       continue label$74
                      }
                      break label$74;
                     };
                    }
                    $5_1 = $15_1;
                   }
                   HEAP8[(($14_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $11_1;
                   $5_1 = $5_1 + 1 | 0;
                   continue label$69;
                  };
                 case 23:
                  $1_1 = 8;
                  break label$57;
                 case 12:
                 case 29:
                  $1_1 = 10;
                  break label$57;
                 case 1:
                 case 2:
                 case 4:
                 case 5:
                 case 6:
                 case 7:
                 case 8:
                 case 10:
                 case 16:
                 case 18:
                 case 19:
                 case 20:
                 case 21:
                 case 22:
                 case 25:
                 case 26:
                 case 28:
                 case 30:
                 case 31:
                  break label$54;
                 case 0:
                 case 24:
                 case 32:
                  break label$57;
                 case 17:
                  break label$58;
                 };
                }
                $1_1 = 0;
               }
               i64toi32_i32$1 = -1;
               i64toi32_i32$1 = $1131($0_1 | 0, $1_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$1 | 0) | 0;
               i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
               $20_1 = i64toi32_i32$1;
               $20$hi = i64toi32_i32$2;
               i64toi32_i32$0 = $0_1;
               i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
               $435_1 = i64toi32_i32$2;
               $435$hi = i64toi32_i32$1;
               i64toi32_i32$2 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
               i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
               $441_1 = i64toi32_i32$2;
               $441$hi = i64toi32_i32$1;
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               i64toi32_i32$2 = $441$hi;
               i64toi32_i32$3 = $441_1;
               i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
               i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
               i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
               i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
               $442$hi = i64toi32_i32$4;
               i64toi32_i32$4 = $435$hi;
               i64toi32_i32$1 = $435_1;
               i64toi32_i32$0 = $442$hi;
               i64toi32_i32$3 = i64toi32_i32$5;
               if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) | 0) {
                break label$10
               }
               label$75 : {
                if (($17_1 | 0) != (112 | 0)) {
                 break label$75
                }
                if (!$8_1) {
                 break label$75
                }
                i64toi32_i32$1 = $20$hi;
                HEAP32[$8_1 >> 2] = $20_1;
                break label$54;
               }
               i64toi32_i32$1 = $20$hi;
               $1138($8_1 | 0, $16_1 | 0, $20_1 | 0, i64toi32_i32$1 | 0);
               break label$54;
              }
              if (!$8_1) {
               break label$54
              }
              i64toi32_i32$3 = $7_1;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $20_1 = i64toi32_i32$1;
              $20$hi = i64toi32_i32$4;
              i64toi32_i32$3 = $3_1;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
              $21_1 = i64toi32_i32$4;
              $21$hi = i64toi32_i32$1;
              label$76 : {
               switch ($16_1 | 0) {
               case 0:
                i64toi32_i32$1 = $21$hi;
                i64toi32_i32$1 = $20$hi;
                i64toi32_i32$1 = $21$hi;
                i64toi32_i32$4 = $20$hi;
                HEAPF32[$8_1 >> 2] = Math_fround($1171($21_1 | 0, i64toi32_i32$1 | 0, $20_1 | 0, i64toi32_i32$4 | 0));
                break label$54;
               case 1:
                i64toi32_i32$4 = $21$hi;
                i64toi32_i32$4 = $20$hi;
                i64toi32_i32$4 = $21$hi;
                i64toi32_i32$1 = $20$hi;
                HEAPF64[$8_1 >> 3] = +$1170($21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0);
                break label$54;
               case 2:
                break label$76;
               default:
                break label$54;
               };
              }
              i64toi32_i32$1 = $21$hi;
              i64toi32_i32$4 = $8_1;
              HEAP32[i64toi32_i32$4 >> 2] = $21_1;
              HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$1 = $20$hi;
              HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $20_1;
              HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
              break label$54;
             }
             $11_1 = ($17_1 | 0) != (99 | 0);
             $14_1 = $11_1 ? 31 : $9_1 + 1 | 0;
             label$79 : {
              label$80 : {
               if (($16_1 | 0) != (1 | 0)) {
                break label$80
               }
               $9_1 = $8_1;
               label$81 : {
                if (!$10_1) {
                 break label$81
                }
                $9_1 = $1146($14_1 << 2 | 0 | 0) | 0;
                if (!$9_1) {
                 break label$11
                }
               }
               i64toi32_i32$4 = $3_1;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
               HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$1;
               $1_1 = 0;
               label$82 : while (1) {
                $13_1 = $9_1;
                label$83 : {
                 label$84 : while (1) {
                  label$85 : {
                   label$86 : {
                    $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                    if (($9_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                     break label$86
                    }
                    HEAP32[($0_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                    $9_1 = HEAPU8[$9_1 >> 0] | 0;
                    break label$85;
                   }
                   $9_1 = $1095($0_1 | 0) | 0;
                  }
                  if (!(HEAPU8[(($9_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                   break label$83
                  }
                  HEAP8[($3_1 + 27 | 0) >> 0] = $9_1;
                  $9_1 = $1133($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, 1 | 0, $3_1 + 296 | 0 | 0) | 0;
                  if (($9_1 | 0) == (-2 | 0)) {
                   continue label$84
                  }
                  label$87 : {
                   if (($9_1 | 0) != (-1 | 0)) {
                    break label$87
                   }
                   $12_1 = 0;
                   break label$9;
                  }
                  label$88 : {
                   if (!$13_1) {
                    break label$88
                   }
                   HEAP32[($13_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                   $1_1 = $1_1 + 1 | 0;
                  }
                  if (!$10_1) {
                   continue label$84
                  }
                  if (($1_1 | 0) != ($14_1 | 0)) {
                   continue label$84
                  }
                  break label$84;
                 };
                 $15_1 = 1;
                 $12_1 = 0;
                 $14_1 = $14_1 << 1 | 0 | 1 | 0;
                 $9_1 = $1149($13_1 | 0, $14_1 << 2 | 0 | 0) | 0;
                 if ($9_1) {
                  continue label$82
                 }
                 break label$8;
                }
                break label$82;
               };
               $12_1 = 0;
               $14_1 = $13_1;
               if (!($1134($3_1 + 296 | 0 | 0) | 0)) {
                break label$9
               }
               break label$79;
              }
              label$89 : {
               if (!$10_1) {
                break label$89
               }
               $1_1 = 0;
               $9_1 = $1146($14_1 | 0) | 0;
               if (!$9_1) {
                break label$11
               }
               label$90 : while (1) {
                $13_1 = $9_1;
                label$91 : while (1) {
                 label$92 : {
                  label$93 : {
                   $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                   if (($9_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                    break label$93
                   }
                   HEAP32[($0_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                   $9_1 = HEAPU8[$9_1 >> 0] | 0;
                   break label$92;
                  }
                  $9_1 = $1095($0_1 | 0) | 0;
                 }
                 label$94 : {
                  if (HEAPU8[(($9_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                   break label$94
                  }
                  $14_1 = 0;
                  $12_1 = $13_1;
                  break label$79;
                 }
                 HEAP8[($13_1 + $1_1 | 0) >> 0] = $9_1;
                 $1_1 = $1_1 + 1 | 0;
                 if (($1_1 | 0) != ($14_1 | 0)) {
                  continue label$91
                 }
                 break label$91;
                };
                $15_1 = 1;
                $14_1 = $14_1 << 1 | 0 | 1 | 0;
                $9_1 = $1149($13_1 | 0, $14_1 | 0) | 0;
                if ($9_1) {
                 continue label$90
                }
                break label$90;
               };
               $12_1 = $13_1;
               $13_1 = 0;
               break label$8;
              }
              $1_1 = 0;
              label$95 : {
               if (!$8_1) {
                break label$95
               }
               label$96 : while (1) {
                label$97 : {
                 label$98 : {
                  $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  if (($9_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                   break label$98
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                  $9_1 = HEAPU8[$9_1 >> 0] | 0;
                  break label$97;
                 }
                 $9_1 = $1095($0_1 | 0) | 0;
                }
                label$99 : {
                 if (HEAPU8[(($9_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                  break label$99
                 }
                 $14_1 = 0;
                 $13_1 = $8_1;
                 $12_1 = $8_1;
                 break label$79;
                }
                HEAP8[($8_1 + $1_1 | 0) >> 0] = $9_1;
                $1_1 = $1_1 + 1 | 0;
                continue label$96;
               };
              }
              label$100 : while (1) {
               label$101 : {
                label$102 : {
                 $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$102
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                 $1_1 = HEAPU8[$1_1 >> 0] | 0;
                 break label$101;
                }
                $1_1 = $1095($0_1 | 0) | 0;
               }
               if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                continue label$100
               }
               break label$100;
              };
              $13_1 = 0;
              $12_1 = 0;
              $14_1 = 0;
              $1_1 = 0;
             }
             $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             label$103 : {
              i64toi32_i32$3 = $0_1;
              i64toi32_i32$1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$3 = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 0;
              if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
               $75_1 = 1
              } else {
               if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
                if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
                 $76_1 = 0
                } else {
                 $76_1 = 1
                }
                $77_1 = $76_1;
               } else {
                $77_1 = 0
               }
               $75_1 = $77_1;
              }
              if ($75_1) {
               break label$103
              }
              $9_1 = $9_1 + -1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $9_1;
             }
             i64toi32_i32$0 = $0_1;
             i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
             i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
             $653_1 = i64toi32_i32$3;
             $653$hi = i64toi32_i32$4;
             i64toi32_i32$3 = $9_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
             $658_1 = i64toi32_i32$3;
             $658$hi = i64toi32_i32$4;
             i64toi32_i32$4 = $653$hi;
             i64toi32_i32$0 = $653_1;
             i64toi32_i32$3 = $658$hi;
             i64toi32_i32$1 = $658_1;
             i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
             i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $21_1 = i64toi32_i32$2;
             $21$hi = i64toi32_i32$5;
             if (!(i64toi32_i32$2 | i64toi32_i32$5 | 0)) {
              break label$12
             }
             i64toi32_i32$5 = $20$hi;
             i64toi32_i32$5 = $21$hi;
             i64toi32_i32$4 = i64toi32_i32$2;
             i64toi32_i32$0 = $20$hi;
             i64toi32_i32$1 = $20_1;
             if (!($11_1 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0) | 0)) {
              break label$12
             }
             label$104 : {
              if (!$10_1) {
               break label$104
              }
              HEAP32[$8_1 >> 2] = $13_1;
             }
             label$105 : {
              if (($17_1 | 0) == (99 | 0)) {
               break label$105
              }
              label$106 : {
               if (!$14_1) {
                break label$106
               }
               HEAP32[($14_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
              }
              label$107 : {
               if ($12_1) {
                break label$107
               }
               $12_1 = 0;
               break label$105;
              }
              HEAP8[($12_1 + $1_1 | 0) >> 0] = 0;
             }
             $13_1 = $14_1;
            }
            i64toi32_i32$1 = $0_1;
            i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
            i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
            $686$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $19$hi;
            i64toi32_i32$5 = $686$hi;
            i64toi32_i32$1 = i64toi32_i32$4;
            i64toi32_i32$4 = $19$hi;
            i64toi32_i32$0 = $19_1;
            i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
            i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
             i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
            }
            $688$hi = i64toi32_i32$2;
            i64toi32_i32$1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
            i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
            $694_1 = i64toi32_i32$1;
            $694$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $688$hi;
            i64toi32_i32$5 = i64toi32_i32$3;
            i64toi32_i32$1 = $694$hi;
            i64toi32_i32$0 = $694_1;
            i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
            i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
            }
            $19_1 = i64toi32_i32$4;
            $19$hi = i64toi32_i32$3;
            $6_1 = $6_1 + (($8_1 | 0) != (0 | 0)) | 0;
           }
           $1_1 = $5_1 + 1 | 0;
           $5_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
           if ($5_1) {
            continue label$13
           }
           break label$3;
          };
         }
         $13_1 = $14_1;
         break label$10;
        }
        $15_1 = 1;
        $12_1 = 0;
        $13_1 = 0;
        break label$8;
       }
       $15_1 = $10_1;
       break label$7;
      }
      $15_1 = $10_1;
     }
     $6_1 = $6_1 ? $6_1 : -1;
    }
    if (!$15_1) {
     break label$3
    }
    $1148($12_1 | 0);
    $1148($13_1 | 0);
    break label$3;
   }
   $6_1 = -1;
  }
  label$108 : {
   if ($4_1) {
    break label$108
   }
   $1011($0_1 | 0);
  }
  global$0 = $3_1 + 304 | 0;
  return $6_1 | 0;
 }
 
 function $1136($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $1137($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1_1 >>> 0 > 1 >>> 0 ? ($0_1 + ($1_1 << 2 | 0) | 0) + -4 | 0 : $0_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 + 4 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1138($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0_1 >> 0] = $2_1;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0_1 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0_1 >> 2] = $2_1;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $1139($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $3_1 = $1006($3_1 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = -1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 540;
  HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
  $0_1 = $1135($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 144 | 0;
  return $0_1 | 0;
 }
 
 function $1140($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = $2_1 + 256 | 0;
  $5_1 = $1086($3_1 | 0, 0 | 0, $4_1 | 0) | 0;
  $4_1 = $5_1 ? $5_1 - $3_1 | 0 : $4_1;
  $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
  $1004($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
  $4_1 = $3_1 + $4_1 | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $2_1 | 0;
  return $2_1 | 0;
 }
 
 function $1141($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($986() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $1142($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($1056() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[($986() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($986() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $1143($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $1142($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1144() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function $1145($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[(0 + 117932 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 7 | 0) & -8 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     if ($0_1 >>> 0 <= $1_1 >>> 0) {
      break label$2
     }
    }
    if ($0_1 >>> 0 <= ($1144() | 0) >>> 0) {
     break label$1
    }
    if (fimport$266($0_1 | 0) | 0) {
     break label$1
    }
   }
   HEAP32[($986() | 0) >> 2] = 48;
   return -1 | 0;
  }
  HEAP32[(0 + 117932 | 0) >> 2] = $0_1;
  return $1_1 | 0;
 }
 
 function $1146($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $4_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $2_1 = 0, $6_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $9_1 = 0, $79_1 = 0, $183_1 = 0, $775_1 = 0, $777_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             if ($0_1 >>> 0 > 244 >>> 0) {
              break label$11
             }
             label$12 : {
              $2_1 = HEAP32[(0 + 141452 | 0) >> 2] | 0;
              $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & 504 | 0;
              $4_1 = $3_1 >>> 3 | 0;
              $0_1 = $2_1 >>> $4_1 | 0;
              if (!($0_1 & 3 | 0)) {
               break label$12
              }
              label$13 : {
               label$14 : {
                $3_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
                $4_1 = $3_1 << 3 | 0;
                $0_1 = $4_1 + 141492 | 0;
                $4_1 = HEAP32[($4_1 + 141500 | 0) >> 2] | 0;
                $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                if (($0_1 | 0) != ($5_1 | 0)) {
                 break label$14
                }
                HEAP32[(0 + 141452 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
                break label$13;
               }
               HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
               HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
              }
              $0_1 = $4_1 + 8 | 0;
              $3_1 = $3_1 << 3 | 0;
              HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              $4_1 = $4_1 + $3_1 | 0;
              HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
              break label$1;
             }
             $6_1 = HEAP32[(0 + 141460 | 0) >> 2] | 0;
             if ($3_1 >>> 0 <= $6_1 >>> 0) {
              break label$10
             }
             label$15 : {
              if (!$0_1) {
               break label$15
              }
              label$16 : {
               label$17 : {
                $79_1 = $0_1 << $4_1 | 0;
                $0_1 = 2 << $4_1 | 0;
                $4_1 = __wasm_ctz_i32($79_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0 | 0) | 0;
                $0_1 = $4_1 << 3 | 0;
                $5_1 = $0_1 + 141492 | 0;
                $0_1 = HEAP32[($0_1 + 141500 | 0) >> 2] | 0;
                $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                if (($5_1 | 0) != ($7_1 | 0)) {
                 break label$17
                }
                $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
                HEAP32[(0 + 141452 | 0) >> 2] = $2_1;
                break label$16;
               }
               HEAP32[($7_1 + 12 | 0) >> 2] = $5_1;
               HEAP32[($5_1 + 8 | 0) >> 2] = $7_1;
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              $7_1 = $0_1 + $3_1 | 0;
              $4_1 = $4_1 << 3 | 0;
              $3_1 = $4_1 - $3_1 | 0;
              HEAP32[($7_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
              HEAP32[($0_1 + $4_1 | 0) >> 2] = $3_1;
              label$18 : {
               if (!$6_1) {
                break label$18
               }
               $5_1 = ($6_1 & -8 | 0) + 141492 | 0;
               $4_1 = HEAP32[(0 + 141472 | 0) >> 2] | 0;
               label$19 : {
                label$20 : {
                 $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
                 if ($2_1 & $8_1 | 0) {
                  break label$20
                 }
                 HEAP32[(0 + 141452 | 0) >> 2] = $2_1 | $8_1 | 0;
                 $8_1 = $5_1;
                 break label$19;
                }
                $8_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
               }
               HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
               HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
               HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
               HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
              }
              $0_1 = $0_1 + 8 | 0;
              HEAP32[(0 + 141472 | 0) >> 2] = $7_1;
              HEAP32[(0 + 141460 | 0) >> 2] = $3_1;
              break label$1;
             }
             $9_1 = HEAP32[(0 + 141456 | 0) >> 2] | 0;
             if (!$9_1) {
              break label$10
             }
             $7_1 = HEAP32[(((__wasm_ctz_i32($9_1 | 0) | 0) << 2 | 0) + 141756 | 0) >> 2] | 0;
             $4_1 = ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
             $5_1 = $7_1;
             label$21 : {
              label$22 : while (1) {
               label$23 : {
                $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                if ($0_1) {
                 break label$23
                }
                $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$21
                }
               }
               $5_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $183_1 = $5_1;
               $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
               $4_1 = $5_1 ? $183_1 : $4_1;
               $7_1 = $5_1 ? $0_1 : $7_1;
               $5_1 = $0_1;
               continue label$22;
              };
             }
             $10_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
             label$24 : {
              $0_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
              if (($0_1 | 0) == ($7_1 | 0)) {
               break label$24
              }
              $5_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
              HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
              break label$2;
             }
             label$25 : {
              label$26 : {
               $5_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
               if (!$5_1) {
                break label$26
               }
               $8_1 = $7_1 + 20 | 0;
               break label$25;
              }
              $5_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
              if (!$5_1) {
               break label$9
              }
              $8_1 = $7_1 + 16 | 0;
             }
             label$27 : while (1) {
              $11_1 = $8_1;
              $0_1 = $5_1;
              $8_1 = $0_1 + 20 | 0;
              $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
              if ($5_1) {
               continue label$27
              }
              $8_1 = $0_1 + 16 | 0;
              $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
              if ($5_1) {
               continue label$27
              }
              break label$27;
             };
             HEAP32[$11_1 >> 2] = 0;
             break label$2;
            }
            $3_1 = -1;
            if ($0_1 >>> 0 > -65 >>> 0) {
             break label$10
            }
            $4_1 = $0_1 + 11 | 0;
            $3_1 = $4_1 & -8 | 0;
            $10_1 = HEAP32[(0 + 141456 | 0) >> 2] | 0;
            if (!$10_1) {
             break label$10
            }
            $6_1 = 31;
            label$28 : {
             if ($0_1 >>> 0 > 16777204 >>> 0) {
              break label$28
             }
             $0_1 = Math_clz32($4_1 >>> 8 | 0);
             $6_1 = ((($3_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
            }
            $4_1 = 0 - $3_1 | 0;
            label$29 : {
             label$30 : {
              label$31 : {
               label$32 : {
                $5_1 = HEAP32[(($6_1 << 2 | 0) + 141756 | 0) >> 2] | 0;
                if ($5_1) {
                 break label$32
                }
                $0_1 = 0;
                $8_1 = 0;
                break label$31;
               }
               $0_1 = 0;
               $7_1 = $3_1 << (($6_1 | 0) == (31 | 0) ? 0 : 25 - ($6_1 >>> 1 | 0) | 0) | 0;
               $8_1 = 0;
               label$33 : while (1) {
                label$34 : {
                 $2_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                 if ($2_1 >>> 0 >= $4_1 >>> 0) {
                  break label$34
                 }
                 $4_1 = $2_1;
                 $8_1 = $5_1;
                 if ($4_1) {
                  break label$34
                 }
                 $4_1 = 0;
                 $8_1 = $5_1;
                 $0_1 = $5_1;
                 break label$30;
                }
                $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                $11_1 = HEAP32[(($5_1 + (($7_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                $0_1 = $2_1 ? (($2_1 | 0) == ($11_1 | 0) ? $0_1 : $2_1) : $0_1;
                $7_1 = $7_1 << 1 | 0;
                $5_1 = $11_1;
                if ($5_1) {
                 continue label$33
                }
                break label$33;
               };
              }
              label$35 : {
               if ($0_1 | $8_1 | 0) {
                break label$35
               }
               $8_1 = 0;
               $0_1 = 2 << $6_1 | 0;
               $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $10_1 | 0;
               if (!$0_1) {
                break label$10
               }
               $0_1 = HEAP32[(((__wasm_ctz_i32($0_1 | 0) | 0) << 2 | 0) + 141756 | 0) >> 2] | 0;
              }
              if (!$0_1) {
               break label$29
              }
             }
             label$36 : while (1) {
              $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
              $7_1 = $2_1 >>> 0 < $4_1 >>> 0;
              label$37 : {
               $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
               if ($5_1) {
                break label$37
               }
               $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
              }
              $4_1 = $7_1 ? $2_1 : $4_1;
              $8_1 = $7_1 ? $0_1 : $8_1;
              $0_1 = $5_1;
              if ($0_1) {
               continue label$36
              }
              break label$36;
             };
            }
            if (!$8_1) {
             break label$10
            }
            if ($4_1 >>> 0 >= ((HEAP32[(0 + 141460 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
             break label$10
            }
            $11_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
            label$38 : {
             $0_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
             if (($0_1 | 0) == ($8_1 | 0)) {
              break label$38
             }
             $5_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
             HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
             HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
             break label$3;
            }
            label$39 : {
             label$40 : {
              $5_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
              if (!$5_1) {
               break label$40
              }
              $7_1 = $8_1 + 20 | 0;
              break label$39;
             }
             $5_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
             if (!$5_1) {
              break label$8
             }
             $7_1 = $8_1 + 16 | 0;
            }
            label$41 : while (1) {
             $2_1 = $7_1;
             $0_1 = $5_1;
             $7_1 = $0_1 + 20 | 0;
             $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
             if ($5_1) {
              continue label$41
             }
             $7_1 = $0_1 + 16 | 0;
             $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
             if ($5_1) {
              continue label$41
             }
             break label$41;
            };
            HEAP32[$2_1 >> 2] = 0;
            break label$3;
           }
           label$42 : {
            $0_1 = HEAP32[(0 + 141460 | 0) >> 2] | 0;
            if ($0_1 >>> 0 < $3_1 >>> 0) {
             break label$42
            }
            $4_1 = HEAP32[(0 + 141472 | 0) >> 2] | 0;
            label$43 : {
             label$44 : {
              $5_1 = $0_1 - $3_1 | 0;
              if ($5_1 >>> 0 < 16 >>> 0) {
               break label$44
              }
              $7_1 = $4_1 + $3_1 | 0;
              HEAP32[($7_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
              HEAP32[($4_1 + $0_1 | 0) >> 2] = $5_1;
              HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              break label$43;
             }
             HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
             $0_1 = $4_1 + $0_1 | 0;
             HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
             $7_1 = 0;
             $5_1 = 0;
            }
            HEAP32[(0 + 141460 | 0) >> 2] = $5_1;
            HEAP32[(0 + 141472 | 0) >> 2] = $7_1;
            $0_1 = $4_1 + 8 | 0;
            break label$1;
           }
           label$45 : {
            $7_1 = HEAP32[(0 + 141464 | 0) >> 2] | 0;
            if ($7_1 >>> 0 <= $3_1 >>> 0) {
             break label$45
            }
            $4_1 = $7_1 - $3_1 | 0;
            HEAP32[(0 + 141464 | 0) >> 2] = $4_1;
            $0_1 = HEAP32[(0 + 141476 | 0) >> 2] | 0;
            $5_1 = $0_1 + $3_1 | 0;
            HEAP32[(0 + 141476 | 0) >> 2] = $5_1;
            HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
            $0_1 = $0_1 + 8 | 0;
            break label$1;
           }
           label$46 : {
            label$47 : {
             if (!(HEAP32[(0 + 141924 | 0) >> 2] | 0)) {
              break label$47
             }
             $4_1 = HEAP32[(0 + 141932 | 0) >> 2] | 0;
             break label$46;
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = -1;
            HEAP32[(i64toi32_i32$1 + 141936 | 0) >> 2] = -1;
            HEAP32[(i64toi32_i32$1 + 141940 | 0) >> 2] = i64toi32_i32$0;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 4096;
            HEAP32[(i64toi32_i32$1 + 141928 | 0) >> 2] = 4096;
            HEAP32[(i64toi32_i32$1 + 141932 | 0) >> 2] = i64toi32_i32$0;
            HEAP32[(0 + 141924 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
            HEAP32[(0 + 141944 | 0) >> 2] = 0;
            HEAP32[(0 + 141896 | 0) >> 2] = 0;
            $4_1 = 4096;
           }
           $0_1 = 0;
           $6_1 = $3_1 + 47 | 0;
           $2_1 = $4_1 + $6_1 | 0;
           $11_1 = 0 - $4_1 | 0;
           $8_1 = $2_1 & $11_1 | 0;
           if ($8_1 >>> 0 <= $3_1 >>> 0) {
            break label$1
           }
           $0_1 = 0;
           label$48 : {
            $4_1 = HEAP32[(0 + 141892 | 0) >> 2] | 0;
            if (!$4_1) {
             break label$48
            }
            $5_1 = HEAP32[(0 + 141884 | 0) >> 2] | 0;
            $10_1 = $5_1 + $8_1 | 0;
            if ($10_1 >>> 0 <= $5_1 >>> 0) {
             break label$1
            }
            if ($10_1 >>> 0 > $4_1 >>> 0) {
             break label$1
            }
           }
           label$49 : {
            label$50 : {
             if ((HEAPU8[(0 + 141896 | 0) >> 0] | 0) & 4 | 0) {
              break label$50
             }
             label$51 : {
              label$52 : {
               label$53 : {
                label$54 : {
                 label$55 : {
                  $4_1 = HEAP32[(0 + 141476 | 0) >> 2] | 0;
                  if (!$4_1) {
                   break label$55
                  }
                  $0_1 = 141900;
                  label$56 : while (1) {
                   label$57 : {
                    $5_1 = HEAP32[$0_1 >> 2] | 0;
                    if ($4_1 >>> 0 < $5_1 >>> 0) {
                     break label$57
                    }
                    if ($4_1 >>> 0 < ($5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0) {
                     break label$54
                    }
                   }
                   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                   if ($0_1) {
                    continue label$56
                   }
                   break label$56;
                  };
                 }
                 $7_1 = $1145(0 | 0) | 0;
                 if (($7_1 | 0) == (-1 | 0)) {
                  break label$51
                 }
                 $2_1 = $8_1;
                 label$58 : {
                  $0_1 = HEAP32[(0 + 141928 | 0) >> 2] | 0;
                  $4_1 = $0_1 + -1 | 0;
                  if (!($4_1 & $7_1 | 0)) {
                   break label$58
                  }
                  $2_1 = ($8_1 - $7_1 | 0) + (($4_1 + $7_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
                 }
                 if ($2_1 >>> 0 <= $3_1 >>> 0) {
                  break label$51
                 }
                 label$59 : {
                  $0_1 = HEAP32[(0 + 141892 | 0) >> 2] | 0;
                  if (!$0_1) {
                   break label$59
                  }
                  $4_1 = HEAP32[(0 + 141884 | 0) >> 2] | 0;
                  $5_1 = $4_1 + $2_1 | 0;
                  if ($5_1 >>> 0 <= $4_1 >>> 0) {
                   break label$51
                  }
                  if ($5_1 >>> 0 > $0_1 >>> 0) {
                   break label$51
                  }
                 }
                 $0_1 = $1145($2_1 | 0) | 0;
                 if (($0_1 | 0) != ($7_1 | 0)) {
                  break label$53
                 }
                 break label$49;
                }
                $2_1 = ($2_1 - $7_1 | 0) & $11_1 | 0;
                $7_1 = $1145($2_1 | 0) | 0;
                if (($7_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
                 break label$52
                }
                $0_1 = $7_1;
               }
               if (($0_1 | 0) == (-1 | 0)) {
                break label$51
               }
               label$60 : {
                if ($2_1 >>> 0 < ($3_1 + 48 | 0) >>> 0) {
                 break label$60
                }
                $7_1 = $0_1;
                break label$49;
               }
               $4_1 = HEAP32[(0 + 141932 | 0) >> 2] | 0;
               $4_1 = (($6_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
               if (($1145($4_1 | 0) | 0 | 0) == (-1 | 0)) {
                break label$51
               }
               $2_1 = $4_1 + $2_1 | 0;
               $7_1 = $0_1;
               break label$49;
              }
              if (($7_1 | 0) != (-1 | 0)) {
               break label$49
              }
             }
             HEAP32[(0 + 141896 | 0) >> 2] = HEAP32[(0 + 141896 | 0) >> 2] | 0 | 4 | 0;
            }
            $7_1 = $1145($8_1 | 0) | 0;
            $0_1 = $1145(0 | 0) | 0;
            if (($7_1 | 0) == (-1 | 0)) {
             break label$5
            }
            if (($0_1 | 0) == (-1 | 0)) {
             break label$5
            }
            if ($7_1 >>> 0 >= $0_1 >>> 0) {
             break label$5
            }
            $2_1 = $0_1 - $7_1 | 0;
            if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
             break label$5
            }
           }
           $0_1 = (HEAP32[(0 + 141884 | 0) >> 2] | 0) + $2_1 | 0;
           HEAP32[(0 + 141884 | 0) >> 2] = $0_1;
           label$61 : {
            if ($0_1 >>> 0 <= (HEAP32[(0 + 141888 | 0) >> 2] | 0) >>> 0) {
             break label$61
            }
            HEAP32[(0 + 141888 | 0) >> 2] = $0_1;
           }
           label$62 : {
            label$63 : {
             $4_1 = HEAP32[(0 + 141476 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$63
             }
             $0_1 = 141900;
             label$64 : while (1) {
              $5_1 = HEAP32[$0_1 >> 2] | 0;
              $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($7_1 | 0) == ($5_1 + $8_1 | 0 | 0)) {
               break label$62
              }
              $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
              if ($0_1) {
               continue label$64
              }
              break label$7;
             };
            }
            label$65 : {
             label$66 : {
              $0_1 = HEAP32[(0 + 141468 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$66
              }
              if ($7_1 >>> 0 >= $0_1 >>> 0) {
               break label$65
              }
             }
             HEAP32[(0 + 141468 | 0) >> 2] = $7_1;
            }
            $0_1 = 0;
            HEAP32[(0 + 141904 | 0) >> 2] = $2_1;
            HEAP32[(0 + 141900 | 0) >> 2] = $7_1;
            HEAP32[(0 + 141484 | 0) >> 2] = -1;
            HEAP32[(0 + 141488 | 0) >> 2] = HEAP32[(0 + 141924 | 0) >> 2] | 0;
            HEAP32[(0 + 141912 | 0) >> 2] = 0;
            label$67 : while (1) {
             $4_1 = $0_1 << 3 | 0;
             $5_1 = $4_1 + 141492 | 0;
             HEAP32[($4_1 + 141500 | 0) >> 2] = $5_1;
             HEAP32[($4_1 + 141504 | 0) >> 2] = $5_1;
             $0_1 = $0_1 + 1 | 0;
             if (($0_1 | 0) != (32 | 0)) {
              continue label$67
             }
             break label$67;
            };
            $0_1 = $2_1 + -40 | 0;
            $4_1 = (-8 - $7_1 | 0) & 7 | 0;
            $5_1 = $0_1 - $4_1 | 0;
            HEAP32[(0 + 141464 | 0) >> 2] = $5_1;
            $4_1 = $7_1 + $4_1 | 0;
            HEAP32[(0 + 141476 | 0) >> 2] = $4_1;
            HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
            HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
            HEAP32[(0 + 141480 | 0) >> 2] = HEAP32[(0 + 141940 | 0) >> 2] | 0;
            break label$6;
           }
           if ($4_1 >>> 0 >= $7_1 >>> 0) {
            break label$7
           }
           if ($4_1 >>> 0 < $5_1 >>> 0) {
            break label$7
           }
           if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & 8 | 0) {
            break label$7
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
           $0_1 = (-8 - $4_1 | 0) & 7 | 0;
           $5_1 = $4_1 + $0_1 | 0;
           HEAP32[(0 + 141476 | 0) >> 2] = $5_1;
           $7_1 = (HEAP32[(0 + 141464 | 0) >> 2] | 0) + $2_1 | 0;
           $0_1 = $7_1 - $0_1 | 0;
           HEAP32[(0 + 141464 | 0) >> 2] = $0_1;
           HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
           HEAP32[(($4_1 + $7_1 | 0) + 4 | 0) >> 2] = 40;
           HEAP32[(0 + 141480 | 0) >> 2] = HEAP32[(0 + 141940 | 0) >> 2] | 0;
           break label$6;
          }
          $0_1 = 0;
          break label$2;
         }
         $0_1 = 0;
         break label$3;
        }
        label$68 : {
         if ($7_1 >>> 0 >= (HEAP32[(0 + 141468 | 0) >> 2] | 0) >>> 0) {
          break label$68
         }
         HEAP32[(0 + 141468 | 0) >> 2] = $7_1;
        }
        $5_1 = $7_1 + $2_1 | 0;
        $0_1 = 141900;
        label$69 : {
         label$70 : {
          label$71 : while (1) {
           $8_1 = HEAP32[$0_1 >> 2] | 0;
           if (($8_1 | 0) == ($5_1 | 0)) {
            break label$70
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$71
           }
           break label$69;
          };
         }
         if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
          break label$4
         }
        }
        $0_1 = 141900;
        label$72 : {
         label$73 : while (1) {
          label$74 : {
           $5_1 = HEAP32[$0_1 >> 2] | 0;
           if ($4_1 >>> 0 < $5_1 >>> 0) {
            break label$74
           }
           $5_1 = $5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
           if ($4_1 >>> 0 < $5_1 >>> 0) {
            break label$72
           }
          }
          $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          continue label$73;
         };
        }
        $0_1 = $2_1 + -40 | 0;
        $8_1 = (-8 - $7_1 | 0) & 7 | 0;
        $11_1 = $0_1 - $8_1 | 0;
        HEAP32[(0 + 141464 | 0) >> 2] = $11_1;
        $8_1 = $7_1 + $8_1 | 0;
        HEAP32[(0 + 141476 | 0) >> 2] = $8_1;
        HEAP32[($8_1 + 4 | 0) >> 2] = $11_1 | 1 | 0;
        HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 141480 | 0) >> 2] = HEAP32[(0 + 141940 | 0) >> 2] | 0;
        $0_1 = ($5_1 + ((39 - $5_1 | 0) & 7 | 0) | 0) + -47 | 0;
        $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
        HEAP32[($8_1 + 4 | 0) >> 2] = 27;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 141908 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 141912 | 0) >> 2] | 0;
        $775_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $8_1 + 16 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $775_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 141900 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 141904 | 0) >> 2] | 0;
        $777_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $8_1;
        HEAP32[($8_1 + 8 | 0) >> 2] = $777_1;
        HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[(0 + 141908 | 0) >> 2] = $8_1 + 8 | 0;
        HEAP32[(0 + 141904 | 0) >> 2] = $2_1;
        HEAP32[(0 + 141900 | 0) >> 2] = $7_1;
        HEAP32[(0 + 141912 | 0) >> 2] = 0;
        $0_1 = $8_1 + 24 | 0;
        label$75 : while (1) {
         HEAP32[($0_1 + 4 | 0) >> 2] = 7;
         $7_1 = $0_1 + 8 | 0;
         $0_1 = $0_1 + 4 | 0;
         if ($7_1 >>> 0 < $5_1 >>> 0) {
          continue label$75
         }
         break label$75;
        };
        if (($8_1 | 0) == ($4_1 | 0)) {
         break label$6
        }
        HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
        $7_1 = $8_1 - $4_1 | 0;
        HEAP32[($4_1 + 4 | 0) >> 2] = $7_1 | 1 | 0;
        HEAP32[$8_1 >> 2] = $7_1;
        label$76 : {
         label$77 : {
          if ($7_1 >>> 0 > 255 >>> 0) {
           break label$77
          }
          $0_1 = ($7_1 & -8 | 0) + 141492 | 0;
          label$78 : {
           label$79 : {
            $5_1 = HEAP32[(0 + 141452 | 0) >> 2] | 0;
            $7_1 = 1 << ($7_1 >>> 3 | 0) | 0;
            if ($5_1 & $7_1 | 0) {
             break label$79
            }
            HEAP32[(0 + 141452 | 0) >> 2] = $5_1 | $7_1 | 0;
            $5_1 = $0_1;
            break label$78;
           }
           $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          }
          HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
          HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
          $7_1 = 12;
          $8_1 = 8;
          break label$76;
         }
         $0_1 = 31;
         label$80 : {
          if ($7_1 >>> 0 > 16777215 >>> 0) {
           break label$80
          }
          $0_1 = Math_clz32($7_1 >>> 8 | 0);
          $0_1 = ((($7_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
         }
         HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
         i64toi32_i32$1 = $4_1;
         i64toi32_i32$0 = 0;
         HEAP32[($4_1 + 16 | 0) >> 2] = 0;
         HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
         $5_1 = ($0_1 << 2 | 0) + 141756 | 0;
         label$81 : {
          label$82 : {
           label$83 : {
            $8_1 = HEAP32[(0 + 141456 | 0) >> 2] | 0;
            $2_1 = 1 << $0_1 | 0;
            if ($8_1 & $2_1 | 0) {
             break label$83
            }
            HEAP32[(0 + 141456 | 0) >> 2] = $8_1 | $2_1 | 0;
            HEAP32[$5_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
            break label$82;
           }
           $0_1 = $7_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $8_1 = HEAP32[$5_1 >> 2] | 0;
           label$84 : while (1) {
            $5_1 = $8_1;
            if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($7_1 | 0)) {
             break label$81
            }
            $8_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $2_1 = ($5_1 + ($8_1 & 4 | 0) | 0) + 16 | 0;
            $8_1 = HEAP32[$2_1 >> 2] | 0;
            if ($8_1) {
             continue label$84
            }
            break label$84;
           };
           HEAP32[$2_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
          }
          $7_1 = 8;
          $8_1 = 12;
          $5_1 = $4_1;
          $0_1 = $4_1;
          break label$76;
         }
         $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
         HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
         $0_1 = 0;
         $7_1 = 24;
         $8_1 = 12;
        }
        HEAP32[($4_1 + $8_1 | 0) >> 2] = $5_1;
        HEAP32[($4_1 + $7_1 | 0) >> 2] = $0_1;
       }
       $0_1 = HEAP32[(0 + 141464 | 0) >> 2] | 0;
       if ($0_1 >>> 0 <= $3_1 >>> 0) {
        break label$5
       }
       $4_1 = $0_1 - $3_1 | 0;
       HEAP32[(0 + 141464 | 0) >> 2] = $4_1;
       $0_1 = HEAP32[(0 + 141476 | 0) >> 2] | 0;
       $5_1 = $0_1 + $3_1 | 0;
       HEAP32[(0 + 141476 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
       HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
       $0_1 = $0_1 + 8 | 0;
       break label$1;
      }
      HEAP32[($986() | 0) >> 2] = 48;
      $0_1 = 0;
      break label$1;
     }
     HEAP32[$0_1 >> 2] = $7_1;
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
     $0_1 = $1147($7_1 | 0, $8_1 | 0, $3_1 | 0) | 0;
     break label$1;
    }
    label$85 : {
     if (!$11_1) {
      break label$85
     }
     label$86 : {
      label$87 : {
       $7_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $5_1 = ($7_1 << 2 | 0) + 141756 | 0;
       if (($8_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
        break label$87
       }
       HEAP32[$5_1 >> 2] = $0_1;
       if ($0_1) {
        break label$86
       }
       $10_1 = $10_1 & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       HEAP32[(0 + 141456 | 0) >> 2] = $10_1;
       break label$85;
      }
      HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $0_1;
      if (!$0_1) {
       break label$85
      }
     }
     HEAP32[($0_1 + 24 | 0) >> 2] = $11_1;
     label$88 : {
      $5_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$88
      }
      HEAP32[($0_1 + 16 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
     }
     $5_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$85
     }
     HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
    }
    label$89 : {
     label$90 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$90
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$89;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     $7_1 = $8_1 + $3_1 | 0;
     HEAP32[($7_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($7_1 + $4_1 | 0) >> 2] = $4_1;
     label$91 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$91
      }
      $0_1 = ($4_1 & -8 | 0) + 141492 | 0;
      label$92 : {
       label$93 : {
        $3_1 = HEAP32[(0 + 141452 | 0) >> 2] | 0;
        $4_1 = 1 << ($4_1 >>> 3 | 0) | 0;
        if ($3_1 & $4_1 | 0) {
         break label$93
        }
        HEAP32[(0 + 141452 | 0) >> 2] = $3_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$92;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $7_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $7_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      break label$89;
     }
     $0_1 = 31;
     label$94 : {
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$94
      }
      $0_1 = Math_clz32($4_1 >>> 8 | 0);
      $0_1 = ((($4_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
     }
     HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$0 = 0;
     HEAP32[($7_1 + 16 | 0) >> 2] = 0;
     HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $3_1 = ($0_1 << 2 | 0) + 141756 | 0;
     label$95 : {
      label$96 : {
       label$97 : {
        $5_1 = 1 << $0_1 | 0;
        if ($10_1 & $5_1 | 0) {
         break label$97
        }
        HEAP32[(0 + 141456 | 0) >> 2] = $10_1 | $5_1 | 0;
        HEAP32[$3_1 >> 2] = $7_1;
        HEAP32[($7_1 + 24 | 0) >> 2] = $3_1;
        break label$96;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       label$98 : while (1) {
        $3_1 = $5_1;
        if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$95
        }
        $5_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $2_1 = ($3_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
        $5_1 = HEAP32[$2_1 >> 2] | 0;
        if ($5_1) {
         continue label$98
        }
        break label$98;
       };
       HEAP32[$2_1 >> 2] = $7_1;
       HEAP32[($7_1 + 24 | 0) >> 2] = $3_1;
      }
      HEAP32[($7_1 + 12 | 0) >> 2] = $7_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $7_1;
      break label$89;
     }
     $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $7_1;
     HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
     HEAP32[($7_1 + 24 | 0) >> 2] = 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($7_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$99 : {
    if (!$10_1) {
     break label$99
    }
    label$100 : {
     label$101 : {
      $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
      $5_1 = ($8_1 << 2 | 0) + 141756 | 0;
      if (($7_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
       break label$101
      }
      HEAP32[$5_1 >> 2] = $0_1;
      if ($0_1) {
       break label$100
      }
      HEAP32[(0 + 141456 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
      break label$99;
     }
     HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($7_1 | 0) ? 16 : 20) | 0) >> 2] = $0_1;
     if (!$0_1) {
      break label$99
     }
    }
    HEAP32[($0_1 + 24 | 0) >> 2] = $10_1;
    label$102 : {
     $5_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$102
     }
     HEAP32[($0_1 + 16 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
    }
    $5_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$99
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
   }
   label$103 : {
    label$104 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$104
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($7_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $7_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$103;
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    $3_1 = $7_1 + $3_1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($3_1 + $4_1 | 0) >> 2] = $4_1;
    label$105 : {
     if (!$6_1) {
      break label$105
     }
     $5_1 = ($6_1 & -8 | 0) + 141492 | 0;
     $0_1 = HEAP32[(0 + 141472 | 0) >> 2] | 0;
     label$106 : {
      label$107 : {
       $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
       if ($8_1 & $2_1 | 0) {
        break label$107
       }
       HEAP32[(0 + 141452 | 0) >> 2] = $8_1 | $2_1 | 0;
       $8_1 = $5_1;
       break label$106;
      }
      $8_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
    }
    HEAP32[(0 + 141472 | 0) >> 2] = $3_1;
    HEAP32[(0 + 141460 | 0) >> 2] = $4_1;
   }
   $0_1 = $7_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1147($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $6_1 = 0, $9_1 = 0;
  $3_1 = $0_1 + ((-8 - $0_1 | 0) & 7 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 | 3 | 0;
  $4_1 = $1_1 + ((-8 - $1_1 | 0) & 7 | 0) | 0;
  $5_1 = $3_1 + $2_1 | 0;
  $0_1 = $4_1 - $5_1 | 0;
  label$1 : {
   label$2 : {
    if (($4_1 | 0) != (HEAP32[(0 + 141476 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    HEAP32[(0 + 141476 | 0) >> 2] = $5_1;
    $2_1 = (HEAP32[(0 + 141464 | 0) >> 2] | 0) + $0_1 | 0;
    HEAP32[(0 + 141464 | 0) >> 2] = $2_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
    break label$1;
   }
   label$3 : {
    if (($4_1 | 0) != (HEAP32[(0 + 141472 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[(0 + 141472 | 0) >> 2] = $5_1;
    $2_1 = (HEAP32[(0 + 141460 | 0) >> 2] | 0) + $0_1 | 0;
    HEAP32[(0 + 141460 | 0) >> 2] = $2_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
    HEAP32[($5_1 + $2_1 | 0) >> 2] = $2_1;
    break label$1;
   }
   label$4 : {
    $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    if (($1_1 & 3 | 0 | 0) != (1 | 0)) {
     break label$4
    }
    $6_1 = $1_1 & -8 | 0;
    $2_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    label$5 : {
     label$6 : {
      if ($1_1 >>> 0 > 255 >>> 0) {
       break label$6
      }
      label$7 : {
       $7_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       if (($2_1 | 0) != ($7_1 | 0)) {
        break label$7
       }
       HEAP32[(0 + 141452 | 0) >> 2] = (HEAP32[(0 + 141452 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $1_1 >>> 3 | 0 | 0) | 0) | 0;
       break label$5;
      }
      HEAP32[($7_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $7_1;
      break label$5;
     }
     $8_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       if (($2_1 | 0) == ($4_1 | 0)) {
        break label$9
       }
       $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
       break label$8;
      }
      label$10 : {
       label$11 : {
        label$12 : {
         $1_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
         if (!$1_1) {
          break label$12
         }
         $7_1 = $4_1 + 20 | 0;
         break label$11;
        }
        $1_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
        if (!$1_1) {
         break label$10
        }
        $7_1 = $4_1 + 16 | 0;
       }
       label$13 : while (1) {
        $9_1 = $7_1;
        $2_1 = $1_1;
        $7_1 = $2_1 + 20 | 0;
        $1_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        if ($1_1) {
         continue label$13
        }
        $7_1 = $2_1 + 16 | 0;
        $1_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
        if ($1_1) {
         continue label$13
        }
        break label$13;
       };
       HEAP32[$9_1 >> 2] = 0;
       break label$8;
      }
      $2_1 = 0;
     }
     if (!$8_1) {
      break label$5
     }
     label$14 : {
      label$15 : {
       $7_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
       $1_1 = ($7_1 << 2 | 0) + 141756 | 0;
       if (($4_1 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
        break label$15
       }
       HEAP32[$1_1 >> 2] = $2_1;
       if ($2_1) {
        break label$14
       }
       HEAP32[(0 + 141456 | 0) >> 2] = (HEAP32[(0 + 141456 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$5;
      }
      HEAP32[($8_1 + ((HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) == ($4_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
      if (!$2_1) {
       break label$5
      }
     }
     HEAP32[($2_1 + 24 | 0) >> 2] = $8_1;
     label$16 : {
      $1_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$16
      }
      HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
     }
     $1_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$5
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
    }
    $0_1 = $6_1 + $0_1 | 0;
    $4_1 = $4_1 + $6_1 | 0;
    $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $1_1 & -2 | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
   HEAP32[($5_1 + $0_1 | 0) >> 2] = $0_1;
   label$17 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$17
    }
    $2_1 = ($0_1 & -8 | 0) + 141492 | 0;
    label$18 : {
     label$19 : {
      $1_1 = HEAP32[(0 + 141452 | 0) >> 2] | 0;
      $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
      if ($1_1 & $0_1 | 0) {
       break label$19
      }
      HEAP32[(0 + 141452 | 0) >> 2] = $1_1 | $0_1 | 0;
      $0_1 = $2_1;
      break label$18;
     }
     $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
    break label$1;
   }
   $2_1 = 31;
   label$20 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$20
    }
    $2_1 = Math_clz32($0_1 >>> 8 | 0);
    $2_1 = ((($0_1 >>> (38 - $2_1 | 0) | 0) & 1 | 0) - ($2_1 << 1 | 0) | 0) + 62 | 0;
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = 0;
   HEAP32[($5_1 + 20 | 0) >> 2] = 0;
   $1_1 = ($2_1 << 2 | 0) + 141756 | 0;
   label$21 : {
    label$22 : {
     label$23 : {
      $7_1 = HEAP32[(0 + 141456 | 0) >> 2] | 0;
      $4_1 = 1 << $2_1 | 0;
      if ($7_1 & $4_1 | 0) {
       break label$23
      }
      HEAP32[(0 + 141456 | 0) >> 2] = $7_1 | $4_1 | 0;
      HEAP32[$1_1 >> 2] = $5_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
      break label$22;
     }
     $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
     $7_1 = HEAP32[$1_1 >> 2] | 0;
     label$24 : while (1) {
      $1_1 = $7_1;
      if (((HEAP32[($1_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
       break label$21
      }
      $7_1 = $2_1 >>> 29 | 0;
      $2_1 = $2_1 << 1 | 0;
      $4_1 = ($1_1 + ($7_1 & 4 | 0) | 0) + 16 | 0;
      $7_1 = HEAP32[$4_1 >> 2] | 0;
      if ($7_1) {
       continue label$24
      }
      break label$24;
     };
     HEAP32[$4_1 >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $5_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $5_1;
    break label$1;
   }
   $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
   HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
   HEAP32[($5_1 + 24 | 0) >> 2] = 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  }
  return $3_1 + 8 | 0 | 0;
 }
 
 function $1148($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $4_1 = 0, $1_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 2 | 0)) {
     break label$1
    }
    $4_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $4_1 | 0;
    if ($1_1 >>> 0 < (HEAP32[(0 + 141468 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $0_1 = $4_1 + $0_1 | 0;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($1_1 | 0) == (HEAP32[(0 + 141472 | 0) >> 2] | 0 | 0)) {
         break label$6
        }
        $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        label$7 : {
         if ($4_1 >>> 0 > 255 >>> 0) {
          break label$7
         }
         $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
         if (($2_1 | 0) != ($5_1 | 0)) {
          break label$5
         }
         HEAP32[(0 + 141452 | 0) >> 2] = (HEAP32[(0 + 141452 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 >>> 3 | 0 | 0) | 0) | 0;
         break label$2;
        }
        $6_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
        label$8 : {
         if (($2_1 | 0) == ($1_1 | 0)) {
          break label$8
         }
         $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
         HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
         HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
         break label$3;
        }
        label$9 : {
         label$10 : {
          $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$10
          }
          $5_1 = $1_1 + 20 | 0;
          break label$9;
         }
         $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
         if (!$4_1) {
          break label$4
         }
         $5_1 = $1_1 + 16 | 0;
        }
        label$11 : while (1) {
         $7_1 = $5_1;
         $2_1 = $4_1;
         $5_1 = $2_1 + 20 | 0;
         $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$11
         }
         $5_1 = $2_1 + 16 | 0;
         $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$11
         }
         break label$11;
        };
        HEAP32[$7_1 >> 2] = 0;
        break label$3;
       }
       $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
        break label$2
       }
       HEAP32[(0 + 141460 | 0) >> 2] = $0_1;
       HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
       HEAP32[$3_1 >> 2] = $0_1;
       return;
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
      break label$2;
     }
     $2_1 = 0;
    }
    if (!$6_1) {
     break label$2
    }
    label$12 : {
     label$13 : {
      $5_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      $4_1 = ($5_1 << 2 | 0) + 141756 | 0;
      if (($1_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
       break label$13
      }
      HEAP32[$4_1 >> 2] = $2_1;
      if ($2_1) {
       break label$12
      }
      HEAP32[(0 + 141456 | 0) >> 2] = (HEAP32[(0 + 141456 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
      break label$2;
     }
     HEAP32[($6_1 + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
     if (!$2_1) {
      break label$2
     }
    }
    HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
    label$14 : {
     $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$14
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
    }
    $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$2
    }
    HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
   }
   if ($1_1 >>> 0 >= $3_1 >>> 0) {
    break label$1
   }
   $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($4_1 & 1 | 0)) {
    break label$1
   }
   label$15 : {
    label$16 : {
     label$17 : {
      label$18 : {
       label$19 : {
        if ($4_1 & 2 | 0) {
         break label$19
        }
        label$20 : {
         if (($3_1 | 0) != (HEAP32[(0 + 141476 | 0) >> 2] | 0 | 0)) {
          break label$20
         }
         HEAP32[(0 + 141476 | 0) >> 2] = $1_1;
         $0_1 = (HEAP32[(0 + 141464 | 0) >> 2] | 0) + $0_1 | 0;
         HEAP32[(0 + 141464 | 0) >> 2] = $0_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
         if (($1_1 | 0) != (HEAP32[(0 + 141472 | 0) >> 2] | 0 | 0)) {
          break label$1
         }
         HEAP32[(0 + 141460 | 0) >> 2] = 0;
         HEAP32[(0 + 141472 | 0) >> 2] = 0;
         return;
        }
        label$21 : {
         if (($3_1 | 0) != (HEAP32[(0 + 141472 | 0) >> 2] | 0 | 0)) {
          break label$21
         }
         HEAP32[(0 + 141472 | 0) >> 2] = $1_1;
         $0_1 = (HEAP32[(0 + 141460 | 0) >> 2] | 0) + $0_1 | 0;
         HEAP32[(0 + 141460 | 0) >> 2] = $0_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
         HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
         return;
        }
        $0_1 = ($4_1 & -8 | 0) + $0_1 | 0;
        $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        label$22 : {
         if ($4_1 >>> 0 > 255 >>> 0) {
          break label$22
         }
         label$23 : {
          $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
          if (($2_1 | 0) != ($5_1 | 0)) {
           break label$23
          }
          HEAP32[(0 + 141452 | 0) >> 2] = (HEAP32[(0 + 141452 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 >>> 3 | 0 | 0) | 0) | 0;
          break label$16;
         }
         HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
         HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
         break label$16;
        }
        $6_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
        label$24 : {
         if (($2_1 | 0) == ($3_1 | 0)) {
          break label$24
         }
         $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
         HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
         break label$17;
        }
        label$25 : {
         label$26 : {
          $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$26
          }
          $5_1 = $3_1 + 20 | 0;
          break label$25;
         }
         $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if (!$4_1) {
          break label$18
         }
         $5_1 = $3_1 + 16 | 0;
        }
        label$27 : while (1) {
         $7_1 = $5_1;
         $2_1 = $4_1;
         $5_1 = $2_1 + 20 | 0;
         $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$27
         }
         $5_1 = $2_1 + 16 | 0;
         $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$27
         }
         break label$27;
        };
        HEAP32[$7_1 >> 2] = 0;
        break label$17;
       }
       HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 & -2 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
       HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
       break label$15;
      }
      $2_1 = 0;
     }
     if (!$6_1) {
      break label$16
     }
     label$28 : {
      label$29 : {
       $5_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
       $4_1 = ($5_1 << 2 | 0) + 141756 | 0;
       if (($3_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
        break label$29
       }
       HEAP32[$4_1 >> 2] = $2_1;
       if ($2_1) {
        break label$28
       }
       HEAP32[(0 + 141456 | 0) >> 2] = (HEAP32[(0 + 141456 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$16;
      }
      HEAP32[($6_1 + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
      if (!$2_1) {
       break label$16
      }
     }
     HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     label$30 : {
      $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$30
      }
      HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
     }
     $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$16
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    if (($1_1 | 0) != (HEAP32[(0 + 141472 | 0) >> 2] | 0 | 0)) {
     break label$15
    }
    HEAP32[(0 + 141460 | 0) >> 2] = $0_1;
    return;
   }
   label$31 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$31
    }
    $2_1 = ($0_1 & -8 | 0) + 141492 | 0;
    label$32 : {
     label$33 : {
      $4_1 = HEAP32[(0 + 141452 | 0) >> 2] | 0;
      $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
      if ($4_1 & $0_1 | 0) {
       break label$33
      }
      HEAP32[(0 + 141452 | 0) >> 2] = $4_1 | $0_1 | 0;
      $0_1 = $2_1;
      break label$32;
     }
     $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $2_1 = 31;
   label$34 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$34
    }
    $2_1 = Math_clz32($0_1 >>> 8 | 0);
    $2_1 = ((($0_1 >>> (38 - $2_1 | 0) | 0) & 1 | 0) - ($2_1 << 1 | 0) | 0) + 62 | 0;
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   $3_1 = ($2_1 << 2 | 0) + 141756 | 0;
   label$35 : {
    label$36 : {
     label$37 : {
      label$38 : {
       $4_1 = HEAP32[(0 + 141456 | 0) >> 2] | 0;
       $5_1 = 1 << $2_1 | 0;
       if ($4_1 & $5_1 | 0) {
        break label$38
       }
       HEAP32[(0 + 141456 | 0) >> 2] = $4_1 | $5_1 | 0;
       $0_1 = 8;
       $2_1 = 24;
       $5_1 = $3_1;
       break label$37;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $5_1 = HEAP32[$3_1 >> 2] | 0;
      label$39 : while (1) {
       $4_1 = $5_1;
       if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$36
       }
       $5_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$39
       }
       break label$39;
      };
      $0_1 = 8;
      $2_1 = 24;
      $5_1 = $4_1;
     }
     $4_1 = $1_1;
     $7_1 = $4_1;
     break label$35;
    }
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
    $2_1 = 8;
    $3_1 = $4_1 + 8 | 0;
    $7_1 = 0;
    $0_1 = 24;
   }
   HEAP32[$3_1 >> 2] = $1_1;
   HEAP32[($1_1 + $2_1 | 0) >> 2] = $5_1;
   HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
   HEAP32[($1_1 + $0_1 | 0) >> 2] = $7_1;
   $1_1 = (HEAP32[(0 + 141484 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 141484 | 0) >> 2] = $1_1 ? $1_1 : -1;
  }
 }
 
 function $1149($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $1146($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[($986() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $1150($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $1146($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $1004($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $1148($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $1150($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $2_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & -8 | 0;
  label$1 : {
   label$2 : {
    if ($2_1 & 3 | 0) {
     break label$2
    }
    $4_1 = 0;
    if ($1_1 >>> 0 < 256 >>> 0) {
     break label$1
    }
    label$3 : {
     if ($3_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$3
     }
     $4_1 = $0_1;
     if (($3_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 141932 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$1
     }
    }
    return 0 | 0;
   }
   $5_1 = $0_1 + $3_1 | 0;
   label$4 : {
    label$5 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$5
     }
     $3_1 = $3_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$4
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $1153($1_1 | 0, $3_1 | 0);
     break label$4;
    }
    $4_1 = 0;
    label$6 : {
     if (($5_1 | 0) != (HEAP32[(0 + 141476 | 0) >> 2] | 0 | 0)) {
      break label$6
     }
     $3_1 = (HEAP32[(0 + 141464 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 <= $1_1 >>> 0) {
      break label$1
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
     $2_1 = $0_1 + $1_1 | 0;
     $1_1 = $3_1 - $1_1 | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 141464 | 0) >> 2] = $1_1;
     HEAP32[(0 + 141476 | 0) >> 2] = $2_1;
     break label$4;
    }
    label$7 : {
     if (($5_1 | 0) != (HEAP32[(0 + 141472 | 0) >> 2] | 0 | 0)) {
      break label$7
     }
     $4_1 = 0;
     $3_1 = (HEAP32[(0 + 141460 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$1
     }
     label$8 : {
      label$9 : {
       $4_1 = $3_1 - $1_1 | 0;
       if ($4_1 >>> 0 < 16 >>> 0) {
        break label$9
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
       $3_1 = $0_1 + $3_1 | 0;
       HEAP32[$3_1 >> 2] = $4_1;
       HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$8;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $3_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $3_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $4_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 141472 | 0) >> 2] = $1_1;
     HEAP32[(0 + 141460 | 0) >> 2] = $4_1;
     break label$4;
    }
    $4_1 = 0;
    $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if ($6_1 & 2 | 0) {
     break label$1
    }
    $7_1 = ($6_1 & -8 | 0) + $3_1 | 0;
    if ($7_1 >>> 0 < $1_1 >>> 0) {
     break label$1
    }
    $8_1 = $7_1 - $1_1 | 0;
    $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    label$10 : {
     label$11 : {
      if ($6_1 >>> 0 > 255 >>> 0) {
       break label$11
      }
      label$12 : {
       $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       if (($3_1 | 0) != ($4_1 | 0)) {
        break label$12
       }
       HEAP32[(0 + 141452 | 0) >> 2] = (HEAP32[(0 + 141452 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 >>> 3 | 0 | 0) | 0) | 0;
       break label$10;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
      break label$10;
     }
     $9_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$13 : {
      label$14 : {
       if (($3_1 | 0) == ($5_1 | 0)) {
        break label$14
       }
       $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
       break label$13;
      }
      label$15 : {
       label$16 : {
        label$17 : {
         $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
         if (!$4_1) {
          break label$17
         }
         $6_1 = $5_1 + 20 | 0;
         break label$16;
        }
        $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if (!$4_1) {
         break label$15
        }
        $6_1 = $5_1 + 16 | 0;
       }
       label$18 : while (1) {
        $10_1 = $6_1;
        $3_1 = $4_1;
        $6_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$18
        }
        $6_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$18
        }
        break label$18;
       };
       HEAP32[$10_1 >> 2] = 0;
       break label$13;
      }
      $3_1 = 0;
     }
     if (!$9_1) {
      break label$10
     }
     label$19 : {
      label$20 : {
       $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $4_1 = ($6_1 << 2 | 0) + 141756 | 0;
       if (($5_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
        break label$20
       }
       HEAP32[$4_1 >> 2] = $3_1;
       if ($3_1) {
        break label$19
       }
       HEAP32[(0 + 141456 | 0) >> 2] = (HEAP32[(0 + 141456 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
       break label$10;
      }
      HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $3_1;
      if (!$3_1) {
       break label$10
      }
     }
     HEAP32[($3_1 + 24 | 0) >> 2] = $9_1;
     label$21 : {
      $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$21
      }
      HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
     }
     $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$10
     }
     HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
    }
    label$22 : {
     if ($8_1 >>> 0 > 15 >>> 0) {
      break label$22
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $7_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $7_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$4;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 | 3 | 0;
    $3_1 = $0_1 + $7_1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $1153($1_1 | 0, $8_1 | 0);
   }
   $4_1 = $0_1;
  }
  return $4_1 | 0;
 }
 
 function $1151($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = 16;
  label$1 : {
   label$2 : {
    $3_1 = $0_1 >>> 0 > 16 >>> 0 ? $0_1 : 16;
    if ($3_1 & ($3_1 + -1 | 0) | 0) {
     break label$2
    }
    $0_1 = $3_1;
    break label$1;
   }
   label$3 : while (1) {
    $0_1 = $2_1;
    $2_1 = $0_1 << 1 | 0;
    if ($0_1 >>> 0 < $3_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   if ($1_1 >>> 0 < (-64 - $0_1 | 0) >>> 0) {
    break label$4
   }
   HEAP32[($986() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$5 : {
   $1_1 = $1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0;
   $2_1 = $1146(($1_1 + $0_1 | 0) + 12 | 0 | 0) | 0;
   if ($2_1) {
    break label$5
   }
   return 0 | 0;
  }
  $3_1 = $2_1 + -8 | 0;
  label$6 : {
   label$7 : {
    if (($0_1 + -1 | 0) & $2_1 | 0) {
     break label$7
    }
    $0_1 = $3_1;
    break label$6;
   }
   $4_1 = $2_1 + -4 | 0;
   $5_1 = HEAP32[$4_1 >> 2] | 0;
   $2_1 = ((($2_1 + $0_1 | 0) + -1 | 0) & (0 - $0_1 | 0) | 0) + -8 | 0;
   $0_1 = $2_1 + (($2_1 - $3_1 | 0) >>> 0 > 15 >>> 0 ? 0 : $0_1) | 0;
   $2_1 = $0_1 - $3_1 | 0;
   $6_1 = ($5_1 & -8 | 0) - $2_1 | 0;
   label$8 : {
    if ($5_1 & 3 | 0) {
     break label$8
    }
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
    HEAP32[$0_1 >> 2] = $3_1 + $2_1 | 0;
    break label$6;
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 | ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
   $6_1 = $0_1 + $6_1 | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   HEAP32[$4_1 >> 2] = $2_1 | ((HEAP32[$4_1 >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
   $6_1 = $3_1 + $2_1 | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   $1153($3_1 | 0, $2_1 | 0);
  }
  label$9 : {
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 3 | 0)) {
    break label$9
   }
   $3_1 = $2_1 & -8 | 0;
   if ($3_1 >>> 0 <= ($1_1 + 16 | 0) >>> 0) {
    break label$9
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
   $2_1 = $0_1 + $1_1 | 0;
   $1_1 = $3_1 - $1_1 | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 3 | 0;
   $3_1 = $0_1 + $3_1 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   $1153($2_1 | 0, $1_1 | 0);
  }
  return $0_1 + 8 | 0 | 0;
 }
 
 function $1152($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 | 0) != (8 | 0)) {
      break label$3
     }
     $1_1 = $1146($2_1 | 0) | 0;
     break label$2;
    }
    $3_1 = 28;
    if ($1_1 >>> 0 < 4 >>> 0) {
     break label$1
    }
    if ($1_1 & 3 | 0) {
     break label$1
    }
    $4_1 = $1_1 >>> 2 | 0;
    if ($4_1 & ($4_1 + -1 | 0) | 0) {
     break label$1
    }
    label$4 : {
     if ($2_1 >>> 0 <= (-64 - $1_1 | 0) >>> 0) {
      break label$4
     }
     return 48 | 0;
    }
    $1_1 = $1151(($1_1 >>> 0 > 16 >>> 0 ? $1_1 : 16) | 0, $2_1 | 0) | 0;
   }
   label$5 : {
    if ($1_1) {
     break label$5
    }
    return 48 | 0;
   }
   HEAP32[$0_1 >> 2] = $1_1;
   $3_1 = 0;
  }
  return $3_1 | 0;
 }
 
 function $1153($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $6_1 = 0, $7_1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 2 | 0)) {
     break label$1
    }
    $4_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $4_1 + $1_1 | 0;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $0_1 = $0_1 - $4_1 | 0;
        if (($0_1 | 0) == (HEAP32[(0 + 141472 | 0) >> 2] | 0 | 0)) {
         break label$6
        }
        $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        label$7 : {
         if ($4_1 >>> 0 > 255 >>> 0) {
          break label$7
         }
         $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
         if (($3_1 | 0) != ($5_1 | 0)) {
          break label$5
         }
         HEAP32[(0 + 141452 | 0) >> 2] = (HEAP32[(0 + 141452 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 >>> 3 | 0 | 0) | 0) | 0;
         break label$2;
        }
        $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
        label$8 : {
         if (($3_1 | 0) == ($0_1 | 0)) {
          break label$8
         }
         $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
         HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
         break label$3;
        }
        label$9 : {
         label$10 : {
          $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$10
          }
          $5_1 = $0_1 + 20 | 0;
          break label$9;
         }
         $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         if (!$4_1) {
          break label$4
         }
         $5_1 = $0_1 + 16 | 0;
        }
        label$11 : while (1) {
         $7_1 = $5_1;
         $3_1 = $4_1;
         $5_1 = $3_1 + 20 | 0;
         $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$11
         }
         $5_1 = $3_1 + 16 | 0;
         $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$11
         }
         break label$11;
        };
        HEAP32[$7_1 >> 2] = 0;
        break label$3;
       }
       $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
        break label$2
       }
       HEAP32[(0 + 141460 | 0) >> 2] = $1_1;
       HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
       HEAP32[$2_1 >> 2] = $1_1;
       return;
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
      break label$2;
     }
     $3_1 = 0;
    }
    if (!$6_1) {
     break label$2
    }
    label$12 : {
     label$13 : {
      $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      $4_1 = ($5_1 << 2 | 0) + 141756 | 0;
      if (($0_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
       break label$13
      }
      HEAP32[$4_1 >> 2] = $3_1;
      if ($3_1) {
       break label$12
      }
      HEAP32[(0 + 141456 | 0) >> 2] = (HEAP32[(0 + 141456 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
      break label$2;
     }
     HEAP32[($6_1 + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $3_1;
     if (!$3_1) {
      break label$2
     }
    }
    HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
    label$14 : {
     $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$14
     }
     HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
    }
    $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$2
    }
    HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
   }
   label$15 : {
    label$16 : {
     label$17 : {
      label$18 : {
       label$19 : {
        $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        if ($4_1 & 2 | 0) {
         break label$19
        }
        label$20 : {
         if (($2_1 | 0) != (HEAP32[(0 + 141476 | 0) >> 2] | 0 | 0)) {
          break label$20
         }
         HEAP32[(0 + 141476 | 0) >> 2] = $0_1;
         $1_1 = (HEAP32[(0 + 141464 | 0) >> 2] | 0) + $1_1 | 0;
         HEAP32[(0 + 141464 | 0) >> 2] = $1_1;
         HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
         if (($0_1 | 0) != (HEAP32[(0 + 141472 | 0) >> 2] | 0 | 0)) {
          break label$1
         }
         HEAP32[(0 + 141460 | 0) >> 2] = 0;
         HEAP32[(0 + 141472 | 0) >> 2] = 0;
         return;
        }
        label$21 : {
         if (($2_1 | 0) != (HEAP32[(0 + 141472 | 0) >> 2] | 0 | 0)) {
          break label$21
         }
         HEAP32[(0 + 141472 | 0) >> 2] = $0_1;
         $1_1 = (HEAP32[(0 + 141460 | 0) >> 2] | 0) + $1_1 | 0;
         HEAP32[(0 + 141460 | 0) >> 2] = $1_1;
         HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
         HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
         return;
        }
        $1_1 = ($4_1 & -8 | 0) + $1_1 | 0;
        $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        label$22 : {
         if ($4_1 >>> 0 > 255 >>> 0) {
          break label$22
         }
         label$23 : {
          $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
          if (($3_1 | 0) != ($5_1 | 0)) {
           break label$23
          }
          HEAP32[(0 + 141452 | 0) >> 2] = (HEAP32[(0 + 141452 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 >>> 3 | 0 | 0) | 0) | 0;
          break label$16;
         }
         HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
         break label$16;
        }
        $6_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
        label$24 : {
         if (($3_1 | 0) == ($2_1 | 0)) {
          break label$24
         }
         $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
         break label$17;
        }
        label$25 : {
         label$26 : {
          $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$26
          }
          $5_1 = $2_1 + 20 | 0;
          break label$25;
         }
         $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
         if (!$4_1) {
          break label$18
         }
         $5_1 = $2_1 + 16 | 0;
        }
        label$27 : while (1) {
         $7_1 = $5_1;
         $3_1 = $4_1;
         $5_1 = $3_1 + 20 | 0;
         $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$27
         }
         $5_1 = $3_1 + 16 | 0;
         $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if ($4_1) {
          continue label$27
         }
         break label$27;
        };
        HEAP32[$7_1 >> 2] = 0;
        break label$17;
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = $4_1 & -2 | 0;
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
       HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
       break label$15;
      }
      $3_1 = 0;
     }
     if (!$6_1) {
      break label$16
     }
     label$28 : {
      label$29 : {
       $5_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
       $4_1 = ($5_1 << 2 | 0) + 141756 | 0;
       if (($2_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
        break label$29
       }
       HEAP32[$4_1 >> 2] = $3_1;
       if ($3_1) {
        break label$28
       }
       HEAP32[(0 + 141456 | 0) >> 2] = (HEAP32[(0 + 141456 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$16;
      }
      HEAP32[($6_1 + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $3_1;
      if (!$3_1) {
       break label$16
      }
     }
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     label$30 : {
      $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$30
      }
      HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
     }
     $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$16
     }
     HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
    if (($0_1 | 0) != (HEAP32[(0 + 141472 | 0) >> 2] | 0 | 0)) {
     break label$15
    }
    HEAP32[(0 + 141460 | 0) >> 2] = $1_1;
    return;
   }
   label$31 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$31
    }
    $3_1 = ($1_1 & -8 | 0) + 141492 | 0;
    label$32 : {
     label$33 : {
      $4_1 = HEAP32[(0 + 141452 | 0) >> 2] | 0;
      $1_1 = 1 << ($1_1 >>> 3 | 0) | 0;
      if ($4_1 & $1_1 | 0) {
       break label$33
      }
      HEAP32[(0 + 141452 | 0) >> 2] = $4_1 | $1_1 | 0;
      $1_1 = $3_1;
      break label$32;
     }
     $1_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    return;
   }
   $3_1 = 31;
   label$34 : {
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$34
    }
    $3_1 = Math_clz32($1_1 >>> 8 | 0);
    $3_1 = ((($1_1 >>> (38 - $3_1 | 0) | 0) & 1 | 0) - ($3_1 << 1 | 0) | 0) + 62 | 0;
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   $4_1 = ($3_1 << 2 | 0) + 141756 | 0;
   label$35 : {
    label$36 : {
     label$37 : {
      $5_1 = HEAP32[(0 + 141456 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($5_1 & $2_1 | 0) {
       break label$37
      }
      HEAP32[(0 + 141456 | 0) >> 2] = $5_1 | $2_1 | 0;
      HEAP32[$4_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
      break label$36;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $5_1 = HEAP32[$4_1 >> 2] | 0;
     label$38 : while (1) {
      $4_1 = $5_1;
      if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$35
      }
      $5_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
      $5_1 = HEAP32[$2_1 >> 2] | 0;
      if ($5_1) {
       continue label$38
      }
      break label$38;
     };
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $1154($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $11_1 = 0, $6$hi = 0, $8$hi = 0, $16_1 = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $2_1 = 0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$1 = __wasm_i64_mul($0_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $2_1 = i64toi32_i32$1;
   if (($1_1 | $0_1 | 0) >>> 0 < 65536 >>> 0) {
    break label$1
   }
   $16_1 = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $11_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $11_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = ($11_1 | 0) != (0 | 0) ? -1 : $16_1;
  }
  label$3 : {
   $0_1 = $1146($2_1 | 0) | 0;
   if (!$0_1) {
    break label$3
   }
   if (!((HEAPU8[($0_1 + -4 | 0) >> 0] | 0) & 3 | 0)) {
    break label$3
   }
   $1006($0_1 | 0, 0 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1155($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $10$hi = 0, $10_1 = 0, $6_1 = 0, $9$hi = 0, $7_1 = 0, $5_1 = 0, $9_1 = 0, $12$hi = 0, $12_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $11_1 = 0, $11$hi = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $144_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $151_1 = 0, $152_1 = 0, $153_1 = 0, $154_1 = 0, $155_1 = 0, $156_1 = 0, $157_1 = 0, $158_1 = 0, $159_1 = 0, $20_1 = 0, $25_1 = 0, $30_1 = 0, $34_1 = 0, $40_1 = 0, $48_1 = 0, $50_1 = 0, $58_1 = 0, $58$hi = 0, $64_1 = 0, $64$hi = 0, $68_1 = 0, $68$hi = 0, $78_1 = 0, $78$hi = 0, $106_1 = 0, $109_1 = 0, $136_1 = 0, $137_1 = 0, $137$hi = 0, $138_1 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $168_1 = 0, $169_1 = 0, $169$hi = 0, $170_1 = 0, $170$hi = 0, $177$hi = 0, $180$hi = 0, $193_1 = 0, $193$hi = 0, $195$hi = 0, $199_1 = 0, $199$hi = 0, $201$hi = 0, $228_1 = 0, $228$hi = 0, $230_1 = 0, $230$hi = 0, $234_1 = 0, $234$hi = 0, $236_1 = 0, $237$hi = 0, $251_1 = 0, $251$hi = 0, $254_1 = 0, $254$hi = 0, $262$hi = 0, $265_1 = 0, $266$hi = 0, $271_1 = 0, $272_1 = 0, $272$hi = 0, $273_1 = 0, $273$hi = 0, $280$hi = 0, $283$hi = 0, $298_1 = 0, $298$hi = 0, $304_1 = 0, $305$hi = 0, $311_1 = 0, $311$hi = 0, $313$hi = 0, $314_1 = 0, $314$hi = 0, $316_1 = 0, $316$hi = 0, $343_1 = 0, $343$hi = 0, $345_1 = 0, $345$hi = 0, $349_1 = 0, $349$hi = 0, $351_1 = 0, $352$hi = 0, $358_1 = 0, $358$hi = 0, $360$hi = 0, $364_1 = 0, $364$hi = 0, $367_1 = 0, $367$hi = 0, $368$hi = 0, $377_1 = 0, $377$hi = 0, $381$hi = 0, $385_1 = 0, $386$hi = 0, $389_1 = 0, $389$hi = 0, $392_1 = 0, $392$hi = 0, $396_1 = 0, $397$hi = 0, $400_1 = 0, $400$hi = 0, $406_1 = 0, $407$hi = 0, $411_1 = 0, $412$hi = 0, $415_1 = 0, $415$hi = 0, $421_1 = 0, $422$hi = 0, $426_1 = 0, $427$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     $6_1 = !($1_1 | i64toi32_i32$1 | 0);
     $20_1 = $6_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $10_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$0 = -2147418112;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$3 = 0;
     $25_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = $10$hi;
     if (!($10_1 | i64toi32_i32$2 | 0) ? $20_1 : $25_1) {
      break label$3
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 0;
     $30_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = -2147418112;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$5 = 0;
     $34_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$4 = -2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $30_1 : $34_1) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$4 = 0;
     $40_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $10_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $6_1 : $40_1) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$1 = $3$hi;
     $48_1 = !($3_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$5 = 0;
     $50_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48_1 : $50_1) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
     $58_1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     $58$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $58$hi;
     i64toi32_i32$1 = $58_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
     $64_1 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
     $64$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$3 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $68_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $68$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $64$hi;
     i64toi32_i32$1 = $64_1;
     i64toi32_i32$5 = $68$hi;
     i64toi32_i32$4 = $68_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$2 ? 0 : $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$2 ? 0 : $1_1;
     i64toi32_i32$2 = i64toi32_i32$2 ? i64toi32_i32$3 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
    $78_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $78$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = $78$hi;
    i64toi32_i32$3 = $78_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $3_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $4$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$3 = $9_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break label$2
    }
    i64toi32_i32$1 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   $106_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$3 = $9_1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $109_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$2 = $9_1;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = $10_1;
   $7_1 = (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) | 0 ? $106_1 : $109_1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
   i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
   $9_1 = i64toi32_i32$5;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = i64toi32_i32$4 ? $4_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$5;
   $11_1 = i64toi32_i32$2;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
   $10_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $10$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$2 : i64toi32_i32$3;
   $12_1 = i64toi32_i32$1;
   $12$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $139_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $139_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $8_1 = $139_1 & 32767 | 0;
   label$8 : {
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $140_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     $140_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
    }
    $6_1 = $140_1 & 32767 | 0;
    if ($6_1) {
     break label$8
    }
    $136_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $137_1 = $9_1;
    $137$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $138_1 = $10_1;
    $138$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$2 = i64toi32_i32$3 ? $9_1 : $10_1;
    i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $141_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $141_1 = i64toi32_i32$5
    }
    $145$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $148$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $145$hi;
    i64toi32_i32$2 = $141_1;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$5 = $6_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$2 = $138$hi;
    $1156($136_1 | 0, $137_1 | 0, i64toi32_i32$0 | 0, $138_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$2;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$0;
    $9$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$1 ? $1_1 : $3_1;
   i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$1 = $12_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $1$hi = i64toi32_i32$5;
   label$9 : {
    if ($8_1) {
     break label$9
    }
    $168_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $169_1 = $3_1;
    $169$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $170_1 = $1_1;
    $170$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $1$hi;
    $7_1 = !($1_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = i64toi32_i32$0 ? $3_1 : $1_1;
    i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$1;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$3);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $142_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $142_1 = i64toi32_i32$5
    }
    $177$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $180$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $177$hi;
    i64toi32_i32$2 = $142_1;
    i64toi32_i32$3 = $180$hi;
    i64toi32_i32$5 = $7_1 << 6 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$1;
    i64toi32_i32$4 = $169$hi;
    i64toi32_i32$2 = $170$hi;
    $1156($168_1 | 0, $169_1 | 0, i64toi32_i32$4 | 0, $170_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$1 | 0;
    i64toi32_i32$0 = $5_1 + 88 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $143_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
    $143_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $193_1 = $143_1;
   $193$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $144_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $144_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
   }
   $195$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $193$hi;
   i64toi32_i32$4 = $193_1;
   i64toi32_i32$2 = $195$hi;
   i64toi32_i32$5 = $144_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $1_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $145_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $145_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $199_1 = $145_1;
   $199$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $146_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $146_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $201$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $199$hi;
   i64toi32_i32$0 = $199_1;
   i64toi32_i32$4 = $201$hi;
   i64toi32_i32$5 = $146_1;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $12_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $12$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $147_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $147_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $10_1 = $147_1;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   label$10 : {
    if (($6_1 | 0) == ($8_1 | 0)) {
     break label$10
    }
    label$11 : {
     $7_1 = $6_1 - $8_1 | 0;
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $10_1 = 1;
     $10$hi = i64toi32_i32$2;
     break label$10;
    }
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$4 = $1$hi;
    $1156($5_1 + 64 | 0 | 0, $10_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$4 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    $1166($5_1 + 48 | 0 | 0, $10_1 | 0, i64toi32_i32$4 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $228_1 = i64toi32_i32$2;
    $228$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $230_1 = i64toi32_i32$4;
    $230$hi = i64toi32_i32$2;
    i64toi32_i32$0 = (i64toi32_i32$0 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $234_1 = i64toi32_i32$2;
    $234$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $230$hi;
    i64toi32_i32$0 = $230_1;
    i64toi32_i32$2 = $234$hi;
    i64toi32_i32$5 = $234_1;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    $236_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $237$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $228$hi;
    i64toi32_i32$5 = $228_1;
    i64toi32_i32$2 = $237$hi;
    i64toi32_i32$0 = $236_1;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$2 = 524288;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
   $12_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $12$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 3;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    $148_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
    $148_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
   }
   $9_1 = $148_1;
   $9$hi = i64toi32_i32$4;
   label$12 : {
    label$13 : {
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $149_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $150_1 = 0
       } else {
        $150_1 = 1
       }
       $151_1 = $150_1;
      } else {
       $151_1 = 0
      }
      $149_1 = $151_1;
     }
     if ($149_1) {
      break label$13
     }
     i64toi32_i32$2 = 0;
     $3_1 = 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $251_1 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $251$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $254_1 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
     $254$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $251$hi;
     i64toi32_i32$4 = $251_1;
     i64toi32_i32$2 = $254$hi;
     i64toi32_i32$5 = $254_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     if (!(i64toi32_i32$4 | i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0)) {
      break label$1
     }
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
     $262$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$5 = $10_1;
     $265_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $266$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $262$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$3 = $266$hi;
     i64toi32_i32$2 = $265_1;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = 524287;
     i64toi32_i32$2 = -1;
     if (i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
      break label$12
     }
     $271_1 = $5_1 + 32 | 0;
     i64toi32_i32$1 = $2$hi;
     $272_1 = $2_1;
     $272$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$4;
     $273_1 = i64toi32_i32$0;
     $273$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     $7_1 = !(i64toi32_i32$0 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $2_1 : i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$2);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $152_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $152_1 = i64toi32_i32$1
     }
     $280$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $283$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $280$hi;
     i64toi32_i32$5 = $152_1;
     i64toi32_i32$2 = $283$hi;
     i64toi32_i32$1 = $7_1 << 6 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $7_1 = i64toi32_i32$4 + -12 | 0;
     i64toi32_i32$0 = $272$hi;
     i64toi32_i32$5 = $273$hi;
     $1156($271_1 | 0, $272_1 | 0, i64toi32_i32$0 | 0, $273_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$3 = $5_1 + 40 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$5;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$0;
     $2$hi = i64toi32_i32$5;
     break label$12;
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$1 = $12_1;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $298_1 = i64toi32_i32$2;
    $298$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$1 = $10_1;
    $304_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $305$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $298$hi;
    i64toi32_i32$1 = $298_1;
    i64toi32_i32$2 = $305$hi;
    i64toi32_i32$5 = $304_1;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = 1048576;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    if (!(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$1 | 0)) {
     break label$12
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $153_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
     $153_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    $311_1 = $153_1;
    $311$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 63;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $154_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $154_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $313$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $311$hi;
    i64toi32_i32$4 = $311_1;
    i64toi32_i32$1 = $313$hi;
    i64toi32_i32$5 = $154_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $314_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $314$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
    $316_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $316$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $314$hi;
    i64toi32_i32$1 = $314_1;
    i64toi32_i32$0 = $316$hi;
    i64toi32_i32$5 = $316_1;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $2$hi = i64toi32_i32$0;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $155_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     $155_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $155_1;
    $4$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$0 = $11_1;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
   $10_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $10$hi = i64toi32_i32$4;
   label$14 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    break label$1;
   }
   $7_1 = 0;
   label$15 : {
    label$16 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break label$16
     }
     $7_1 = $6_1;
     break label$15;
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $4$hi;
    $1156($5_1 + 16 | 0 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    $1166($5_1 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $343_1 = i64toi32_i32$0;
    $343$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
    $345_1 = i64toi32_i32$1;
    $345$hi = i64toi32_i32$0;
    i64toi32_i32$4 = (i64toi32_i32$4 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $349_1 = i64toi32_i32$0;
    $349$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $345$hi;
    i64toi32_i32$4 = $345_1;
    i64toi32_i32$0 = $349$hi;
    i64toi32_i32$5 = $349_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    $351_1 = (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$1 = 0;
    $352$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $343$hi;
    i64toi32_i32$5 = $343_1;
    i64toi32_i32$0 = $352$hi;
    i64toi32_i32$4 = $351_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 3;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $156_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    $156_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $358_1 = $156_1;
   $358$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 61;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    $157_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $157_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
   }
   $360$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $358$hi;
   i64toi32_i32$0 = $358_1;
   i64toi32_i32$5 = $360$hi;
   i64toi32_i32$4 = $157_1;
   i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
   $3_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 48;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $158_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $158_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $364_1 = $158_1;
   $364$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 3;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $159_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $159_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
   }
   i64toi32_i32$0 = $159_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$4 = -1;
   i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $367_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $367$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $364$hi;
   i64toi32_i32$1 = $364_1;
   i64toi32_i32$0 = $367$hi;
   i64toi32_i32$4 = $367_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $368$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$0 = $368$hi;
   i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$4 = $10_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   $6_1 = $2_1 & 7 | 0;
   label$17 : {
    label$18 : {
     label$19 : {
      switch ($1164() | 0 | 0) {
      case 0:
       label$22 : {
        if (($6_1 | 0) == (4 | 0)) {
         break label$22
        }
        i64toi32_i32$1 = $4$hi;
        $377_1 = $4_1;
        $377$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = 0;
        $381$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$5 = $381$hi;
        i64toi32_i32$4 = $6_1 >>> 0 > 4 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
        }
        $10_1 = i64toi32_i32$2;
        $10$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$4 = $3_1;
        $385_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$1 = 0;
        $386$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $377$hi;
        i64toi32_i32$4 = $377_1;
        i64toi32_i32$3 = $386$hi;
        i64toi32_i32$0 = $385_1;
        i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        $3_1 = $10_1;
        $3$hi = i64toi32_i32$2;
        break label$18;
       }
       i64toi32_i32$2 = $4$hi;
       $389_1 = $4_1;
       $389$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$1 = $3_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
       $392_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
       $392$hi = i64toi32_i32$4;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $392$hi;
       i64toi32_i32$0 = $392_1;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $10_1 = i64toi32_i32$3;
       $10$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$4 = i64toi32_i32$3;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$0 = $3_1;
       $396_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $397$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $389$hi;
       i64toi32_i32$0 = $389_1;
       i64toi32_i32$5 = $397$hi;
       i64toi32_i32$2 = $396_1;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $4_1 = i64toi32_i32$1;
       $4$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $10$hi;
       $3_1 = $10_1;
       $3$hi = i64toi32_i32$3;
       break label$17;
      case 1:
       i64toi32_i32$3 = $4$hi;
       $400_1 = $4_1;
       $400$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$4 = $10_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$2 = 0;
       $406_1 = ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $407$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$3 = $407$hi;
       i64toi32_i32$0 = $406_1;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $10_1 = i64toi32_i32$5;
       $10$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$0 = $3_1;
       $411_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $412$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $400$hi;
       i64toi32_i32$0 = $400_1;
       i64toi32_i32$1 = $412$hi;
       i64toi32_i32$2 = $411_1;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $4_1 = i64toi32_i32$3;
       $4$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $10$hi;
       $3_1 = $10_1;
       $3$hi = i64toi32_i32$5;
       break label$18;
      case 2:
       break label$19;
      default:
       break label$18;
      };
     }
     i64toi32_i32$5 = $4$hi;
     $415_1 = $4_1;
     $415$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $10$hi;
     $421_1 = !($10_1 | i64toi32_i32$5 | 0) & ($6_1 | 0) != (0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $422$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $422$hi;
     i64toi32_i32$2 = $421_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $426_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $427$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $415$hi;
     i64toi32_i32$2 = $415_1;
     i64toi32_i32$3 = $427$hi;
     i64toi32_i32$4 = $426_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     $3_1 = $10_1;
     $3$hi = i64toi32_i32$1;
    }
    if (!$6_1) {
     break label$1
    }
   }
   $1165() | 0;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $1156($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $1157($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $51_1 = 0, $51$hi = 0, $54_1 = 0, $54$hi = 0, $59_1 = 0, $70_1 = 0, $70$hi = 0, $73_1 = 0, $73$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    label$4 : {
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
      $38_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $39_1 = 0
       } else {
        $39_1 = 1
       }
       $41_1 = $39_1;
      } else {
       $41_1 = 0
      }
      $38_1 = $41_1;
     }
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = $3_1;
     if (!((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1)) {
      break label$4
     }
     return -1 | 0;
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $51_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $51$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $54_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $54$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $51$hi;
    i64toi32_i32$0 = $51_1;
    i64toi32_i32$3 = $54$hi;
    i64toi32_i32$1 = $54_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   label$5 : {
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $59_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
     $42_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $43_1 = 0
      } else {
       $43_1 = 1
      }
      $44_1 = $43_1;
     } else {
      $44_1 = 0
     }
     $42_1 = $44_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if (!((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $59_1 : $42_1)) {
     break label$5
    }
    return -1 | 0;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $70_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $70$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $73_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $73$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $70$hi;
   i64toi32_i32$0 = $70_1;
   i64toi32_i32$3 = $73$hi;
   i64toi32_i32$1 = $73_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $1158($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $1159($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $11$hi = 0, i64toi32_i32$6 = 0, $11_1 = 0, $10$hi = 0, $13$hi = 0, $10_1 = 0, $16$hi = 0, $12$hi = 0, $13_1 = 0, $17$hi = 0, $21$hi = 0, $12_1 = 0, $6_1 = 0, $16_1 = 0, $21_1 = 0, $14$hi = 0, $15$hi = 0, $8_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $15_1 = 0, $18_1 = 0, $22_1 = 0, $22$hi = 0, $24$hi = 0, $9_1 = 0, $19_1 = 0, $19$hi = 0, $322_1 = 0, $323_1 = 0, $7_1 = 0, $324_1 = 0, $325_1 = 0, $326_1 = 0, $327_1 = 0, $328_1 = 0, $329_1 = 0, $331_1 = 0, $332_1 = 0, $333_1 = 0, $334_1 = 0, $336_1 = 0, $337_1 = 0, $338_1 = 0, $339_1 = 0, $341_1 = 0, $342_1 = 0, $344_1 = 0, $345_1 = 0, $20_1 = 0, $20$hi = 0, $346_1 = 0, $347_1 = 0, $348_1 = 0, $350_1 = 0, $351_1 = 0, $352_1 = 0, $353_1 = 0, $355_1 = 0, $23_1 = 0, $23$hi = 0, $356_1 = 0, $357_1 = 0, $358_1 = 0, $359_1 = 0, $24_1 = 0, $360_1 = 0, $362_1 = 0, $363_1 = 0, $364_1 = 0, $365_1 = 0, $368_1 = 0, $369_1 = 0, $371_1 = 0, $372_1 = 0, $374_1 = 0, $375_1 = 0, $376_1 = 0, $377_1 = 0, $378_1 = 0, $380_1 = 0, $381_1 = 0, $382_1 = 0, $51_1 = 0, $55_1 = 0, $62_1 = 0, $66_1 = 0, $75_1 = 0, $75$hi = 0, $80_1 = 0, $80$hi = 0, $88_1 = 0, $88$hi = 0, $110_1 = 0, $111_1 = 0, $111$hi = 0, $112_1 = 0, $112$hi = 0, $119$hi = 0, $122$hi = 0, $137_1 = 0, $138_1 = 0, $138$hi = 0, $139_1 = 0, $139$hi = 0, $146$hi = 0, $149$hi = 0, $164_1 = 0, $166_1 = 0, $166$hi = 0, $170$hi = 0, $181_1 = 0, $181$hi = 0, $182$hi = 0, $185_1 = 0, $188_1 = 0, $188$hi = 0, $193$hi = 0, $203_1 = 0, $203$hi = 0, $204$hi = 0, $206_1 = 0, $209_1 = 0, $209$hi = 0, $214$hi = 0, $224_1 = 0, $224$hi = 0, $225$hi = 0, $227_1 = 0, $230_1 = 0, $230$hi = 0, $235$hi = 0, $245_1 = 0, $245$hi = 0, $246$hi = 0, $248_1 = 0, $249_1 = 0, $249$hi = 0, $252_1 = 0, $252$hi = 0, $257$hi = 0, $262_1 = 0, $264$hi = 0, $267_1 = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $272$hi = 0, $279_1 = 0, $279$hi = 0, $283_1 = 0, $284$hi = 0, $285$hi = 0, $287_1 = 0, $288$hi = 0, $289$hi = 0, $290$hi = 0, $294$hi = 0, $305_1 = 0, $305$hi = 0, $308_1 = 0, $308$hi = 0, $314$hi = 0, $315_1 = 0, $315$hi = 0, $321_1 = 0, $321$hi = 0, $330_1 = 0, $330$hi = 0, $335_1 = 0, $335$hi = 0, $340_1 = 0, $340$hi = 0, $342$hi = 0, $343_1 = 0, $343$hi = 0, $345$hi = 0, $346$hi = 0, $349_1 = 0, $350$hi = 0, $351$hi = 0, $354_1 = 0, $355$hi = 0, $361_1 = 0, $361$hi = 0, $366_1 = 0, $366$hi = 0, $367_1 = 0, $367$hi = 0, $370_1 = 0, $370$hi = 0, $373_1 = 0, $373$hi = 0, $375$hi = 0, $379_1 = 0, $379$hi = 0, $383_1 = 0, $384$hi = 0, $385$hi = 0, $388_1 = 0, $388$hi = 0, $389_1 = 0, $389$hi = 0, $396_1 = 0, $396$hi = 0, $402_1 = 0, $402$hi = 0, $404$hi = 0, $405_1 = 0, $405$hi = 0, $406_1 = 0, $406$hi = 0, $407_1 = 0, $407$hi = 0, $409$hi = 0, $413_1 = 0, $414$hi = 0, $415_1 = 0, $415$hi = 0, $416_1 = 0, $416$hi = 0, $425_1 = 0, $425$hi = 0, $429_1 = 0, $430_1 = 0, $430$hi = 0, $436_1 = 0, $436$hi = 0, $440_1 = 0, $441$hi = 0, $442$hi = 0, $446_1 = 0, $447$hi = 0, $448_1 = 0, $448$hi = 0, $449_1 = 0, $449$hi = 0, $456_1 = 0, $456$hi = 0, $461_1 = 0, $461$hi = 0, $466_1 = 0, $466$hi = 0, $469_1 = 0, $469$hi = 0, $472_1 = 0, $473$hi = 0, $476_1 = 0, $477$hi = 0, $478$hi = 0, $481_1 = 0, $482$hi = 0, $484$hi = 0, $485_1 = 0, $485$hi = 0, $489_1 = 0, $490$hi = 0, $491_1 = 0, $491$hi = 0, $492_1 = 0, $492$hi = 0, $493_1 = 0, $493$hi = 0, $500_1 = 0, $500$hi = 0, $503_1 = 0, $503$hi = 0, $506_1 = 0, $508$hi = 0, $509_1 = 0, $509$hi = 0, $514_1 = 0, $514$hi = 0, $515_1 = 0, $515$hi = 0, $517$hi = 0, $518$hi = 0, $520_1 = 0, $521$hi = 0, $522$hi = 0, $526_1 = 0, $527$hi = 0, $541$hi = 0, $545_1 = 0, $545$hi = 0, $546$hi = 0, $550_1 = 0, $551$hi = 0, $558_1 = 0, $560_1 = 0, $560$hi = 0, $562$hi = 0, $564_1 = 0, $564$hi = 0, $571$hi = 0, $575_1 = 0, $575$hi = 0, $576$hi = 0, $580_1 = 0, $581$hi = 0, $595_1 = 0, $595$hi = 0, $597$hi = 0, $601$hi = 0, $603_1 = 0, $603$hi = 0, $636_1 = 0, $636$hi = 0, $641_1 = 0, $641$hi = 0, $645$hi = 0, $646_1 = 0, $646$hi = 0, $647_1 = 0, $647$hi = 0, $650_1 = 0, $650$hi = 0, $654_1 = 0, $655$hi = 0, $667_1 = 0, $667$hi = 0, $668_1 = 0, $668$hi = 0, $676_1 = 0, $680_1 = 0, $681$hi = 0, $685_1 = 0, $689_1 = 0, $690$hi = 0, $694_1 = 0, $695$hi = 0, $697_1 = 0, $697$hi = 0, $700_1 = 0, $703_1 = 0, $703$hi = 0, $704_1 = 0, $711_1 = 0, $716_1 = 0, $717$hi = 0, $721_1 = 0, $722$hi = 0, $724_1 = 0, $724$hi = 0, $727_1 = 0, $730_1 = 0, $730$hi = 0, $731_1 = 0, $737_1 = 0, $742_1 = 0, $743$hi = 0, $747_1 = 0, $748$hi = 0, $749$hi = 0;
  $5_1 = global$0 - 336 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $322_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $322_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $322_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $323_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $323_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $323_1 & 32767 | 0;
     if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$0 = $1$hi;
     $51_1 = !($1_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     $55_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $51_1 : $55_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $12$hi = i64toi32_i32$0;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$0 = $3$hi;
     $62_1 = !($3_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $62_1 : $66_1) {
      break label$5
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $75_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
     $75$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = $75$hi;
     i64toi32_i32$2 = $75_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $80_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $80$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $80$hi;
      i64toi32_i32$0 = $80_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 2147450880;
      $12_1 = 0;
      $12$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$3;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $88_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $88$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $88$hi;
     i64toi32_i32$0 = $88_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$9 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = 2147450880;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $12_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
     $12_1 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    $8_1 = 0;
    label$11 : {
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$2 = 65535;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$11
     }
     $110_1 = $5_1 + 320 | 0;
     i64toi32_i32$1 = $1$hi;
     $111_1 = $1_1;
     $111$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     $112_1 = $11_1;
     $112$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $11$hi;
     $8_1 = !($11_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $8_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$3 ? $1_1 : $11_1;
     i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$0;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $324_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $324_1 = i64toi32_i32$1
     }
     $119$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $122$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $119$hi;
     i64toi32_i32$2 = $324_1;
     i64toi32_i32$4 = $122$hi;
     i64toi32_i32$1 = $8_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$0;
     i64toi32_i32$5 = $111$hi;
     i64toi32_i32$2 = $112$hi;
     $1156($110_1 | 0, $111_1 | 0, i64toi32_i32$5 | 0, $112_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$0 | 0;
     i64toi32_i32$3 = $5_1 + 328 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$2;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$2
    }
    $137_1 = $5_1 + 304 | 0;
    i64toi32_i32$3 = $3$hi;
    $138_1 = $3_1;
    $138$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $10$hi;
    $139_1 = $10_1;
    $139$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $10_1;
    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$2;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $325_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
    } else {
     $325_1 = i64toi32_i32$3
    }
    $146$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $149$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $146$hi;
    i64toi32_i32$5 = $325_1;
    i64toi32_i32$1 = $149$hi;
    i64toi32_i32$3 = $9_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $9_1 = i64toi32_i32$2;
    i64toi32_i32$0 = $138$hi;
    i64toi32_i32$5 = $139$hi;
    $1156($137_1 | 0, $138_1 | 0, i64toi32_i32$0 | 0, $139_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = (i64toi32_i32$2 + $8_1 | 0) + -16 | 0;
    i64toi32_i32$4 = $5_1 + 312 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$5;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$5;
   }
   $164_1 = $5_1 + 288 | 0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 49;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $326_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    $326_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $166_1 = $326_1;
   $166$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$5 = $10_1;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $14_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$4;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 15;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    $327_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $327_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   }
   $170$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $166$hi;
   i64toi32_i32$4 = $166_1;
   i64toi32_i32$0 = $170$hi;
   i64toi32_i32$3 = $327_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 1963258675;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = 0;
   $1168($164_1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$5 = ($5_1 + 288 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $181_1 = i64toi32_i32$3;
   $181$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $181$hi;
   i64toi32_i32$2 = $181_1;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
   $182$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $182$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = 0;
   $1168($5_1 + 272 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $185_1 = $5_1 + 256 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $328_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $328_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $188_1 = $328_1;
   $188$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5_1 + 272 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $329_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $329_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $193$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $188$hi;
   i64toi32_i32$5 = $188_1;
   i64toi32_i32$0 = $193$hi;
   i64toi32_i32$1 = $329_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   $1168($185_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5_1 + 256 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $203_1 = i64toi32_i32$1;
   $203$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $203$hi;
   i64toi32_i32$0 = $203_1;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
   $204$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $204$hi;
   i64toi32_i32$0 = 0;
   $1168($5_1 + 240 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $206_1 = $5_1 + 224 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 63;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $331_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $331_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
   }
   $209_1 = $331_1;
   $209$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5_1 + 240 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $332_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
    $332_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $214$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $209$hi;
   i64toi32_i32$5 = $209_1;
   i64toi32_i32$2 = $214$hi;
   i64toi32_i32$4 = $332_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = 0;
   $1168($206_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$5 = ($5_1 + 224 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $224_1 = i64toi32_i32$4;
   $224$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $224$hi;
   i64toi32_i32$2 = $224_1;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   $225$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $225$hi;
   i64toi32_i32$2 = 0;
   $1168($5_1 + 208 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $227_1 = $5_1 + 192 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $333_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $333_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $230_1 = $333_1;
   $230$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5_1 + 208 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $334_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $334_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $235$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $230$hi;
   i64toi32_i32$5 = $230_1;
   i64toi32_i32$0 = $235$hi;
   i64toi32_i32$3 = $334_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = 0;
   $1168($227_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5_1 + 192 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $245_1 = i64toi32_i32$3;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $245$hi;
   i64toi32_i32$0 = $245_1;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
   $246$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $246$hi;
   i64toi32_i32$0 = 0;
   $1168($5_1 + 176 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $248_1 = $5_1 + 160 | 0;
   i64toi32_i32$0 = $2$hi;
   $249_1 = $2_1;
   $249$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $336_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $336_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $252_1 = $336_1;
   $252$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5_1 + 176 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $337_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $337_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $257$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $252$hi;
   i64toi32_i32$5 = $252_1;
   i64toi32_i32$2 = $257$hi;
   i64toi32_i32$1 = $337_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $249$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = 0;
   $1168($248_1 | 0, $249_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $262_1 = $5_1 + 144 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    $338_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $338_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $264$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $264$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = 0;
   $1168($262_1 | 0, $338_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   $267_1 = $5_1 + 112 | 0;
   i64toi32_i32$4 = i64toi32_i32$1;
   $268_1 = $4_1;
   $268$hi = i64toi32_i32$1;
   i64toi32_i32$0 = ($5_1 + 160 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $272_1 = i64toi32_i32$4;
   $272$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$0 = (i64toi32_i32$0 + 144 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $279_1 = i64toi32_i32$4;
   $279$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$4 = $279$hi;
   i64toi32_i32$2 = $279_1;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $283_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $284$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $272$hi;
   i64toi32_i32$2 = $272_1;
   i64toi32_i32$3 = $284$hi;
   i64toi32_i32$0 = $283_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $285$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   $287_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $288$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $285$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$5 = $288$hi;
   i64toi32_i32$2 = $287_1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $289$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $289$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   $290$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $268$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = $290$hi;
   i64toi32_i32$2 = 0;
   $1168($267_1 | 0, $268_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $294$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $294$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = 0;
   $1168($5_1 + 128 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
   label$12 : {
    label$13 : {
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $339_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $339_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $16_1 = $339_1;
     $16$hi = i64toi32_i32$3;
     $305_1 = $16_1;
     $305$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $341_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $341_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $308_1 = $341_1;
     $308$hi = i64toi32_i32$3;
     i64toi32_i32$1 = ($5_1 + 128 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $342_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $342_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $314$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $308$hi;
     i64toi32_i32$2 = $308_1;
     i64toi32_i32$1 = $314$hi;
     i64toi32_i32$5 = $342_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $315_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $315$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $305$hi;
     i64toi32_i32$3 = $305_1;
     i64toi32_i32$2 = $315$hi;
     i64toi32_i32$5 = $315_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $13_1 = i64toi32_i32$4;
     $13$hi = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = -13927;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $18_1 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $344_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $344_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $2_1 = $344_1;
     $2$hi = i64toi32_i32$1;
     $321_1 = $2_1;
     $321$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$0 = 65536;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $19_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $345_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $345_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     }
     $20_1 = $345_1;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $346_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $346_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $4_1 = $346_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $321$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($321_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$0;
     $21$hi = i64toi32_i32$1;
     $330_1 = i64toi32_i32$0;
     $330$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      $347_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $347_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $22_1 = $347_1;
     $22$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $348_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $348_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $10_1 = $348_1;
     $10$hi = i64toi32_i32$4;
     $335_1 = $10_1;
     $335$hi = i64toi32_i32$4;
     i64toi32_i32$0 = ($5_1 + 112 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $350_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $350_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $340_1 = $350_1;
     $340$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$1 = $15_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $351_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $351_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $342$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $340$hi;
     i64toi32_i32$4 = $340_1;
     i64toi32_i32$1 = $342$hi;
     i64toi32_i32$5 = $351_1;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $343_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $343$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$0 = $17_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $352_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $352_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $345$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $343$hi;
     i64toi32_i32$1 = $343_1;
     i64toi32_i32$0 = $345$hi;
     i64toi32_i32$5 = $352_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $346$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$5 = $16_1;
     $349_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $350$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $346$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = $350$hi;
     i64toi32_i32$1 = $349_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$4 = $18_1;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$1 = $13_1;
     $354_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $355$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $351$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$3 = $355$hi;
     i64toi32_i32$5 = $354_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $353_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $353_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     $13_1 = $353_1;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $335$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = __wasm_i64_mul($335_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $361_1 = i64toi32_i32$0;
     $361$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $330$hi;
     i64toi32_i32$2 = $330_1;
     i64toi32_i32$0 = $361$hi;
     i64toi32_i32$5 = $361_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$5 = $21_1;
     i64toi32_i32$4 = 0;
     $366_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     $366$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$3;
     $367_1 = i64toi32_i32$1;
     $367$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $15_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $15_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $15$hi = i64toi32_i32$3;
     $370_1 = $15_1;
     $370$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $355_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      $355_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $23_1 = $355_1;
     $23$hi = i64toi32_i32$5;
     $373_1 = $23_1;
     $373$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $356_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $356_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $375$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $373$hi;
     i64toi32_i32$5 = $373_1;
     i64toi32_i32$3 = $375$hi;
     i64toi32_i32$2 = $356_1;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $370$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = __wasm_i64_mul($370_1 | 0, i64toi32_i32$5 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $379_1 = i64toi32_i32$4;
     $379$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $367$hi;
     i64toi32_i32$3 = $367_1;
     i64toi32_i32$4 = $379$hi;
     i64toi32_i32$2 = $379_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $17_1 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     $383_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $384$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $366$hi;
     i64toi32_i32$2 = $366_1;
     i64toi32_i32$1 = $384$hi;
     i64toi32_i32$3 = $383_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $385$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $388_1 = i64toi32_i32$2;
     $388$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $385$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $388$hi;
     i64toi32_i32$3 = $388_1;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $389_1 = i64toi32_i32$1;
     $389$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $396_1 = i64toi32_i32$5;
     $396$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$0 = $21_1;
     i64toi32_i32$5 = $396$hi;
     i64toi32_i32$3 = $396_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $16_1 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$3 = $21_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $357_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
      $357_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $402_1 = $357_1;
     $402$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $358_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $358_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $404$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $402$hi;
     i64toi32_i32$1 = $402_1;
     i64toi32_i32$4 = $404$hi;
     i64toi32_i32$0 = $358_1;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $405_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $405$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $389$hi;
     i64toi32_i32$3 = $389_1;
     i64toi32_i32$1 = $405$hi;
     i64toi32_i32$0 = $405_1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $406_1 = i64toi32_i32$5;
     $406$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     $407_1 = $17_1;
     $407$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $359_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $359_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $409$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $407$hi;
     i64toi32_i32$2 = $407_1;
     i64toi32_i32$4 = $409$hi;
     i64toi32_i32$0 = $359_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$0 = $17_1;
     $413_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $414$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $406$hi;
     i64toi32_i32$0 = $406_1;
     i64toi32_i32$5 = $414$hi;
     i64toi32_i32$2 = $413_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $415_1 = i64toi32_i32$4;
     $415$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     $416_1 = $16_1;
     $416$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$3;
     $21$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $425_1 = i64toi32_i32$3;
     $425$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$1 = $21_1;
     i64toi32_i32$3 = $425$hi;
     i64toi32_i32$2 = $425_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $17_1 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$2 = $21_1;
     $429_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $430_1 = $429_1;
     $430$hi = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$2 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = -2;
     i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     $21_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $436_1 = i64toi32_i32$2;
     $436$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$2 = $436$hi;
     i64toi32_i32$1 = $436_1;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $24_1 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = $17_1;
     $440_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $441$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $430$hi;
     i64toi32_i32$1 = $430_1;
     i64toi32_i32$5 = $441$hi;
     i64toi32_i32$0 = $440_1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $442$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $416$hi;
     i64toi32_i32$4 = $416_1;
     i64toi32_i32$1 = $442$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $17_1 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$0 = $16_1;
     $446_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $447$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $415$hi;
     i64toi32_i32$0 = $415_1;
     i64toi32_i32$2 = $447$hi;
     i64toi32_i32$4 = $446_1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $448_1 = i64toi32_i32$1;
     $448$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     $449_1 = $17_1;
     $449$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $456_1 = i64toi32_i32$0;
     $456$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = $16_1;
     i64toi32_i32$0 = $456$hi;
     i64toi32_i32$4 = $456_1;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $461_1 = i64toi32_i32$3;
     $461$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = $461$hi;
     i64toi32_i32$4 = $461_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $466_1 = i64toi32_i32$5;
     $466$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = $466$hi;
     i64toi32_i32$4 = $466_1;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $13_1 = i64toi32_i32$3;
     $13$hi = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $360_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      $360_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     $469_1 = $360_1;
     $469$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     $472_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $473$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$2 = $4_1;
     $476_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $477$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $473$hi;
     i64toi32_i32$2 = $472_1;
     i64toi32_i32$0 = $477$hi;
     i64toi32_i32$1 = $476_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $478$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = $11_1;
     $481_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $482$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $478$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$3 = $482$hi;
     i64toi32_i32$2 = $481_1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $362_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
      $362_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $484$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $469$hi;
     i64toi32_i32$5 = $469_1;
     i64toi32_i32$4 = $484$hi;
     i64toi32_i32$2 = $362_1;
     i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
     $485_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $485$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $449$hi;
     i64toi32_i32$1 = $449_1;
     i64toi32_i32$5 = $485$hi;
     i64toi32_i32$2 = $485_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$2 = $17_1;
     $489_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $490$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $448$hi;
     i64toi32_i32$2 = $448_1;
     i64toi32_i32$0 = $490$hi;
     i64toi32_i32$1 = $489_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $491_1 = i64toi32_i32$5;
     $491$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $492_1 = $4_1;
     $492$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $24$hi;
     $493_1 = $24_1;
     $493$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $500_1 = i64toi32_i32$2;
     $500$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = $500$hi;
     i64toi32_i32$1 = $500_1;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $363_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $363_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     $503_1 = $363_1;
     $503$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     $506_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = $506_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      $364_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
      $364_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     }
     $508$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $503$hi;
     i64toi32_i32$5 = $503_1;
     i64toi32_i32$1 = $508$hi;
     i64toi32_i32$3 = $364_1;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $509_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $509$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $493$hi;
     i64toi32_i32$4 = $493_1;
     i64toi32_i32$5 = $509$hi;
     i64toi32_i32$3 = $509_1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$3 = $24_1;
     i64toi32_i32$1 = 0;
     $514_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     $514$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$0;
     $515_1 = i64toi32_i32$2;
     $515$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $365_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
      $365_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $517$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $515$hi;
     i64toi32_i32$1 = $515_1;
     i64toi32_i32$3 = $517$hi;
     i64toi32_i32$4 = $365_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $518$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $518$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2_1;
     $520_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $521$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $514$hi;
     i64toi32_i32$4 = $514_1;
     i64toi32_i32$2 = $521$hi;
     i64toi32_i32$1 = $520_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $522$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $492$hi;
     i64toi32_i32$0 = $492_1;
     i64toi32_i32$4 = $522$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     $526_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $527$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $491$hi;
     i64toi32_i32$1 = $491_1;
     i64toi32_i32$3 = $527$hi;
     i64toi32_i32$0 = $526_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = 131071;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$13
     }
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$1 = $23_1;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $19_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $19$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $14$hi;
     $1168($5_1 + 80 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 49;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $368_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $368_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $541$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($5_1 + 80 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $545_1 = i64toi32_i32$5;
     $545$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $541$hi;
     i64toi32_i32$1 = $368_1;
     i64toi32_i32$5 = $545$hi;
     i64toi32_i32$2 = $545_1;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     $546$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     $550_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = 0;
     $551$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $546$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$1 = $551$hi;
     i64toi32_i32$4 = $550_1;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$3;
     $6_1 = $6_1 + 16382 | 0;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$1;
     $11$hi = i64toi32_i32$5;
     break label$12;
    }
    $558_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $369_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $369_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $560_1 = $369_1;
    $560$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
     $371_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
     $371_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    }
    $562$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $560$hi;
    i64toi32_i32$0 = $560_1;
    i64toi32_i32$5 = $562$hi;
    i64toi32_i32$4 = $371_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $2_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$5;
    $564_1 = $2_1;
    $564$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $372_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $372_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $372_1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$0 = $564$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    $1168($558_1 | 0, $564_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $374_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $374_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $571$hi = i64toi32_i32$5;
    i64toi32_i32$4 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $575_1 = i64toi32_i32$5;
    $575$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $571$hi;
    i64toi32_i32$4 = $374_1;
    i64toi32_i32$5 = $575$hi;
    i64toi32_i32$0 = $575_1;
    i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $576$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$4;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    $580_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$3 = 0;
    $581$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $576$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$4 = $581$hi;
    i64toi32_i32$1 = $580_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$5;
    $10$hi = i64toi32_i32$2;
    $6_1 = $6_1 + 16383 | 0;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $11_1 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $22_1 = $1_1;
    $22$hi = i64toi32_i32$5;
   }
   label$14 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $12$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$3;
    break label$1;
   }
   label$15 : {
    label$16 : {
     if (($6_1 | 0) < (1 | 0)) {
      break label$16
     }
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $375_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $375_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $595_1 = $375_1;
     $595$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 63;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $376_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $376_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $597$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $595$hi;
     i64toi32_i32$2 = $595_1;
     i64toi32_i32$3 = $597$hi;
     i64toi32_i32$1 = $376_1;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $1_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 48;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $377_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $377_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $601$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $603_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $603$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $601$hi;
     i64toi32_i32$2 = $377_1;
     i64toi32_i32$3 = $603$hi;
     i64toi32_i32$1 = $603_1;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $378_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $378_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $4_1 = $378_1;
     $4$hi = i64toi32_i32$2;
     break label$15;
    }
    label$17 : {
     if (($6_1 | 0) > (-113 | 0)) {
      break label$17
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$5 = $4$hi;
    $1166($5_1 + 64 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$2 = $19$hi;
    $1156($5_1 + 48 | 0 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$2 | 0, $6_1 + 112 | 0 | 0);
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$5;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$5;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$1 = $10$hi;
    $1168($5_1 + 32 | 0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $636_1 = i64toi32_i32$1;
    $636$hi = i64toi32_i32$3;
    i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $380_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $380_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $641_1 = $380_1;
    $641$hi = i64toi32_i32$3;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $381_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $381_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $645$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $641$hi;
    i64toi32_i32$5 = $641_1;
    i64toi32_i32$1 = $645$hi;
    i64toi32_i32$2 = $381_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $646_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $646$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $636$hi;
    i64toi32_i32$3 = $636_1;
    i64toi32_i32$5 = $646$hi;
    i64toi32_i32$2 = $646_1;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
    $647_1 = i64toi32_i32$0;
    $647$hi = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$3;
    $650_1 = i64toi32_i32$4;
    $650$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     $382_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
     $382_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
    }
    $11_1 = $382_1;
    $11$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $650$hi;
    i64toi32_i32$3 = $650_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$2 = $11_1;
    $654_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $655$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $647$hi;
    i64toi32_i32$2 = $647_1;
    i64toi32_i32$4 = $655$hi;
    i64toi32_i32$1 = $654_1;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$5;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $1168($5_1 + 16 | 0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$3 | 0, 3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   $1168($5_1 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $14_1 | 0, i64toi32_i32$0 | 0, 5 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$5 = $10$hi;
   $667_1 = $10_1;
   $667$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   $668_1 = $2_1;
   $668$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
   $11_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   $11$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$5 = $11_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$1 = $3_1;
   $676_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$5 = $11_1;
   $680_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $681$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$3 = $681$hi;
   i64toi32_i32$4 = $680_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$4 = $14_1;
   $685_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$5 = $14_1;
   $689_1 = (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $676_1 : $685_1;
   i64toi32_i32$4 = 0;
   $690$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $668$hi;
   i64toi32_i32$5 = $668_1;
   i64toi32_i32$1 = $690$hi;
   i64toi32_i32$2 = $689_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = $2_1;
   $694_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $695$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $667$hi;
   i64toi32_i32$2 = $667_1;
   i64toi32_i32$0 = $695$hi;
   i64toi32_i32$5 = $694_1;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$3;
   $697_1 = i64toi32_i32$1;
   $697$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$2 = 2147418112;
   i64toi32_i32$5 = 0;
   $700_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
   $703_1 = i64toi32_i32$4;
   $703$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$4 = $703$hi;
   i64toi32_i32$2 = $703_1;
   $704_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$2 = ($5_1 + 16 | 0) + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $711_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$5 = $2_1;
   $716_1 = $700_1 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) | 0 ? $704_1 : $711_1) | 0;
   i64toi32_i32$4 = 0;
   $717$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$2 = $717$hi;
   i64toi32_i32$3 = $716_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   $721_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $722$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $697$hi;
   i64toi32_i32$3 = $697_1;
   i64toi32_i32$1 = $722$hi;
   i64toi32_i32$5 = $721_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3_1 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$0;
   $724_1 = i64toi32_i32$2;
   $724$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$5 = 0;
   $727_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $730_1 = i64toi32_i32$4;
   $730$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$4 = $730$hi;
   i64toi32_i32$3 = $730_1;
   $731_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$3 = $5_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   $737_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4_1;
   $742_1 = $727_1 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) | 0 ? $731_1 : $737_1) | 0;
   i64toi32_i32$4 = 0;
   $743$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = $743$hi;
   i64toi32_i32$0 = $742_1;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $747_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $748$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $724$hi;
   i64toi32_i32$0 = $724_1;
   i64toi32_i32$2 = $748$hi;
   i64toi32_i32$5 = $747_1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $749$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = $749$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $12_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $12$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 336 | 0;
 }
 
 function $1160($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $2_1 = 0, $7$hi = 0, $7_1 = 0, $4_1 = 0, $4$hi = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $3_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $36$hi = 0, $40_1 = 0, $61_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $66$hi = 0, $68_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  wasm2js_scratch_store_f64(+$1_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 1048575;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $28_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $28_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$1 = $28_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 2047;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $6_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $6$hi = i64toi32_i32$0;
    if (!($6_1 | i64toi32_i32$0 | 0)) {
     break label$2
    }
    label$3 : {
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 2047;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 4;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $29_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $29_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $29_1;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 60;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $30_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $30_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $5_1 = $30_1;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 15360;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $6_1 = i64toi32_i32$4;
     $6$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $31_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $7_1 = $31_1;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
     $32_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
     $32_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    }
    $5_1 = $32_1;
    $5$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $6_1 = 32767;
    $6$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    break label$1;
   }
   $35_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $36_1 = $5_1;
   $36$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   $40_1 = Math_clz32($4_1) + 32 | 0;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $33_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    $33_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
   }
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$1 = 0;
   $3_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0 ? $40_1 : Math_clz32($33_1);
   i64toi32_i32$3 = $36$hi;
   i64toi32_i32$5 = 0;
   $1156($35_1 | 0, $36_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = 0;
   $6_1 = 15372 - $3_1 | 0;
   $6$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
   $7_1 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   $7$hi = i64toi32_i32$5;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  $61_1 = i64toi32_i32$5;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = 48;
  i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
   $34_1 = 0;
  } else {
   i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
   $34_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
  }
  $63$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
  $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
  $65$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $63$hi;
  i64toi32_i32$5 = $34_1;
  i64toi32_i32$1 = $65$hi;
  i64toi32_i32$0 = $65_1;
  i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
  $66$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = $66$hi;
  i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
  i64toi32_i32$5 = $7$hi;
  i64toi32_i32$0 = $7_1;
  i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
  $68_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
  i64toi32_i32$3 = $61_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $68_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1161($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $2_1 = 0, $7$hi = 0, $7_1 = 0, $8_1 = 0, $8$hi = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $36_1 = 0, $51_1 = 0, $54_1 = 0, $54$hi = 0, $58$hi = 0, $59$hi = 0, $61_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
  $4_1 = $3_1 & 8388607 | 0;
  label$1 : {
   label$2 : {
    $5_1 = $3_1 >>> 23 | 0;
    $6_1 = $5_1 & 255 | 0;
    if (!$6_1) {
     break label$2
    }
    label$3 : {
     if (($6_1 | 0) == (255 | 0)) {
      break label$3
     }
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 25;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $23_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $23_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $7_1 = $23_1;
     $7$hi = i64toi32_i32$1;
     $4_1 = ($5_1 & 255 | 0) + 16256 | 0;
     i64toi32_i32$1 = 0;
     $8_1 = 0;
     $8$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $24_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $7_1 = $24_1;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$2;
    $4_1 = 32767;
    break label$1;
   }
   label$4 : {
    if ($4_1) {
     break label$4
    }
    i64toi32_i32$2 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$2;
    $4_1 = 0;
    i64toi32_i32$2 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 0;
   $36_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$0 = 0;
   $1156($2_1 | 0, $36_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 + 81 | 0 | 0);
   $4_1 = 16265 - $4_1 | 0;
   i64toi32_i32$1 = $2_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $7_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $51_1 = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $25_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $54_1 = $25_1;
  $54$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $3_1 >>> 31 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $26_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $26_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $58$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $54$hi;
  i64toi32_i32$0 = $54_1;
  i64toi32_i32$1 = $58$hi;
  i64toi32_i32$3 = $26_1;
  i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
  $59$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = $59$hi;
  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $61_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $51_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $61_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1162($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $32_1 = 0, $32$hi = 0, $36$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 ^ $3_1 | 0) - $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $1156($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27_1;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32_1 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32_1;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1163($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $20_1 = 0, $20$hi = 0, $24$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $1_1;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$1 = 0;
   $1156($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 112 - ($1_1 ^ 31 | 0) | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $20_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $20$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $20$hi;
   i64toi32_i32$1 = $20_1;
   i64toi32_i32$0 = $24$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1164() {
  return 0 | 0;
 }
 
 function $1165() {
  return 0 | 0;
 }
 
 function $1166($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $1167($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $14$hi = 0, $5_1 = 0, $11$hi = 0, $11_1 = 0, $14_1 = 0, $10$hi = 0, $12$hi = 0, $6_1 = 0, $18$hi = 0, $12_1 = 0, $10_1 = 0, $8_1 = 0, $15$hi = 0, $18_1 = 0, $7_1 = 0, $16$hi = 0, $17$hi = 0, $20$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $17_1 = 0, $20_1 = 0, $15_1 = 0, $21$hi = 0, $9_1 = 0, $19$hi = 0, $22$hi = 0, $23$hi = 0, $24$hi = 0, $220_1 = 0, $221_1 = 0, $223_1 = 0, $224_1 = 0, $226_1 = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $231_1 = 0, $232_1 = 0, $19_1 = 0, $233_1 = 0, $234_1 = 0, $21_1 = 0, $235_1 = 0, $237_1 = 0, $22_1 = 0, $239_1 = 0, $240_1 = 0, $24_1 = 0, $241_1 = 0, $242_1 = 0, $243_1 = 0, $245_1 = 0, $246_1 = 0, $247_1 = 0, $248_1 = 0, $250_1 = 0, $251_1 = 0, $252_1 = 0, $253_1 = 0, $254_1 = 0, $255_1 = 0, $256_1 = 0, $257_1 = 0, $258_1 = 0, $53_1 = 0, $57_1 = 0, $64_1 = 0, $68_1 = 0, $77_1 = 0, $77$hi = 0, $89_1 = 0, $89$hi = 0, $111_1 = 0, $112_1 = 0, $112$hi = 0, $113_1 = 0, $113$hi = 0, $120$hi = 0, $123$hi = 0, $140_1 = 0, $141_1 = 0, $141$hi = 0, $142_1 = 0, $142$hi = 0, $149$hi = 0, $152$hi = 0, $170_1 = 0, $170$hi = 0, $175_1 = 0, $175$hi = 0, $182_1 = 0, $182$hi = 0, $189_1 = 0, $189$hi = 0, $194_1 = 0, $194$hi = 0, $203_1 = 0, $203$hi = 0, $205_1 = 0, $205$hi = 0, $207_1 = 0, $207$hi = 0, $215_1 = 0, $215$hi = 0, $217_1 = 0, $217$hi = 0, $219_1 = 0, $219$hi = 0, $222_1 = 0, $224$hi = 0, $225_1 = 0, $225$hi = 0, $227_1 = 0, $227$hi = 0, $236_1 = 0, $236$hi = 0, $238_1 = 0, $238$hi = 0, $244_1 = 0, $244$hi = 0, $249_1 = 0, $249$hi = 0, $252$hi = 0, $23_1 = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $273_1 = 0, $273$hi = 0, $277_1 = 0, $277$hi = 0, $281_1 = 0, $282$hi = 0, $283$hi = 0, $286_1 = 0, $286$hi = 0, $287_1 = 0, $287$hi = 0, $288_1 = 0, $288$hi = 0, $291_1 = 0, $292$hi = 0, $295_1 = 0, $296$hi = 0, $297$hi = 0, $301_1 = 0, $302$hi = 0, $303_1 = 0, $303$hi = 0, $310_1 = 0, $310$hi = 0, $314_1 = 0, $316_1 = 0, $316$hi = 0, $318$hi = 0, $319_1 = 0, $319$hi = 0, $320_1 = 0, $320$hi = 0, $321_1 = 0, $321$hi = 0, $323$hi = 0, $327_1 = 0, $328$hi = 0, $329_1 = 0, $329$hi = 0, $330_1 = 0, $330$hi = 0, $332_1 = 0, $332$hi = 0, $335_1 = 0, $336$hi = 0, $339_1 = 0, $340$hi = 0, $341$hi = 0, $344_1 = 0, $345$hi = 0, $347$hi = 0, $348_1 = 0, $348$hi = 0, $352_1 = 0, $353$hi = 0, $354_1 = 0, $354$hi = 0, $355_1 = 0, $355$hi = 0, $358_1 = 0, $359$hi = 0, $362_1 = 0, $363$hi = 0, $364$hi = 0, $368_1 = 0, $369$hi = 0, $379_1 = 0, $379$hi = 0, $381$hi = 0, $384_1 = 0, $384$hi = 0, $386$hi = 0, $390_1 = 0, $390$hi = 0, $392$hi = 0, $426_1 = 0, $426$hi = 0, $428_1 = 0, $428$hi = 0, $429_1 = 0, $429$hi = 0, $431_1 = 0, $431$hi = 0, $435_1 = 0, $435$hi = 0, $437_1 = 0, $438$hi = 0, $443_1 = 0, $443$hi = 0, $447_1 = 0, $447$hi = 0, $456$hi = 0, $458_1 = 0, $458$hi = 0, $464_1 = 0, $470_1 = 0, $470$hi = 0, $474_1 = 0, $475$hi = 0, $479_1 = 0, $479$hi = 0, $483_1 = 0, $483$hi = 0, $486_1 = 0, $486$hi = 0, $490_1 = 0, $491$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $12_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $220_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $220_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $13_1 = $220_1;
  $13$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $221_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $221_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $221_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $223_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $223_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $223_1 & 32767 | 0;
     if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$1 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $14_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     $57_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $53_1 : $57_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$1;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$1 = $3$hi;
     $64_1 = !($3_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     $68_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0 ? $64_1 : $68_1) {
      break label$5
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $77_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $77$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = $77$hi;
     i64toi32_i32$0 = $77_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $89_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $89$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$2 = $89$hi;
     i64toi32_i32$1 = $89_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     label$9 : {
      i64toi32_i32$2 = $2$hi;
      if (!!($2_1 | i64toi32_i32$2 | 0)) {
       break label$9
      }
      i64toi32_i32$2 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    $8_1 = 0;
    label$12 : {
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$12
     }
     $111_1 = $5_1 + 80 | 0;
     i64toi32_i32$2 = $1$hi;
     $112_1 = $1_1;
     $112$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     $113_1 = $12_1;
     $113$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $12$hi;
     $8_1 = !($12_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $12_1;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
     i64toi32_i32$2 = Math_clz32(i64toi32_i32$0);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$2 | 0) == (32 | 0)) {
      $224_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $224_1 = i64toi32_i32$2
     }
     $120$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $123$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $120$hi;
     i64toi32_i32$3 = $224_1;
     i64toi32_i32$0 = $123$hi;
     i64toi32_i32$2 = $8_1 << 6 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$1;
     i64toi32_i32$5 = $112$hi;
     i64toi32_i32$3 = $113$hi;
     $1156($111_1 | 0, $112_1 | 0, i64toi32_i32$5 | 0, $113_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$1 | 0;
     i64toi32_i32$4 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $12_1 = i64toi32_i32$3;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $226_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $226_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $13_1 = $226_1;
     $13$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$2
    }
    $140_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $141_1 = $3_1;
    $141$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $142_1 = $10_1;
    $142$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$3 = i64toi32_i32$0 ? $3_1 : $10_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $228_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $228_1 = i64toi32_i32$5
    }
    $149$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $152$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $149$hi;
    i64toi32_i32$3 = $228_1;
    i64toi32_i32$2 = $152$hi;
    i64toi32_i32$5 = $9_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$1 = $141$hi;
    i64toi32_i32$3 = $142$hi;
    $1156($140_1 | 0, $141_1 | 0, i64toi32_i32$1 | 0, $142_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$0 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$3;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $229_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
    $229_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $14_1 = $229_1;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $14_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$0;
   $170_1 = $2_1;
   $170$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $230_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $230_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $4_1 = $230_1;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $170$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($170_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $15_1 = i64toi32_i32$1;
   $15$hi = i64toi32_i32$3;
   $175_1 = i64toi32_i32$1;
   $175$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $231_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    $231_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
   }
   $14_1 = $231_1;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $182_1 = i64toi32_i32$3;
   $182$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $175$hi;
   i64toi32_i32$1 = $175_1;
   i64toi32_i32$3 = $182$hi;
   i64toi32_i32$5 = $182_1;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $232_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $232_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $17_1 = $232_1;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $189_1 = i64toi32_i32$0;
   $189$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $17$hi;
   i64toi32_i32$4 = $17_1;
   i64toi32_i32$0 = $189$hi;
   i64toi32_i32$5 = $189_1;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $18_1 = i64toi32_i32$3;
   $18$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$4 = $17$hi;
   i64toi32_i32$5 = $17_1;
   i64toi32_i32$1 = 0;
   $194_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $194$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $12_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $203_1 = i64toi32_i32$5;
   $203$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$5 = $203$hi;
   i64toi32_i32$4 = $203_1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $17_1 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$3;
   $205_1 = i64toi32_i32$0;
   $205$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 49;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $233_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
    $233_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
   }
   $207_1 = $233_1;
   $207$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    $234_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $234_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
   }
   $20_1 = $234_1;
   $20$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $207$hi;
   i64toi32_i32$1 = $207_1;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$4 = $20_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $3_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $215_1 = i64toi32_i32$2;
   $215$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $205$hi;
   i64toi32_i32$3 = $205_1;
   i64toi32_i32$2 = $215$hi;
   i64toi32_i32$4 = $215_1;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $21_1 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$0;
   $217_1 = i64toi32_i32$5;
   $217$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $16_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $235_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $235_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $219_1 = $235_1;
   $219$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$0 = $16_1;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$4 = $15_1;
   $222_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = $222_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
    $237_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $237_1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
   }
   $224$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $219$hi;
   i64toi32_i32$0 = $219_1;
   i64toi32_i32$4 = $224$hi;
   i64toi32_i32$1 = $237_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $225_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $225$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $217$hi;
   i64toi32_i32$3 = $217_1;
   i64toi32_i32$0 = $225$hi;
   i64toi32_i32$1 = $225_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$5;
   $227_1 = i64toi32_i32$2;
   $227$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $13$hi;
   i64toi32_i32$4 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $10_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $10$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $22_1 = i64toi32_i32$4;
   $22$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$4 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $236_1 = i64toi32_i32$4;
   $236$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$5 = $22_1;
   i64toi32_i32$4 = $236$hi;
   i64toi32_i32$1 = $236_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $13_1 = i64toi32_i32$0;
   $13$hi = i64toi32_i32$2;
   $238_1 = i64toi32_i32$0;
   $238$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $239_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $239_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   i64toi32_i32$2 = $239_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = -2147483648;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $244_1 = i64toi32_i32$2;
   $244$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $238$hi;
   i64toi32_i32$5 = $238_1;
   i64toi32_i32$2 = $244$hi;
   i64toi32_i32$1 = $244_1;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $15_1 = i64toi32_i32$4;
   $15$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $249_1 = i64toi32_i32$5;
   $249$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$5 = $249$hi;
   i64toi32_i32$1 = $249_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $20_1 = i64toi32_i32$2;
   $20$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
    $240_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
    $240_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $252$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $227$hi;
   i64toi32_i32$4 = $227_1;
   i64toi32_i32$0 = $252$hi;
   i64toi32_i32$1 = $240_1;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $23_1 = i64toi32_i32$5;
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $194$hi;
   i64toi32_i32$3 = $194_1;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$5;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $24_1 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$5 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $268_1 = i64toi32_i32$3;
     $268$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$2 = $24_1;
     i64toi32_i32$3 = $268$hi;
     i64toi32_i32$1 = $268_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$1 = $24_1;
     $272_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $273_1 = $272_1;
     $273$hi = i64toi32_i32$5;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $277_1 = i64toi32_i32$0;
     $277$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = $277$hi;
     i64toi32_i32$2 = $277_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $14_1 = i64toi32_i32$3;
     $14$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $14$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     $281_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $282$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $273$hi;
     i64toi32_i32$2 = $273_1;
     i64toi32_i32$4 = $282$hi;
     i64toi32_i32$1 = $281_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $283$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $286_1 = i64toi32_i32$2;
     $286$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$2 = $286$hi;
     i64toi32_i32$1 = $286_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $287_1 = i64toi32_i32$4;
     $287$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $14$hi;
     $288_1 = $14_1;
     $288$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19_1;
     $291_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $292$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$1 = $21_1;
     i64toi32_i32$5 = $17_1;
     $295_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $296$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $292$hi;
     i64toi32_i32$5 = $291_1;
     i64toi32_i32$3 = $296$hi;
     i64toi32_i32$0 = $295_1;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $297$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $288$hi;
     i64toi32_i32$1 = $288_1;
     i64toi32_i32$5 = $297$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$0 = $14_1;
     $301_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $302$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $287$hi;
     i64toi32_i32$0 = $287_1;
     i64toi32_i32$2 = $302$hi;
     i64toi32_i32$1 = $301_1;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $303_1 = i64toi32_i32$5;
     $303$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $310_1 = i64toi32_i32$0;
     $310$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $310$hi;
     i64toi32_i32$1 = $310_1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $314_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = $314_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $241_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $241_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $316_1 = $241_1;
     $316$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $242_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $242_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $318$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $316$hi;
     i64toi32_i32$5 = $316_1;
     i64toi32_i32$3 = $318$hi;
     i64toi32_i32$4 = $242_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $319_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $319$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $303$hi;
     i64toi32_i32$1 = $303_1;
     i64toi32_i32$5 = $319$hi;
     i64toi32_i32$4 = $319_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $320_1 = i64toi32_i32$0;
     $320$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     $321_1 = $4_1;
     $321$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $243_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
      $243_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $323$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $321$hi;
     i64toi32_i32$2 = $321_1;
     i64toi32_i32$3 = $323$hi;
     i64toi32_i32$4 = $243_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$4 = $4_1;
     $327_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $328$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $320$hi;
     i64toi32_i32$4 = $320_1;
     i64toi32_i32$0 = $328$hi;
     i64toi32_i32$2 = $327_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $329_1 = i64toi32_i32$3;
     $329$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     $330_1 = $2_1;
     $330$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$1 = $20_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $245_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $245_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     $332_1 = $245_1;
     $332$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$5 = $13_1;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$2 = $22_1;
     $335_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $336$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$2 = $15_1;
     i64toi32_i32$1 = $13_1;
     $339_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $340$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $336$hi;
     i64toi32_i32$1 = $335_1;
     i64toi32_i32$5 = $340$hi;
     i64toi32_i32$4 = $339_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $341$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$2 = $20_1;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$4 = $15_1;
     $344_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $345$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $341$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$3 = $345$hi;
     i64toi32_i32$1 = $344_1;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      $246_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $246_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     }
     $347$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $332$hi;
     i64toi32_i32$0 = $332_1;
     i64toi32_i32$2 = $347$hi;
     i64toi32_i32$1 = $246_1;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $348_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $348$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $330$hi;
     i64toi32_i32$4 = $330_1;
     i64toi32_i32$0 = $348$hi;
     i64toi32_i32$1 = $348_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$1 = $2_1;
     $352_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $353$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $329$hi;
     i64toi32_i32$1 = $329_1;
     i64toi32_i32$5 = $353$hi;
     i64toi32_i32$4 = $352_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $354_1 = i64toi32_i32$0;
     $354$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $355_1 = $4_1;
     $355$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$4 = $21_1;
     $358_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $359$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$4 = $23_1;
     i64toi32_i32$1 = $16_1;
     $362_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $363$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $359$hi;
     i64toi32_i32$1 = $358_1;
     i64toi32_i32$2 = $363$hi;
     i64toi32_i32$3 = $362_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $364$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $355$hi;
     i64toi32_i32$4 = $355_1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$3 = $4_1;
     $368_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $369$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $354$hi;
     i64toi32_i32$3 = $354_1;
     i64toi32_i32$5 = $369$hi;
     i64toi32_i32$4 = $368_1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = 65536;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$4 | 0 | i64toi32_i32$3 | 0)) {
      break label$14
     }
     $6_1 = $6_1 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $247_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
     $247_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    $3_1 = $247_1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $248_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $248_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $379_1 = $248_1;
    $379$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $250_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     $250_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
    }
    $381$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $379$hi;
    i64toi32_i32$2 = $379_1;
    i64toi32_i32$0 = $381$hi;
    i64toi32_i32$4 = $250_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $251_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $251_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $384_1 = $251_1;
    $384$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $252_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     $252_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
    }
    $386$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $384$hi;
    i64toi32_i32$2 = $384_1;
    i64toi32_i32$0 = $386$hi;
    i64toi32_i32$4 = $252_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$3 = $18_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $253_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $253_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $18_1 = $253_1;
    $18$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    $390_1 = $3_1;
    $390$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $254_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
     $254_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $392$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $390$hi;
    i64toi32_i32$2 = $390_1;
    i64toi32_i32$0 = $392$hi;
    i64toi32_i32$4 = $254_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $1$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $11_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$2;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 > 127 >>> 0) {
       break label$18
      }
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $1$hi;
      $6_1 = $6_1 + 127 | 0;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $1$hi;
      $1156($5_1 + 48 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $6_1 | 0);
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      $1156($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $6_1 | 0);
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $1$hi;
      $1166($5_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0);
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      $1166($5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
      $426_1 = i64toi32_i32$2;
      $426$hi = i64toi32_i32$3;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
      $428_1 = i64toi32_i32$3;
      $428$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $426$hi;
      i64toi32_i32$0 = $426_1;
      i64toi32_i32$3 = $428$hi;
      i64toi32_i32$4 = $428_1;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $429_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      $429$hi = i64toi32_i32$3;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
      $431_1 = i64toi32_i32$3;
      $431$hi = i64toi32_i32$0;
      i64toi32_i32$2 = (i64toi32_i32$2 + 48 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $435_1 = i64toi32_i32$0;
      $435$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $431$hi;
      i64toi32_i32$2 = $431_1;
      i64toi32_i32$0 = $435$hi;
      i64toi32_i32$4 = $435_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 0;
      $437_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = 0;
      $438$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $429$hi;
      i64toi32_i32$4 = $429_1;
      i64toi32_i32$0 = $438$hi;
      i64toi32_i32$2 = $437_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $18_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$3 = ($5_1 + 32 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $443_1 = i64toi32_i32$0;
      $443$hi = i64toi32_i32$4;
      i64toi32_i32$3 = ($5_1 + 16 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $447_1 = i64toi32_i32$4;
      $447$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $443$hi;
      i64toi32_i32$3 = $443_1;
      i64toi32_i32$4 = $447$hi;
      i64toi32_i32$2 = $447_1;
      i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      $1_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $1$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $5_1 + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$3;
      $2$hi = i64toi32_i32$4;
      break label$16;
     }
     i64toi32_i32$4 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$4;
     break label$1;
    }
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $255_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
     $255_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $456$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$2 = -1;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $458_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
    $458$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $456$hi;
    i64toi32_i32$3 = $255_1;
    i64toi32_i32$4 = $458$hi;
    i64toi32_i32$2 = $458_1;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $4_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $11_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11$hi = i64toi32_i32$3;
   label$19 : {
    i64toi32_i32$3 = $18$hi;
    $464_1 = !($18_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = -1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
     $256_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$2 >>> 0) {
       $257_1 = 0
      } else {
       $257_1 = 1
      }
      $258_1 = $257_1;
     } else {
      $258_1 = 0
     }
     $256_1 = $258_1;
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $464_1 : $256_1) {
     break label$19
    }
    i64toi32_i32$2 = $11$hi;
    $470_1 = $11_1;
    $470$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1_1 = i64toi32_i32$5;
    $1$hi = i64toi32_i32$1;
    $474_1 = !(i64toi32_i32$5 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $475$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $470$hi;
    i64toi32_i32$2 = $470_1;
    i64toi32_i32$0 = $475$hi;
    i64toi32_i32$3 = $474_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $11_1 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$5;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$2 = -2147483648;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
    $479_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $479$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$1 = $479$hi;
    i64toi32_i32$3 = $479_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$2 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $11$hi;
   $483_1 = $11_1;
   $483$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $486_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $486$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$3 = $486$hi;
   i64toi32_i32$5 = $486_1;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2_1;
   $490_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $491$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $483$hi;
   i64toi32_i32$5 = $483_1;
   i64toi32_i32$4 = $491$hi;
   i64toi32_i32$2 = $490_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $11_1 = i64toi32_i32$3;
   $11$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $1168($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $46_1;
  $2$hi = i64toi32_i32$2;
  $16_1 = $2_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $48_1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $1_1 = i64toi32_i32$4;
  $1$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $1169($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $14_1 = 0, $14$hi = 0, $20_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $1155($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$3;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1170($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $7$hi = 0, $3_1 = 0, $2_1 = 0, $8_1 = 0, $8$hi = 0, $6_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $4_1 = 0, $5_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $23_1 = 0, $23$hi = 0, $25$hi = 0, $39$hi = 0, $48$hi = 0, $58_1 = 0, $58$hi = 0, $60$hi = 0, $79_1 = 0, $79$hi = 0, $92_1 = 0, $92$hi = 0, $96$hi = 0, $99_1 = 0, $99$hi = 0, $104_1 = 0, $104$hi = 0, $108_1 = 0, $108$hi = 0, $111_1 = 0, $112$hi = 0, $121$hi = 0, $125_1 = 0, $125$hi = 0, $136$hi = 0, $138_1 = 0, $138$hi = 0, $139$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $7_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $47_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $47_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$1 = $47_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32767;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $8_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $8$hi = i64toi32_i32$0;
    $3_1 = $8_1;
    if (($3_1 + -15361 | 0) >>> 0 > 2045 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 60;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $48_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $48_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $23_1 = $48_1;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $25$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $23$hi;
    i64toi32_i32$1 = $23_1;
    i64toi32_i32$0 = $25$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $7_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $8_1 = $3_1 + -15360 | 0;
    $8$hi = i64toi32_i32$0;
    label$3 : {
     label$4 : {
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = 268435455;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $0_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $0$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$2 = 134217728;
      i64toi32_i32$3 = 1;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$4
      }
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $7_1 = i64toi32_i32$4;
      $7$hi = i64toi32_i32$5;
      break label$3;
     }
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
     $39$hi = i64toi32_i32$5;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$5 = $39$hi;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $7_1 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$0 = 1048575;
    i64toi32_i32$3 = -1;
    $3_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = i64toi32_i32$2 ? 0 : $7_1;
    i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$4;
    $0_1 = i64toi32_i32$0;
    $0$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $48$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$3 = $48$hi;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$5 = $8_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $7_1 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$1;
    break label$1;
   }
   label$5 : {
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$3 | i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0)) {
     break label$5
    }
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 32767;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$5 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 60;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $50_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $50_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $58_1 = $50_1;
    $58$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     $51_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
     $51_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    }
    $60$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $58$hi;
    i64toi32_i32$2 = $58_1;
    i64toi32_i32$1 = $60$hi;
    i64toi32_i32$3 = $51_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 524288;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $7_1 = 2047;
    $7$hi = i64toi32_i32$2;
    break label$1;
   }
   label$6 : {
    if ($3_1 >>> 0 <= 17406 >>> 0) {
     break label$6
    }
    i64toi32_i32$2 = 0;
    $7_1 = 2047;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $0_1 = 0;
    $0$hi = i64toi32_i32$2;
    break label$1;
   }
   label$7 : {
    i64toi32_i32$2 = $8$hi;
    $4_1 = !($8_1 | i64toi32_i32$2 | 0);
    $5_1 = $4_1 ? 15360 : 15361;
    $6_1 = $5_1 - $3_1 | 0;
    if (($6_1 | 0) <= (112 | 0)) {
     break label$7
    }
    i64toi32_i32$2 = 0;
    $0_1 = 0;
    $0$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $79_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $79$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$1 = $79$hi;
   i64toi32_i32$3 = i64toi32_i32$0 ? $7_1 : $79_1;
   i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$1;
   $7_1 = i64toi32_i32$3;
   $7$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$3 = $7$hi;
   $1156($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0, i64toi32_i32$3 | 0, 128 - $6_1 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = $7$hi;
   $1166($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0, i64toi32_i32$2 | 0, $6_1 | 0);
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$2;
   $7$hi = i64toi32_i32$3;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 60;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $52_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $52_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   $92_1 = $52_1;
   $92$hi = i64toi32_i32$2;
   i64toi32_i32$3 = $2_1 + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 4;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $53_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
    $53_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $96$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $92$hi;
   i64toi32_i32$0 = $92_1;
   i64toi32_i32$3 = $96$hi;
   i64toi32_i32$5 = $53_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $0_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $0$hi = i64toi32_i32$3;
   label$8 : {
    label$9 : {
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$0 = 268435455;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $99_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $99$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
     $104_1 = i64toi32_i32$0;
     $104$hi = i64toi32_i32$2;
     i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $108_1 = i64toi32_i32$2;
     $108$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $104$hi;
     i64toi32_i32$3 = $104_1;
     i64toi32_i32$2 = $108$hi;
     i64toi32_i32$5 = $108_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     $111_1 = ($5_1 | 0) != ($3_1 | 0) & ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) | 0;
     i64toi32_i32$0 = 0;
     $112$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $99$hi;
     i64toi32_i32$5 = $99_1;
     i64toi32_i32$2 = $112$hi;
     i64toi32_i32$3 = $111_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $7_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $7$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$5 = 134217728;
     i64toi32_i32$3 = 1;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$0 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $0_1 = i64toi32_i32$1;
     $0$hi = i64toi32_i32$4;
     break label$8;
    }
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$3 = 134217728;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$8
    }
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$5 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $121$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$4 = $121$hi;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $0_1 = i64toi32_i32$2;
    $0$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = 1048576;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   $125_1 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
   $125$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$4 = 1048575;
   i64toi32_i32$3 = -1;
   $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$1 = $125$hi;
   i64toi32_i32$4 = i64toi32_i32$5 ? $125_1 : $0_1;
   i64toi32_i32$3 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $0_1 = i64toi32_i32$4;
   $0$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   $7_1 = i64toi32_i32$5;
   $7$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$5 = $7_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = 52;
  i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
  }
  $136$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$5 = -2147483648;
  i64toi32_i32$1 = 0;
  i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
  $138_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $138$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $136$hi;
  i64toi32_i32$4 = $54_1;
  i64toi32_i32$3 = $138$hi;
  i64toi32_i32$1 = $138_1;
  i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  $139$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $0$hi;
  i64toi32_i32$3 = $139$hi;
  i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
  i64toi32_i32$4 = $0$hi;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 | i64toi32_i32$1 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $1171($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $7_1 = 0, $7$hi = 0, $3_1 = 0, $2_1 = 0, $5_1 = 0, $8_1 = 0, $37_1 = 0, $8$hi = 0, $39_1 = 0, $40_1 = 0, $6_1 = 0, $41_1 = 0, $42_1 = 0, $26_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $80_1 = 0, $80$hi = 0, $97_1 = 0, $97$hi = 0, $102_1 = 0, $102$hi = 0, $106_1 = 0, $106$hi = 0, $109_1 = 0, $110$hi = 0, $113_1 = 0, $117_1 = 0, $125_1 = 0, $125$hi = 0, $142_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $7_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $37_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$1 = $37_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32767;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $8_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $8$hi = i64toi32_i32$0;
    $3_1 = $8_1;
    if (($3_1 + -16257 | 0) >>> 0 > 253 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $39_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $4_1 = $39_1;
    label$3 : {
     label$4 : {
      i64toi32_i32$1 = $0$hi;
      $26_1 = !($0_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 33554431;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $7_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $7$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 16777216;
      $30_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 16777216;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $26_1 : $30_1) {
       break label$4
      }
      $4_1 = $4_1 + 1 | 0;
      break label$3;
     }
     i64toi32_i32$3 = $0$hi;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 16777216;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $38_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $38$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$0 = $38$hi;
     i64toi32_i32$2 = $38_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$3
     }
     $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
    }
    $5_1 = $4_1 >>> 0 > 8388607 >>> 0;
    $4_1 = $5_1 ? 0 : $4_1;
    $3_1 = ($5_1 ? -16255 : -16256) + $3_1 | 0;
    break label$1;
   }
   label$5 : {
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    if (!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0)) {
     break label$5
    }
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32767;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 25;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $40_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $40_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $4_1 = $40_1 | 4194304 | 0;
    $3_1 = 255;
    break label$1;
   }
   label$6 : {
    if ($3_1 >>> 0 <= 16510 >>> 0) {
     break label$6
    }
    $3_1 = 255;
    $4_1 = 0;
    break label$1;
   }
   label$7 : {
    i64toi32_i32$0 = $8$hi;
    $5_1 = !($8_1 | i64toi32_i32$0 | 0);
    $6_1 = $5_1 ? 16256 : 16257;
    $4_1 = $6_1 - $3_1 | 0;
    if (($4_1 | 0) <= (112 | 0)) {
     break label$7
    }
    $4_1 = 0;
    $3_1 = 0;
    break label$1;
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   $80_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $80$hi = i64toi32_i32$3;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$1 = $80$hi;
   i64toi32_i32$2 = i64toi32_i32$4 ? $7_1 : $80_1;
   i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
   $7_1 = i64toi32_i32$2;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $7$hi;
   $1156($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0, i64toi32_i32$2 | 0, 128 - $4_1 | 0 | 0);
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   $1166($2_1 | 0, $0_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0);
   i64toi32_i32$4 = $2_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $0_1 = i64toi32_i32$0;
   $0$hi = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 25;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $41_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $41_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $4_1 = $41_1;
   label$8 : {
    label$9 : {
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $97_1 = i64toi32_i32$0;
     $97$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
     $102_1 = i64toi32_i32$4;
     $102$hi = i64toi32_i32$0;
     i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $106_1 = i64toi32_i32$0;
     $106$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $102$hi;
     i64toi32_i32$2 = $102_1;
     i64toi32_i32$0 = $106$hi;
     i64toi32_i32$3 = $106_1;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     $109_1 = ($6_1 | 0) != ($3_1 | 0) & ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) | 0;
     i64toi32_i32$4 = 0;
     $110$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $97$hi;
     i64toi32_i32$3 = $97_1;
     i64toi32_i32$0 = $110$hi;
     i64toi32_i32$2 = $109_1;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $7_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $7$hi = i64toi32_i32$0;
     $113_1 = !($7_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $0$hi;
     i64toi32_i32$4 = $0_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $0_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $0$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 16777216;
     $117_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 16777216;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) | 0 ? $113_1 : $117_1) {
      break label$9
     }
     $4_1 = $4_1 + 1 | 0;
     break label$8;
    }
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$4 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $125_1 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
    $125$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = $125$hi;
    i64toi32_i32$3 = $125_1;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$8
    }
    $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
   }
   $3_1 = $4_1 >>> 0 > 8388607 >>> 0;
   $4_1 = $3_1 ? $4_1 ^ 8388608 | 0 : $4_1;
  }
  global$0 = $2_1 + 32 | 0;
  $142_1 = $3_1 << 23 | 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$2 = 32;
  i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $42_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
   $42_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $142_1 | ($42_1 & -2147483648 | 0) | 0 | $4_1 | 0), wasm2js_scratch_load_f32()));
 }
 
 function $1172() {
  fimport$267();
  wasm2js_trap();
 }
 
 function $1173($0_1) {
  $0_1 = $0_1 | 0;
  var $6_1 = 0, $5_1 = 0, $3_1 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0, $7_1 = 0, $687_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if ($0_1 >>> 0 > 211 >>> 0) {
     break label$2
    }
    $0_1 = HEAP32[($1174(111264 | 0, 111456 | 0, $1_1 + 12 | 0 | 0) | 0) >> 2] | 0;
    break label$1;
   }
   $1175($0_1 | 0);
   $2_1 = ($0_1 >>> 0) / (210 >>> 0) | 0;
   $3_1 = Math_imul($2_1, 210);
   HEAP32[($1_1 + 8 | 0) >> 2] = $0_1 - $3_1 | 0;
   $4_1 = (($1174(111456 | 0, 111648 | 0, $1_1 + 8 | 0 | 0) | 0) - 111456 | 0) >> 2 | 0;
   label$3 : while (1) {
    $0_1 = (HEAP32[(($4_1 << 2 | 0) + 111456 | 0) >> 2] | 0) + $3_1 | 0;
    $5_1 = 5;
    label$4 : {
     label$5 : {
      label$6 : while (1) {
       $3_1 = $5_1;
       if (($5_1 | 0) == (47 | 0)) {
        break label$5
       }
       $6_1 = HEAP32[(($5_1 << 2 | 0) + 111264 | 0) >> 2] | 0;
       $7_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
       if ($7_1 >>> 0 < $6_1 >>> 0) {
        break label$1
       }
       $5_1 = $5_1 + 1 | 0;
       if (($0_1 | 0) != (Math_imul($7_1, $6_1) | 0)) {
        continue label$6
       }
       break label$6;
      };
      if ($3_1 >>> 0 < 47 >>> 0) {
       break label$4
      }
     }
     $3_1 = 211;
     label$7 : while (1) {
      $6_1 = ($0_1 >>> 0) / ($3_1 >>> 0) | 0;
      if ($6_1 >>> 0 < $3_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($6_1, $3_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 10 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 12 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 16 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 18 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 22 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 28 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 30 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 36 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 40 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 42 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 46 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 52 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 58 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 60 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 66 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 70 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 72 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 78 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 82 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 88 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 96 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 100 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 102 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 106 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 108 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 112 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 120 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 126 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 130 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 136 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 138 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 142 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 148 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 150 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 156 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 162 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 166 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 168 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 172 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 178 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 180 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 186 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 190 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 192 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 196 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 198 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      if (($0_1 | 0) == (Math_imul($5_1, $6_1) | 0)) {
       break label$4
      }
      $6_1 = $3_1 + 208 | 0;
      $5_1 = ($0_1 >>> 0) / ($6_1 >>> 0) | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$1
      }
      $3_1 = $3_1 + 210 | 0;
      if (($0_1 | 0) != (Math_imul($5_1, $6_1) | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    $0_1 = $4_1 + 1 | 0;
    $687_1 = $0_1;
    $0_1 = ($0_1 | 0) == (48 | 0);
    $4_1 = $0_1 ? 0 : $687_1;
    $2_1 = $2_1 + $0_1 | 0;
    $3_1 = Math_imul($2_1, 210);
    continue label$3;
   };
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1174($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1176($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1175($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 < -4 >>> 0) {
    break label$1
   }
   $1177(65984 | 0);
   wasm2js_trap();
  }
 }
 
 function $1176($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP8[($3_1 + 14 | 0) >> 0] = 0;
  $2_1 = $1178($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1177($0_1) {
  $0_1 = $0_1 | 0;
  $1172();
  wasm2js_trap();
 }
 
 function $1178($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $1_1 = $1179($0_1 | 0, $1_1 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!$1_1) {
     break label$1
    }
    $6_1 = $1180($1_1 | 0) | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
    $1181($5_1 + 12 | 0 | 0, $6_1 | 0);
    $7_1 = $1183($3_1 | 0, $1182($4_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $1_1 = $7_1 ? $1_1 + ($6_1 ^ -1 | 0) | 0 : $6_1;
    $0_1 = (wasm2js_i32$0 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0, wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $7_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    continue label$2;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1179($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1184($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1180($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 1 | 0 | 0;
 }
 
 function $1181($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1185($0_1 | 0, $1_1 | 0);
 }
 
 function $1182($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1187($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1183($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1186($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1184($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1188($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1185($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1190($0_1 | 0, $1189($1_1 | 0) | 0 | 0);
 }
 
 function $1186($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $1187($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1188($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1189($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1190($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
 }
 
 function $1191($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  label$1 : {
   if ($0_1 & 3 | 0) {
    break label$1
   }
   if (($1_1 >>> 0) % ($0_1 >>> 0) | 0) {
    break label$1
   }
   $0_1 = $1152($2_1 + 12 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
   $3_1 = (wasm2js_i32$0 = 0, wasm2js_i32$1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$2 = $0_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1192($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = $1193($0_1 | 0) | 0;
   if ($0_1) {
    break label$1
   }
   $1194();
  }
  return $0_1 | 0;
 }
 
 function $1193($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1 >>> 0 > 1 >>> 0 ? $0_1 : 1;
  label$1 : {
   label$2 : while (1) {
    $2_1 = $1146($1_1 | 0) | 0;
    if ($2_1) {
     break label$1
    }
    $0_1 = $1298() | 0;
    if (!$0_1) {
     break label$1
    }
    FUNCTION_TABLE[$0_1 | 0]();
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1194() {
  $1205();
  wasm2js_trap();
 }
 
 function $1195($0_1) {
  $0_1 = $0_1 | 0;
  return $1192($0_1 | 0) | 0 | 0;
 }
 
 function $1196($0_1) {
  $0_1 = $0_1 | 0;
  $1148($0_1 | 0);
 }
 
 function $1197($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1196($0_1 | 0);
 }
 
 function $1198($0_1) {
  $0_1 = $0_1 | 0;
  $1196($0_1 | 0);
 }
 
 function $1199($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $1_1 = $1200($0_1 | 0, $1_1 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   $1194();
  }
  return $1_1 | 0;
 }
 
 function $1200($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = $1_1 >>> 0 > 4 >>> 0 ? $1_1 : 4;
  $0_1 = $0_1 >>> 0 > 1 >>> 0 ? $0_1 : 1;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $1201($2_1 | 0, $0_1 | 0) | 0;
    if ($3_1) {
     break label$1
    }
    $1_1 = $1298() | 0;
    if (!$1_1) {
     break label$1
    }
    FUNCTION_TABLE[$1_1 | 0]();
    continue label$2;
   };
  }
  return $3_1 | 0;
 }
 
 function $1201($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = (($0_1 + $1_1 | 0) + -1 | 0) & (0 - $0_1 | 0) | 0;
  return $1191($0_1 | 0, ($1_1 >>> 0 > $2_1 >>> 0 ? $1_1 : $2_1) | 0) | 0 | 0;
 }
 
 function $1202($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1203($0_1 | 0);
 }
 
 function $1203($0_1) {
  $0_1 = $0_1 | 0;
  $1148($0_1 | 0);
 }
 
 function $1204($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1202($0_1 | 0, $2_1 | 0);
 }
 
 function $1205() {
  $1172();
  wasm2js_trap();
 }
 
 function $1206($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAPU16[((($0_1 >>> 0 > 153 >>> 0 ? 0 : $0_1) << 1 | 0) + 113568 | 0) >> 1] | 0) + 111648 | 0 | 0;
 }
 
 function $1207($0_1) {
  $0_1 = $0_1 | 0;
  return $1206($0_1 | 0, $0_1 | 0) | 0 | 0;
 }
 
 function $1208($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    label$3 : {
     if (!($1032($0_1 | 0) | 0)) {
      break label$3
     }
     $3_1 = -1;
     break label$1;
    }
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   }
   label$4 : {
    $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if (($4_1 | 0) == ($3_1 | 0)) {
     break label$4
    }
    $3_1 = $1_1 & 255 | 0;
    if ((HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[$4_1 >> 0] = $1_1;
    break label$1;
   }
   label$5 : {
    if ((FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, $2_1 + 15 | 0, 1) | 0 | 0) == (1 | 0)) {
     break label$5
    }
    $3_1 = -1;
    break label$1;
   }
   $3_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1209($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1210($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1243($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0 | 0;
 }
 
 function $1211($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($1243($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $1212($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1236($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1213($0_1) {
  $0_1 = $0_1 | 0;
  return $1237($1236($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1214($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $1005($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1215($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
 }
 
 function $1216($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1233($1232($0_1 | 0) | 0 | 0) | 0;
  return ($0_1 >>> ($0_1 >>> 0 > (($1234() | 0) >>> 1 | 0) >>> 0) | 0) + -8 | 0 | 0;
 }
 
 function $1217($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 10;
  label$1 : {
   if ($0_1 >>> 0 < 11 >>> 0) {
    break label$1
   }
   $0_1 = $1240($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (11 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $1218($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1219($0_1) {
  $0_1 = $0_1 | 0;
  return $1239($0_1 | 0) | 0 | 0;
 }
 
 function $1220($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1238($1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $1221($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1222($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1241($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1223($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1244($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1236($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $1225($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1236($0_1 | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) & -2147483648 | 0 | ($1_1 & 2147483647 | 0) | 0;
  $0_1 = $1236($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0 | -2147483648 | 0;
 }
 
 function $1226($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1236($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $1227($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1228($0_1) {
  $0_1 = $0_1 | 0;
  $1235(71854 | 0);
  wasm2js_trap();
 }
 
 function $1229($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1230($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 0 < 11 >>> 0 | 0;
 }
 
 function $1231($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1236($0_1 | 0) | 0;
  HEAP8[($2_1 + 11 | 0) >> 0] = (HEAPU8[($2_1 + 11 | 0) >> 0] | 0) & 128 | 0 | ($1_1 & 127 | 0) | 0;
  $0_1 = $1236($0_1 | 0) | 0;
  HEAP8[($0_1 + 11 | 0) >> 0] = (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) & 127 | 0;
 }
 
 function $1232($0_1) {
  $0_1 = $0_1 | 0;
  return $1248($0_1 | 0) | 0 | 0;
 }
 
 function $1233($0_1) {
  $0_1 = $0_1 | 0;
  return $1234() | 0 | 0;
 }
 
 function $1234() {
  return $1249() | 0 | 0;
 }
 
 function $1235($0_1) {
  $0_1 = $0_1 | 0;
  $1172();
  wasm2js_trap();
 }
 
 function $1236($0_1) {
  $0_1 = $0_1 | 0;
  return $1251($0_1 | 0) | 0 | 0;
 }
 
 function $1237($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1238($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 <= ($1233($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   $1252();
   wasm2js_trap();
  }
  return $1253($1_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $1239($0_1) {
  $0_1 = $0_1 | 0;
  return $1257($0_1 | 0) | 0 | 0;
 }
 
 function $1240($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 7 | 0) & -8 | 0 | 0;
 }
 
 function $1241($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1258($0_1 | 0, $0_1 + $1_1 | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1242($0_1) {
  $0_1 = $0_1 | 0;
  $1218($0_1 | 0);
  label$1 : {
   if (!($1210($0_1 | 0) | 0)) {
    break label$1
   }
   $1223($1219($0_1 | 0) | 0 | 0, $1212($0_1 | 0) | 0 | 0, $1211($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1243($0_1) {
  $0_1 = $0_1 | 0;
  return $1247($0_1 | 0) | 0 | 0;
 }
 
 function $1244($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1281($1_1 | 0, $2_1 | 0, 1 | 0);
 }
 
 function $1245($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if ($2_1 >>> 0 > ($1216($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($1230($2_1 | 0) | 0)) {
      break label$3
     }
     $1231($0_1 | 0, $2_1 | 0);
     $4_1 = $1213($0_1 | 0) | 0;
     break label$2;
    }
    $1220($3_1 + 8 | 0 | 0, $1219($0_1 | 0) | 0 | 0, ($1217($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1221($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1224($0_1 | 0, $4_1 | 0);
    $1225($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1226($0_1 | 0, $2_1 | 0);
   }
   $1222($1209($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 7 | 0) >> 0] = 0;
   $1215($4_1 + $2_1 | 0 | 0, $3_1 + 7 | 0 | 0);
   $1227($0_1 | 0, $2_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1228($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1246($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($1230($2_1 | 0) | 0)) {
      break label$3
     }
     $4_1 = $1213($0_1 | 0) | 0;
     $1231($0_1 | 0, $2_1 | 0);
     break label$2;
    }
    if ($2_1 >>> 0 > ($1216($0_1 | 0) | 0) >>> 0) {
     break label$1
    }
    $1220($3_1 + 8 | 0 | 0, $1219($0_1 | 0) | 0 | 0, ($1217($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1221($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1224($0_1 | 0, $4_1 | 0);
    $1225($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1226($0_1 | 0, $2_1 | 0);
   }
   $1222($1209($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
   $1227($0_1 | 0, $2_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1228($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1247($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1248($0_1) {
  $0_1 = $0_1 | 0;
  return $1250($0_1 | 0) | 0 | 0;
 }
 
 function $1249() {
  return -1 | 0;
 }
 
 function $1250($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1251($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1252() {
  $1172();
  wasm2js_trap();
 }
 
 function $1253($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($1254($1_1 | 0) | 0)) {
    break label$1
   }
   return $1255($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  return $1256($0_1 | 0) | 0 | 0;
 }
 
 function $1254($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 0 > 8 >>> 0 | 0;
 }
 
 function $1255($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1199($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1256($0_1) {
  $0_1 = $0_1 | 0;
  return $1192($0_1 | 0) | 0 | 0;
 }
 
 function $1257($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1258($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1259($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1259($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1260($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1260($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1261($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1261($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $1262($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $1264($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $1263($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $1265($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1266($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $1267($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1262($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1268($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1263($0_1) {
  $0_1 = $0_1 | 0;
  return $1270($0_1 | 0) | 0 | 0;
 }
 
 function $1264($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $1269($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
 }
 
 function $1265($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1272($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1266($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1273($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1267($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1271($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1268($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1274($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1274($2_1 | 0) | 0;
  $1275($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1269($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $2_1 - $1_1 | 0;
  $1214($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1 + $2_1 | 0;
  $1277($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1270($0_1) {
  $0_1 = $0_1 | 0;
  return $1209($0_1 | 0) | 0 | 0;
 }
 
 function $1271($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1272($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1279($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1273($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($1209($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $1274($0_1) {
  $0_1 = $0_1 | 0;
  return $1276($0_1 | 0) | 0 | 0;
 }
 
 function $1275($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1276($0_1) {
  $0_1 = $0_1 | 0;
  return $1229($0_1 | 0) | 0 | 0;
 }
 
 function $1277($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1278($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1278($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1279($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1280($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1280($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($1229($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $1281($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!($1254($2_1 | 0) | 0)) {
    break label$1
   }
   $1282($0_1 | 0, $1_1 | 0, $2_1 | 0);
   return;
  }
  $1283($0_1 | 0, $1_1 | 0);
 }
 
 function $1282($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1284($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1283($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1285($0_1 | 0, $1_1 | 0);
 }
 
 function $1284($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1204($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1285($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1197($0_1 | 0, $1_1 | 0);
 }
 
 function $1286($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1287($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1287($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
    if (($2_1 | 0) < (0 | 0)) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    if (($2_1 & 1073741823 | 0 | 0) != (HEAP32[(($1056() | 0) + 24 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   label$3 : {
    $2_1 = $0_1 & 255 | 0;
    if (($2_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (($3_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    return $2_1 | 0;
   }
   return $1208($1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  return $1288($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1288($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = $1_1 + 76 | 0;
   if (!($1289($2_1 | 0) | 0)) {
    break label$1
   }
   $1010($1_1 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    $3_1 = $0_1 & 255 | 0;
    if (($3_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (($4_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[$4_1 >> 0] = $0_1;
    break label$2;
   }
   $3_1 = $1208($1_1 | 0, $3_1 | 0) | 0;
  }
  label$4 : {
   if (!(($1290($2_1 | 0) | 0) & 1073741824 | 0)) {
    break label$4
   }
   $1291($2_1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $1289($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1 ? $1_1 : 1073741823;
  return $1_1 | 0;
 }
 
 function $1290($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1291($0_1) {
  $0_1 = $0_1 | 0;
  $1042($0_1 | 0, 1 | 0) | 0;
 }
 
 function $1292($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[(0 + 110208 | 0) >> 2] | 0;
  $1034(83058 | 0, 11 | 0, 1 | 0, $3_1 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1124($3_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  $1286(10 | 0, $3_1 | 0) | 0;
  $1172();
  wasm2js_trap();
 }
 
 function $1293() {
  $1292(71842 | 0, 0 | 0);
  wasm2js_trap();
 }
 
 function $1294($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1295() {
  return $1294(117936 | 0) | 0 | 0;
 }
 
 function $1296($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[$0_1 | 0]();
  $1292(73763 | 0, 0 | 0);
  wasm2js_trap();
 }
 
 function $1297() {
  $1296($1295() | 0 | 0);
  wasm2js_trap();
 }
 
 function $1298() {
  return $1294(141948 | 0) | 0 | 0;
 }
 
 function $1299($0_1) {
  $0_1 = $0_1 | 0;
  return ($1146($0_1 + 80 | 0 | 0) | 0) + 80 | 0 | 0;
 }
 
 function $1300($0_1) {
  $0_1 = $0_1 | 0;
  return $1332($0_1 | 0) | 0 | 0;
 }
 
 function $1301($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1302($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1303($0_1) {
  $0_1 = $0_1 | 0;
  $1197($1300($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1304($0_1) {
  $0_1 = $0_1 | 0;
  $1197($1300($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $1305($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  label$2 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !($1078($1306($0_1 | 0) | 0 | 0, $1306($1_1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function $1306($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1307($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  label$1 : {
   label$2 : {
    if ($1305($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
     break label$2
    }
    $4_1 = 0;
    if (!$1_1) {
     break label$2
    }
    $4_1 = 0;
    $1_1 = $1308($1_1 | 0, 113912 | 0, 113960 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$4_1) {
     break label$1
    }
    $1006($3_1 + 8 | 0 | 0, 0 | 0, 56 | 0) | 0;
    HEAP8[($3_1 + 59 | 0) >> 0] = 1;
    HEAP32[($3_1 + 16 | 0) >> 2] = -1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 52 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 4 | 0, $4_1, 1);
    label$3 : {
     $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
     if (($4_1 | 0) != (1 | 0)) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    }
    $4_1 = ($4_1 | 0) == (1 | 0);
   }
   global$0 = $3_1 + 64 | 0;
   return $4_1 | 0;
  }
  fimport$268(82944 | 0, 70344 | 0, 473 | 0, 71762 | 0);
  wasm2js_trap();
 }
 
 function $1308($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $1309($4_1 + 4 | 0 | 0, $0_1 | 0);
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $6_1 = $1305($5_1 | 0, $2_1 | 0, 0 | 0) | 0;
  $7_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!$6_1) {
     break label$2
    }
    $6_1 = $1310($0_1 | 0, $7_1 | 0, $1_1 | 0, $2_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $6_1 = $1311($0_1 | 0, $7_1 | 0, $2_1 | 0, $5_1 | 0, $3_1 | 0) | 0;
   if ($6_1) {
    break label$1
   }
   $6_1 = $1312($0_1 | 0, $7_1 | 0, $1_1 | 0, $2_1 | 0, $5_1 | 0, $3_1 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1309($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  $3_1 = HEAP32[($2_1 + -8 | 0) >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = $1_1 + $3_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($2_1 + -4 | 0) >> 2] | 0;
 }
 
 function $1310($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  label$1 : {
   label$2 : {
    if (($5_1 | 0) < (0 | 0)) {
     break label$2
    }
    $7_1 = ($4_1 | 0) == (0 - $5_1 | 0 | 0) ? $1_1 : 0;
    break label$1;
   }
   if (($5_1 | 0) == (-2 | 0)) {
    break label$1
   }
   $7_1 = $6_1 + 28 | 0;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1 + 36 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1 + 44 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = 0;
   HEAP32[($6_1 + 24 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($6_1 + 16 | 0) >> 2] = $5_1;
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1;
   HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($6_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[($6_1 + 60 | 0) >> 2] = 0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 16777216;
   HEAP32[($6_1 + 52 | 0) >> 2] = 1;
   HEAP32[($6_1 + 56 | 0) >> 2] = i64toi32_i32$0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($3_1, $6_1 + 4 | 0, $1_1, $1_1, 1, 0);
   $7_1 = (HEAP32[$7_1 >> 2] | 0 | 0) == (1 | 0) ? $1_1 : 0;
  }
  global$0 = $6_1 + 64 | 0;
  return $7_1 | 0;
 }
 
 function $1311($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  label$1 : {
   if (($4_1 | 0) < (0 | 0)) {
    break label$1
   }
   $0_1 = $0_1 - $4_1 | 0;
   if (($0_1 | 0) < ($1_1 | 0)) {
    break label$1
   }
   $6_1 = $5_1 + 28 | 0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1 + 36 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1 + 44 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 0;
   HEAP32[($5_1 + 20 | 0) >> 2] = 0;
   HEAP32[($5_1 + 24 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
   HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 60 | 0) >> 2] = 0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 16777216;
   HEAP32[($5_1 + 52 | 0) >> 2] = 1;
   HEAP32[($5_1 + 56 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($3_1, $5_1 + 4 | 0, $1_1, $1_1, 1, 0);
   $6_1 = HEAP32[$6_1 >> 2] | 0 ? $0_1 : 0;
  }
  global$0 = $5_1 + 64 | 0;
  return $6_1 | 0;
 }
 
 function $1312($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $3_1;
  $5_1 = 0;
  $1006($6_1 + 20 | 0 | 0, 0 | 0, 39 | 0) | 0;
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  HEAP8[($6_1 + 59 | 0) >> 0] = 1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($4_1, $6_1 + 4 | 0, $1_1, 1, 0);
  label$1 : {
   label$2 : {
    switch (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) {
    case 0:
     $5_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($6_1 + 24 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   label$4 : {
    if ((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$4
    }
    if (HEAP32[($6_1 + 44 | 0) >> 2] | 0) {
     break label$1
    }
    if ((HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $5_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  }
  global$0 = $6_1 + 64 | 0;
  return $5_1 | 0;
 }
 
 function $1313($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   if ($4_1) {
    break label$1
   }
   HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 36 | 0) >> 2] = 1;
   HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
   return;
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 56 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
     break label$3
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = 2;
   HEAP32[($1_1 + 36 | 0) >> 2] = $4_1 + 1 | 0;
  }
 }
 
 function $1314($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($1305($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1313($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $1315($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($1305($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1313($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $1316($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if (($3_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 52 | 0) >> 0] = 1;
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     if ($3_1) {
      break label$3
     }
     HEAP32[($1_1 + 36 | 0) >> 2] = 1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
     if (($4_1 | 0) != (1 | 0)) {
      break label$1
     }
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    label$4 : {
     if (($3_1 | 0) != ($2_1 | 0)) {
      break label$4
     }
     label$5 : {
      $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      if (($3_1 | 0) != (2 | 0)) {
       break label$5
      }
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
      $3_1 = $4_1;
     }
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     if (($3_1 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
  }
 }
 
 function $1317($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (($2_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
  }
 }
 
 function $1318($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($1305($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1317($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($1305($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (($2_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      if (($2_1 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     label$7 : {
      if ((HEAPU8[($1_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $1319($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($1305($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1317($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   if (!($1305($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if (($2_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
      break label$4
     }
     if (($2_1 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $1320($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($1305($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1316($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $1321($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($1305($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1316($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $1322($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1323($0_1) {
  $0_1 = $0_1 | 0;
  $1322($0_1 | 0) | 0;
  $1197($0_1 | 0, 4 | 0);
 }
 
 function $1324($0_1) {
  $0_1 = $0_1 | 0;
  return 70608 | 0;
 }
 
 function $1325($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1326($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 114104 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1326($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 114144 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1327($0_1) {
  $0_1 = $0_1 | 0;
  $1322($0_1 | 0) | 0;
  $1197($0_1 | 0, 4 | 0);
 }
 
 function $1328($0_1) {
  $0_1 = $0_1 | 0;
  return 74325 | 0;
 }
 
 function $1329($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1325($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 114124 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1330($0_1) {
  $0_1 = $0_1 | 0;
  $1322($0_1 | 0) | 0;
  $1197($0_1 | 0, 4 | 0);
 }
 
 function $1331($0_1) {
  $0_1 = $0_1 | 0;
  return 71673 | 0;
 }
 
 function $1332($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1333($0_1) {
  $0_1 = $0_1 | 0;
  global$1 = $0_1;
 }
 
 function $1335() {
  global$3 = 65536;
  global$2 = (0 + 15 | 0) & -16 | 0;
 }
 
 function $1336() {
  return global$0 - global$2 | 0 | 0;
 }
 
 function $1337() {
  return global$3 | 0;
 }
 
 function $1338() {
  return global$2 | 0;
 }
 
 function $1339($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $1340($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $1341() {
  return global$0 | 0;
 }
 
 function $1342($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1343($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1344($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $1342($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $1333($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $1345($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $2_1 = 0, $2$hi = 0, i64toi32_i32$2 = 0;
  i64toi32_i32$0 = $1343($0_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $9_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $1333($9_1 | 0);
  i64toi32_i32$0 = $2$hi;
  return $2_1 | 0;
 }
 
 function $1346($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$269($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              i64toi32_i32$1 = var$1$hi;
              var$3 = var$1;
              if (!var$3) {
               break label$11
              }
              i64toi32_i32$0 = var$3;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
               i64toi32_i32$2 = 0;
               $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
               i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$4 = $38_1;
              if (!var$4) {
               break label$9
              }
              var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
              if (var$2 >>> 0 <= 31 >>> 0) {
               break label$8
              }
              break label$2;
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = i64toi32_i32$2;
             i64toi32_i32$1 = i64toi32_i32$2;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      i64toi32_i32$2 = var$1$hi;
      i64toi32_i32$1 = var$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      var$8 = i64toi32_i32$4;
      var$8$hi = i64toi32_i32$5;
      label$15 : while (1) {
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$2 = var$5;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        $45_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
        $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       }
       $140_1 = $45_1;
       $140$hi = i64toi32_i32$1;
       i64toi32_i32$1 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
       }
       $142$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $140$hi;
       i64toi32_i32$1 = $140_1;
       i64toi32_i32$5 = $142$hi;
       i64toi32_i32$0 = $46_1;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       var$5$hi = i64toi32_i32$5;
       $144_1 = var$5;
       $144$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$2 = var$8;
       i64toi32_i32$1 = var$5$hi;
       i64toi32_i32$0 = var$5;
       i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       var$6 = $47_1;
       var$6$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$2 = var$6$hi;
       i64toi32_i32$4 = var$6;
       i64toi32_i32$5 = var$1$hi;
       i64toi32_i32$0 = var$1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
       $151$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $144$hi;
       i64toi32_i32$2 = $144_1;
       i64toi32_i32$4 = $151$hi;
       i64toi32_i32$0 = $151_1;
       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
       var$5 = i64toi32_i32$1;
       var$5$hi = i64toi32_i32$3;
       i64toi32_i32$3 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        $48_1 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       }
       $154$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$7$hi;
       i64toi32_i32$2 = $154$hi;
       i64toi32_i32$3 = $48_1;
       i64toi32_i32$5 = var$7$hi;
       i64toi32_i32$0 = var$7;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       var$0$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$6$hi;
       i64toi32_i32$2 = var$6;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       var$6$hi = i64toi32_i32$3;
       var$7 = var$6;
       var$7$hi = i64toi32_i32$3;
       var$2 = var$2 + -1 | 0;
       if (var$2) {
        continue label$15
       }
       break label$15;
      };
      break label$13;
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_popcnt_i32(var$0) {
  var$0 = var$0 | 0;
  var var$1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $5_1 = var$1;
    if (!var$0) {
     break label$1
    }
    var$0 = var$0 & (var$0 - 1 | 0) | 0;
    var$1 = var$1 + 1 | 0;
    continue label$2;
   };
  }
  return $5_1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = Table([null, $13, $1322, $275, $276, $277, $278, $279, $274, $281, $282, $283, $284, $285, $286, $287, $288, $280, $290, $291, $289, $297, $298, $299, $300, $301, $302, $303, $304, $305, $306, $307, $308, $309, $310, $337, $338, $339, $340, $351, $352, $355, $392, $451, $452, $453, $454, $455, $461, $462, $463, $464, $465, $466, $467, $468, $469, $488, $495, $496, $497, $498, $499, $506, $507, $508, $509, $510, $511, $512, $513, $514, $515, $516, $571, $572, $573, $574, $578, $580, $581, $582, $583, $584, $585, $586, $587, $588, $589, $590, $591, $595, $596, $597, $598, $599, $600, $601, $602, $603, $604, $605, $606, $608, $609, $610, $611, $612, $613, $614, $615, $616, $617, $619, $620, $621, $622, $623, $624, $625, $626, $627, $628, $629, $630, $631, $634, $635, $636, $637, $638, $639, $640, $592, $641, $642, $643, $644, $645, $647, $649, $650, $651, $652, $653, $654, $655, $656, $657, $658, $659, $660, $661, $662, $663, $664, $665, $666, $667, $668, $669, $670, $671, $672, $673, $674, $675, $676, $677, $678, $679, $680, $681, $682, $683, $684, $685, $686, $687, $688, $689, $690, $691, $692, $693, $694, $695, $696, $697, $698, $699, $700, $701, $702, $703, $704, $705, $706, $707, $708, $709, $710, $711, $712, $713, $714, $715, $716, $717, $718, $719, $720, $721, $722, $723, $724, $725, $726, $727, $728, $729, $730, $731, $732, $733, $734, $735, $736, $737, $738, $739, $740, $741, $742, $743, $744, $745, $746, $747, $748, $749, $750, $751, $752, $753, $754, $755, $756, $757, $758, $759, $760, $761, $762, $763, $764, $765, $766, $767, $768, $769, $770, $771, $772, $773, $774, $775, $776, $777, $778, $779, $780, $781, $782, $784, $593, $811, $813, $810, $814, $815, $816, $817, $818, $819, $820, $821, $822, $823, $824, $825, $826, $827, $828, $829, $830, $812, $831, fimport$43, fimport$44, fimport$45, fimport$46, fimport$47, $982, fimport$48, fimport$49, fimport$50, fimport$51, fimport$52, fimport$53, fimport$54, fimport$55, fimport$56, fimport$57, fimport$58, fimport$59, $883, $884, $885, $886, $887, $888, $892, $893, $894, $895, $896, $897, $898, $899, $900, $901, $902, $903, $904, $907, $908, $909, $910, $911, $912, $913, $914, $915, $916, $917, $918, $869, $878, $871, $870, $877, $876, $864, $863, $875, $881, $880, $879, $919, $890, $906, $933, $976, $977, $978, fimport$90, fimport$91, fimport$92, fimport$93, fimport$94, fimport$95, fimport$96, fimport$97, fimport$98, fimport$99, fimport$100, fimport$101, fimport$102, fimport$103, fimport$104, fimport$105, fimport$106, fimport$107, fimport$108, fimport$109, fimport$110, fimport$111, fimport$112, fimport$113, fimport$114, fimport$115, fimport$116, fimport$117, fimport$118, fimport$119, fimport$120, fimport$121, fimport$122, fimport$123, fimport$124, fimport$125, fimport$126, fimport$127, fimport$128, fimport$129, fimport$130, fimport$131, fimport$132, fimport$133, fimport$134, fimport$135, fimport$136, fimport$137, fimport$138, fimport$139, fimport$140, fimport$141, fimport$142, fimport$143, fimport$144, fimport$145, fimport$146, fimport$147, fimport$148, fimport$149, fimport$150, fimport$151, fimport$152, fimport$153, fimport$154, fimport$155, fimport$156, fimport$157, fimport$158, fimport$159, fimport$160, fimport$161, fimport$162, fimport$163, fimport$164, fimport$165, fimport$166, fimport$167, fimport$168, fimport$169, fimport$170, fimport$171, fimport$172, fimport$173, fimport$174, fimport$175, fimport$176, fimport$177, fimport$178, fimport$179, fimport$180, fimport$181, fimport$182, fimport$183, fimport$184, fimport$185, fimport$186, fimport$187, fimport$188, fimport$189, fimport$190, fimport$191, fimport$192, fimport$193, fimport$194, fimport$195, fimport$196, fimport$197, fimport$198, fimport$199, fimport$200, fimport$201, fimport$202, fimport$203, fimport$204, fimport$205, fimport$206, fimport$207, fimport$208, fimport$209, fimport$210, fimport$211, fimport$212, fimport$213, fimport$214, fimport$215, fimport$216, fimport$217, fimport$218, fimport$219, fimport$220, fimport$221, fimport$222, fimport$223, fimport$224, fimport$225, fimport$226, fimport$227, fimport$228, fimport$229, fimport$230, fimport$231, fimport$232, fimport$233, fimport$234, fimport$235, fimport$236, fimport$237, fimport$238, fimport$239, fimport$240, fimport$241, fimport$242, fimport$243, fimport$244, fimport$245, fimport$246, fimport$247, fimport$248, fimport$249, fimport$250, fimport$251, fimport$252, fimport$253, $1018, $1019, $1020, $1022, $1068, $1073, $1074, $1125, $1126, $1130, $1140, $1293, $1300, $1303, $1301, $1302, $1307, $1321, $1319, $1314, $1304, $1320, $1318, $1315, $1327, $1328, $1330, $1331, $1323, $1324]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "memory": Object.create(Object.prototype, {
   "grow": {
    
   }, 
   "buffer": {
    "get": function () {
     return buffer;
    }
    
   }
  }), 
  "__wasm_call_ctors": $0, 
  "__main_argc_argv": $14, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "__em_lib_deps_sdlaudio": {
   get value() {
    return global$4;
   }, 
   set value(_global$4) {
    global$4 = _global$4;
   }
  }, 
  "__em_lib_deps_sdlmouse": {
   get value() {
    return global$5;
   }, 
   set value(_global$5) {
    global$5 = _global$5;
   }
  }, 
  "malloc": $1146, 
  "fflush": $1015, 
  "strerror": $1207, 
  "emscripten_stack_init": $1335, 
  "emscripten_stack_get_free": $1336, 
  "emscripten_stack_get_base": $1337, 
  "emscripten_stack_get_end": $1338, 
  "_emscripten_stack_restore": $1339, 
  "_emscripten_stack_alloc": $1340, 
  "emscripten_stack_get_current": $1341, 
  "__start_em_lib_deps": {
   get value() {
    return global$6;
   }, 
   set value(_global$6) {
    global$6 = _global$6;
   }
  }, 
  "__stop_em_lib_deps": {
   get value() {
    return global$7;
   }, 
   set value(_global$7) {
    global$7 = _global$7;
   }
  }, 
  "__start_em_asm": {
   get value() {
    return global$8;
   }, 
   set value(_global$8) {
    global$8 = _global$8;
   }
  }, 
  "__stop_em_asm": {
   get value() {
    return global$9;
   }, 
   set value(_global$9) {
    global$9 = _global$9;
   }
  }, 
  "dynCall_jiji": $1344, 
  "dynCall_ji": $1345
 };
}

  return asmFunc(info);
}

)(info);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module, info)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error,

  isWasm2js: true,
};
// end include: wasm2js.js
if (WebAssembly.isWasm2js) {
  // We don't need to actually download a wasm binary, mark it as present but
  // empty.
  wasmBinary = [];
}

if (typeof WebAssembly != 'object') {
  err('no native wasm support detected');
}

// include: base64Utils.js
// Converts a string of base64 into a byte array (Uint8Array).
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE != 'undefined' && ENVIRONMENT_IS_NODE) {
    var buf = Buffer.from(s, 'base64');
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.length);
  }

  var decoded = atob(s);
  var bytes = new Uint8Array(decoded.length);
  for (var i = 0 ; i < decoded.length ; ++i) {
    bytes[i] = decoded.charCodeAt(i);
  }
  return bytes;
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}
// end include: base64Utils.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

// In STRICT mode, we only define assert() when ASSERTIONS is set.  i.e. we
// don't define it at all in release modes.  This matches the behaviour of
// MINIMAL_RUNTIME.
// TODO(sbc): Make this the default even without STRICT enabled.
/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed' + (text ? ': ' + text : ''));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.
function _free() {
  // Show a helpful error since we used to include free by default in the past.
  abort('free() called but not included in the build - add `_free` to EXPORTED_FUNCTIONS');
}

// Memory management

var HEAP,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

// include: runtime_shared.js
function updateMemoryViews() {
  var b = wasmMemory.buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(b);
  Module['HEAP16'] = HEAP16 = new Int16Array(b);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);
  Module['HEAP32'] = HEAP32 = new Int32Array(b);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(b);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(b);
}

// end include: runtime_shared.js
assert(!Module['STACK_SIZE'], 'STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time')

assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
       'JS engine does not provide full typed array support');

// If memory is defined in wasm, the user can't provide it, or set INITIAL_MEMORY
assert(!Module['wasmMemory'], 'Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally');
assert(!Module['INITIAL_MEMORY'], 'Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically');

// include: runtime_stack_check.js
// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // If the stack ends at address zero we write our cookies 4 bytes into the
  // stack.  This prevents interference with SAFE_HEAP and ASAN which also
  // monitor writes to address zero.
  if (max == 0) {
    max += 4;
  }
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAPU32[((max)>>2)] = 0x02135467;
  HEAPU32[(((max)+(4))>>2)] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAPU32[((0)>>2)] = 1668509029;
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  // See writeStackCookie().
  if (max == 0) {
    max += 4;
  }
  var cookie1 = HEAPU32[((max)>>2)];
  var cookie2 = HEAPU32[(((max)+(4))>>2)];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort(`Stack overflow! Stack cookie has been overwritten at ${ptrToString(max)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${ptrToString(cookie2)} ${ptrToString(cookie1)}`);
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[((0)>>2)] != 0x63736d65 /* 'emsc' */) {
    abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
  }
}
// end include: runtime_stack_check.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;

function preRun() {
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  checkStackCookie();

  
if (!Module['noFSInit'] && !FS.initialized)
  FS.init();
FS.ignorePermissions = false;

TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  
  callRuntimeCallbacks(__ATMAIN__);
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  Module['monitorRunDependencies']?.(runDependencies);

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(() => {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err(`dependency: ${dep}`);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  Module['monitorRunDependencies']?.(runDependencies);

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  Module['onAbort']?.(what);

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // definition for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// include: memoryprofiler.js
// end include: memoryprofiler.js
// include: URIUtils.js
// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

/**
 * Indicates whether filename is a base64 data URI.
 * @noinline
 */
var isDataURI = (filename) => filename.startsWith(dataURIPrefix);

/**
 * Indicates whether filename is delivered via file protocol (as opposed to http/https)
 * @noinline
 */
var isFileURI = (filename) => filename.startsWith('file://');
// end include: URIUtils.js
function createExportWrapper(name, nargs) {
  return (...args) => {
    assert(runtimeInitialized, `native function \`${name}\` called before runtime initialization`);
    var f = wasmExports[name];
    assert(f, `exported native function \`${name}\` not found`);
    // Only assert for too many arguments. Too few can be valid since the missing arguments will be zero filled.
    assert(args.length <= nargs, `native function \`${name}\` called with ${args.length} args but expects ${nargs}`);
    return f(...args);
  };
}

// include: runtime_exceptions.js
// end include: runtime_exceptions.js
function findWasmBinary() {
    var f = 'hello_text_txf.wasm';
    if (!isDataURI(f)) {
      return locateFile(f);
    }
    return f;
}

var wasmBinaryFile;

function getBinarySync(file) {
  if (file == wasmBinaryFile && wasmBinary) {
    return new Uint8Array(wasmBinary);
  }
  if (readBinary) {
    return readBinary(file);
  }
  throw 'both async and sync fetching of the wasm failed';
}

function getBinaryPromise(binaryFile) {
  // If we don't have the binary yet, load it asynchronously using readAsync.
  if (!wasmBinary
      ) {
    // Fetch the binary using readAsync
    return readAsync(binaryFile).then(
      (response) => new Uint8Array(/** @type{!ArrayBuffer} */(response)),
      // Fall back to getBinarySync if readAsync fails
      () => getBinarySync(binaryFile)
    );
  }

  // Otherwise, getBinarySync should be able to get it synchronously
  return Promise.resolve().then(() => getBinarySync(binaryFile));
}

function instantiateArrayBuffer(binaryFile, imports, receiver) {
  return getBinaryPromise(binaryFile).then((binary) => {
    return WebAssembly.instantiate(binary, imports);
  }).then(receiver, (reason) => {
    err(`failed to asynchronously prepare wasm: ${reason}`);

    // Warn on some common problems.
    if (isFileURI(wasmBinaryFile)) {
      err(`warning: Loading from a file URI (${wasmBinaryFile}) is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing`);
    }
    abort(reason);
  });
}

function instantiateAsync(binary, binaryFile, imports, callback) {
  if (!binary &&
      typeof WebAssembly.instantiateStreaming == 'function' &&
      !isDataURI(binaryFile) &&
      // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
      !isFileURI(binaryFile) &&
      // Avoid instantiateStreaming() on Node.js environment for now, as while
      // Node.js v18.1.0 implements it, it does not have a full fetch()
      // implementation yet.
      //
      // Reference:
      //   https://github.com/emscripten-core/emscripten/pull/16917
      !ENVIRONMENT_IS_NODE &&
      typeof fetch == 'function') {
    return fetch(binaryFile, { credentials: 'same-origin' }).then((response) => {
      // Suppress closure warning here since the upstream definition for
      // instantiateStreaming only allows Promise<Repsponse> rather than
      // an actual Response.
      // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.
      /** @suppress {checkTypes} */
      var result = WebAssembly.instantiateStreaming(response, imports);

      return result.then(
        callback,
        function(reason) {
          // We expect the most common failure cause to be a bad MIME type for the binary,
          // in which case falling back to ArrayBuffer instantiation should work.
          err(`wasm streaming compile failed: ${reason}`);
          err('falling back to ArrayBuffer instantiation');
          return instantiateArrayBuffer(binaryFile, imports, callback);
        });
    });
  }
  return instantiateArrayBuffer(binaryFile, imports, callback);
}

function getWasmImports() {
  // prepare imports
  return {
    'env': wasmImports,
    'wasi_snapshot_preview1': wasmImports,
  }
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  var info = getWasmImports();
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    wasmExports = instance.exports;

    

    wasmMemory = wasmExports['memory'];
    
    assert(wasmMemory, 'memory not found in wasm exports');
    updateMemoryViews();

    wasmTable = wasmExports['__indirect_function_table'];
    
    assert(wasmTable, 'table not found in wasm exports');

    addOnInit(wasmExports['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
    return wasmExports;
  }
  // wait for the pthread pool (if any)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to
  // run the instantiation parallel to any other async startup actions they are
  // performing.
  // Also pthreads and wasm workers initialize the wasm instance through this
  // path.
  if (Module['instantiateWasm']) {
    try {
      return Module['instantiateWasm'](info, receiveInstance);
    } catch(e) {
      err(`Module.instantiateWasm callback failed with error: ${e}`);
        return false;
    }
  }

  if (!wasmBinaryFile) wasmBinaryFile = findWasmBinary();

  instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult);
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// include: runtime_debug.js
// Endianness check
(() => {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
})();

function legacyModuleProp(prop, newName, incoming=true) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get() {
        let extra = incoming ? ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)' : '';
        abort(`\`Module.${prop}\` has been replaced by \`${newName}\`` + extra);

      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort(`\`Module.${prop}\` was supplied but \`${prop}\` not included in INCOMING_MODULE_JS_API`);
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === 'FS_createPath' ||
         name === 'FS_createDataFile' ||
         name === 'FS_createPreloadedFile' ||
         name === 'FS_unlink' ||
         name === 'addRunDependency' ||
         // The old FS has some functionality that WasmFS lacks.
         name === 'FS_createLazyFile' ||
         name === 'FS_createDevice' ||
         name === 'removeRunDependency';
}

function missingGlobal(sym, msg) {
  if (typeof globalThis != 'undefined') {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get() {
        warnOnce(`\`${sym}\` is not longer defined by emscripten. ${msg}`);
        return undefined;
      }
    });
  }
}

missingGlobal('buffer', 'Please use HEAP8.buffer or wasmMemory.buffer');
missingGlobal('asm', 'Please use wasmExports instead');

function missingLibrarySymbol(sym) {
  if (typeof globalThis != 'undefined' && !Object.getOwnPropertyDescriptor(globalThis, sym)) {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get() {
        // Can't `abort()` here because it would break code that does runtime
        // checks.  e.g. `if (typeof SDL === 'undefined')`.
        var msg = `\`${sym}\` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line`;
        // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
        // library.js, which means $name for a JS name with no prefix, or name
        // for a JS name like _name.
        var librarySymbol = sym;
        if (!librarySymbol.startsWith('_')) {
          librarySymbol = '$' + sym;
        }
        msg += ` (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='${librarySymbol}')`;
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        warnOnce(msg);
        return undefined;
      }
    });
  }
  // Any symbol that is not included from the JS library is also (by definition)
  // not exported on the Module object.
  unexportedRuntimeSymbol(sym);
}

function unexportedRuntimeSymbol(sym) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get() {
        var msg = `'${sym}' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)`;
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        abort(msg);
      }
    });
  }
}

// Used by XXXXX_DEBUG settings to output debug messages.
function dbg(...args) {
  // TODO(sbc): Make this configurable somehow.  Its not always convenient for
  // logging to show up as warnings.
  console.warn(...args);
}
// end include: runtime_debug.js
// === Body ===

var ASM_CONSTS = {
  118001: () => { if (typeof(AudioContext) !== 'undefined') { return true; } else if (typeof(webkitAudioContext) !== 'undefined') { return true; } return false; },  
 118148: () => { if ((typeof(navigator.mediaDevices) !== 'undefined') && (typeof(navigator.mediaDevices.getUserMedia) !== 'undefined')) { return true; } else if (typeof(navigator.webkitGetUserMedia) !== 'undefined') { return true; } return false; },  
 118382: ($0) => { if(typeof(Module['SDL2']) === 'undefined') { Module['SDL2'] = {}; } var SDL2 = Module['SDL2']; if (!$0) { SDL2.audio = {}; } else { SDL2.capture = {}; } if (!SDL2.audioContext) { if (typeof(AudioContext) !== 'undefined') { SDL2.audioContext = new AudioContext(); } else if (typeof(webkitAudioContext) !== 'undefined') { SDL2.audioContext = new webkitAudioContext(); } if (SDL2.audioContext) { autoResumeAudioContext(SDL2.audioContext); } } return SDL2.audioContext === undefined ? -1 : 0; },  
 118875: () => { var SDL2 = Module['SDL2']; return SDL2.audioContext.sampleRate; },  
 118943: ($0, $1, $2, $3) => { var SDL2 = Module['SDL2']; var have_microphone = function(stream) { if (SDL2.capture.silenceTimer !== undefined) { clearTimeout(SDL2.capture.silenceTimer); SDL2.capture.silenceTimer = undefined; } SDL2.capture.mediaStreamNode = SDL2.audioContext.createMediaStreamSource(stream); SDL2.capture.scriptProcessorNode = SDL2.audioContext.createScriptProcessor($1, $0, 1); SDL2.capture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) { if ((SDL2 === undefined) || (SDL2.capture === undefined)) { return; } audioProcessingEvent.outputBuffer.getChannelData(0).fill(0.0); SDL2.capture.currentCaptureBuffer = audioProcessingEvent.inputBuffer; dynCall('vi', $2, [$3]); }; SDL2.capture.mediaStreamNode.connect(SDL2.capture.scriptProcessorNode); SDL2.capture.scriptProcessorNode.connect(SDL2.audioContext.destination); SDL2.capture.stream = stream; }; var no_microphone = function(error) { }; SDL2.capture.silenceBuffer = SDL2.audioContext.createBuffer($0, $1, SDL2.audioContext.sampleRate); SDL2.capture.silenceBuffer.getChannelData(0).fill(0.0); var silence_callback = function() { SDL2.capture.currentCaptureBuffer = SDL2.capture.silenceBuffer; dynCall('vi', $2, [$3]); }; SDL2.capture.silenceTimer = setTimeout(silence_callback, ($1 / SDL2.audioContext.sampleRate) * 1000); if ((navigator.mediaDevices !== undefined) && (navigator.mediaDevices.getUserMedia !== undefined)) { navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then(have_microphone).catch(no_microphone); } else if (navigator.webkitGetUserMedia !== undefined) { navigator.webkitGetUserMedia({ audio: true, video: false }, have_microphone, no_microphone); } },  
 120595: ($0, $1, $2, $3) => { var SDL2 = Module['SDL2']; SDL2.audio.scriptProcessorNode = SDL2.audioContext['createScriptProcessor']($1, 0, $0); SDL2.audio.scriptProcessorNode['onaudioprocess'] = function (e) { if ((SDL2 === undefined) || (SDL2.audio === undefined)) { return; } SDL2.audio.currentOutputBuffer = e['outputBuffer']; dynCall('vi', $2, [$3]); }; SDL2.audio.scriptProcessorNode['connect'](SDL2.audioContext['destination']); },  
 121005: ($0, $1) => { var SDL2 = Module['SDL2']; var numChannels = SDL2.capture.currentCaptureBuffer.numberOfChannels; for (var c = 0; c < numChannels; ++c) { var channelData = SDL2.capture.currentCaptureBuffer.getChannelData(c); if (channelData.length != $1) { throw 'Web Audio capture buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + $1 + ' samples!'; } if (numChannels == 1) { for (var j = 0; j < $1; ++j) { setValue($0 + (j * 4), channelData[j], 'float'); } } else { for (var j = 0; j < $1; ++j) { setValue($0 + (((j * numChannels) + c) * 4), channelData[j], 'float'); } } } },  
 121610: ($0, $1) => { var SDL2 = Module['SDL2']; var numChannels = SDL2.audio.currentOutputBuffer['numberOfChannels']; for (var c = 0; c < numChannels; ++c) { var channelData = SDL2.audio.currentOutputBuffer['getChannelData'](c); if (channelData.length != $1) { throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + $1 + ' samples!'; } for (var j = 0; j < $1; ++j) { channelData[j] = HEAPF32[$0 + ((j*numChannels + c) << 2) >> 2]; } } },  
 122090: ($0) => { var SDL2 = Module['SDL2']; if ($0) { if (SDL2.capture.silenceTimer !== undefined) { clearTimeout(SDL2.capture.silenceTimer); } if (SDL2.capture.stream !== undefined) { var tracks = SDL2.capture.stream.getAudioTracks(); for (var i = 0; i < tracks.length; i++) { SDL2.capture.stream.removeTrack(tracks[i]); } SDL2.capture.stream = undefined; } if (SDL2.capture.scriptProcessorNode !== undefined) { SDL2.capture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) {}; SDL2.capture.scriptProcessorNode.disconnect(); SDL2.capture.scriptProcessorNode = undefined; } if (SDL2.capture.mediaStreamNode !== undefined) { SDL2.capture.mediaStreamNode.disconnect(); SDL2.capture.mediaStreamNode = undefined; } if (SDL2.capture.silenceBuffer !== undefined) { SDL2.capture.silenceBuffer = undefined } SDL2.capture = undefined; } else { if (SDL2.audio.scriptProcessorNode != undefined) { SDL2.audio.scriptProcessorNode.disconnect(); SDL2.audio.scriptProcessorNode = undefined; } SDL2.audio = undefined; } if ((SDL2.audioContext !== undefined) && (SDL2.audio === undefined) && (SDL2.capture === undefined)) { SDL2.audioContext.close(); SDL2.audioContext = undefined; } },  
 123262: ($0, $1, $2) => { var w = $0; var h = $1; var pixels = $2; if (!Module['SDL2']) Module['SDL2'] = {}; var SDL2 = Module['SDL2']; if (SDL2.ctxCanvas !== Module['canvas']) { SDL2.ctx = Module['createContext'](Module['canvas'], false, true); SDL2.ctxCanvas = Module['canvas']; } if (SDL2.w !== w || SDL2.h !== h || SDL2.imageCtx !== SDL2.ctx) { SDL2.image = SDL2.ctx.createImageData(w, h); SDL2.w = w; SDL2.h = h; SDL2.imageCtx = SDL2.ctx; } var data = SDL2.image.data; var src = pixels >> 2; var dst = 0; var num; if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) { num = data.length; while (dst < num) { var val = HEAP32[src]; data[dst ] = val & 0xff; data[dst+1] = (val >> 8) & 0xff; data[dst+2] = (val >> 16) & 0xff; data[dst+3] = 0xff; src++; dst += 4; } } else { if (SDL2.data32Data !== data) { SDL2.data32 = new Int32Array(data.buffer); SDL2.data8 = new Uint8Array(data.buffer); SDL2.data32Data = data; } var data32 = SDL2.data32; num = data32.length; data32.set(HEAP32.subarray(src, src + num)); var data8 = SDL2.data8; var i = 3; var j = i + 4*num; if (num % 8 == 0) { while (i < j) { data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; } } else { while (i < j) { data8[i] = 0xff; i = i + 4 | 0; } } } SDL2.ctx.putImageData(SDL2.image, 0, 0); },  
 124731: ($0, $1, $2, $3, $4) => { var w = $0; var h = $1; var hot_x = $2; var hot_y = $3; var pixels = $4; var canvas = document.createElement("canvas"); canvas.width = w; canvas.height = h; var ctx = canvas.getContext("2d"); var image = ctx.createImageData(w, h); var data = image.data; var src = pixels >> 2; var dst = 0; var num; if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) { num = data.length; while (dst < num) { var val = HEAP32[src]; data[dst ] = val & 0xff; data[dst+1] = (val >> 8) & 0xff; data[dst+2] = (val >> 16) & 0xff; data[dst+3] = (val >> 24) & 0xff; src++; dst += 4; } } else { var data32 = new Int32Array(data.buffer); num = data32.length; data32.set(HEAP32.subarray(src, src + num)); } ctx.putImageData(image, 0, 0); var url = hot_x === 0 && hot_y === 0 ? "url(" + canvas.toDataURL() + "), auto" : "url(" + canvas.toDataURL() + ") " + hot_x + " " + hot_y + ", auto"; var urlBuf = _malloc(url.length + 1); stringToUTF8(url, urlBuf, url.length + 1); return urlBuf; },  
 125720: ($0) => { if (Module['canvas']) { Module['canvas'].style['cursor'] = UTF8ToString($0); } },  
 125803: () => { if (Module['canvas']) { Module['canvas'].style['cursor'] = 'none'; } },  
 125872: () => { return window.innerWidth; },  
 125902: () => { return window.innerHeight; }
};

// end include: preamble.js


  /** @constructor */
  function ExitStatus(status) {
      this.name = 'ExitStatus';
      this.message = `Program terminated with exit(${status})`;
      this.status = status;
    }

  var callRuntimeCallbacks = (callbacks) => {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    };

  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': return HEAP8[ptr];
      case 'i8': return HEAP8[ptr];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': abort('to do getValue(i64) use WASM_BIGINT');
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      case '*': return HEAPU32[((ptr)>>2)];
      default: abort(`invalid type for getValue: ${type}`);
    }
  }

  var noExitRuntime = Module['noExitRuntime'] || true;

  var ptrToString = (ptr) => {
      assert(typeof ptr === 'number');
      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
      ptr >>>= 0;
      return '0x' + ptr.toString(16).padStart(8, '0');
    };

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': HEAP8[ptr] = value; break;
      case 'i8': HEAP8[ptr] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': abort('to do setValue(i64) use WASM_BIGINT');
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      case '*': HEAPU32[((ptr)>>2)] = value; break;
      default: abort(`invalid type for setValue: ${type}`);
    }
  }

  var stackRestore = (val) => __emscripten_stack_restore(val);

  var stackSave = () => _emscripten_stack_get_current();

  var warnOnce = (text) => {
      warnOnce.shown ||= {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        if (ENVIRONMENT_IS_NODE) text = 'warning: ' + text;
        err(text);
      }
    };

  var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder() : undefined;
  
    /**
     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
     * array that contains uint8 values, returns a copy of that string as a
     * Javascript String object.
     * heapOrArray is either a regular array, or a JavaScript typed array view.
     * @param {number} idx
     * @param {number=} maxBytesToRead
     * @return {string}
     */
  var UTF8ArrayToString = (heapOrArray, idx, maxBytesToRead) => {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.  Also, use the length info to avoid running tiny
      // strings through TextDecoder, since .subarray() allocates garbage.
      // (As a tiny code save trick, compare endPtr against endIdx using a negation,
      // so that undefined means Infinity)
      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
  
      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
      }
      var str = '';
      // If building with TextDecoder, we have already computed the string length
      // above, so test loop end condition against that
      while (idx < endPtr) {
        // For UTF8 byte structure, see:
        // http://en.wikipedia.org/wiki/UTF-8#Description
        // https://www.ietf.org/rfc/rfc2279.txt
        // https://tools.ietf.org/html/rfc3629
        var u0 = heapOrArray[idx++];
        if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
        var u1 = heapOrArray[idx++] & 63;
        if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
        var u2 = heapOrArray[idx++] & 63;
        if ((u0 & 0xF0) == 0xE0) {
          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
        } else {
          if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte ' + ptrToString(u0) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
        }
  
        if (u0 < 0x10000) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        }
      }
      return str;
    };
  
    /**
     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
     * emscripten HEAP, returns a copy of that string as a Javascript String object.
     *
     * @param {number} ptr
     * @param {number=} maxBytesToRead - An optional length that specifies the
     *   maximum number of bytes to read. You can omit this parameter to scan the
     *   string until the first 0 byte. If maxBytesToRead is passed, and the string
     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
     *   string will cut short at that byte index (i.e. maxBytesToRead will not
     *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
     *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
     *   JS JIT optimizations off, so it is worth to consider consistently using one
     * @return {string}
     */
  var UTF8ToString = (ptr, maxBytesToRead) => {
      assert(typeof ptr == 'number', `UTF8ToString expects a number (got ${typeof ptr})`);
      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
    };
  var ___assert_fail = (condition, filename, line, func) => {
      abort(`Assertion failed: ${UTF8ToString(condition)}, at: ` + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    };

  class ExceptionInfo {
      // excPtr - Thrown object pointer to wrap. Metadata pointer is calculated from it.
      constructor(excPtr) {
        this.excPtr = excPtr;
        this.ptr = excPtr - 24;
      }
  
      set_type(type) {
        HEAPU32[(((this.ptr)+(4))>>2)] = type;
      }
  
      get_type() {
        return HEAPU32[(((this.ptr)+(4))>>2)];
      }
  
      set_destructor(destructor) {
        HEAPU32[(((this.ptr)+(8))>>2)] = destructor;
      }
  
      get_destructor() {
        return HEAPU32[(((this.ptr)+(8))>>2)];
      }
  
      set_caught(caught) {
        caught = caught ? 1 : 0;
        HEAP8[(this.ptr)+(12)] = caught;
      }
  
      get_caught() {
        return HEAP8[(this.ptr)+(12)] != 0;
      }
  
      set_rethrown(rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(this.ptr)+(13)] = rethrown;
      }
  
      get_rethrown() {
        return HEAP8[(this.ptr)+(13)] != 0;
      }
  
      // Initialize native structure fields. Should be called once after allocated.
      init(type, destructor) {
        this.set_adjusted_ptr(0);
        this.set_type(type);
        this.set_destructor(destructor);
      }
  
      set_adjusted_ptr(adjustedPtr) {
        HEAPU32[(((this.ptr)+(16))>>2)] = adjustedPtr;
      }
  
      get_adjusted_ptr() {
        return HEAPU32[(((this.ptr)+(16))>>2)];
      }
    }
  
  var exceptionLast = 0;
  
  var uncaughtExceptionCount = 0;
  var ___cxa_throw = (ptr, type, destructor) => {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      assert(false, 'Exception thrown, but exception catching is not enabled. Compile with -sNO_DISABLE_EXCEPTION_CATCHING or -sEXCEPTION_CATCHING_ALLOWED=[..] to catch.');
    };

  /** @suppress {duplicate } */
  function syscallGetVarargI() {
      assert(SYSCALLS.varargs != undefined);
      // the `+` prepended here is necessary to convince the JSCompiler that varargs is indeed a number.
      var ret = HEAP32[((+SYSCALLS.varargs)>>2)];
      SYSCALLS.varargs += 4;
      return ret;
    }
  var syscallGetVarargP = syscallGetVarargI;
  
  
  var PATH = {
  isAbs:(path) => path.charAt(0) === '/',
  splitPath:(filename) => {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },
  normalizeArray:(parts, allowAboveRoot) => {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },
  normalize:(path) => {
        var isAbsolute = PATH.isAbs(path),
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },
  dirname:(path) => {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },
  basename:(path) => {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },
  join:(...paths) => PATH.normalize(paths.join('/')),
  join2:(l, r) => PATH.normalize(l + '/' + r),
  };
  
  var initRandomFill = () => {
      if (typeof crypto == 'object' && typeof crypto['getRandomValues'] == 'function') {
        // for modern web browsers
        return (view) => crypto.getRandomValues(view);
      } else
      if (ENVIRONMENT_IS_NODE) {
        // for nodejs with or without crypto support included
        try {
          var crypto_module = require('crypto');
          var randomFillSync = crypto_module['randomFillSync'];
          if (randomFillSync) {
            // nodejs with LTS crypto support
            return (view) => crypto_module['randomFillSync'](view);
          }
          // very old nodejs with the original crypto API
          var randomBytes = crypto_module['randomBytes'];
          return (view) => (
            view.set(randomBytes(view.byteLength)),
            // Return the original view to match modern native implementations.
            view
          );
        } catch (e) {
          // nodejs doesn't have crypto support
        }
      }
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      abort('no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: (array) => { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };');
    };
  var randomFill = (view) => {
      // Lazily init on the first invocation.
      return (randomFill = initRandomFill())(view);
    };
  
  
  
  var PATH_FS = {
  resolve:(...args) => {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? args[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path != 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = PATH.isAbs(path);
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },
  relative:(from, to) => {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      },
  };
  
  
  
  var FS_stdin_getChar_buffer = [];
  
  var lengthBytesUTF8 = (str) => {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var c = str.charCodeAt(i); // possibly a lead surrogate
        if (c <= 0x7F) {
          len++;
        } else if (c <= 0x7FF) {
          len += 2;
        } else if (c >= 0xD800 && c <= 0xDFFF) {
          len += 4; ++i;
        } else {
          len += 3;
        }
      }
      return len;
    };
  
  var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
      assert(typeof str === 'string', `stringToUTF8Array expects a string (got ${typeof str})`);
      // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
      // undefined and false each don't write out any bytes.
      if (!(maxBytesToWrite > 0))
        return 0;
  
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
        // and https://www.ietf.org/rfc/rfc2279.txt
        // and https://tools.ietf.org/html/rfc3629
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) {
          var u1 = str.charCodeAt(++i);
          u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
        }
        if (u <= 0x7F) {
          if (outIdx >= endIdx) break;
          heap[outIdx++] = u;
        } else if (u <= 0x7FF) {
          if (outIdx + 1 >= endIdx) break;
          heap[outIdx++] = 0xC0 | (u >> 6);
          heap[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0xFFFF) {
          if (outIdx + 2 >= endIdx) break;
          heap[outIdx++] = 0xE0 | (u >> 12);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        } else {
          if (outIdx + 3 >= endIdx) break;
          if (u > 0x10FFFF) warnOnce('Invalid Unicode code point ' + ptrToString(u) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
          heap[outIdx++] = 0xF0 | (u >> 18);
          heap[outIdx++] = 0x80 | ((u >> 12) & 63);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        }
      }
      // Null-terminate the pointer to the buffer.
      heap[outIdx] = 0;
      return outIdx - startIdx;
    };
  /** @type {function(string, boolean=, number=)} */
  function intArrayFromString(stringy, dontAddNull, length) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull) u8array.length = numBytesWritten;
    return u8array;
  }
  var FS_stdin_getChar = () => {
      if (!FS_stdin_getChar_buffer.length) {
        var result = null;
        if (ENVIRONMENT_IS_NODE) {
          // we will read data by chunks of BUFSIZE
          var BUFSIZE = 256;
          var buf = Buffer.alloc(BUFSIZE);
          var bytesRead = 0;
  
          // For some reason we must suppress a closure warning here, even though
          // fd definitely exists on process.stdin, and is even the proper way to
          // get the fd of stdin,
          // https://github.com/nodejs/help/issues/2136#issuecomment-523649904
          // This started to happen after moving this logic out of library_tty.js,
          // so it is related to the surrounding code in some unclear manner.
          /** @suppress {missingProperties} */
          var fd = process.stdin.fd;
  
          try {
            bytesRead = fs.readSync(fd, buf, 0, BUFSIZE);
          } catch(e) {
            // Cross-platform differences: on Windows, reading EOF throws an
            // exception, but on other OSes, reading EOF returns 0. Uniformize
            // behavior by treating the EOF exception to return 0.
            if (e.toString().includes('EOF')) bytesRead = 0;
            else throw e;
          }
  
          if (bytesRead > 0) {
            result = buf.slice(0, bytesRead).toString('utf-8');
          }
        } else
        if (typeof window != 'undefined' &&
          typeof window.prompt == 'function') {
          // Browser.
          result = window.prompt('Input: ');  // returns null on cancel
          if (result !== null) {
            result += '\n';
          }
        } else
        {}
        if (!result) {
          return null;
        }
        FS_stdin_getChar_buffer = intArrayFromString(result, true);
      }
      return FS_stdin_getChar_buffer.shift();
    };
  var TTY = {
  ttys:[],
  init() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process.stdin.setEncoding('utf8');
        // }
      },
  shutdown() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process.stdin.pause();
        // }
      },
  register(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },
  stream_ops:{
  open(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },
  close(stream) {
          // flush any pending line data
          stream.tty.ops.fsync(stream.tty);
        },
  fsync(stream) {
          stream.tty.ops.fsync(stream.tty);
        },
  read(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },
  write(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        },
  },
  default_tty_ops:{
  get_char(tty) {
          return FS_stdin_getChar();
        },
  put_char(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },
  fsync(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        },
  ioctl_tcgets(tty) {
          // typical setting
          return {
            c_iflag: 25856,
            c_oflag: 5,
            c_cflag: 191,
            c_lflag: 35387,
            c_cc: [
              0x03, 0x1c, 0x7f, 0x15, 0x04, 0x00, 0x01, 0x00, 0x11, 0x13, 0x1a, 0x00,
              0x12, 0x0f, 0x17, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            ]
          };
        },
  ioctl_tcsets(tty, optional_actions, data) {
          // currently just ignore
          return 0;
        },
  ioctl_tiocgwinsz(tty) {
          return [24, 80];
        },
  },
  default_tty1_ops:{
  put_char(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },
  fsync(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        },
  },
  };
  
  
  var zeroMemory = (address, size) => {
      HEAPU8.fill(0, address, address + size);
      return address;
    };
  
  var alignMemory = (size, alignment) => {
      assert(alignment, "alignment argument is required");
      return Math.ceil(size / alignment) * alignment;
    };
  var mmapAlloc = (size) => {
      abort('internal error: mmapAlloc called but `emscripten_builtin_memalign` native symbol not exported');
    };
  var MEMFS = {
  ops_table:null,
  mount(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },
  createNode(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        MEMFS.ops_table ||= {
          dir: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr,
              lookup: MEMFS.node_ops.lookup,
              mknod: MEMFS.node_ops.mknod,
              rename: MEMFS.node_ops.rename,
              unlink: MEMFS.node_ops.unlink,
              rmdir: MEMFS.node_ops.rmdir,
              readdir: MEMFS.node_ops.readdir,
              symlink: MEMFS.node_ops.symlink
            },
            stream: {
              llseek: MEMFS.stream_ops.llseek
            }
          },
          file: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr
            },
            stream: {
              llseek: MEMFS.stream_ops.llseek,
              read: MEMFS.stream_ops.read,
              write: MEMFS.stream_ops.write,
              allocate: MEMFS.stream_ops.allocate,
              mmap: MEMFS.stream_ops.mmap,
              msync: MEMFS.stream_ops.msync
            }
          },
          link: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr,
              readlink: MEMFS.node_ops.readlink
            },
            stream: {}
          },
          chrdev: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr
            },
            stream: FS.chrdev_stream_ops
          }
        };
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.timestamp = node.timestamp;
        }
        return node;
      },
  getFileDataAsTypedArray(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },
  expandFileStorage(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },
  resizeFileStorage(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },
  node_ops:{
  getattr(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },
  setattr(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },
  lookup(parent, name) {
          throw FS.genericErrors[44];
        },
  mknod(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },
  rename(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.parent.timestamp = Date.now()
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          new_dir.timestamp = old_node.parent.timestamp;
        },
  unlink(parent, name) {
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },
  rmdir(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },
  readdir(node) {
          var entries = ['.', '..'];
          for (var key of Object.keys(node.contents)) {
            entries.push(key);
          }
          return entries;
        },
  symlink(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },
  readlink(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        },
  },
  stream_ops:{
  read(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },
  write(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },
  llseek(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },
  allocate(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },
  mmap(stream, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents && contents.buffer === HEAP8.buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the
            // buffer we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            if (contents) {
              // Try to avoid unnecessary slices.
              if (position > 0 || position + length < contents.length) {
                if (contents.subarray) {
                  contents = contents.subarray(position, position + length);
                } else {
                  contents = Array.prototype.slice.call(contents, position, position + length);
                }
              }
              HEAP8.set(contents, ptr);
            }
          }
          return { ptr, allocated };
        },
  msync(stream, buffer, offset, length, mmapFlags) {
          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        },
  },
  };
  
  /** @param {boolean=} noRunDep */
  var asyncLoad = (url, onload, onerror, noRunDep) => {
      var dep = !noRunDep ? getUniqueRunDependency(`al ${url}`) : '';
      readAsync(url).then(
        (arrayBuffer) => {
          assert(arrayBuffer, `Loading data file "${url}" failed (no arrayBuffer).`);
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        },
        (err) => {
          if (onerror) {
            onerror();
          } else {
            throw `Loading data file "${url}" failed.`;
          }
        }
      );
      if (dep) addRunDependency(dep);
    };
  
  
  var FS_createDataFile = (parent, name, fileData, canRead, canWrite, canOwn) => {
      FS.createDataFile(parent, name, fileData, canRead, canWrite, canOwn);
    };
  
  var preloadPlugins = Module['preloadPlugins'] || [];
  var FS_handledByPreloadPlugin = (byteArray, fullname, finish, onerror) => {
      // Ensure plugins are ready.
      if (typeof Browser != 'undefined') Browser.init();
  
      var handled = false;
      preloadPlugins.forEach((plugin) => {
        if (handled) return;
        if (plugin['canHandle'](fullname)) {
          plugin['handle'](byteArray, fullname, finish, onerror);
          handled = true;
        }
      });
      return handled;
    };
  var FS_createPreloadedFile = (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
      // TODO we should allow people to just pass in a complete filename instead
      // of parent and name being that we just join them anyways
      var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
      var dep = getUniqueRunDependency(`cp ${fullname}`); // might have several active requests for the same fullname
      function processData(byteArray) {
        function finish(byteArray) {
          preFinish?.();
          if (!dontCreateFile) {
            FS_createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
          }
          onload?.();
          removeRunDependency(dep);
        }
        if (FS_handledByPreloadPlugin(byteArray, fullname, finish, () => {
          onerror?.();
          removeRunDependency(dep);
        })) {
          return;
        }
        finish(byteArray);
      }
      addRunDependency(dep);
      if (typeof url == 'string') {
        asyncLoad(url, processData, onerror);
      } else {
        processData(url);
      }
    };
  
  var FS_modeStringToFlags = (str) => {
      var flagModes = {
        'r': 0,
        'r+': 2,
        'w': 512 | 64 | 1,
        'w+': 512 | 64 | 2,
        'a': 1024 | 64 | 1,
        'a+': 1024 | 64 | 2,
      };
      var flags = flagModes[str];
      if (typeof flags == 'undefined') {
        throw new Error(`Unknown file open mode: ${str}`);
      }
      return flags;
    };
  
  var FS_getMode = (canRead, canWrite) => {
      var mode = 0;
      if (canRead) mode |= 292 | 73;
      if (canWrite) mode |= 146;
      return mode;
    };
  
  
  
  
  
  
  var strError = (errno) => {
      return UTF8ToString(_strerror(errno));
    };
  
  var ERRNO_CODES = {
      'EPERM': 63,
      'ENOENT': 44,
      'ESRCH': 71,
      'EINTR': 27,
      'EIO': 29,
      'ENXIO': 60,
      'E2BIG': 1,
      'ENOEXEC': 45,
      'EBADF': 8,
      'ECHILD': 12,
      'EAGAIN': 6,
      'EWOULDBLOCK': 6,
      'ENOMEM': 48,
      'EACCES': 2,
      'EFAULT': 21,
      'ENOTBLK': 105,
      'EBUSY': 10,
      'EEXIST': 20,
      'EXDEV': 75,
      'ENODEV': 43,
      'ENOTDIR': 54,
      'EISDIR': 31,
      'EINVAL': 28,
      'ENFILE': 41,
      'EMFILE': 33,
      'ENOTTY': 59,
      'ETXTBSY': 74,
      'EFBIG': 22,
      'ENOSPC': 51,
      'ESPIPE': 70,
      'EROFS': 69,
      'EMLINK': 34,
      'EPIPE': 64,
      'EDOM': 18,
      'ERANGE': 68,
      'ENOMSG': 49,
      'EIDRM': 24,
      'ECHRNG': 106,
      'EL2NSYNC': 156,
      'EL3HLT': 107,
      'EL3RST': 108,
      'ELNRNG': 109,
      'EUNATCH': 110,
      'ENOCSI': 111,
      'EL2HLT': 112,
      'EDEADLK': 16,
      'ENOLCK': 46,
      'EBADE': 113,
      'EBADR': 114,
      'EXFULL': 115,
      'ENOANO': 104,
      'EBADRQC': 103,
      'EBADSLT': 102,
      'EDEADLOCK': 16,
      'EBFONT': 101,
      'ENOSTR': 100,
      'ENODATA': 116,
      'ETIME': 117,
      'ENOSR': 118,
      'ENONET': 119,
      'ENOPKG': 120,
      'EREMOTE': 121,
      'ENOLINK': 47,
      'EADV': 122,
      'ESRMNT': 123,
      'ECOMM': 124,
      'EPROTO': 65,
      'EMULTIHOP': 36,
      'EDOTDOT': 125,
      'EBADMSG': 9,
      'ENOTUNIQ': 126,
      'EBADFD': 127,
      'EREMCHG': 128,
      'ELIBACC': 129,
      'ELIBBAD': 130,
      'ELIBSCN': 131,
      'ELIBMAX': 132,
      'ELIBEXEC': 133,
      'ENOSYS': 52,
      'ENOTEMPTY': 55,
      'ENAMETOOLONG': 37,
      'ELOOP': 32,
      'EOPNOTSUPP': 138,
      'EPFNOSUPPORT': 139,
      'ECONNRESET': 15,
      'ENOBUFS': 42,
      'EAFNOSUPPORT': 5,
      'EPROTOTYPE': 67,
      'ENOTSOCK': 57,
      'ENOPROTOOPT': 50,
      'ESHUTDOWN': 140,
      'ECONNREFUSED': 14,
      'EADDRINUSE': 3,
      'ECONNABORTED': 13,
      'ENETUNREACH': 40,
      'ENETDOWN': 38,
      'ETIMEDOUT': 73,
      'EHOSTDOWN': 142,
      'EHOSTUNREACH': 23,
      'EINPROGRESS': 26,
      'EALREADY': 7,
      'EDESTADDRREQ': 17,
      'EMSGSIZE': 35,
      'EPROTONOSUPPORT': 66,
      'ESOCKTNOSUPPORT': 137,
      'EADDRNOTAVAIL': 4,
      'ENETRESET': 39,
      'EISCONN': 30,
      'ENOTCONN': 53,
      'ETOOMANYREFS': 141,
      'EUSERS': 136,
      'EDQUOT': 19,
      'ESTALE': 72,
      'ENOTSUP': 138,
      'ENOMEDIUM': 148,
      'EILSEQ': 25,
      'EOVERFLOW': 61,
      'ECANCELED': 11,
      'ENOTRECOVERABLE': 56,
      'EOWNERDEAD': 62,
      'ESTRPIPE': 135,
    };
  var FS = {
  root:null,
  mounts:[],
  devices:{
  },
  streams:[],
  nextInode:1,
  nameTable:null,
  currentPath:"/",
  initialized:false,
  ignorePermissions:true,
  ErrnoError:class extends Error {
        // We set the `name` property to be able to identify `FS.ErrnoError`
        // - the `name` is a standard ECMA-262 property of error objects. Kind of good to have it anyway.
        // - when using PROXYFS, an error can come from an underlying FS
        // as different FS objects have their own FS.ErrnoError each,
        // the test `err instanceof FS.ErrnoError` won't detect an error coming from another filesystem, causing bugs.
        // we'll use the reliable test `err.name == "ErrnoError"` instead
        constructor(errno) {
          super(runtimeInitialized ? strError(errno) : '');
          // TODO(sbc): Use the inline member declaration syntax once we
          // support it in acorn and closure.
          this.name = 'ErrnoError';
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
        }
      },
  genericErrors:{
  },
  filesystems:null,
  syncFSRequests:0,
  FSStream:class {
        constructor() {
          // TODO(https://github.com/emscripten-core/emscripten/issues/21414):
          // Use inline field declarations.
          this.shared = {};
        }
        get object() {
          return this.node;
        }
        set object(val) {
          this.node = val;
        }
        get isRead() {
          return (this.flags & 2097155) !== 1;
        }
        get isWrite() {
          return (this.flags & 2097155) !== 0;
        }
        get isAppend() {
          return (this.flags & 1024);
        }
        get flags() {
          return this.shared.flags;
        }
        set flags(val) {
          this.shared.flags = val;
        }
        get position() {
          return this.shared.position;
        }
        set position(val) {
          this.shared.position = val;
        }
      },
  FSNode:class {
        constructor(parent, name, mode, rdev) {
          if (!parent) {
            parent = this;  // root node sets parent to itself
          }
          this.parent = parent;
          this.mount = parent.mount;
          this.mounted = null;
          this.id = FS.nextInode++;
          this.name = name;
          this.mode = mode;
          this.node_ops = {};
          this.stream_ops = {};
          this.rdev = rdev;
          this.readMode = 292 | 73;
          this.writeMode = 146;
        }
        get read() {
          return (this.mode & this.readMode) === this.readMode;
        }
        set read(val) {
          val ? this.mode |= this.readMode : this.mode &= ~this.readMode;
        }
        get write() {
          return (this.mode & this.writeMode) === this.writeMode;
        }
        set write(val) {
          val ? this.mode |= this.writeMode : this.mode &= ~this.writeMode;
        }
        get isFolder() {
          return FS.isDir(this.mode);
        }
        get isDevice() {
          return FS.isChrdev(this.mode);
        }
      },
  lookupPath(path, opts = {}) {
        path = PATH_FS.resolve(path);
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        opts = Object.assign(defaults, opts)
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the absolute path
        var parts = path.split('/').filter((p) => !!p);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count + 1 });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },
  getPath(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? `${mount}/${path}` : mount + path;
          }
          path = path ? `${node.name}/${path}` : node.name;
          node = node.parent;
        }
      },
  hashName(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },
  hashAddNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },
  hashRemoveNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },
  lookupNode(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },
  createNode(parent, name, mode, rdev) {
        assert(typeof parent == 'object')
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },
  destroyNode(node) {
        FS.hashRemoveNode(node);
      },
  isRoot(node) {
        return node === node.parent;
      },
  isMountpoint(node) {
        return !!node.mounted;
      },
  isFile(mode) {
        return (mode & 61440) === 32768;
      },
  isDir(mode) {
        return (mode & 61440) === 16384;
      },
  isLink(mode) {
        return (mode & 61440) === 40960;
      },
  isChrdev(mode) {
        return (mode & 61440) === 8192;
      },
  isBlkdev(mode) {
        return (mode & 61440) === 24576;
      },
  isFIFO(mode) {
        return (mode & 61440) === 4096;
      },
  isSocket(mode) {
        return (mode & 49152) === 49152;
      },
  flagsToPermissionString(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },
  nodePermissions(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },
  mayLookup(dir) {
        if (!FS.isDir(dir.mode)) return 54;
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },
  mayCreate(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },
  mayDelete(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },
  mayOpen(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },
  MAX_OPEN_FDS:4096,
  nextfd() {
        for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },
  getStreamChecked(fd) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        return stream;
      },
  getStream:(fd) => FS.streams[fd],
  createStream(stream, fd = -1) {
        assert(fd >= -1);
  
        // clone it, so we can return an instance of FSStream
        stream = Object.assign(new FS.FSStream(), stream);
        if (fd == -1) {
          fd = FS.nextfd();
        }
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },
  closeStream(fd) {
        FS.streams[fd] = null;
      },
  dupStream(origStream, fd = -1) {
        var stream = FS.createStream(origStream, fd);
        stream.stream_ops?.dup?.(stream);
        return stream;
      },
  chrdev_stream_ops:{
  open(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          stream.stream_ops.open?.(stream);
        },
  llseek() {
          throw new FS.ErrnoError(70);
        },
  },
  major:(dev) => ((dev) >> 8),
  minor:(dev) => ((dev) & 0xff),
  makedev:(ma, mi) => ((ma) << 8 | (mi)),
  registerDevice(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },
  getDevice:(dev) => FS.devices[dev],
  getMounts(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push(...m.mounts);
        }
  
        return mounts;
      },
  syncfs(populate, callback) {
        if (typeof populate == 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach((mount) => {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },
  mount(type, opts, mountpoint) {
        if (typeof type == 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type,
          opts,
          mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },
  unmount(mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach((hash) => {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },
  lookup(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },
  mknod(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },
  create(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },
  mkdir(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },
  mkdirTree(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },
  mkdev(path, mode, dev) {
        if (typeof dev == 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },
  symlink(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },
  rename(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existent directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
          // update old node (we do this here to avoid each backend 
          // needing to)
          old_node.parent = new_dir;
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },
  rmdir(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },
  readdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },
  unlink(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },
  readlink(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },
  stat(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },
  lstat(path) {
        return FS.stat(path, true);
      },
  chmod(path, mode, dontFollow) {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },
  lchmod(path, mode) {
        FS.chmod(path, mode, true);
      },
  fchmod(fd, mode) {
        var stream = FS.getStreamChecked(fd);
        FS.chmod(stream.node, mode);
      },
  chown(path, uid, gid, dontFollow) {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },
  lchown(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },
  fchown(fd, uid, gid) {
        var stream = FS.getStreamChecked(fd);
        FS.chown(stream.node, uid, gid);
      },
  truncate(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },
  ftruncate(fd, len) {
        var stream = FS.getStreamChecked(fd);
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },
  utime(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },
  open(path, flags, mode) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags == 'string' ? FS_modeStringToFlags(flags) : flags;
        if ((flags & 64)) {
          mode = typeof mode == 'undefined' ? 438 /* 0666 */ : mode;
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path == 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512) && !created) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        });
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
          }
        }
        return stream;
      },
  close(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },
  isClosed(stream) {
        return stream.fd === null;
      },
  llseek(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },
  read(stream, buffer, offset, length, position) {
        assert(offset >= 0);
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },
  write(stream, buffer, offset, length, position, canOwn) {
        assert(offset >= 0);
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },
  allocate(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },
  mmap(stream, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        if (!length) {
          throw new FS.ErrnoError(28);
        }
        return stream.stream_ops.mmap(stream, length, position, prot, flags);
      },
  msync(stream, buffer, offset, length, mmapFlags) {
        assert(offset >= 0);
        if (!stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },
  ioctl(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },
  readFile(path, opts = {}) {
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error(`Invalid encoding type "${opts.encoding}"`);
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },
  writeFile(path, data, opts = {}) {
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data == 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },
  cwd:() => FS.currentPath,
  chdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },
  createDefaultDirectories() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },
  createDefaultDevices() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: () => 0,
          write: (stream, buffer, offset, length, pos) => length,
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        // use a buffer to avoid overhead of individual crypto calls per byte
        var randomBuffer = new Uint8Array(1024), randomLeft = 0;
        var randomByte = () => {
          if (randomLeft === 0) {
            randomLeft = randomFill(randomBuffer).byteLength;
          }
          return randomBuffer[--randomLeft];
        };
        FS.createDevice('/dev', 'random', randomByte);
        FS.createDevice('/dev', 'urandom', randomByte);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },
  createSpecialDirectories() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount() {
            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup(parent, name) {
                var fd = +name;
                var stream = FS.getStreamChecked(fd);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: () => stream.path },
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },
  createStandardStreams(input, output, error) {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (input) {
          FS.createDevice('/dev', 'stdin', input);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (output) {
          FS.createDevice('/dev', 'stdout', null, output);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (error) {
          FS.createDevice('/dev', 'stderr', null, error);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, `invalid handle for stdin (${stdin.fd})`);
        assert(stdout.fd === 1, `invalid handle for stdout (${stdout.fd})`);
        assert(stderr.fd === 2, `invalid handle for stderr (${stderr.fd})`);
      },
  staticInit() {
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach((code) => {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },
  init(input, output, error) {
        assert(!FS.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.initialized = true;
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input ??= Module['stdin'];
        output ??= Module['stdout'];
        error ??= Module['stderr'];
  
        FS.createStandardStreams(input, output, error);
      },
  quit() {
        FS.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        _fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },
  findObject(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (!ret.exists) {
          return null;
        }
        return ret.object;
      },
  analyzePath(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },
  createPath(parent, path, canRead, canWrite) {
        parent = typeof parent == 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },
  createFile(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS_getMode(canRead, canWrite);
        return FS.create(path, mode);
      },
  createDataFile(parent, name, data, canRead, canWrite, canOwn) {
        var path = name;
        if (parent) {
          parent = typeof parent == 'string' ? parent : FS.getPath(parent);
          path = name ? PATH.join2(parent, name) : parent;
        }
        var mode = FS_getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data == 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
      },
  createDevice(parent, name, input, output) {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS_getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open(stream) {
            stream.seekable = false;
          },
          close(stream) {
            // flush any pending line data
            if (output?.buffer?.length) {
              output(10);
            }
          },
          read(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },
  forceLoadFile(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest != 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else { // Command-line.
          try {
            obj.contents = readBinary(obj.url);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        }
      },
  createLazyFile(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array).
        // Actual getting is abstracted away for eventual reuse.
        class LazyUint8Array {
          constructor() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = (idx / this.chunkSize)|0;
            return this.getter(chunkNum)[chunkOffset];
          }
          setDataGetter(getter) {
            this.getter = getter;
          }
          cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (from, to) => {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
              }
              return intArrayFromString(xhr.responseText || '', true);
            };
            var lazyArray = this;
            lazyArray.setDataGetter((chunkNum) => {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof lazyArray.chunks[chunkNum] == 'undefined') {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');
              return lazyArray.chunks[chunkNum];
            });
  
            if (usesGzip || !datalength) {
              // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
              chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
              datalength = this.getter(0).length;
              chunkSize = datalength;
              out("LazyFiles on gzip forces download of the whole file when length is accessed");
            }
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
          }
          get length() {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._length;
          }
          get chunkSize() {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._chunkSize;
          }
        }
  
        if (typeof XMLHttpRequest != 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach((key) => {
          var fn = node.stream_ops[key];
          stream_ops[key] = (...args) => {
            FS.forceLoadFile(node);
            return fn(...args);
          };
        });
        function writeChunks(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        }
        // use a custom read function
        stream_ops.read = (stream, buffer, offset, length, position) => {
          FS.forceLoadFile(node);
          return writeChunks(stream, buffer, offset, length, position)
        };
        // use a custom mmap function
        stream_ops.mmap = (stream, length, position, prot, flags) => {
          FS.forceLoadFile(node);
          var ptr = mmapAlloc(length);
          if (!ptr) {
            throw new FS.ErrnoError(48);
          }
          writeChunks(stream, HEAP8, ptr, length, position);
          return { ptr, allocated: true };
        };
        node.stream_ops = stream_ops;
        return node;
      },
  absolutePath() {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },
  createFolder() {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },
  createLink() {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },
  joinPath() {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },
  mmapAlloc() {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },
  standardizePath() {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      },
  };
  
  var SYSCALLS = {
  DEFAULT_POLLMASK:5,
  calculateAt(dirfd, path, allowEmpty) {
        if (PATH.isAbs(path)) {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = SYSCALLS.getStreamFromFD(dirfd);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return PATH.join2(dir, path);
      },
  doStat(func, path, buf) {
        var stat = func(path);
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(4))>>2)] = stat.mode;
        HEAPU32[(((buf)+(8))>>2)] = stat.nlink;
        HEAP32[(((buf)+(12))>>2)] = stat.uid;
        HEAP32[(((buf)+(16))>>2)] = stat.gid;
        HEAP32[(((buf)+(20))>>2)] = stat.rdev;
        (tempI64 = [stat.size>>>0,(tempDouble = stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(24))>>2)] = tempI64[0],HEAP32[(((buf)+(28))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(32))>>2)] = 4096;
        HEAP32[(((buf)+(36))>>2)] = stat.blocks;
        var atime = stat.atime.getTime();
        var mtime = stat.mtime.getTime();
        var ctime = stat.ctime.getTime();
        (tempI64 = [Math.floor(atime / 1000)>>>0,(tempDouble = Math.floor(atime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(48))>>2)] = (atime % 1000) * 1000 * 1000;
        (tempI64 = [Math.floor(mtime / 1000)>>>0,(tempDouble = Math.floor(mtime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(56))>>2)] = tempI64[0],HEAP32[(((buf)+(60))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(64))>>2)] = (mtime % 1000) * 1000 * 1000;
        (tempI64 = [Math.floor(ctime / 1000)>>>0,(tempDouble = Math.floor(ctime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(72))>>2)] = tempI64[0],HEAP32[(((buf)+(76))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(80))>>2)] = (ctime % 1000) * 1000 * 1000;
        (tempI64 = [stat.ino>>>0,(tempDouble = stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(88))>>2)] = tempI64[0],HEAP32[(((buf)+(92))>>2)] = tempI64[1]);
        return 0;
      },
  doMsync(addr, stream, len, flags, offset) {
        if (!FS.isFile(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (flags & 2) {
          // MAP_PRIVATE calls need not to be synced back to underlying fs
          return 0;
        }
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },
  getStreamFromFD(fd) {
        var stream = FS.getStreamChecked(fd);
        return stream;
      },
  varargs:undefined,
  getStr(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },
  };
  function ___syscall_fcntl64(fd, cmd, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = syscallGetVarargI();
          if (arg < 0) {
            return -28;
          }
          while (FS.streams[arg]) {
            arg++;
          }
          var newStream;
          newStream = FS.dupStream(stream, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = syscallGetVarargI();
          stream.flags |= arg;
          return 0;
        }
        case 12: {
          var arg = syscallGetVarargP();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)] = 2;
          return 0;
        }
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
      }
      return -28;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  
  function ___syscall_ioctl(fd, op, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21505: {
          if (!stream.tty) return -59;
          if (stream.tty.ops.ioctl_tcgets) {
            var termios = stream.tty.ops.ioctl_tcgets(stream);
            var argp = syscallGetVarargP();
            HEAP32[((argp)>>2)] = termios.c_iflag || 0;
            HEAP32[(((argp)+(4))>>2)] = termios.c_oflag || 0;
            HEAP32[(((argp)+(8))>>2)] = termios.c_cflag || 0;
            HEAP32[(((argp)+(12))>>2)] = termios.c_lflag || 0;
            for (var i = 0; i < 32; i++) {
              HEAP8[(argp + i)+(17)] = termios.c_cc[i] || 0;
            }
            return 0;
          }
          return 0;
        }
        case 21510:
        case 21511:
        case 21512: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          if (stream.tty.ops.ioctl_tcsets) {
            var argp = syscallGetVarargP();
            var c_iflag = HEAP32[((argp)>>2)];
            var c_oflag = HEAP32[(((argp)+(4))>>2)];
            var c_cflag = HEAP32[(((argp)+(8))>>2)];
            var c_lflag = HEAP32[(((argp)+(12))>>2)];
            var c_cc = []
            for (var i = 0; i < 32; i++) {
              c_cc.push(HEAP8[(argp + i)+(17)]);
            }
            return stream.tty.ops.ioctl_tcsets(stream.tty, op, { c_iflag, c_oflag, c_cflag, c_lflag, c_cc });
          }
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = syscallGetVarargP();
          HEAP32[((argp)>>2)] = 0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = syscallGetVarargP();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          if (stream.tty.ops.ioctl_tiocgwinsz) {
            var winsize = stream.tty.ops.ioctl_tiocgwinsz(stream.tty);
            var argp = syscallGetVarargP();
            HEAP16[((argp)>>1)] = winsize[0];
            HEAP16[(((argp)+(2))>>1)] = winsize[1];
          }
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        case 21515: {
          if (!stream.tty) return -59;
          return 0;
        }
        default: return -28; // not supported
      }
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  
  function ___syscall_openat(dirfd, path, flags, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      var mode = varargs ? syscallGetVarargI() : 0;
      return FS.open(path, flags, mode).fd;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  var __abort_js = () => {
      abort('native code called abort()');
    };

  var nowIsMonotonic = 1;
  var __emscripten_get_now_is_monotonic = () => nowIsMonotonic;

  var __emscripten_memcpy_js = (dest, src, num) => HEAPU8.copyWithin(dest, src, src + num);

  var _emscripten_set_main_loop_timing = (mode, value) => {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        err('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (!Browser.mainLoop.running) {
        
        Browser.mainLoop.running = true;
      }
      if (mode == 0) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2) {
        if (typeof Browser.setImmediate == 'undefined') {
          if (typeof setImmediate == 'undefined') {
            // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
            var setImmediates = [];
            var emscriptenMainLoopMessageId = 'setimmediate';
            /** @param {Event} event */
            var Browser_setImmediate_messageHandler = (event) => {
              // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
              // so check for both cases.
              if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
                event.stopPropagation();
                setImmediates.shift()();
              }
            };
            addEventListener("message", Browser_setImmediate_messageHandler, true);
            Browser.setImmediate = /** @type{function(function(): ?, ...?): number} */((func) => {
              setImmediates.push(func);
              if (ENVIRONMENT_IS_WORKER) {
                Module['setImmediates'] ??= [];
                Module['setImmediates'].push(func);
                postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
              } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
            });
          } else {
            Browser.setImmediate = setImmediate;
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          Browser.setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    };
  
  var _emscripten_get_now;
      // Modern environment where performance.now() is supported:
      // N.B. a shorter form "_emscripten_get_now = performance.now;" is
      // unfortunately not allowed even in current browsers (e.g. FF Nightly 75).
      _emscripten_get_now = () => performance.now();
  ;
  
  
  var runtimeKeepaliveCounter = 0;
  var keepRuntimeAlive = () => noExitRuntime || runtimeKeepaliveCounter > 0;
  var _proc_exit = (code) => {
      EXITSTATUS = code;
      if (!keepRuntimeAlive()) {
        Module['onExit']?.(code);
        ABORT = true;
      }
      quit_(code, new ExitStatus(code));
    };
  
  /** @suppress {duplicate } */
  /** @param {boolean|number=} implicit */
  var exitJS = (status, implicit) => {
      EXITSTATUS = status;
  
      checkUnflushedContent();
  
      // if exit() was called explicitly, warn the user if the runtime isn't actually being shut down
      if (keepRuntimeAlive() && !implicit) {
        var msg = `program exited (with status: ${status}), but keepRuntimeAlive() is set (counter=${runtimeKeepaliveCounter}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;
        err(msg);
      }
  
      _proc_exit(status);
    };
  var _exit = exitJS;
  
  var handleException = (e) => {
      // Certain exception types we do not treat as errors since they are used for
      // internal control flow.
      // 1. ExitStatus, which is thrown by exit()
      // 2. "unwind", which is thrown by emscripten_unwind_to_js_event_loop() and others
      //    that wish to return to JS event loop.
      if (e instanceof ExitStatus || e == 'unwind') {
        return EXITSTATUS;
      }
      checkStackCookie();
      if (e instanceof WebAssembly.RuntimeError) {
        if (_emscripten_stack_get_current() <= 0) {
          err('Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 65536)');
        }
      }
      quit_(1, e);
    };
  
  var maybeExit = () => {
      if (!keepRuntimeAlive()) {
        try {
          _exit(EXITSTATUS);
        } catch (e) {
          handleException(e);
        }
      }
    };
  
  
    /**
     * @param {number=} arg
     * @param {boolean=} noSetTiming
     */
  var setMainLoop = (browserIterationFunc, fps, simulateInfiniteLoop, arg, noSetTiming) => {
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
      Browser.mainLoop.func = browserIterationFunc;
      Browser.mainLoop.arg = arg;
  
      // Closure compiler bug(?): Closure does not see that the assignment
      //   var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop
      // is a value copy of a number (even with the JSDoc @type annotation)
      // but optimizeis the code as if the assignment was a reference assignment,
      // which results in Browser.mainLoop.pause() not working. Hence use a
      // workaround to make Closure believe this is a value copy that should occur:
      // (TODO: Minimize this down to a small test case and report - was unable
      // to reproduce in a small written test case)
      /** @type{number} */
      var thisMainLoopId = (() => Browser.mainLoop.currentlyRunningMainloop)();
      function checkIsRunning() {
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) {
          
          maybeExit();
          return false;
        }
        return true;
      }
  
      // We create the loop runner here but it is not actually running until
      // _emscripten_set_main_loop_timing is called (which might happen a
      // later time).  This member signifies that the current runner has not
      // yet been started so that we can call runtimeKeepalivePush when it
      // gets it timing set for the first time.
      Browser.mainLoop.running = false;
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (!checkIsRunning()) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (!checkIsRunning()) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
        GL.newRenderingFrameStarted();
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          warnOnce('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (!checkIsRunning()) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL == 'object') SDL.audio?.queueNewAudioData?.();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) {
          _emscripten_set_main_loop_timing(0, 1000.0 / fps);
        } else {
          // Do rAF by rendering each frame (no decimating)
          _emscripten_set_main_loop_timing(1, 1);
        }
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'unwind';
      }
    };
  
  
  var callUserCallback = (func) => {
      if (ABORT) {
        err('user callback triggered after runtime exited or application aborted.  Ignoring.');
        return;
      }
      try {
        func();
        maybeExit();
      } catch (e) {
        handleException(e);
      }
    };
  
  /** @param {number=} timeout */
  var safeSetTimeout = (func, timeout) => {
      
      return setTimeout(() => {
        
        callUserCallback(func);
      }, timeout);
    };
  
  
  
  
  var Browser = {
  mainLoop:{
  running:false,
  scheduler:null,
  method:"",
  currentlyRunningMainloop:0,
  func:null,
  arg:0,
  timingMode:0,
  timingValue:0,
  currentFrameNumber:0,
  queue:[],
  pause() {
          Browser.mainLoop.scheduler = null;
          // Incrementing this signals the previous main loop that it's now become old, and it must return.
          Browser.mainLoop.currentlyRunningMainloop++;
        },
  resume() {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          // do not set timing and call scheduler, we will do it on the next lines
          setMainLoop(func, 0, false, Browser.mainLoop.arg, true);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },
  updateStatus() {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](`{message} ({expected - remaining}/{expected})`);
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },
  runIter(func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          callUserCallback(func);
          Module['postMainLoop']?.();
        },
  },
  useWebGL:false,
  isFullscreen:false,
  pointerLock:false,
  moduleContextCreatedCallbacks:[],
  workers:[],
  init() {
        if (Browser.initted) return;
        Browser.initted = true;
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module['noImageDecoding'] && /\.(jpg|jpeg|png|bmp|webp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
          if (b.size !== byteArray.length) { // Safari bug #118630
            // Safari's Blob can only take an ArrayBuffer
            b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
          }
          var url = URL.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = () => {
            assert(img.complete, `Image ${name} could not be decoded`);
            var canvas = /** @type {!HTMLCanvasElement} */ (document.createElement('canvas'));
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            preloadedImages[name] = canvas;
            URL.revokeObjectURL(url);
            onload?.(byteArray);
          };
          img.onerror = (event) => {
            err(`Image ${url} could not be decoded`);
            onerror?.();
          };
          img.src = url;
        };
        preloadPlugins.push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module['noAudioDecoding'] && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            preloadedAudios[name] = audio;
            onload?.(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            preloadedAudios[name] = new Audio(); // empty shim
            onerror?.();
          }
          var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
          var url = URL.createObjectURL(b); // XXX we never revoke this!
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var audio = new Audio();
          audio.addEventListener('canplaythrough', () => finish(audio), false); // use addEventListener due to chromium bug 124926
          audio.onerror = function audio_onerror(event) {
            if (done) return;
            err(`warning: browser could not fully decode audio ${name}, trying slower base64 approach`);
            function encode64(data) {
              var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
              var PAD = '=';
              var ret = '';
              var leftchar = 0;
              var leftbits = 0;
              for (var i = 0; i < data.length; i++) {
                leftchar = (leftchar << 8) | data[i];
                leftbits += 8;
                while (leftbits >= 6) {
                  var curr = (leftchar >> (leftbits-6)) & 0x3f;
                  leftbits -= 6;
                  ret += BASE[curr];
                }
              }
              if (leftbits == 2) {
                ret += BASE[(leftchar&3) << 4];
                ret += PAD + PAD;
              } else if (leftbits == 4) {
                ret += BASE[(leftchar&0xf) << 2];
                ret += PAD;
              }
              return ret;
            }
            audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
            finish(audio); // we don't wait for confirmation this worked - but it's worth trying
          };
          audio.src = url;
          // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
          safeSetTimeout(() => {
            finish(audio); // try to use it even though it is not necessarily ready to play
          }, 10000);
        };
        preloadPlugins.push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      (() => {});
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   (() => {}); // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", (ev) => {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },
  createContext(/** @type {HTMLCanvasElement} */ canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: 1,
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
          // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
          // Browser.createContext() should not even be emitted.
          if (typeof GL != 'undefined') {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx == 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Browser.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach((callback) => callback());
          Browser.init();
        }
        return ctx;
      },
  fullscreenHandlersInstalled:false,
  lockPointer:undefined,
  resizeCanvas:undefined,
  requestFullscreen(lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer == 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas == 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = Browser.exitFullscreen;
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          Module['onFullScreen']?.(Browser.isFullscreen);
          Module['onFullscreen']?.(Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? () => canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? () => canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) : null);
  
        canvasContainer.requestFullscreen();
      },
  requestFullScreen() {
        abort('Module.requestFullScreen has been replaced by Module.requestFullscreen (without a capital S)');
      },
  exitFullscreen() {
        // This is workaround for chrome. Trying to exit from fullscreen
        // not in fullscreen state will cause "TypeError: Document not active"
        // in chrome. See https://github.com/emscripten-core/emscripten/pull/8236
        if (!Browser.isFullscreen) {
          return false;
        }
  
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['msExitFullscreen'] ||
                  document['webkitCancelFullScreen'] ||
            (() => {});
        CFS.apply(document, []);
        return true;
      },
  nextRAF:0,
  fakeRequestAnimationFrame(func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },
  requestAnimationFrame(func) {
        if (typeof requestAnimationFrame == 'function') {
          requestAnimationFrame(func);
          return;
        }
        var RAF = Browser.fakeRequestAnimationFrame;
        RAF(func);
      },
  safeSetTimeout(func, timeout) {
        // Legacy function, this is used by the SDL2 port so we need to keep it
        // around at least until that is updated.
        // See https://github.com/libsdl-org/SDL/pull/6304
        return safeSetTimeout(func, timeout);
      },
  safeRequestAnimationFrame(func) {
        
        return Browser.requestAnimationFrame(() => {
          
          callUserCallback(func);
        });
      },
  getMimetype(name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },
  getUserMedia(func) {
        window.getUserMedia ||= navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        window.getUserMedia(func);
      },
  getMovementX(event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },
  getMovementY(event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },
  getMouseWheelDelta(event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            // 3 lines make up a step
            delta = event.detail / 3;
            break;
          case 'mousewheel':
            // 120 units make up a step
            delta = event.wheelDelta / 120;
            break;
          case 'wheel':
            delta = event.deltaY
            switch (event.deltaMode) {
              case 0:
                // DOM_DELTA_PIXEL: 100 pixels make up a step
                delta /= 100;
                break;
              case 1:
                // DOM_DELTA_LINE: 3 lines make up a step
                delta /= 3;
                break;
              case 2:
                // DOM_DELTA_PAGE: A page makes up 80 steps
                delta *= 80;
                break;
              default:
                throw 'unrecognized mouse wheel delta mode: ' + event.deltaMode;
            }
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },
  mouseX:0,
  mouseY:0,
  mouseMovementX:0,
  mouseMovementY:0,
  touches:{
  },
  lastTouches:{
  },
  calculateMouseCoords(pageX, pageY) {
        // Calculate the movement based on the changes
        // in the coordinates.
        var rect = Module["canvas"].getBoundingClientRect();
        var cw = Module["canvas"].width;
        var ch = Module["canvas"].height;
  
        // Neither .scrollX or .pageXOffset are defined in a spec, but
        // we prefer .scrollX because it is currently in a spec draft.
        // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
        var scrollX = ((typeof window.scrollX != 'undefined') ? window.scrollX : window.pageXOffset);
        var scrollY = ((typeof window.scrollY != 'undefined') ? window.scrollY : window.pageYOffset);
        // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
        // and we have no viable fallback.
        assert((typeof scrollX != 'undefined') && (typeof scrollY != 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
        var adjustedX = pageX - (scrollX + rect.left);
        var adjustedY = pageY - (scrollY + rect.top);
  
        // the canvas might be CSS-scaled compared to its backbuffer;
        // SDL-using content will want mouse coordinates in terms
        // of backbuffer units.
        adjustedX = adjustedX * (cw / rect.width);
        adjustedY = adjustedY * (ch / rect.height);
  
        return { x: adjustedX, y: adjustedY };
      },
  setMouseCoords(pageX, pageY) {
        const {x, y} = Browser.calculateMouseCoords(pageX, pageY);
        Browser.mouseMovementX = x - Browser.mouseX;
        Browser.mouseMovementY = y - Browser.mouseY;
        Browser.mouseX = x;
        Browser.mouseY = y;
      },
  calculateMouseEvent(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // add the mouse delta to the current absolute mouse position
          Browser.mouseX += Browser.mouseMovementX;
          Browser.mouseY += Browser.mouseMovementY;
        } else {
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var coords = Browser.calculateMouseCoords(touch.pageX, touch.pageY);
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              last ||= coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          Browser.setMouseCoords(event.pageX, event.pageY);
        }
      },
  resizeListeners:[],
  updateResizeListeners() {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach((listener) => listener(canvas.width, canvas.height));
      },
  setCanvasSize(width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },
  windowedWidth:0,
  windowedHeight:0,
  setFullscreenCanvasSize() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)] = flags;
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },
  setWindowedCanvasSize() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)] = flags;
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },
  updateCanvasDimensions(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },
  };
  
  var EGL = {
  errorCode:12288,
  defaultDisplayInitialized:false,
  currentContext:0,
  currentReadSurface:0,
  currentDrawSurface:0,
  contextAttributes:{
  alpha:false,
  depth:false,
  stencil:false,
  antialias:false,
  },
  stringCache:{
  },
  setErrorCode(code) {
        EGL.errorCode = code;
      },
  chooseConfig(display, attribList, config, config_size, numConfigs) {
        if (display != 62000) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
  
        if (attribList) {
          // read attribList if it is non-null
          for (;;) {
            var param = HEAP32[((attribList)>>2)];
            if (param == 0x3021 /*EGL_ALPHA_SIZE*/) {
              var alphaSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.alpha = (alphaSize > 0);
            } else if (param == 0x3025 /*EGL_DEPTH_SIZE*/) {
              var depthSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.depth = (depthSize > 0);
            } else if (param == 0x3026 /*EGL_STENCIL_SIZE*/) {
              var stencilSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.stencil = (stencilSize > 0);
            } else if (param == 0x3031 /*EGL_SAMPLES*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.antialias = (samples > 0);
            } else if (param == 0x3032 /*EGL_SAMPLE_BUFFERS*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.antialias = (samples == 1);
            } else if (param == 0x3100 /*EGL_CONTEXT_PRIORITY_LEVEL_IMG*/) {
              var requestedPriority = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.lowLatency = (requestedPriority != 0x3103 /*EGL_CONTEXT_PRIORITY_LOW_IMG*/);
            } else if (param == 0x3038 /*EGL_NONE*/) {
                break;
            }
            attribList += 8;
          }
        }
  
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)] = 1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAPU32[((config)>>2)] = 62002;
        }
  
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      },
  };
  var _eglBindAPI = (api) => {
      if (api == 0x30A0 /* EGL_OPENGL_ES_API */) {
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }
      // if (api == 0x30A1 /* EGL_OPENVG_API */ || api == 0x30A2 /* EGL_OPENGL_API */) {
      EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
      return 0;
    };

  var _eglChooseConfig = (display, attrib_list, configs, config_size, numConfigs) => {
      return EGL.chooseConfig(display, attrib_list, configs, config_size, numConfigs);
    };

  var GLctx;
  
  var webgl_enable_ANGLE_instanced_arrays = (ctx) => {
      // Extension available in WebGL 1 from Firefox 26 and Google Chrome 30 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('ANGLE_instanced_arrays');
      // Because this extension is a core function in WebGL 2, assign the extension entry points in place of
      // where the core functions will reside in WebGL 2. This way the calling code can call these without
      // having to dynamically branch depending if running against WebGL 1 or WebGL 2.
      if (ext) {
        ctx['vertexAttribDivisor'] = (index, divisor) => ext['vertexAttribDivisorANGLE'](index, divisor);
        ctx['drawArraysInstanced'] = (mode, first, count, primcount) => ext['drawArraysInstancedANGLE'](mode, first, count, primcount);
        ctx['drawElementsInstanced'] = (mode, count, type, indices, primcount) => ext['drawElementsInstancedANGLE'](mode, count, type, indices, primcount);
        return 1;
      }
    };
  
  var webgl_enable_OES_vertex_array_object = (ctx) => {
      // Extension available in WebGL 1 from Firefox 25 and WebKit 536.28/desktop Safari 6.0.3 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('OES_vertex_array_object');
      if (ext) {
        ctx['createVertexArray'] = () => ext['createVertexArrayOES']();
        ctx['deleteVertexArray'] = (vao) => ext['deleteVertexArrayOES'](vao);
        ctx['bindVertexArray'] = (vao) => ext['bindVertexArrayOES'](vao);
        ctx['isVertexArray'] = (vao) => ext['isVertexArrayOES'](vao);
        return 1;
      }
    };
  
  var webgl_enable_WEBGL_draw_buffers = (ctx) => {
      // Extension available in WebGL 1 from Firefox 28 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('WEBGL_draw_buffers');
      if (ext) {
        ctx['drawBuffers'] = (n, bufs) => ext['drawBuffersWEBGL'](n, bufs);
        return 1;
      }
    };
  
  var webgl_enable_EXT_polygon_offset_clamp = (ctx) => {
      return !!(ctx.extPolygonOffsetClamp = ctx.getExtension('EXT_polygon_offset_clamp'));
    };
  
  var webgl_enable_EXT_clip_control = (ctx) => {
      return !!(ctx.extClipControl = ctx.getExtension('EXT_clip_control'));
    };
  
  var webgl_enable_WEBGL_polygon_mode = (ctx) => {
      return !!(ctx.webglPolygonMode = ctx.getExtension('WEBGL_polygon_mode'));
    };
  
  var webgl_enable_WEBGL_multi_draw = (ctx) => {
      // Closure is expected to be allowed to minify the '.multiDrawWebgl' property, so not accessing it quoted.
      return !!(ctx.multiDrawWebgl = ctx.getExtension('WEBGL_multi_draw'));
    };
  
  var getEmscriptenSupportedExtensions = (ctx) => {
      // Restrict the list of advertised extensions to those that we actually
      // support.
      var supportedExtensions = [
        // WebGL 1 extensions
        'ANGLE_instanced_arrays',
        'EXT_blend_minmax',
        'EXT_disjoint_timer_query',
        'EXT_frag_depth',
        'EXT_shader_texture_lod',
        'EXT_sRGB',
        'OES_element_index_uint',
        'OES_fbo_render_mipmap',
        'OES_standard_derivatives',
        'OES_texture_float',
        'OES_texture_half_float',
        'OES_texture_half_float_linear',
        'OES_vertex_array_object',
        'WEBGL_color_buffer_float',
        'WEBGL_depth_texture',
        'WEBGL_draw_buffers',
        // WebGL 1 and WebGL 2 extensions
        'EXT_clip_control',
        'EXT_color_buffer_half_float',
        'EXT_depth_clamp',
        'EXT_float_blend',
        'EXT_polygon_offset_clamp',
        'EXT_texture_compression_bptc',
        'EXT_texture_compression_rgtc',
        'EXT_texture_filter_anisotropic',
        'KHR_parallel_shader_compile',
        'OES_texture_float_linear',
        'WEBGL_blend_func_extended',
        'WEBGL_compressed_texture_astc',
        'WEBGL_compressed_texture_etc',
        'WEBGL_compressed_texture_etc1',
        'WEBGL_compressed_texture_s3tc',
        'WEBGL_compressed_texture_s3tc_srgb',
        'WEBGL_debug_renderer_info',
        'WEBGL_debug_shaders',
        'WEBGL_lose_context',
        'WEBGL_multi_draw',
        'WEBGL_polygon_mode'
      ];
      // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
      return (ctx.getSupportedExtensions() || []).filter(ext => supportedExtensions.includes(ext));
    };
  
  
  var GL = {
  counter:1,
  buffers:[],
  programs:[],
  framebuffers:[],
  renderbuffers:[],
  textures:[],
  shaders:[],
  vaos:[],
  contexts:[],
  offscreenCanvases:{
  },
  queries:[],
  byteSizeByTypeRoot:5120,
  byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],
  stringCache:{
  },
  unpackAlignment:4,
  unpackRowLength:0,
  recordError:(errorCode) => {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },
  getNewId:(table) => {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },
  genObject:(n, buffers, createFunction, objectTable
        ) => {
        for (var i = 0; i < n; i++) {
          var buffer = GLctx[createFunction]();
          var id = buffer && GL.getNewId(objectTable);
          if (buffer) {
            buffer.name = id;
            objectTable[id] = buffer;
          } else {
            GL.recordError(0x502 /* GL_INVALID_OPERATION */);
          }
          HEAP32[(((buffers)+(i*4))>>2)] = id;
        }
      },
  MAX_TEMP_BUFFER_SIZE:2097152,
  numTempVertexBuffersPerSize:64,
  log2ceilLookup:(i) => 32 - Math.clz32(i === 0 ? 0 : i - 1),
  generateTempBuffers:(quads, context) => {
        var largestIndex = GL.log2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        context.tempVertexBufferCounters1 = [];
        context.tempVertexBufferCounters2 = [];
        context.tempVertexBufferCounters1.length = context.tempVertexBufferCounters2.length = largestIndex+1;
        context.tempVertexBuffers1 = [];
        context.tempVertexBuffers2 = [];
        context.tempVertexBuffers1.length = context.tempVertexBuffers2.length = largestIndex+1;
        context.tempIndexBuffers = [];
        context.tempIndexBuffers.length = largestIndex+1;
        for (var i = 0; i <= largestIndex; ++i) {
          context.tempIndexBuffers[i] = null; // Created on-demand
          context.tempVertexBufferCounters1[i] = context.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          context.tempVertexBuffers1[i] = [];
          context.tempVertexBuffers2[i] = [];
          var ringbuffer1 = context.tempVertexBuffers1[i];
          var ringbuffer2 = context.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for (var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          context.tempQuadIndexBuffer = GLctx.createBuffer();
          context.GLctx.bindBuffer(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, context.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          context.GLctx.bufferData(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, quadIndexes, 0x88E4 /*GL_STATIC_DRAW*/);
          context.GLctx.bindBuffer(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, null);
        }
      },
  getTempVertexBuffer:(sizeBytes) => {
        var idx = GL.log2ceilLookup(sizeBytes);
        var ringbuffer = GL.currentContext.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.currentContext.tempVertexBufferCounters1[idx];
        GL.currentContext.tempVertexBufferCounters1[idx] = (GL.currentContext.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(0x8894 /*GL_ARRAY_BUFFER_BINDING*/);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(0x8892 /*GL_ARRAY_BUFFER*/, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(0x8892 /*GL_ARRAY_BUFFER*/, 1 << idx, 0x88E8 /*GL_DYNAMIC_DRAW*/);
        GLctx.bindBuffer(0x8892 /*GL_ARRAY_BUFFER*/, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },
  getTempIndexBuffer:(sizeBytes) => {
        var idx = GL.log2ceilLookup(sizeBytes);
        var ibo = GL.currentContext.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(0x8895 /*ELEMENT_ARRAY_BUFFER_BINDING*/);
        GL.currentContext.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, GL.currentContext.tempIndexBuffers[idx]);
        GLctx.bufferData(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, 1 << idx, 0x88E8 /*GL_DYNAMIC_DRAW*/);
        GLctx.bindBuffer(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, prevIBO);
        return GL.currentContext.tempIndexBuffers[idx];
      },
  newRenderingFrameStarted:() => {
        if (!GL.currentContext) {
          return;
        }
        var vb = GL.currentContext.tempVertexBuffers1;
        GL.currentContext.tempVertexBuffers1 = GL.currentContext.tempVertexBuffers2;
        GL.currentContext.tempVertexBuffers2 = vb;
        vb = GL.currentContext.tempVertexBufferCounters1;
        GL.currentContext.tempVertexBufferCounters1 = GL.currentContext.tempVertexBufferCounters2;
        GL.currentContext.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        for (var i = 0; i <= largestIndex; ++i) {
          GL.currentContext.tempVertexBufferCounters1[i] = 0;
        }
      },
  getSource:(shader, count, string, length) => {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAPU32[(((length)+(i*4))>>2)] : undefined;
          source += UTF8ToString(HEAPU32[(((string)+(i*4))>>2)], len);
        }
        return source;
      },
  calcBufLength:(size, type, stride, count) => {
        if (stride > 0) {
          return count * stride;  // XXXvlad this is not exactly correct I don't think
        }
        var typeSize = GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
        return size * typeSize * count;
      },
  usedTempBuffers:[],
  preDrawHandleClientVertexAttribBindings:(count) => {
        GL.resetBufferBinding = false;
  
        // TODO: initial pass to detect ranges we need to upload, might not need
        // an upload per attrib
        for (var i = 0; i < GL.currentContext.maxVertexAttribs; ++i) {
          var cb = GL.currentContext.clientBuffers[i];
          if (!cb.clientside || !cb.enabled) continue;
  
          GL.resetBufferBinding = true;
  
          var size = GL.calcBufLength(cb.size, cb.type, cb.stride, count);
          var buf = GL.getTempVertexBuffer(size);
          GLctx.bindBuffer(0x8892 /*GL_ARRAY_BUFFER*/, buf);
          GLctx.bufferSubData(0x8892 /*GL_ARRAY_BUFFER*/,
                                   0,
                                   HEAPU8.subarray(cb.ptr, cb.ptr + size));
          cb.vertexAttribPointerAdaptor.call(GLctx, i, cb.size, cb.type, cb.normalized, cb.stride, 0);
        }
      },
  postDrawHandleClientVertexAttribBindings:() => {
        if (GL.resetBufferBinding) {
          GLctx.bindBuffer(0x8892 /*GL_ARRAY_BUFFER*/, GL.buffers[GLctx.currentArrayBufferBinding]);
        }
      },
  createContext:(/** @type {HTMLCanvasElement} */ canvas, webGLContextAttributes) => {
  
        // BUG: Workaround Safari WebGL issue: After successfully acquiring WebGL
        // context on a canvas, calling .getContext() will always return that
        // context independent of which 'webgl' or 'webgl2'
        // context version was passed. See:
        //   https://bugs.webkit.org/show_bug.cgi?id=222758
        // and:
        //   https://github.com/emscripten-core/emscripten/issues/13295.
        // TODO: Once the bug is fixed and shipped in Safari, adjust the Safari
        // version field in above check.
        if (!canvas.getContextSafariWebGL2Fixed) {
          canvas.getContextSafariWebGL2Fixed = canvas.getContext;
          /** @type {function(this:HTMLCanvasElement, string, (Object|null)=): (Object|null)} */
          function fixedGetContext(ver, attrs) {
            var gl = canvas.getContextSafariWebGL2Fixed(ver, attrs);
            return ((ver == 'webgl') == (gl instanceof WebGLRenderingContext)) ? gl : null;
          }
          canvas.getContext = fixedGetContext;
        }
  
        var ctx =
          (canvas.getContext("webgl", webGLContextAttributes)
            // https://caniuse.com/#feat=webgl
            );
  
        if (!ctx) return 0;
  
        var handle = GL.registerContext(ctx, webGLContextAttributes);
  
        return handle;
      },
  registerContext:(ctx, webGLContextAttributes) => {
        // without pthreads a context is just an integer ID
        var handle = GL.getNewId(GL.contexts);
  
        var context = {
          handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
        // Store the created context object so that we can access the context
        // given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault == 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
        context.maxVertexAttribs = context.GLctx.getParameter(0x8869 /*GL_MAX_VERTEX_ATTRIBS*/);
        context.clientBuffers = [];
        for (var i = 0; i < context.maxVertexAttribs; i++) {
          context.clientBuffers[i] = {
            enabled: false,
            clientside: false,
            size: 0,
            type: 0,
            normalized: 0,
            stride: 0,
            ptr: 0,
            vertexAttribPointerAdaptor: null,
          };
        }
  
        GL.generateTempBuffers(false, context);
  
        return handle;
      },
  makeContextCurrent:(contextHandle) => {
  
        // Active Emscripten GL layer context object.
        GL.currentContext = GL.contexts[contextHandle];
        // Active WebGL context object.
        Module.ctx = GLctx = GL.currentContext?.GLctx;
        return !(contextHandle && !GLctx);
      },
  getContext:(contextHandle) => {
        return GL.contexts[contextHandle];
      },
  deleteContext:(contextHandle) => {
        if (GL.currentContext === GL.contexts[contextHandle]) {
          GL.currentContext = null;
        }
        if (typeof JSEvents == 'object') {
          // Release all JS event handlers on the DOM element that the GL context is
          // associated with since the context is now deleted.
          JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
        }
        // Make sure the canvas object no longer refers to the context object so
        // there are no GC surprises.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) {
          GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
        }
        GL.contexts[contextHandle] = null;
      },
  initExtensions:(context) => {
        // If this function is called without a specific context object, init the
        // extensions of the currently active context.
        context ||= GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, ction GL interop
        // layer itself will need to know if they exist.
  
        // Extensions that are available in both WebGL 1 and WebGL 2
        webgl_enable_WEBGL_multi_draw(GLctx);
        webgl_enable_EXT_polygon_offset_clamp(GLctx);
        webgl_enable_EXT_clip_control(GLctx);
        webgl_enable_WEBGL_polygon_mode(GLctx);
        // Extensions that are only available in WebGL 1 (the calls will be no-ops
        // if called on a WebGL 2 context active)
        webgl_enable_ANGLE_instanced_arrays(GLctx);
        webgl_enable_OES_vertex_array_object(GLctx);
        webgl_enable_WEBGL_draw_buffers(GLctx);
        {
          GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
        }
  
        getEmscriptenSupportedExtensions(GLctx).forEach((ext) => {
          // WEBGL_lose_context, WEBGL_debug_renderer_info and WEBGL_debug_shaders
          // are not enabled by default.
          if (!ext.includes('lose_context') && !ext.includes('debug')) {
            // Call .getExtension() to enable that extension permanently.
            GLctx.getExtension(ext);
          }
        });
      },
  };
  
  var _eglCreateContext = (display, config, hmm, contextAttribs) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
  
      // EGL 1.4 spec says default EGL_CONTEXT_CLIENT_VERSION is GLES1, but this is not supported by Emscripten.
      // So user must pass EGL_CONTEXT_CLIENT_VERSION == 2 to initialize EGL.
      var glesContextVersion = 1;
      for (;;) {
        var param = HEAP32[((contextAttribs)>>2)];
        if (param == 0x3098 /*EGL_CONTEXT_CLIENT_VERSION*/) {
          glesContextVersion = HEAP32[(((contextAttribs)+(4))>>2)];
        } else if (param == 0x3038 /*EGL_NONE*/) {
          break;
        } else {
          /* EGL1.4 specifies only EGL_CONTEXT_CLIENT_VERSION as supported attribute */
          EGL.setErrorCode(0x3004 /*EGL_BAD_ATTRIBUTE*/);
          return 0;
        }
        contextAttribs += 8;
      }
      if (glesContextVersion != 2) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0; /* EGL_NO_CONTEXT */
      }
  
      EGL.contextAttributes.majorVersion = glesContextVersion - 1; // WebGL 1 is GLES 2, WebGL2 is GLES3
      EGL.contextAttributes.minorVersion = 0;
  
      EGL.context = GL.createContext(Module['canvas'], EGL.contextAttributes);
  
      if (EGL.context != 0) {
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
  
        // Run callbacks so that GL emulation works
        GL.makeContextCurrent(EGL.context);
        Browser.useWebGL = true;
        Browser.moduleContextCreatedCallbacks.forEach((callback) => callback());
  
        // Note: This function only creates a context, but it shall not make it active.
        GL.makeContextCurrent(null);
        return 62004;
      } else {
        EGL.setErrorCode(0x3009 /* EGL_BAD_MATCH */); // By the EGL 1.4 spec, an implementation that does not support GLES2 (WebGL in this case), this error code is set.
        return 0; /* EGL_NO_CONTEXT */
      }
    };

  var _eglCreateWindowSurface = (display, config, win, attrib_list) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (config != 62002) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0;
      }
      // TODO: Examine attrib_list! Parameters that can be present there are:
      // - EGL_RENDER_BUFFER (must be EGL_BACK_BUFFER)
      // - EGL_VG_COLORSPACE (can't be set)
      // - EGL_VG_ALPHA_FORMAT (can't be set)
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 62006; /* Magic ID for Emscripten 'default surface' */
    };

  
  var _eglDestroyContext = (display, context) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (context != 62004) {
        EGL.setErrorCode(0x3006 /* EGL_BAD_CONTEXT */);
        return 0;
      }
  
      GL.deleteContext(EGL.context);
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      if (EGL.currentContext == context) {
        EGL.currentContext = 0;
      }
      return 1 /* EGL_TRUE */;
    };

  var _eglDestroySurface = (display, surface) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (surface != 62006 /* Magic ID for the only EGLSurface supported by Emscripten */) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 1;
      }
      if (EGL.currentReadSurface == surface) {
        EGL.currentReadSurface = 0;
      }
      if (EGL.currentDrawSurface == surface) {
        EGL.currentDrawSurface = 0;
      }
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1; /* Magic ID for Emscripten 'default surface' */
    };

  var _eglGetConfigAttrib = (display, config, attribute, value) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (config != 62002) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0;
      }
      if (!value) {
        EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
        return 0;
      }
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      switch (attribute) {
      case 0x3020: // EGL_BUFFER_SIZE
        HEAP32[((value)>>2)] = EGL.contextAttributes.alpha ? 32 : 24;
        return 1;
      case 0x3021: // EGL_ALPHA_SIZE
        HEAP32[((value)>>2)] = EGL.contextAttributes.alpha ? 8 : 0;
        return 1;
      case 0x3022: // EGL_BLUE_SIZE
        HEAP32[((value)>>2)] = 8;
        return 1;
      case 0x3023: // EGL_GREEN_SIZE
        HEAP32[((value)>>2)] = 8;
        return 1;
      case 0x3024: // EGL_RED_SIZE
        HEAP32[((value)>>2)] = 8;
        return 1;
      case 0x3025: // EGL_DEPTH_SIZE
        HEAP32[((value)>>2)] = EGL.contextAttributes.depth ? 24 : 0;
        return 1;
      case 0x3026: // EGL_STENCIL_SIZE
        HEAP32[((value)>>2)] = EGL.contextAttributes.stencil ? 8 : 0;
        return 1;
      case 0x3027: // EGL_CONFIG_CAVEAT
        // We can return here one of EGL_NONE (0x3038), EGL_SLOW_CONFIG (0x3050) or EGL_NON_CONFORMANT_CONFIG (0x3051).
        HEAP32[((value)>>2)] = 0x3038;
        return 1;
      case 0x3028: // EGL_CONFIG_ID
        HEAP32[((value)>>2)] = 62002;
        return 1;
      case 0x3029: // EGL_LEVEL
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x302A: // EGL_MAX_PBUFFER_HEIGHT
        HEAP32[((value)>>2)] = 4096;
        return 1;
      case 0x302B: // EGL_MAX_PBUFFER_PIXELS
        HEAP32[((value)>>2)] = 16777216;
        return 1;
      case 0x302C: // EGL_MAX_PBUFFER_WIDTH
        HEAP32[((value)>>2)] = 4096;
        return 1;
      case 0x302D: // EGL_NATIVE_RENDERABLE
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x302E: // EGL_NATIVE_VISUAL_ID
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x302F: // EGL_NATIVE_VISUAL_TYPE
        HEAP32[((value)>>2)] = 0x3038;
        return 1;
      case 0x3031: // EGL_SAMPLES
        HEAP32[((value)>>2)] = EGL.contextAttributes.antialias ? 4 : 0;
        return 1;
      case 0x3032: // EGL_SAMPLE_BUFFERS
        HEAP32[((value)>>2)] = EGL.contextAttributes.antialias ? 1 : 0;
        return 1;
      case 0x3033: // EGL_SURFACE_TYPE
        HEAP32[((value)>>2)] = 0x4;
        return 1;
      case 0x3034: // EGL_TRANSPARENT_TYPE
        // If this returns EGL_TRANSPARENT_RGB (0x3052), transparency is used through color-keying. No such thing applies to Emscripten canvas.
        HEAP32[((value)>>2)] = 0x3038;
        return 1;
      case 0x3035: // EGL_TRANSPARENT_BLUE_VALUE
      case 0x3036: // EGL_TRANSPARENT_GREEN_VALUE
      case 0x3037: // EGL_TRANSPARENT_RED_VALUE
        // "If EGL_TRANSPARENT_TYPE is EGL_NONE, then the values for EGL_TRANSPARENT_RED_VALUE, EGL_TRANSPARENT_GREEN_VALUE, and EGL_TRANSPARENT_BLUE_VALUE are undefined."
        HEAP32[((value)>>2)] = -1;
        return 1;
      case 0x3039: // EGL_BIND_TO_TEXTURE_RGB
      case 0x303A: // EGL_BIND_TO_TEXTURE_RGBA
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x303B: // EGL_MIN_SWAP_INTERVAL
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x303C: // EGL_MAX_SWAP_INTERVAL
        HEAP32[((value)>>2)] = 1;
        return 1;
      case 0x303D: // EGL_LUMINANCE_SIZE
      case 0x303E: // EGL_ALPHA_MASK_SIZE
        HEAP32[((value)>>2)] = 0;
        return 1;
      case 0x303F: // EGL_COLOR_BUFFER_TYPE
        // EGL has two types of buffers: EGL_RGB_BUFFER and EGL_LUMINANCE_BUFFER.
        HEAP32[((value)>>2)] = 0x308E;
        return 1;
      case 0x3040: // EGL_RENDERABLE_TYPE
        // A bit combination of EGL_OPENGL_ES_BIT,EGL_OPENVG_BIT,EGL_OPENGL_ES2_BIT and EGL_OPENGL_BIT.
        HEAP32[((value)>>2)] = 0x4;
        return 1;
      case 0x3042: // EGL_CONFORMANT
        // "EGL_CONFORMANT is a mask indicating if a client API context created with respect to the corresponding EGLConfig will pass the required conformance tests for that API."
        HEAP32[((value)>>2)] = 0;
        return 1;
      default:
        EGL.setErrorCode(0x3004 /* EGL_BAD_ATTRIBUTE */);
        return 0;
      }
    };

  var _eglGetDisplay = (nativeDisplayType) => {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      // Emscripten EGL implementation "emulates" X11, and eglGetDisplay is
      // expected to accept/receive a pointer to an X11 Display object (or
      // EGL_DEFAULT_DISPLAY).
      if (nativeDisplayType != 0 /* EGL_DEFAULT_DISPLAY */ && nativeDisplayType != 1 /* see library_xlib.js */) {
        return 0; // EGL_NO_DISPLAY
      }
      return 62000;
    };

  var _eglGetError = () => EGL.errorCode;

  var _eglInitialize = (display, majorVersion, minorVersion) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (majorVersion) {
        HEAP32[((majorVersion)>>2)] = 1; // Advertise EGL Major version: '1'
      }
      if (minorVersion) {
        HEAP32[((minorVersion)>>2)] = 4; // Advertise EGL Minor version: '4'
      }
      EGL.defaultDisplayInitialized = true;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    };

  
  var _eglMakeCurrent = (display, draw, read, context) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0 /* EGL_FALSE */;
      }
      //\todo An EGL_NOT_INITIALIZED error is generated if EGL is not initialized for dpy.
      if (context != 0 && context != 62004) {
        EGL.setErrorCode(0x3006 /* EGL_BAD_CONTEXT */);
        return 0;
      }
      if ((read != 0 && read != 62006) || (draw != 0 && draw != 62006 /* Magic ID for Emscripten 'default surface' */)) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 0;
      }
  
      GL.makeContextCurrent(context ? EGL.context : null);
  
      EGL.currentContext = context;
      EGL.currentDrawSurface = draw;
      EGL.currentReadSurface = read;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1 /* EGL_TRUE */;
    };

  
  var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
    };
  
  var stringToNewUTF8 = (str) => {
      var size = lengthBytesUTF8(str) + 1;
      var ret = _malloc(size);
      if (ret) stringToUTF8(str, ret, size);
      return ret;
    };
  
  var _eglQueryString = (display, name) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      //\todo An EGL_NOT_INITIALIZED error is generated if EGL is not initialized for dpy.
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      if (EGL.stringCache[name]) return EGL.stringCache[name];
      var ret;
      switch (name) {
        case 0x3053 /* EGL_VENDOR */: ret = stringToNewUTF8("Emscripten"); break;
        case 0x3054 /* EGL_VERSION */: ret = stringToNewUTF8("1.4 Emscripten EGL"); break;
        case 0x3055 /* EGL_EXTENSIONS */:  ret = stringToNewUTF8(""); break; // Currently not supporting any EGL extensions.
        case 0x308D /* EGL_CLIENT_APIS */: ret = stringToNewUTF8("OpenGL_ES"); break;
        default:
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
      }
      EGL.stringCache[name] = ret;
      return ret;
    };

  var _eglSwapBuffers = (dpy, surface) => {
  
      if (!EGL.defaultDisplayInitialized) {
        EGL.setErrorCode(0x3001 /* EGL_NOT_INITIALIZED */);
      } else if (!Module.ctx) {
        EGL.setErrorCode(0x3002 /* EGL_BAD_ACCESS */);
      } else if (Module.ctx.isContextLost()) {
        EGL.setErrorCode(0x300E /* EGL_CONTEXT_LOST */);
      } else {
        // According to documentation this does an implicit flush.
        // Due to discussion at https://github.com/emscripten-core/emscripten/pull/1871
        // the flush was removed since this _may_ result in slowing code down.
        //_glFlush();
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1 /* EGL_TRUE */;
      }
      return 0 /* EGL_FALSE */;
    };

  
  var _eglSwapInterval = (display, interval) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (interval == 0) _emscripten_set_main_loop_timing(0, 0);
      else _emscripten_set_main_loop_timing(1, interval);
  
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    };

  var _eglTerminate = (display) => {
      if (display != 62000) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      EGL.currentContext = 0;
      EGL.currentReadSurface = 0;
      EGL.currentDrawSurface = 0;
      EGL.defaultDisplayInitialized = false;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    };

  
  /** @suppress {duplicate } */
  var _eglWaitClient = () => {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    };
  var _eglWaitGL = _eglWaitClient;

  var _eglWaitNative = (nativeEngineId) => {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    };

  var readEmAsmArgsArray = [];
  var readEmAsmArgs = (sigPtr, buf) => {
      // Nobody should have mutated _readEmAsmArgsArray underneath us to be something else than an array.
      assert(Array.isArray(readEmAsmArgsArray));
      // The input buffer is allocated on the stack, so it must be stack-aligned.
      assert(buf % 16 == 0);
      readEmAsmArgsArray.length = 0;
      var ch;
      // Most arguments are i32s, so shift the buffer pointer so it is a plain
      // index into HEAP32.
      while (ch = HEAPU8[sigPtr++]) {
        var chr = String.fromCharCode(ch);
        var validChars = ['d', 'f', 'i', 'p'];
        assert(validChars.includes(chr), `Invalid character ${ch}("${chr}") in readEmAsmArgs! Use only [${validChars}], and do not specify "v" for void return argument.`);
        // Floats are always passed as doubles, so all types except for 'i'
        // are 8 bytes and require alignment.
        var wide = (ch != 105);
        wide &= (ch != 112);
        buf += wide && (buf % 8) ? 4 : 0;
        readEmAsmArgsArray.push(
          // Special case for pointers under wasm64 or CAN_ADDRESS_2GB mode.
          ch == 112 ? HEAPU32[((buf)>>2)] :
          ch == 105 ?
            HEAP32[((buf)>>2)] :
            HEAPF64[((buf)>>3)]
        );
        buf += wide ? 8 : 4;
      }
      return readEmAsmArgsArray;
    };
  var runEmAsmFunction = (code, sigPtr, argbuf) => {
      var args = readEmAsmArgs(sigPtr, argbuf);
      assert(ASM_CONSTS.hasOwnProperty(code), `No EM_ASM constant found at address ${code}.  The loaded WebAssembly file is likely out of sync with the generated JavaScript.`);
      return ASM_CONSTS[code](...args);
    };
  var _emscripten_asm_const_int = (code, sigPtr, argbuf) => {
      return runEmAsmFunction(code, sigPtr, argbuf);
    };

  var runMainThreadEmAsm = (emAsmAddr, sigPtr, argbuf, sync) => {
      var args = readEmAsmArgs(sigPtr, argbuf);
      assert(ASM_CONSTS.hasOwnProperty(emAsmAddr), `No EM_ASM constant found at address ${emAsmAddr}.  The loaded WebAssembly file is likely out of sync with the generated JavaScript.`);
      return ASM_CONSTS[emAsmAddr](...args);
    };
  var _emscripten_asm_const_int_sync_on_main_thread = (emAsmAddr, sigPtr, argbuf) => runMainThreadEmAsm(emAsmAddr, sigPtr, argbuf, 1);

  var _emscripten_asm_const_ptr_sync_on_main_thread = (emAsmAddr, sigPtr, argbuf) => runMainThreadEmAsm(emAsmAddr, sigPtr, argbuf, 1);

  var _emscripten_date_now = () => Date.now();

  var JSEvents = {
  removeAllEventListeners() {
        while (JSEvents.eventHandlers.length) {
          JSEvents._removeHandler(JSEvents.eventHandlers.length - 1);
        }
        JSEvents.deferredCalls = [];
      },
  inEventHandler:0,
  deferredCalls:[],
  deferCall(targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for (var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for (var call of JSEvents.deferredCalls) {
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction,
          precedence,
          argsList
        });
  
        JSEvents.deferredCalls.sort((x,y) => x.precedence < y.precedence);
      },
  removeDeferredCalls(targetFunction) {
        JSEvents.deferredCalls = JSEvents.deferredCalls.filter((call) => call.targetFunction != targetFunction);
      },
  canPerformEventHandlerRequests() {
        if (navigator.userActivation) {
          // Verify against transient activation status from UserActivation API
          // whether it is possible to perform a request here without needing to defer. See
          // https://developer.mozilla.org/en-US/docs/Web/Security/User_activation#transient_activation
          // and https://caniuse.com/mdn-api_useractivation
          // At the time of writing, Firefox does not support this API: https://bugzilla.mozilla.org/show_bug.cgi?id=1791079
          return navigator.userActivation.isActive;
        }
  
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },
  runDeferredCalls() {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        var deferredCalls = JSEvents.deferredCalls;
        JSEvents.deferredCalls = [];
        for (var call of deferredCalls) {
          call.targetFunction(...call.argsList);
        }
      },
  eventHandlers:[],
  removeAllHandlersOnTarget:(target, eventTypeString) => {
        for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target &&
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },
  _removeHandler(i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },
  registerOrRemoveHandler(eventHandler) {
        if (!eventHandler.target) {
          err('registerOrRemoveHandler: the target element for event handler registration does not exist, when processing the following event handler registration:');
          console.dir(eventHandler);
          return -4;
        }
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = function(event) {
            // Increment nesting count for the event handler.
            ++JSEvents.inEventHandler;
            JSEvents.currentEventHandler = eventHandler;
            // Process any old deferred calls the user has placed.
            JSEvents.runDeferredCalls();
            // Process the actual event, calls back to user C code handler.
            eventHandler.handlerFunc(event);
            // Process any new deferred calls that were placed right now from this event handler.
            JSEvents.runDeferredCalls();
            // Out of event handler - restore nesting count.
            --JSEvents.inEventHandler;
          };
  
          eventHandler.target.addEventListener(eventHandler.eventTypeString,
                                               eventHandler.eventListenerFunc,
                                               eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
        } else {
          for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
        return 0;
      },
  getNodeNameForTarget(target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return target?.nodeName || '';
      },
  fullscreenEnabled() {
        return document.fullscreenEnabled
        // Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitFullscreenEnabled.
        // TODO: If Safari at some point ships with unprefixed version, update the version check above.
        || document.webkitFullscreenEnabled
         ;
      },
  };
  
  var currentFullscreenStrategy = {
  };
  
  
  
  
  var maybeCStringToJsString = (cString) => {
      // "cString > 2" checks if the input is a number, and isn't of the special
      // values we accept here, EMSCRIPTEN_EVENT_TARGET_* (which map to 0, 1, 2).
      // In other words, if cString > 2 then it's a pointer to a valid place in
      // memory, and points to a C string.
      return cString > 2 ? UTF8ToString(cString) : cString;
    };
  
  /** @type {Object} */
  var specialHTMLTargets = [0, typeof document != 'undefined' ? document : 0, typeof window != 'undefined' ? window : 0];
  /** @suppress {duplicate } */
  var findEventTarget = (target) => {
      target = maybeCStringToJsString(target);
      var domElement = specialHTMLTargets[target] || (typeof document != 'undefined' ? document.querySelector(target) : undefined);
      return domElement;
    };
  var findCanvasEventTarget = findEventTarget;
  var _emscripten_get_canvas_element_size = (target, width, height) => {
      var canvas = findCanvasEventTarget(target);
      if (!canvas) return -4;
      HEAP32[((width)>>2)] = canvas.width;
      HEAP32[((height)>>2)] = canvas.height;
    };
  
  
  
  
  
  var stackAlloc = (sz) => __emscripten_stack_alloc(sz);
  var stringToUTF8OnStack = (str) => {
      var size = lengthBytesUTF8(str) + 1;
      var ret = stackAlloc(size);
      stringToUTF8(str, ret, size);
      return ret;
    };
  var getCanvasElementSize = (target) => {
      var sp = stackSave();
      var w = stackAlloc(8);
      var h = w + 4;
  
      var targetInt = stringToUTF8OnStack(target.id);
      var ret = _emscripten_get_canvas_element_size(targetInt, w, h);
      var size = [HEAP32[((w)>>2)], HEAP32[((h)>>2)]];
      stackRestore(sp);
      return size;
    };
  
  
  var _emscripten_set_canvas_element_size = (target, width, height) => {
      var canvas = findCanvasEventTarget(target);
      if (!canvas) return -4;
      canvas.width = width;
      canvas.height = height;
      return 0;
    };
  
  
  
  var setCanvasElementSize = (target, width, height) => {
      if (!target.controlTransferredOffscreen) {
        target.width = width;
        target.height = height;
      } else {
        // This function is being called from high-level JavaScript code instead of asm.js/Wasm,
        // and it needs to synchronously proxy over to another thread, so marshal the string onto the heap to do the call.
        var sp = stackSave();
        var targetInt = stringToUTF8OnStack(target.id);
        _emscripten_set_canvas_element_size(targetInt, width, height);
        stackRestore(sp);
      }
    };
  
  var wasmTableMirror = [];
  
  /** @type {WebAssembly.Table} */
  var wasmTable;
  var getWasmTableEntry = (funcPtr) => {
      var func = wasmTableMirror[funcPtr];
      if (!func) {
        if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;
        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
      }
      assert(wasmTable.get(funcPtr) == func, 'JavaScript-side Wasm function table mirror is out of date!');
      return func;
    };
  var registerRestoreOldStyle = (canvas) => {
      var canvasSize = getCanvasElementSize(canvas);
      var oldWidth = canvasSize[0];
      var oldHeight = canvasSize[1];
      var oldCssWidth = canvas.style.width;
      var oldCssHeight = canvas.style.height;
      var oldBackgroundColor = canvas.style.backgroundColor; // Chrome reads color from here.
      var oldDocumentBackgroundColor = document.body.style.backgroundColor; // IE11 reads color from here.
      // Firefox always has black background color.
      var oldPaddingLeft = canvas.style.paddingLeft; // Chrome, FF, Safari
      var oldPaddingRight = canvas.style.paddingRight;
      var oldPaddingTop = canvas.style.paddingTop;
      var oldPaddingBottom = canvas.style.paddingBottom;
      var oldMarginLeft = canvas.style.marginLeft; // IE11
      var oldMarginRight = canvas.style.marginRight;
      var oldMarginTop = canvas.style.marginTop;
      var oldMarginBottom = canvas.style.marginBottom;
      var oldDocumentBodyMargin = document.body.style.margin;
      var oldDocumentOverflow = document.documentElement.style.overflow; // Chrome, Firefox
      var oldDocumentScroll = document.body.scroll; // IE
      var oldImageRendering = canvas.style.imageRendering;
  
      function restoreOldStyle() {
        var fullscreenElement = document.fullscreenElement
          || document.webkitFullscreenElement
          ;
        if (!fullscreenElement) {
          document.removeEventListener('fullscreenchange', restoreOldStyle);
  
          // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
          // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
          document.removeEventListener('webkitfullscreenchange', restoreOldStyle);
  
          setCanvasElementSize(canvas, oldWidth, oldHeight);
  
          canvas.style.width = oldCssWidth;
          canvas.style.height = oldCssHeight;
          canvas.style.backgroundColor = oldBackgroundColor; // Chrome
          // IE11 hack: assigning 'undefined' or an empty string to document.body.style.backgroundColor has no effect, so first assign back the default color
          // before setting the undefined value. Setting undefined value is also important, or otherwise we would later treat that as something that the user
          // had explicitly set so subsequent fullscreen transitions would not set background color properly.
          if (!oldDocumentBackgroundColor) document.body.style.backgroundColor = 'white';
          document.body.style.backgroundColor = oldDocumentBackgroundColor; // IE11
          canvas.style.paddingLeft = oldPaddingLeft; // Chrome, FF, Safari
          canvas.style.paddingRight = oldPaddingRight;
          canvas.style.paddingTop = oldPaddingTop;
          canvas.style.paddingBottom = oldPaddingBottom;
          canvas.style.marginLeft = oldMarginLeft; // IE11
          canvas.style.marginRight = oldMarginRight;
          canvas.style.marginTop = oldMarginTop;
          canvas.style.marginBottom = oldMarginBottom;
          document.body.style.margin = oldDocumentBodyMargin;
          document.documentElement.style.overflow = oldDocumentOverflow; // Chrome, Firefox
          document.body.scroll = oldDocumentScroll; // IE
          canvas.style.imageRendering = oldImageRendering;
          if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, oldWidth, oldHeight);
  
          if (currentFullscreenStrategy.canvasResizedCallback) {
            getWasmTableEntry(currentFullscreenStrategy.canvasResizedCallback)(37, 0, currentFullscreenStrategy.canvasResizedCallbackUserData);
          }
        }
      }
      document.addEventListener('fullscreenchange', restoreOldStyle);
      // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
      // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
      document.addEventListener('webkitfullscreenchange', restoreOldStyle);
      return restoreOldStyle;
    };
  
  
  var setLetterbox = (element, topBottom, leftRight) => {
      // Cannot use margin to specify letterboxes in FF or Chrome, since those ignore margins in fullscreen mode.
      element.style.paddingLeft = element.style.paddingRight = leftRight + 'px';
      element.style.paddingTop = element.style.paddingBottom = topBottom + 'px';
    };
  
  
  var getBoundingClientRect = (e) => specialHTMLTargets.indexOf(e) < 0 ? e.getBoundingClientRect() : {'left':0,'top':0};
  var JSEvents_resizeCanvasForFullscreen = (target, strategy) => {
      var restoreOldStyle = registerRestoreOldStyle(target);
      var cssWidth = strategy.softFullscreen ? innerWidth : screen.width;
      var cssHeight = strategy.softFullscreen ? innerHeight : screen.height;
      var rect = getBoundingClientRect(target);
      var windowedCssWidth = rect.width;
      var windowedCssHeight = rect.height;
      var canvasSize = getCanvasElementSize(target);
      var windowedRttWidth = canvasSize[0];
      var windowedRttHeight = canvasSize[1];
  
      if (strategy.scaleMode == 3) {
        setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
        cssWidth = windowedCssWidth;
        cssHeight = windowedCssHeight;
      } else if (strategy.scaleMode == 2) {
        if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
          var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
          setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
          cssHeight = desiredCssHeight;
        } else {
          var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
          setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
          cssWidth = desiredCssWidth;
        }
      }
  
      // If we are adding padding, must choose a background color or otherwise Chrome will give the
      // padding a default white color. Do it only if user has not customized their own background color.
      if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
      // IE11 does the same, but requires the color to be set in the document body.
      if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
      // Firefox always shows black letterboxes independent of style color.
  
      target.style.width = cssWidth + 'px';
      target.style.height = cssHeight + 'px';
  
      if (strategy.filteringMode == 1) {
        target.style.imageRendering = 'optimizeSpeed';
        target.style.imageRendering = '-moz-crisp-edges';
        target.style.imageRendering = '-o-crisp-edges';
        target.style.imageRendering = '-webkit-optimize-contrast';
        target.style.imageRendering = 'optimize-contrast';
        target.style.imageRendering = 'crisp-edges';
        target.style.imageRendering = 'pixelated';
      }
  
      var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? devicePixelRatio : 1;
      if (strategy.canvasResolutionScaleMode != 0) {
        var newWidth = (cssWidth * dpiScale)|0;
        var newHeight = (cssHeight * dpiScale)|0;
        setCanvasElementSize(target, newWidth, newHeight);
        if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, newWidth, newHeight);
      }
      return restoreOldStyle;
    };
  
  var JSEvents_requestFullscreen = (target, strategy) => {
      // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
      if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
        JSEvents_resizeCanvasForFullscreen(target, strategy);
      }
  
      if (target.requestFullscreen) {
        target.requestFullscreen();
      } else if (target.webkitRequestFullscreen) {
        target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
      } else {
        return JSEvents.fullscreenEnabled() ? -3 : -1;
      }
  
      currentFullscreenStrategy = strategy;
  
      if (strategy.canvasResizedCallback) {
        getWasmTableEntry(strategy.canvasResizedCallback)(37, 0, strategy.canvasResizedCallbackUserData);
      }
  
      return 0;
    };
  
  var _emscripten_exit_fullscreen = () => {
      if (!JSEvents.fullscreenEnabled()) return -1;
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(JSEvents_requestFullscreen);
  
      var d = specialHTMLTargets[1];
      if (d.exitFullscreen) {
        d.fullscreenElement && d.exitFullscreen();
      } else if (d.webkitExitFullscreen) {
        d.webkitFullscreenElement && d.webkitExitFullscreen();
      } else {
        return -1;
      }
  
      return 0;
    };

  
  var requestPointerLock = (target) => {
      if (target.requestPointerLock) {
        target.requestPointerLock();
      } else {
        // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
        // or if the whole browser just doesn't support the feature.
        if (document.body.requestPointerLock
          ) {
          return -3;
        }
        return -1;
      }
      return 0;
    };
  var _emscripten_exit_pointerlock = () => {
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(requestPointerLock);
  
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else {
        return -1;
      }
      return 0;
    };

  var _emscripten_get_device_pixel_ratio = () => {
      return (typeof devicePixelRatio == 'number' && devicePixelRatio) || 1.0;
    };

  
  
  var _emscripten_get_element_css_size = (target, width, height) => {
      target = findEventTarget(target);
      if (!target) return -4;
  
      var rect = getBoundingClientRect(target);
      HEAPF64[((width)>>3)] = rect.width;
      HEAPF64[((height)>>3)] = rect.height;
  
      return 0;
    };

  
  var fillGamepadEventData = (eventStruct, e) => {
      HEAPF64[((eventStruct)>>3)] = e.timestamp;
      for (var i = 0; i < e.axes.length; ++i) {
        HEAPF64[(((eventStruct+i*8)+(16))>>3)] = e.axes[i];
      }
      for (var i = 0; i < e.buttons.length; ++i) {
        if (typeof e.buttons[i] == 'object') {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)] = e.buttons[i].value;
        } else {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)] = e.buttons[i];
        }
      }
      for (var i = 0; i < e.buttons.length; ++i) {
        if (typeof e.buttons[i] == 'object') {
          HEAP8[(eventStruct+i)+(1040)] = e.buttons[i].pressed;
        } else {
          // Assigning a boolean to HEAP32, that's ok, but Closure would like to warn about it:
          /** @suppress {checkTypes} */
          HEAP8[(eventStruct+i)+(1040)] = e.buttons[i] == 1;
        }
      }
      HEAP8[(eventStruct)+(1104)] = e.connected;
      HEAP32[(((eventStruct)+(1108))>>2)] = e.index;
      HEAP32[(((eventStruct)+(8))>>2)] = e.axes.length;
      HEAP32[(((eventStruct)+(12))>>2)] = e.buttons.length;
      stringToUTF8(e.id, eventStruct + 1112, 64);
      stringToUTF8(e.mapping, eventStruct + 1176, 64);
    };
  var _emscripten_get_gamepad_status = (index, gamepadState) => {
      if (!JSEvents.lastGamepadState) throw 'emscripten_get_gamepad_status() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!';
      // INVALID_PARAM is returned on a Gamepad index that never was there.
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  
      // NO_DATA is returned on a Gamepad index that was removed.
      // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
      // This is because gamepads must keep their original position in the array.
      // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
      if (!JSEvents.lastGamepadState[index]) return -7;
  
      fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    };


  var _emscripten_get_num_gamepads = () => {
      if (!JSEvents.lastGamepadState) throw 'emscripten_get_num_gamepads() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!';
      // N.B. Do not call emscripten_get_num_gamepads() unless having first called emscripten_sample_gamepad_data(), and that has returned EMSCRIPTEN_RESULT_SUCCESS.
      // Otherwise the following line will throw an exception.
      return JSEvents.lastGamepadState.length;
    };

  var _emscripten_get_screen_size = (width, height) => {
      HEAP32[((width)>>2)] = screen.width;
      HEAP32[((height)>>2)] = screen.height;
    };

  /** @suppress {duplicate } */
  var _glActiveTexture = (x0) => GLctx.activeTexture(x0);
  var _emscripten_glActiveTexture = _glActiveTexture;

  /** @suppress {duplicate } */
  var _glAttachShader = (program, shader) => {
      GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
    };
  var _emscripten_glAttachShader = _glAttachShader;

  /** @suppress {duplicate } */
  var _glBeginQueryEXT = (target, id) => {
      GLctx.disjointTimerQueryExt['beginQueryEXT'](target, GL.queries[id]);
    };
  var _emscripten_glBeginQueryEXT = _glBeginQueryEXT;

  
  /** @suppress {duplicate } */
  var _glBindAttribLocation = (program, index, name) => {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    };
  var _emscripten_glBindAttribLocation = _glBindAttribLocation;

  /** @suppress {duplicate } */
  var _glBindBuffer = (target, buffer) => {
      if (target == 0x8892 /*GL_ARRAY_BUFFER*/) {
        GLctx.currentArrayBufferBinding = buffer;
      } else if (target == 0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/) {
        GLctx.currentElementArrayBufferBinding = buffer;
      }
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    };
  var _emscripten_glBindBuffer = _glBindBuffer;

  /** @suppress {duplicate } */
  var _glBindFramebuffer = (target, framebuffer) => {
  
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
  
    };
  var _emscripten_glBindFramebuffer = _glBindFramebuffer;

  /** @suppress {duplicate } */
  var _glBindRenderbuffer = (target, renderbuffer) => {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    };
  var _emscripten_glBindRenderbuffer = _glBindRenderbuffer;

  /** @suppress {duplicate } */
  var _glBindTexture = (target, texture) => {
      GLctx.bindTexture(target, GL.textures[texture]);
    };
  var _emscripten_glBindTexture = _glBindTexture;

  
  /** @suppress {duplicate } */
  var _glBindVertexArray = (vao) => {
      GLctx.bindVertexArray(GL.vaos[vao]);
      var ibo = GLctx.getParameter(0x8895 /*ELEMENT_ARRAY_BUFFER_BINDING*/);
      GLctx.currentElementArrayBufferBinding = ibo ? (ibo.name | 0) : 0;
    };
  /** @suppress {duplicate } */
  var _glBindVertexArrayOES = _glBindVertexArray;
  var _emscripten_glBindVertexArrayOES = _glBindVertexArrayOES;

  /** @suppress {duplicate } */
  var _glBlendColor = (x0, x1, x2, x3) => GLctx.blendColor(x0, x1, x2, x3);
  var _emscripten_glBlendColor = _glBlendColor;

  /** @suppress {duplicate } */
  var _glBlendEquation = (x0) => GLctx.blendEquation(x0);
  var _emscripten_glBlendEquation = _glBlendEquation;

  /** @suppress {duplicate } */
  var _glBlendEquationSeparate = (x0, x1) => GLctx.blendEquationSeparate(x0, x1);
  var _emscripten_glBlendEquationSeparate = _glBlendEquationSeparate;

  /** @suppress {duplicate } */
  var _glBlendFunc = (x0, x1) => GLctx.blendFunc(x0, x1);
  var _emscripten_glBlendFunc = _glBlendFunc;

  /** @suppress {duplicate } */
  var _glBlendFuncSeparate = (x0, x1, x2, x3) => GLctx.blendFuncSeparate(x0, x1, x2, x3);
  var _emscripten_glBlendFuncSeparate = _glBlendFuncSeparate;

  /** @suppress {duplicate } */
  var _glBufferData = (target, size, data, usage) => {
  
      // N.b. here first form specifies a heap subarray, second form an integer
      // size, so the ?: code here is polymorphic. It is advised to avoid
      // randomly mixing both uses in calling code, to avoid any potential JS
      // engine JIT issues.
      GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    };
  var _emscripten_glBufferData = _glBufferData;

  /** @suppress {duplicate } */
  var _glBufferSubData = (target, offset, size, data) => {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    };
  var _emscripten_glBufferSubData = _glBufferSubData;

  /** @suppress {duplicate } */
  var _glCheckFramebufferStatus = (x0) => GLctx.checkFramebufferStatus(x0);
  var _emscripten_glCheckFramebufferStatus = _glCheckFramebufferStatus;

  /** @suppress {duplicate } */
  var _glClear = (x0) => GLctx.clear(x0);
  var _emscripten_glClear = _glClear;

  /** @suppress {duplicate } */
  var _glClearColor = (x0, x1, x2, x3) => GLctx.clearColor(x0, x1, x2, x3);
  var _emscripten_glClearColor = _glClearColor;

  /** @suppress {duplicate } */
  var _glClearDepthf = (x0) => GLctx.clearDepth(x0);
  var _emscripten_glClearDepthf = _glClearDepthf;

  /** @suppress {duplicate } */
  var _glClearStencil = (x0) => GLctx.clearStencil(x0);
  var _emscripten_glClearStencil = _glClearStencil;

  /** @suppress {duplicate } */
  var _glClipControlEXT = (origin, depth) => {
      GLctx.extClipControl['clipControlEXT'](origin, depth);
    };
  var _emscripten_glClipControlEXT = _glClipControlEXT;

  /** @suppress {duplicate } */
  var _glColorMask = (red, green, blue, alpha) => {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    };
  var _emscripten_glColorMask = _glColorMask;

  /** @suppress {duplicate } */
  var _glCompileShader = (shader) => {
      GLctx.compileShader(GL.shaders[shader]);
    };
  var _emscripten_glCompileShader = _glCompileShader;

  /** @suppress {duplicate } */
  var _glCompressedTexImage2D = (target, level, internalFormat, width, height, border, imageSize, data) => {
      // `data` may be null here, which means "allocate uniniitalized space but
      // don't upload" in GLES parlance, but `compressedTexImage2D` requires the
      // final data parameter, so we simply pass a heap view starting at zero
      // effectively uploading whatever happens to be near address zero.  See
      // https://github.com/emscripten-core/emscripten/issues/19300.
      GLctx.compressedTexImage2D(target, level, internalFormat, width, height, border, HEAPU8.subarray((data), data+imageSize));
    };
  var _emscripten_glCompressedTexImage2D = _glCompressedTexImage2D;

  /** @suppress {duplicate } */
  var _glCompressedTexSubImage2D = (target, level, xoffset, yoffset, width, height, format, imageSize, data) => {
      GLctx.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, HEAPU8.subarray((data), data+imageSize));
    };
  var _emscripten_glCompressedTexSubImage2D = _glCompressedTexSubImage2D;

  /** @suppress {duplicate } */
  var _glCopyTexImage2D = (x0, x1, x2, x3, x4, x5, x6, x7) => GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7);
  var _emscripten_glCopyTexImage2D = _glCopyTexImage2D;

  /** @suppress {duplicate } */
  var _glCopyTexSubImage2D = (x0, x1, x2, x3, x4, x5, x6, x7) => GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7);
  var _emscripten_glCopyTexSubImage2D = _glCopyTexSubImage2D;

  /** @suppress {duplicate } */
  var _glCreateProgram = () => {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      // Store additional information needed for each shader program:
      program.name = id;
      // Lazy cache results of
      // glGetProgramiv(GL_ACTIVE_UNIFORM_MAX_LENGTH/GL_ACTIVE_ATTRIBUTE_MAX_LENGTH/GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH)
      program.maxUniformLength = program.maxAttributeLength = program.maxUniformBlockNameLength = 0;
      program.uniformIdCounter = 1;
      GL.programs[id] = program;
      return id;
    };
  var _emscripten_glCreateProgram = _glCreateProgram;

  /** @suppress {duplicate } */
  var _glCreateShader = (shaderType) => {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
  
      return id;
    };
  var _emscripten_glCreateShader = _glCreateShader;

  /** @suppress {duplicate } */
  var _glCullFace = (x0) => GLctx.cullFace(x0);
  var _emscripten_glCullFace = _glCullFace;

  /** @suppress {duplicate } */
  var _glDeleteBuffers = (n, buffers) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GLctx.currentArrayBufferBinding) GLctx.currentArrayBufferBinding = 0;
        if (id == GLctx.currentElementArrayBufferBinding) GLctx.currentElementArrayBufferBinding = 0;
      }
    };
  var _emscripten_glDeleteBuffers = _glDeleteBuffers;

  /** @suppress {duplicate } */
  var _glDeleteFramebuffers = (n, framebuffers) => {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    };
  var _emscripten_glDeleteFramebuffers = _glDeleteFramebuffers;

  /** @suppress {duplicate } */
  var _glDeleteProgram = (id) => {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) {
        // glDeleteProgram actually signals an error when deleting a nonexisting
        // object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
    };
  var _emscripten_glDeleteProgram = _glDeleteProgram;

  /** @suppress {duplicate } */
  var _glDeleteQueriesEXT = (n, ids) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((ids)+(i*4))>>2)];
        var query = GL.queries[id];
        if (!query) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.disjointTimerQueryExt['deleteQueryEXT'](query);
        GL.queries[id] = null;
      }
    };
  var _emscripten_glDeleteQueriesEXT = _glDeleteQueriesEXT;

  /** @suppress {duplicate } */
  var _glDeleteRenderbuffers = (n, renderbuffers) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    };
  var _emscripten_glDeleteRenderbuffers = _glDeleteRenderbuffers;

  /** @suppress {duplicate } */
  var _glDeleteShader = (id) => {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) {
        // glDeleteShader actually signals an error when deleting a nonexisting
        // object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    };
  var _emscripten_glDeleteShader = _glDeleteShader;

  /** @suppress {duplicate } */
  var _glDeleteTextures = (n, textures) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        // GL spec: "glDeleteTextures silently ignores 0s and names that do not
        // correspond to existing textures".
        if (!texture) continue;
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    };
  var _emscripten_glDeleteTextures = _glDeleteTextures;

  
  /** @suppress {duplicate } */
  var _glDeleteVertexArrays = (n, vaos) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx.deleteVertexArray(GL.vaos[id]);
        GL.vaos[id] = null;
      }
    };
  /** @suppress {duplicate } */
  var _glDeleteVertexArraysOES = _glDeleteVertexArrays;
  var _emscripten_glDeleteVertexArraysOES = _glDeleteVertexArraysOES;

  /** @suppress {duplicate } */
  var _glDepthFunc = (x0) => GLctx.depthFunc(x0);
  var _emscripten_glDepthFunc = _glDepthFunc;

  /** @suppress {duplicate } */
  var _glDepthMask = (flag) => {
      GLctx.depthMask(!!flag);
    };
  var _emscripten_glDepthMask = _glDepthMask;

  /** @suppress {duplicate } */
  var _glDepthRangef = (x0, x1) => GLctx.depthRange(x0, x1);
  var _emscripten_glDepthRangef = _glDepthRangef;

  /** @suppress {duplicate } */
  var _glDetachShader = (program, shader) => {
      GLctx.detachShader(GL.programs[program], GL.shaders[shader]);
    };
  var _emscripten_glDetachShader = _glDetachShader;

  /** @suppress {duplicate } */
  var _glDisable = (x0) => GLctx.disable(x0);
  var _emscripten_glDisable = _glDisable;

  /** @suppress {duplicate } */
  var _glDisableVertexAttribArray = (index) => {
      var cb = GL.currentContext.clientBuffers[index];
      cb.enabled = false;
      GLctx.disableVertexAttribArray(index);
    };
  var _emscripten_glDisableVertexAttribArray = _glDisableVertexAttribArray;

  /** @suppress {duplicate } */
  var _glDrawArrays = (mode, first, count) => {
      // bind any client-side buffers
      GL.preDrawHandleClientVertexAttribBindings(first + count);
  
      GLctx.drawArrays(mode, first, count);
  
      GL.postDrawHandleClientVertexAttribBindings();
    };
  var _emscripten_glDrawArrays = _glDrawArrays;

  
  /** @suppress {duplicate } */
  var _glDrawArraysInstanced = (mode, first, count, primcount) => {
      GLctx.drawArraysInstanced(mode, first, count, primcount);
    };
  /** @suppress {duplicate } */
  var _glDrawArraysInstancedANGLE = _glDrawArraysInstanced;
  var _emscripten_glDrawArraysInstancedANGLE = _glDrawArraysInstancedANGLE;

  
  var tempFixedLengthArray = [];
  
  /** @suppress {duplicate } */
  var _glDrawBuffers = (n, bufs) => {
  
      var bufArray = tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx.drawBuffers(bufArray);
    };
  /** @suppress {duplicate } */
  var _glDrawBuffersWEBGL = _glDrawBuffers;
  var _emscripten_glDrawBuffersWEBGL = _glDrawBuffersWEBGL;

  /** @suppress {duplicate } */
  var _glDrawElements = (mode, count, type, indices) => {
      var buf;
      var vertexes = 0;
      if (!GLctx.currentElementArrayBufferBinding) {
        var size = GL.calcBufLength(1, type, 0, count);
        buf = GL.getTempIndexBuffer(size);
        GLctx.bindBuffer(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, buf);
        GLctx.bufferSubData(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/,
                            0,
                            HEAPU8.subarray(indices, indices + size));
        
        // Calculating vertex count if shader's attribute data is on client side
        if (count > 0) {
          for (var i = 0; i < GL.currentContext.maxVertexAttribs; ++i) {
            var cb = GL.currentContext.clientBuffers[i];
            if (cb.clientside && cb.enabled) {
              let arrayClass;
              switch(type) {
                case 0x1401 /* GL_UNSIGNED_BYTE */: arrayClass = Uint8Array; break;
                case 0x1403 /* GL_UNSIGNED_SHORT */: arrayClass = Uint16Array; break;
                default:
                  GL.recordError(0x502 /* GL_INVALID_OPERATION */);
                  return;
              }
  
              vertexes = new arrayClass(HEAPU8.buffer, indices, count).reduce((max, current) => Math.max(max, current)) + 1;
              break;
            }
          }
        }
  
        // the index is now 0
        indices = 0;
      }
  
      // bind any client-side buffers
      GL.preDrawHandleClientVertexAttribBindings(vertexes);
  
      GLctx.drawElements(mode, count, type, indices);
  
      GL.postDrawHandleClientVertexAttribBindings(count);
  
      if (!GLctx.currentElementArrayBufferBinding) {
        GLctx.bindBuffer(0x8893 /*GL_ELEMENT_ARRAY_BUFFER*/, null);
      }
    };
  var _emscripten_glDrawElements = _glDrawElements;

  
  /** @suppress {duplicate } */
  var _glDrawElementsInstanced = (mode, count, type, indices, primcount) => {
      GLctx.drawElementsInstanced(mode, count, type, indices, primcount);
    };
  /** @suppress {duplicate } */
  var _glDrawElementsInstancedANGLE = _glDrawElementsInstanced;
  var _emscripten_glDrawElementsInstancedANGLE = _glDrawElementsInstancedANGLE;

  /** @suppress {duplicate } */
  var _glEnable = (x0) => GLctx.enable(x0);
  var _emscripten_glEnable = _glEnable;

  /** @suppress {duplicate } */
  var _glEnableVertexAttribArray = (index) => {
      var cb = GL.currentContext.clientBuffers[index];
      cb.enabled = true;
      GLctx.enableVertexAttribArray(index);
    };
  var _emscripten_glEnableVertexAttribArray = _glEnableVertexAttribArray;

  /** @suppress {duplicate } */
  var _glEndQueryEXT = (target) => {
      GLctx.disjointTimerQueryExt['endQueryEXT'](target);
    };
  var _emscripten_glEndQueryEXT = _glEndQueryEXT;

  /** @suppress {duplicate } */
  var _glFinish = () => GLctx.finish();
  var _emscripten_glFinish = _glFinish;

  /** @suppress {duplicate } */
  var _glFlush = () => GLctx.flush();
  var _emscripten_glFlush = _glFlush;

  /** @suppress {duplicate } */
  var _glFramebufferRenderbuffer = (target, attachment, renderbuffertarget, renderbuffer) => {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    };
  var _emscripten_glFramebufferRenderbuffer = _glFramebufferRenderbuffer;

  /** @suppress {duplicate } */
  var _glFramebufferTexture2D = (target, attachment, textarget, texture, level) => {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    };
  var _emscripten_glFramebufferTexture2D = _glFramebufferTexture2D;

  /** @suppress {duplicate } */
  var _glFrontFace = (x0) => GLctx.frontFace(x0);
  var _emscripten_glFrontFace = _glFrontFace;

  /** @suppress {duplicate } */
  var _glGenBuffers = (n, buffers) => {
      GL.genObject(n, buffers, 'createBuffer', GL.buffers
        );
    };
  var _emscripten_glGenBuffers = _glGenBuffers;

  /** @suppress {duplicate } */
  var _glGenFramebuffers = (n, ids) => {
      GL.genObject(n, ids, 'createFramebuffer', GL.framebuffers
        );
    };
  var _emscripten_glGenFramebuffers = _glGenFramebuffers;

  /** @suppress {duplicate } */
  var _glGenQueriesEXT = (n, ids) => {
      for (var i = 0; i < n; i++) {
        var query = GLctx.disjointTimerQueryExt['createQueryEXT']();
        if (!query) {
          GL.recordError(0x502 /* GL_INVALID_OPERATION */);
          while (i < n) HEAP32[(((ids)+(i++*4))>>2)] = 0;
          return;
        }
        var id = GL.getNewId(GL.queries);
        query.name = id;
        GL.queries[id] = query;
        HEAP32[(((ids)+(i*4))>>2)] = id;
      }
    };
  var _emscripten_glGenQueriesEXT = _glGenQueriesEXT;

  /** @suppress {duplicate } */
  var _glGenRenderbuffers = (n, renderbuffers) => {
      GL.genObject(n, renderbuffers, 'createRenderbuffer', GL.renderbuffers
        );
    };
  var _emscripten_glGenRenderbuffers = _glGenRenderbuffers;

  /** @suppress {duplicate } */
  var _glGenTextures = (n, textures) => {
      GL.genObject(n, textures, 'createTexture', GL.textures
        );
    };
  var _emscripten_glGenTextures = _glGenTextures;

  
  /** @suppress {duplicate } */
  var _glGenVertexArrays = (n, arrays) => {
      GL.genObject(n, arrays, 'createVertexArray', GL.vaos
        );
    };
  /** @suppress {duplicate } */
  var _glGenVertexArraysOES = _glGenVertexArrays;
  var _emscripten_glGenVertexArraysOES = _glGenVertexArraysOES;

  /** @suppress {duplicate } */
  var _glGenerateMipmap = (x0) => GLctx.generateMipmap(x0);
  var _emscripten_glGenerateMipmap = _glGenerateMipmap;

  
  var __glGetActiveAttribOrUniform = (funcName, program, index, bufSize, length, size, type, name) => {
      program = GL.programs[program];
      var info = GLctx[funcName](program, index);
      if (info) {
        // If an error occurs, nothing will be written to length, size and type and name.
        var numBytesWrittenExclNull = name && stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
        if (size) HEAP32[((size)>>2)] = info.size;
        if (type) HEAP32[((type)>>2)] = info.type;
      }
    };
  
  /** @suppress {duplicate } */
  var _glGetActiveAttrib = (program, index, bufSize, length, size, type, name) => {
      __glGetActiveAttribOrUniform('getActiveAttrib', program, index, bufSize, length, size, type, name);
    };
  var _emscripten_glGetActiveAttrib = _glGetActiveAttrib;

  
  /** @suppress {duplicate } */
  var _glGetActiveUniform = (program, index, bufSize, length, size, type, name) => {
      __glGetActiveAttribOrUniform('getActiveUniform', program, index, bufSize, length, size, type, name);
    };
  var _emscripten_glGetActiveUniform = _glGetActiveUniform;

  /** @suppress {duplicate } */
  var _glGetAttachedShaders = (program, maxCount, count, shaders) => {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)] = len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)] = id;
      }
    };
  var _emscripten_glGetAttachedShaders = _glGetAttachedShaders;

  
  /** @suppress {duplicate } */
  var _glGetAttribLocation = (program, name) => {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    };
  var _emscripten_glGetAttribLocation = _glGetAttribLocation;

  var readI53FromI64 = (ptr) => {
      return HEAPU32[((ptr)>>2)] + HEAP32[(((ptr)+(4))>>2)] * 4294967296;
    };
  
  var readI53FromU64 = (ptr) => {
      return HEAPU32[((ptr)>>2)] + HEAPU32[(((ptr)+(4))>>2)] * 4294967296;
    };
  var writeI53ToI64 = (ptr, num) => {
      HEAPU32[((ptr)>>2)] = num;
      var lower = HEAPU32[((ptr)>>2)];
      HEAPU32[(((ptr)+(4))>>2)] = (num - lower)/4294967296;
      var deserialized = (num >= 0) ? readI53FromU64(ptr) : readI53FromI64(ptr);
      var offset = ((ptr)>>2);
      if (deserialized != num) warnOnce(`writeI53ToI64() out of range: serialized JS Number ${num} to Wasm heap as bytes lo=${ptrToString(HEAPU32[offset])}, hi=${ptrToString(HEAPU32[offset+1])}, which deserializes back to ${deserialized} instead!`);
    };
  
  var emscriptenWebGLGet = (name_, p, type) => {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null
      // pointer should be treated.  Testing on desktop core GL 3, the application
      // crashes on glGetIntegerv to a null pointer, but better to report an error
      // instead of doing anything random.
      if (!p) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch (name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type != 0 && type != 1) {
            GL.recordError(0x500); // GL_INVALID_ENUM
          }
          // Do not write anything to the out pointer, since no binary formats are
          // supported.
          return;
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete
          // since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be
          // queried for length), so implement it ourselves to allow C++ GLES2
          // code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats ? formats.length : 0;
          break;
  
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof result) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound -
              // perhaps nothing is bound), but otherwise can mean an invalid
              // name_, which we need to report as an error
              switch (name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING or DRAW_FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 0: HEAP32[(((p)+(i*4))>>2)] = result[i]; break;
                  case 2: HEAPF32[(((p)+(i*4))>>2)] = result[i]; break;
                  case 4: HEAP8[(p)+(i)] = result[i] ? 1 : 0; break;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch(e) {
                GL.recordError(0x500); // GL_INVALID_ENUM
                err(`GL_INVALID_ENUM in glGet${type}v: Unknown object returned from WebGL getParameter(${name_})! (error: ${e})`);
                return;
              }
            }
            break;
          default:
            GL.recordError(0x500); // GL_INVALID_ENUM
            err(`GL_INVALID_ENUM in glGet${type}v: Native code calling glGet${type}v(${name_}) and it returns ${result} of type ${typeof(result)}!`);
            return;
        }
      }
  
      switch (type) {
        case 1: writeI53ToI64(p, ret); break;
        case 0: HEAP32[((p)>>2)] = ret; break;
        case 2:   HEAPF32[((p)>>2)] = ret; break;
        case 4: HEAP8[p] = ret ? 1 : 0; break;
      }
    };
  
  /** @suppress {duplicate } */
  var _glGetBooleanv = (name_, p) => emscriptenWebGLGet(name_, p, 4);
  var _emscripten_glGetBooleanv = _glGetBooleanv;

  /** @suppress {duplicate } */
  var _glGetBufferParameteriv = (target, value, data) => {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null
        // pointer. Since calling this function does not make sense if data ==
        // null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)] = GLctx.getBufferParameter(target, value);
    };
  var _emscripten_glGetBufferParameteriv = _glGetBufferParameteriv;

  /** @suppress {duplicate } */
  var _glGetError = () => {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0/*GL_NO_ERROR*/;
      return error;
    };
  var _emscripten_glGetError = _glGetError;

  
  /** @suppress {duplicate } */
  var _glGetFloatv = (name_, p) => emscriptenWebGLGet(name_, p, 2);
  var _emscripten_glGetFloatv = _glGetFloatv;

  /** @suppress {duplicate } */
  var _glGetFramebufferAttachmentParameteriv = (target, attachment, pname, params) => {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      if (result instanceof WebGLRenderbuffer ||
          result instanceof WebGLTexture) {
        result = result.name | 0;
      }
      HEAP32[((params)>>2)] = result;
    };
  var _emscripten_glGetFramebufferAttachmentParameteriv = _glGetFramebufferAttachmentParameteriv;

  
  /** @suppress {duplicate } */
  var _glGetIntegerv = (name_, p) => emscriptenWebGLGet(name_, p, 0);
  var _emscripten_glGetIntegerv = _glGetIntegerv;

  /** @suppress {duplicate } */
  var _glGetProgramInfoLog = (program, maxLength, length, infoLog) => {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    };
  var _emscripten_glGetProgramInfoLog = _glGetProgramInfoLog;

  /** @suppress {duplicate } */
  var _glGetProgramiv = (program, pname, p) => {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null
        // pointer. Since calling this function does not make sense if p == null,
        // issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      program = GL.programs[program];
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(program);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)] = log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        if (!program.maxUniformLength) {
          var numActiveUniforms = GLctx.getProgramParameter(program, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
          for (var i = 0; i < numActiveUniforms; ++i) {
            program.maxUniformLength = Math.max(program.maxUniformLength, GLctx.getActiveUniform(program, i).name.length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (!program.maxAttributeLength) {
          var numActiveAttributes = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          for (var i = 0; i < numActiveAttributes; ++i) {
            program.maxAttributeLength = Math.max(program.maxAttributeLength, GLctx.getActiveAttrib(program, i).name.length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (!program.maxUniformBlockNameLength) {
          var numActiveUniformBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          for (var i = 0; i < numActiveUniformBlocks; ++i) {
            program.maxUniformBlockNameLength = Math.max(program.maxUniformBlockNameLength, GLctx.getActiveUniformBlockName(program, i).length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)] = GLctx.getProgramParameter(program, pname);
      }
    };
  var _emscripten_glGetProgramiv = _glGetProgramiv;

  
  /** @suppress {duplicate } */
  var _glGetQueryObjecti64vEXT = (id, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.queries[id];
      var param;
      {
        param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      }
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      writeI53ToI64(params, ret);
    };
  var _emscripten_glGetQueryObjecti64vEXT = _glGetQueryObjecti64vEXT;

  /** @suppress {duplicate } */
  var _glGetQueryObjectivEXT = (id, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.queries[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)] = ret;
    };
  var _emscripten_glGetQueryObjectivEXT = _glGetQueryObjectivEXT;

  
  /** @suppress {duplicate } */
  var _glGetQueryObjectui64vEXT = _glGetQueryObjecti64vEXT;
  var _emscripten_glGetQueryObjectui64vEXT = _glGetQueryObjectui64vEXT;

  
  /** @suppress {duplicate } */
  var _glGetQueryObjectuivEXT = _glGetQueryObjectivEXT;
  var _emscripten_glGetQueryObjectuivEXT = _glGetQueryObjectuivEXT;

  /** @suppress {duplicate } */
  var _glGetQueryivEXT = (target, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.disjointTimerQueryExt['getQueryEXT'](target, pname);
    };
  var _emscripten_glGetQueryivEXT = _glGetQueryivEXT;

  /** @suppress {duplicate } */
  var _glGetRenderbufferParameteriv = (target, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.getRenderbufferParameter(target, pname);
    };
  var _emscripten_glGetRenderbufferParameteriv = _glGetRenderbufferParameteriv;

  
  /** @suppress {duplicate } */
  var _glGetShaderInfoLog = (shader, maxLength, length, infoLog) => {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    };
  var _emscripten_glGetShaderInfoLog = _glGetShaderInfoLog;

  /** @suppress {duplicate } */
  var _glGetShaderPrecisionFormat = (shaderType, precisionType, range, precision) => {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)] = result.rangeMin;
      HEAP32[(((range)+(4))>>2)] = result.rangeMax;
      HEAP32[((precision)>>2)] = result.precision;
    };
  var _emscripten_glGetShaderPrecisionFormat = _glGetShaderPrecisionFormat;

  /** @suppress {duplicate } */
  var _glGetShaderSource = (shader, bufSize, length, source) => {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      var numBytesWrittenExclNull = (bufSize > 0 && source) ? stringToUTF8(result, source, bufSize) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    };
  var _emscripten_glGetShaderSource = _glGetShaderSource;

  /** @suppress {duplicate } */
  var _glGetShaderiv = (shader, pname, p) => {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null
        // pointer. Since calling this function does not make sense if p == null,
        // issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        // The GLES2 specification says that if the shader has an empty info log,
        // a value of 0 is returned. Otherwise the log has a null char appended.
        // (An empty string is falsey, so we can just check that instead of
        // looking at log.length.)
        var logLength = log ? log.length + 1 : 0;
        HEAP32[((p)>>2)] = logLength;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        // source may be a null, or the empty string, both of which are falsey
        // values that we report a 0 length for.
        var sourceLength = source ? source.length + 1 : 0;
        HEAP32[((p)>>2)] = sourceLength;
      } else {
        HEAP32[((p)>>2)] = GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    };
  var _emscripten_glGetShaderiv = _glGetShaderiv;

  
  
  var webglGetExtensions = function $webglGetExtensions() {
      var exts = getEmscriptenSupportedExtensions(GLctx);
      exts = exts.concat(exts.map((e) => "GL_" + e));
      return exts;
    };
  
  /** @suppress {duplicate } */
  var _glGetString = (name_) => {
      var ret = GL.stringCache[name_];
      if (!ret) {
        switch (name_) {
          case 0x1F03 /* GL_EXTENSIONS */:
            ret = stringToNewUTF8(webglGetExtensions().join(' '));
            break;
          case 0x1F00 /* GL_VENDOR */:
          case 0x1F01 /* GL_RENDERER */:
          case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
          case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
            var s = GLctx.getParameter(name_);
            if (!s) {
              GL.recordError(0x500/*GL_INVALID_ENUM*/);
            }
            ret = s ? stringToNewUTF8(s) : 0;
            break;
  
          case 0x1F02 /* GL_VERSION */:
            var webGLVersion = GLctx.getParameter(0x1F02 /*GL_VERSION*/);
            // return GLES version string corresponding to the version of the WebGL context
            var glVersion = `OpenGL ES 2.0 (${webGLVersion})`;
            ret = stringToNewUTF8(glVersion);
            break;
          case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
            var glslVersion = GLctx.getParameter(0x8B8C /*GL_SHADING_LANGUAGE_VERSION*/);
            // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
            var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
            var ver_num = glslVersion.match(ver_re);
            if (ver_num !== null) {
              if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
              glslVersion = `OpenGL ES GLSL ES ${ver_num[1]} (${glslVersion})`;
            }
            ret = stringToNewUTF8(glslVersion);
            break;
          default:
            GL.recordError(0x500/*GL_INVALID_ENUM*/);
            // fall through
        }
        GL.stringCache[name_] = ret;
      }
      return ret;
    };
  var _emscripten_glGetString = _glGetString;

  /** @suppress {duplicate } */
  var _glGetTexParameterfv = (target, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null
        // pointer. Since calling this function does not make sense if p == null,
        // issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)] = GLctx.getTexParameter(target, pname);
    };
  var _emscripten_glGetTexParameterfv = _glGetTexParameterfv;

  /** @suppress {duplicate } */
  var _glGetTexParameteriv = (target, pname, params) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null
        // pointer. Since calling this function does not make sense if p == null,
        // issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.getTexParameter(target, pname);
    };
  var _emscripten_glGetTexParameteriv = _glGetTexParameteriv;

  /** @suppress {checkTypes} */
  var jstoi_q = (str) => parseInt(str);
  
  /** @noinline */
  var webglGetLeftBracePos = (name) => name.slice(-1) == ']' && name.lastIndexOf('[');
  
  var webglPrepareUniformLocationsBeforeFirstUse = (program) => {
      var uniformLocsById = program.uniformLocsById, // Maps GLuint -> WebGLUniformLocation
        uniformSizeAndIdsByName = program.uniformSizeAndIdsByName, // Maps name -> [uniform array length, GLuint]
        i, j;
  
      // On the first time invocation of glGetUniformLocation on this shader program:
      // initialize cache data structures and discover which uniforms are arrays.
      if (!uniformLocsById) {
        // maps GLint integer locations to WebGLUniformLocations
        program.uniformLocsById = uniformLocsById = {};
        // maps integer locations back to uniform name strings, so that we can lazily fetch uniform array locations
        program.uniformArrayNamesById = {};
  
        var numActiveUniforms = GLctx.getProgramParameter(program, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (i = 0; i < numActiveUniforms; ++i) {
          var u = GLctx.getActiveUniform(program, i);
          var nm = u.name;
          var sz = u.size;
          var lb = webglGetLeftBracePos(nm);
          var arrayName = lb > 0 ? nm.slice(0, lb) : nm;
  
          // Assign a new location.
          var id = program.uniformIdCounter;
          program.uniformIdCounter += sz;
          // Eagerly get the location of the uniformArray[0] base element.
          // The remaining indices >0 will be left for lazy evaluation to
          // improve performance. Those may never be needed to fetch, if the
          // application fills arrays always in full starting from the first
          // element of the array.
          uniformSizeAndIdsByName[arrayName] = [sz, id];
  
          // Store placeholder integers in place that highlight that these
          // >0 index locations are array indices pending population.
          for (j = 0; j < sz; ++j) {
            uniformLocsById[id] = j;
            program.uniformArrayNamesById[id++] = arrayName;
          }
        }
      }
    };
  
  
  
  /** @suppress {duplicate } */
  var _glGetUniformLocation = (program, name) => {
  
      name = UTF8ToString(name);
  
      if (program = GL.programs[program]) {
        webglPrepareUniformLocationsBeforeFirstUse(program);
        var uniformLocsById = program.uniformLocsById; // Maps GLuint -> WebGLUniformLocation
        var arrayIndex = 0;
        var uniformBaseName = name;
  
        // Invariant: when populating integer IDs for uniform locations, we must
        // maintain the precondition that arrays reside in contiguous addresses,
        // i.e. for a 'vec4 colors[10];', colors[4] must be at location
        // colors[0]+4.  However, user might call glGetUniformLocation(program,
        // "colors") for an array, so we cannot discover based on the user input
        // arguments whether the uniform we are dealing with is an array. The only
        // way to discover which uniforms are arrays is to enumerate over all the
        // active uniforms in the program.
        var leftBrace = webglGetLeftBracePos(name);
  
        // If user passed an array accessor "[index]", parse the array index off the accessor.
        if (leftBrace > 0) {
          arrayIndex = jstoi_q(name.slice(leftBrace + 1)) >>> 0; // "index]", coerce parseInt(']') with >>>0 to treat "foo[]" as "foo[0]" and foo[-1] as unsigned out-of-bounds.
          uniformBaseName = name.slice(0, leftBrace);
        }
  
        // Have we cached the location of this uniform before?
        // A pair [array length, GLint of the uniform location]
        var sizeAndId = program.uniformSizeAndIdsByName[uniformBaseName];
  
        // If an uniform with this name exists, and if its index is within the
        // array limits (if it's even an array), query the WebGLlocation, or
        // return an existing cached location.
        if (sizeAndId && arrayIndex < sizeAndId[0]) {
          arrayIndex += sizeAndId[1]; // Add the base location of the uniform to the array index offset.
          if ((uniformLocsById[arrayIndex] = uniformLocsById[arrayIndex] || GLctx.getUniformLocation(program, name))) {
            return arrayIndex;
          }
        }
      }
      else {
        // N.b. we are currently unable to distinguish between GL program IDs that
        // never existed vs GL program IDs that have been deleted, so report
        // GL_INVALID_VALUE in both cases.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
      }
      return -1;
    };
  var _emscripten_glGetUniformLocation = _glGetUniformLocation;

  var webglGetUniformLocation = (location) => {
      var p = GLctx.currentProgram;
  
      if (p) {
        var webglLoc = p.uniformLocsById[location];
        // p.uniformLocsById[location] stores either an integer, or a
        // WebGLUniformLocation.
        // If an integer, we have not yet bound the location, so do it now. The
        // integer value specifies the array index we should bind to.
        if (typeof webglLoc == 'number') {
          p.uniformLocsById[location] = webglLoc = GLctx.getUniformLocation(p, p.uniformArrayNamesById[location] + (webglLoc > 0 ? `[${webglLoc}]` : ''));
        }
        // Else an already cached WebGLUniformLocation, return it.
        return webglLoc;
      } else {
        GL.recordError(0x502/*GL_INVALID_OPERATION*/);
      }
    };
  
  
  /** @suppress{checkTypes} */
  var emscriptenWebGLGetUniform = (program, location, params, type) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null
        // pointer. Since calling this function does not make sense if params ==
        // null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      program = GL.programs[program];
      webglPrepareUniformLocationsBeforeFirstUse(program);
      var data = GLctx.getUniform(program, webglGetUniformLocation(location));
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)] = data; break;
          case 2: HEAPF32[((params)>>2)] = data; break;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)] = data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)] = data[i]; break;
          }
        }
      }
    };
  
  /** @suppress {duplicate } */
  var _glGetUniformfv = (program, location, params) => {
      emscriptenWebGLGetUniform(program, location, params, 2);
    };
  var _emscripten_glGetUniformfv = _glGetUniformfv;

  
  /** @suppress {duplicate } */
  var _glGetUniformiv = (program, location, params) => {
      emscriptenWebGLGetUniform(program, location, params, 0);
    };
  var _emscripten_glGetUniformiv = _glGetUniformiv;

  /** @suppress {duplicate } */
  var _glGetVertexAttribPointerv = (index, pname, pointer) => {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null
        // pointer. Since calling this function does not make sense if pointer ==
        // null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (GL.currentContext.clientBuffers[index].enabled) {
        err("glGetVertexAttribPointer on client-side array: not supported, bad data returned");
      }
      HEAP32[((pointer)>>2)] = GLctx.getVertexAttribOffset(index, pname);
    };
  var _emscripten_glGetVertexAttribPointerv = _glGetVertexAttribPointerv;

  /** @suppress{checkTypes} */
  var emscriptenWebGLGetVertexAttrib = (index, pname, params, type) => {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null
        // pointer. Since calling this function does not make sense if params ==
        // null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (GL.currentContext.clientBuffers[index].enabled) {
        err("glGetVertexAttrib*v on client-side array: not supported, bad data returned");
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)] = data && data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)] = data; break;
          case 2: HEAPF32[((params)>>2)] = data; break;
          case 5: HEAP32[((params)>>2)] = Math.fround(data); break;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)] = data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)] = data[i]; break;
            case 5: HEAP32[(((params)+(i*4))>>2)] = Math.fround(data[i]); break;
          }
        }
      }
    };
  
  /** @suppress {duplicate } */
  var _glGetVertexAttribfv = (index, pname, params) => {
      // N.B. This function may only be called if the vertex attribute was
      // specified using the function glVertexAttrib*f(), otherwise the results
      // are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 2);
    };
  var _emscripten_glGetVertexAttribfv = _glGetVertexAttribfv;

  
  /** @suppress {duplicate } */
  var _glGetVertexAttribiv = (index, pname, params) => {
      // N.B. This function may only be called if the vertex attribute was
      // specified using the function glVertexAttrib*f(), otherwise the results
      // are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 5);
    };
  var _emscripten_glGetVertexAttribiv = _glGetVertexAttribiv;

  /** @suppress {duplicate } */
  var _glHint = (x0, x1) => GLctx.hint(x0, x1);
  var _emscripten_glHint = _glHint;

  /** @suppress {duplicate } */
  var _glIsBuffer = (buffer) => {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    };
  var _emscripten_glIsBuffer = _glIsBuffer;

  /** @suppress {duplicate } */
  var _glIsEnabled = (x0) => GLctx.isEnabled(x0);
  var _emscripten_glIsEnabled = _glIsEnabled;

  /** @suppress {duplicate } */
  var _glIsFramebuffer = (framebuffer) => {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    };
  var _emscripten_glIsFramebuffer = _glIsFramebuffer;

  /** @suppress {duplicate } */
  var _glIsProgram = (program) => {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    };
  var _emscripten_glIsProgram = _glIsProgram;

  /** @suppress {duplicate } */
  var _glIsQueryEXT = (id) => {
      var query = GL.queries[id];
      if (!query) return 0;
      return GLctx.disjointTimerQueryExt['isQueryEXT'](query);
    };
  var _emscripten_glIsQueryEXT = _glIsQueryEXT;

  /** @suppress {duplicate } */
  var _glIsRenderbuffer = (renderbuffer) => {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    };
  var _emscripten_glIsRenderbuffer = _glIsRenderbuffer;

  /** @suppress {duplicate } */
  var _glIsShader = (shader) => {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    };
  var _emscripten_glIsShader = _glIsShader;

  /** @suppress {duplicate } */
  var _glIsTexture = (id) => {
      var texture = GL.textures[id];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    };
  var _emscripten_glIsTexture = _glIsTexture;

  
  /** @suppress {duplicate } */
  var _glIsVertexArray = (array) => {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx.isVertexArray(vao);
    };
  /** @suppress {duplicate } */
  var _glIsVertexArrayOES = _glIsVertexArray;
  var _emscripten_glIsVertexArrayOES = _glIsVertexArrayOES;

  /** @suppress {duplicate } */
  var _glLineWidth = (x0) => GLctx.lineWidth(x0);
  var _emscripten_glLineWidth = _glLineWidth;

  /** @suppress {duplicate } */
  var _glLinkProgram = (program) => {
      program = GL.programs[program];
      GLctx.linkProgram(program);
      // Invalidate earlier computed uniform->ID mappings, those have now become stale
      program.uniformLocsById = 0; // Mark as null-like so that glGetUniformLocation() knows to populate this again.
      program.uniformSizeAndIdsByName = {};
  
    };
  var _emscripten_glLinkProgram = _glLinkProgram;

  /** @suppress {duplicate } */
  var _glPixelStorei = (pname, param) => {
      if (pname == 3317) {
        GL.unpackAlignment = param;
      } else if (pname == 3314) {
        GL.unpackRowLength = param;
      }
      GLctx.pixelStorei(pname, param);
    };
  var _emscripten_glPixelStorei = _glPixelStorei;

  /** @suppress {duplicate } */
  var _glPolygonModeWEBGL = (face, mode) => {
      GLctx.webglPolygonMode['polygonModeWEBGL'](face, mode);
    };
  var _emscripten_glPolygonModeWEBGL = _glPolygonModeWEBGL;

  /** @suppress {duplicate } */
  var _glPolygonOffset = (x0, x1) => GLctx.polygonOffset(x0, x1);
  var _emscripten_glPolygonOffset = _glPolygonOffset;

  /** @suppress {duplicate } */
  var _glPolygonOffsetClampEXT = (factor, units, clamp) => {
      GLctx.extPolygonOffsetClamp['polygonOffsetClampEXT'](factor, units, clamp);
    };
  var _emscripten_glPolygonOffsetClampEXT = _glPolygonOffsetClampEXT;

  /** @suppress {duplicate } */
  var _glQueryCounterEXT = (id, target) => {
      GLctx.disjointTimerQueryExt['queryCounterEXT'](GL.queries[id], target);
    };
  var _emscripten_glQueryCounterEXT = _glQueryCounterEXT;

  var computeUnpackAlignedImageSize = (width, height, sizePerPixel) => {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = (GL.unpackRowLength || width) * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, GL.unpackAlignment);
      return height * alignedRowSize;
    };
  
  var colorChannelsInGlTextureFormat = (format) => {
      // Micro-optimizations for size: map format to size by subtracting smallest
      // enum value (0x1902) from all values first.  Also omit the most common
      // size value (1) from the list, which is assumed by formats not on the
      // list.
      var colorChannels = {
        // 0x1902 /* GL_DEPTH_COMPONENT */ - 0x1902: 1,
        // 0x1906 /* GL_ALPHA */ - 0x1902: 1,
        5: 3,
        6: 4,
        // 0x1909 /* GL_LUMINANCE */ - 0x1902: 1,
        8: 2,
        29502: 3,
        29504: 4,
      };
      return colorChannels[format - 0x1902]||1;
    };
  
  var heapObjectForWebGLType = (type) => {
      // Micro-optimization for size: Subtract lowest GL enum number (0x1400/* GL_BYTE */) from type to compare
      // smaller values for the heap, for shorter generated code size.
      // Also the type HEAPU16 is not tested for explicitly, but any unrecognized type will return out HEAPU16.
      // (since most types are HEAPU16)
      type -= 0x1400;
  
      if (type == 1) return HEAPU8;
  
      if (type == 4) return HEAP32;
  
      if (type == 6) return HEAPF32;
  
      if (type == 5
        || type == 28922
        )
        return HEAPU32;
  
      return HEAPU16;
    };
  
  var toTypedArrayIndex = (pointer, heap) =>
      pointer >>> (31 - Math.clz32(heap.BYTES_PER_ELEMENT));
  
  var emscriptenWebGLGetTexPixelData = (type, format, width, height, pixels, internalFormat) => {
      var heap = heapObjectForWebGLType(type);
      var sizePerPixel = colorChannelsInGlTextureFormat(format) * heap.BYTES_PER_ELEMENT;
      var bytes = computeUnpackAlignedImageSize(width, height, sizePerPixel);
      return heap.subarray(toTypedArrayIndex(pixels, heap), toTypedArrayIndex(pixels + bytes, heap));
    };
  
  /** @suppress {duplicate } */
  var _glReadPixels = (x, y, width, height, format, type, pixels) => {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    };
  var _emscripten_glReadPixels = _glReadPixels;

  /** @suppress {duplicate } */
  var _glReleaseShaderCompiler = () => {
      // NOP (as allowed by GLES 2.0 spec)
    };
  var _emscripten_glReleaseShaderCompiler = _glReleaseShaderCompiler;

  /** @suppress {duplicate } */
  var _glRenderbufferStorage = (x0, x1, x2, x3) => GLctx.renderbufferStorage(x0, x1, x2, x3);
  var _emscripten_glRenderbufferStorage = _glRenderbufferStorage;

  /** @suppress {duplicate } */
  var _glSampleCoverage = (value, invert) => {
      GLctx.sampleCoverage(value, !!invert);
    };
  var _emscripten_glSampleCoverage = _glSampleCoverage;

  /** @suppress {duplicate } */
  var _glScissor = (x0, x1, x2, x3) => GLctx.scissor(x0, x1, x2, x3);
  var _emscripten_glScissor = _glScissor;

  /** @suppress {duplicate } */
  var _glShaderBinary = (count, shaders, binaryformat, binary, length) => {
      GL.recordError(0x500/*GL_INVALID_ENUM*/);
    };
  var _emscripten_glShaderBinary = _glShaderBinary;

  /** @suppress {duplicate } */
  var _glShaderSource = (shader, count, string, length) => {
      var source = GL.getSource(shader, count, string, length);
  
      GLctx.shaderSource(GL.shaders[shader], source);
    };
  var _emscripten_glShaderSource = _glShaderSource;

  /** @suppress {duplicate } */
  var _glStencilFunc = (x0, x1, x2) => GLctx.stencilFunc(x0, x1, x2);
  var _emscripten_glStencilFunc = _glStencilFunc;

  /** @suppress {duplicate } */
  var _glStencilFuncSeparate = (x0, x1, x2, x3) => GLctx.stencilFuncSeparate(x0, x1, x2, x3);
  var _emscripten_glStencilFuncSeparate = _glStencilFuncSeparate;

  /** @suppress {duplicate } */
  var _glStencilMask = (x0) => GLctx.stencilMask(x0);
  var _emscripten_glStencilMask = _glStencilMask;

  /** @suppress {duplicate } */
  var _glStencilMaskSeparate = (x0, x1) => GLctx.stencilMaskSeparate(x0, x1);
  var _emscripten_glStencilMaskSeparate = _glStencilMaskSeparate;

  /** @suppress {duplicate } */
  var _glStencilOp = (x0, x1, x2) => GLctx.stencilOp(x0, x1, x2);
  var _emscripten_glStencilOp = _glStencilOp;

  /** @suppress {duplicate } */
  var _glStencilOpSeparate = (x0, x1, x2, x3) => GLctx.stencilOpSeparate(x0, x1, x2, x3);
  var _emscripten_glStencilOpSeparate = _glStencilOpSeparate;

  
  /** @suppress {duplicate } */
  var _glTexImage2D = (target, level, internalFormat, width, height, border, format, type, pixels) => {
      var pixelData = pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null;
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    };
  var _emscripten_glTexImage2D = _glTexImage2D;

  /** @suppress {duplicate } */
  var _glTexParameterf = (x0, x1, x2) => GLctx.texParameterf(x0, x1, x2);
  var _emscripten_glTexParameterf = _glTexParameterf;

  /** @suppress {duplicate } */
  var _glTexParameterfv = (target, pname, params) => {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    };
  var _emscripten_glTexParameterfv = _glTexParameterfv;

  /** @suppress {duplicate } */
  var _glTexParameteri = (x0, x1, x2) => GLctx.texParameteri(x0, x1, x2);
  var _emscripten_glTexParameteri = _glTexParameteri;

  /** @suppress {duplicate } */
  var _glTexParameteriv = (target, pname, params) => {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    };
  var _emscripten_glTexParameteriv = _glTexParameteriv;

  
  /** @suppress {duplicate } */
  var _glTexSubImage2D = (target, level, xoffset, yoffset, width, height, format, type, pixels) => {
      var pixelData = pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0) : null;
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    };
  var _emscripten_glTexSubImage2D = _glTexSubImage2D;

  
  /** @suppress {duplicate } */
  var _glUniform1f = (location, v0) => {
      GLctx.uniform1f(webglGetUniformLocation(location), v0);
    };
  var _emscripten_glUniform1f = _glUniform1f;

  
  var miniTempWebGLFloatBuffers = [];
  
  /** @suppress {duplicate } */
  var _glUniform1fv = (location, count, value) => {
  
      if (count <= 288) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[count];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((((value)>>2)), ((value+count*4)>>2));
      }
      GLctx.uniform1fv(webglGetUniformLocation(location), view);
    };
  var _emscripten_glUniform1fv = _glUniform1fv;

  
  /** @suppress {duplicate } */
  var _glUniform1i = (location, v0) => {
      GLctx.uniform1i(webglGetUniformLocation(location), v0);
    };
  var _emscripten_glUniform1i = _glUniform1i;

  
  var miniTempWebGLIntBuffers = [];
  
  /** @suppress {duplicate } */
  var _glUniform1iv = (location, count, value) => {
  
      if (count <= 288) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLIntBuffers[count];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((((value)>>2)), ((value+count*4)>>2));
      }
      GLctx.uniform1iv(webglGetUniformLocation(location), view);
    };
  var _emscripten_glUniform1iv = _glUniform1iv;

  
  /** @suppress {duplicate } */
  var _glUniform2f = (location, v0, v1) => {
      GLctx.uniform2f(webglGetUniformLocation(location), v0, v1);
    };
  var _emscripten_glUniform2f = _glUniform2f;

  
  
  /** @suppress {duplicate } */
  var _glUniform2fv = (location, count, value) => {
  
      if (count <= 144) {
        // avoid allocation when uploading few enough uniforms
        count *= 2;
        var view = miniTempWebGLFloatBuffers[count];
        for (var i = 0; i < count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((((value)>>2)), ((value+count*8)>>2));
      }
      GLctx.uniform2fv(webglGetUniformLocation(location), view);
    };
  var _emscripten_glUniform2fv = _glUniform2fv;

  
  /** @suppress {duplicate } */
  var _glUniform2i = (location, v0, v1) => {
      GLctx.uniform2i(webglGetUniformLocation(location), v0, v1);
    };
  var _emscripten_glUniform2i = _glUniform2i;

  
  
  /** @suppress {duplicate } */
  var _glUniform2iv = (location, count, value) => {
  
      if (count <= 144) {
        // avoid allocation when uploading few enough uniforms
        count *= 2;
        var view = miniTempWebGLIntBuffers[count];
        for (var i = 0; i < count; i += 2) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
          view[i+1] = HEAP32[(((value)+(4*i+4))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((((value)>>2)), ((value+count*8)>>2));
      }
      GLctx.uniform2iv(webglGetUniformLocation(location), view);
    };
  var _emscripten_glUniform2iv = _glUniform2iv;

  
  /** @suppress {duplicate } */
  var _glUniform3f = (location, v0, v1, v2) => {
      GLctx.uniform3f(webglGetUniformLocation(location), v0, v1, v2);
    };
  var _emscripten_glUniform3f = _glUniform3f;

  
  
  /** @suppress {duplicate } */
  var _glUniform3fv = (location, count, value) => {
  
      if (count <= 96) {
        // avoid allocation when uploading few enough uniforms
        count *= 3;
        var view = miniTempWebGLFloatBuffers[count];
        for (var i = 0; i < count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((((value)>>2)), ((value+count*12)>>2));
      }
      GLctx.uniform3fv(webglGetUniformLocation(location), view);
    };
  var _emscripten_glUniform3fv = _glUniform3fv;

  
  /** @suppress {duplicate } */
  var _glUniform3i = (location, v0, v1, v2) => {
      GLctx.uniform3i(webglGetUniformLocation(location), v0, v1, v2);
    };
  var _emscripten_glUniform3i = _glUniform3i;

  
  
  /** @suppress {duplicate } */
  var _glUniform3iv = (location, count, value) => {
  
      if (count <= 96) {
        // avoid allocation when uploading few enough uniforms
        count *= 3;
        var view = miniTempWebGLIntBuffers[count];
        for (var i = 0; i < count; i += 3) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
          view[i+1] = HEAP32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAP32[(((value)+(4*i+8))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((((value)>>2)), ((value+count*12)>>2));
      }
      GLctx.uniform3iv(webglGetUniformLocation(location), view);
    };
  var _emscripten_glUniform3iv = _glUniform3iv;

  
  /** @suppress {duplicate } */
  var _glUniform4f = (location, v0, v1, v2, v3) => {
      GLctx.uniform4f(webglGetUniformLocation(location), v0, v1, v2, v3);
    };
  var _emscripten_glUniform4f = _glUniform4f;

  
  
  /** @suppress {duplicate } */
  var _glUniform4fv = (location, count, value) => {
  
      if (count <= 72) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[4*count];
        // hoist the heap out of the loop for size and for pthreads+growth.
        var heap = HEAPF32;
        value = ((value)>>2);
        count *= 4;
        for (var i = 0; i < count; i += 4) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
        }
      } else
      {
        var view = HEAPF32.subarray((((value)>>2)), ((value+count*16)>>2));
      }
      GLctx.uniform4fv(webglGetUniformLocation(location), view);
    };
  var _emscripten_glUniform4fv = _glUniform4fv;

  
  /** @suppress {duplicate } */
  var _glUniform4i = (location, v0, v1, v2, v3) => {
      GLctx.uniform4i(webglGetUniformLocation(location), v0, v1, v2, v3);
    };
  var _emscripten_glUniform4i = _glUniform4i;

  
  
  /** @suppress {duplicate } */
  var _glUniform4iv = (location, count, value) => {
  
      if (count <= 72) {
        // avoid allocation when uploading few enough uniforms
        count *= 4;
        var view = miniTempWebGLIntBuffers[count];
        for (var i = 0; i < count; i += 4) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
          view[i+1] = HEAP32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAP32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAP32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((((value)>>2)), ((value+count*16)>>2));
      }
      GLctx.uniform4iv(webglGetUniformLocation(location), view);
    };
  var _emscripten_glUniform4iv = _glUniform4iv;

  
  
  /** @suppress {duplicate } */
  var _glUniformMatrix2fv = (location, count, transpose, value) => {
  
      if (count <= 72) {
        // avoid allocation when uploading few enough uniforms
        count *= 4;
        var view = miniTempWebGLFloatBuffers[count];
        for (var i = 0; i < count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((((value)>>2)), ((value+count*16)>>2));
      }
      GLctx.uniformMatrix2fv(webglGetUniformLocation(location), !!transpose, view);
    };
  var _emscripten_glUniformMatrix2fv = _glUniformMatrix2fv;

  
  
  /** @suppress {duplicate } */
  var _glUniformMatrix3fv = (location, count, transpose, value) => {
  
      if (count <= 32) {
        // avoid allocation when uploading few enough uniforms
        count *= 9;
        var view = miniTempWebGLFloatBuffers[count];
        for (var i = 0; i < count; i += 9) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((((value)>>2)), ((value+count*36)>>2));
      }
      GLctx.uniformMatrix3fv(webglGetUniformLocation(location), !!transpose, view);
    };
  var _emscripten_glUniformMatrix3fv = _glUniformMatrix3fv;

  
  
  /** @suppress {duplicate } */
  var _glUniformMatrix4fv = (location, count, transpose, value) => {
  
      if (count <= 18) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[16*count];
        // hoist the heap out of the loop for size and for pthreads+growth.
        var heap = HEAPF32;
        value = ((value)>>2);
        count *= 16;
        for (var i = 0; i < count; i += 16) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
          view[i + 4] = heap[dst + 4];
          view[i + 5] = heap[dst + 5];
          view[i + 6] = heap[dst + 6];
          view[i + 7] = heap[dst + 7];
          view[i + 8] = heap[dst + 8];
          view[i + 9] = heap[dst + 9];
          view[i + 10] = heap[dst + 10];
          view[i + 11] = heap[dst + 11];
          view[i + 12] = heap[dst + 12];
          view[i + 13] = heap[dst + 13];
          view[i + 14] = heap[dst + 14];
          view[i + 15] = heap[dst + 15];
        }
      } else
      {
        var view = HEAPF32.subarray((((value)>>2)), ((value+count*64)>>2));
      }
      GLctx.uniformMatrix4fv(webglGetUniformLocation(location), !!transpose, view);
    };
  var _emscripten_glUniformMatrix4fv = _glUniformMatrix4fv;

  /** @suppress {duplicate } */
  var _glUseProgram = (program) => {
      program = GL.programs[program];
      GLctx.useProgram(program);
      // Record the currently active program so that we can access the uniform
      // mapping table of that program.
      GLctx.currentProgram = program;
    };
  var _emscripten_glUseProgram = _glUseProgram;

  /** @suppress {duplicate } */
  var _glValidateProgram = (program) => {
      GLctx.validateProgram(GL.programs[program]);
    };
  var _emscripten_glValidateProgram = _glValidateProgram;

  /** @suppress {duplicate } */
  var _glVertexAttrib1f = (x0, x1) => GLctx.vertexAttrib1f(x0, x1);
  var _emscripten_glVertexAttrib1f = _glVertexAttrib1f;

  /** @suppress {duplicate } */
  var _glVertexAttrib1fv = (index, v) => {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    };
  var _emscripten_glVertexAttrib1fv = _glVertexAttrib1fv;

  /** @suppress {duplicate } */
  var _glVertexAttrib2f = (x0, x1, x2) => GLctx.vertexAttrib2f(x0, x1, x2);
  var _emscripten_glVertexAttrib2f = _glVertexAttrib2f;

  /** @suppress {duplicate } */
  var _glVertexAttrib2fv = (index, v) => {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    };
  var _emscripten_glVertexAttrib2fv = _glVertexAttrib2fv;

  /** @suppress {duplicate } */
  var _glVertexAttrib3f = (x0, x1, x2, x3) => GLctx.vertexAttrib3f(x0, x1, x2, x3);
  var _emscripten_glVertexAttrib3f = _glVertexAttrib3f;

  /** @suppress {duplicate } */
  var _glVertexAttrib3fv = (index, v) => {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    };
  var _emscripten_glVertexAttrib3fv = _glVertexAttrib3fv;

  /** @suppress {duplicate } */
  var _glVertexAttrib4f = (x0, x1, x2, x3, x4) => GLctx.vertexAttrib4f(x0, x1, x2, x3, x4);
  var _emscripten_glVertexAttrib4f = _glVertexAttrib4f;

  /** @suppress {duplicate } */
  var _glVertexAttrib4fv = (index, v) => {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    };
  var _emscripten_glVertexAttrib4fv = _glVertexAttrib4fv;

  
  /** @suppress {duplicate } */
  var _glVertexAttribDivisor = (index, divisor) => {
      GLctx.vertexAttribDivisor(index, divisor);
    };
  /** @suppress {duplicate } */
  var _glVertexAttribDivisorANGLE = _glVertexAttribDivisor;
  var _emscripten_glVertexAttribDivisorANGLE = _glVertexAttribDivisorANGLE;

  /** @suppress {duplicate } */
  var _glVertexAttribPointer = (index, size, type, normalized, stride, ptr) => {
      var cb = GL.currentContext.clientBuffers[index];
      if (!GLctx.currentArrayBufferBinding) {
        cb.size = size;
        cb.type = type;
        cb.normalized = normalized;
        cb.stride = stride;
        cb.ptr = ptr;
        cb.clientside = true;
        cb.vertexAttribPointerAdaptor = function(index, size, type, normalized, stride, ptr) {
          this.vertexAttribPointer(index, size, type, normalized, stride, ptr);
        };
        return;
      }
      cb.clientside = false;
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    };
  var _emscripten_glVertexAttribPointer = _glVertexAttribPointer;

  /** @suppress {duplicate } */
  var _glViewport = (x0, x1, x2, x3) => GLctx.viewport(x0, x1, x2, x3);
  var _emscripten_glViewport = _glViewport;

  var _emscripten_has_asyncify = () => 0;

  
  
  
  
  
  
  
  var doRequestFullscreen = (target, strategy) => {
      if (!JSEvents.fullscreenEnabled()) return -1;
      target = findEventTarget(target);
      if (!target) return -4;
  
      if (!target.requestFullscreen
        && !target.webkitRequestFullscreen
        ) {
        return -3;
      }
  
      // Queue this function call if we're not currently in an event handler and
      // the user saw it appropriate to do so.
      if (!JSEvents.canPerformEventHandlerRequests()) {
        if (strategy.deferUntilInEventHandler) {
          JSEvents.deferCall(JSEvents_requestFullscreen, 1 /* priority over pointer lock */, [target, strategy]);
          return 1;
        }
        return -2;
      }
  
      return JSEvents_requestFullscreen(target, strategy);
    };
  
  
  var _emscripten_request_fullscreen_strategy = (target, deferUntilInEventHandler, fullscreenStrategy) => {
      var strategy = {
        scaleMode: HEAP32[((fullscreenStrategy)>>2)],
        canvasResolutionScaleMode: HEAP32[(((fullscreenStrategy)+(4))>>2)],
        filteringMode: HEAP32[(((fullscreenStrategy)+(8))>>2)],
        deferUntilInEventHandler,
        canvasResizedCallback: HEAP32[(((fullscreenStrategy)+(12))>>2)],
        canvasResizedCallbackUserData: HEAP32[(((fullscreenStrategy)+(16))>>2)]
      };
  
      return doRequestFullscreen(target, strategy);
    };

  
  
  var _emscripten_request_pointerlock = (target, deferUntilInEventHandler) => {
      target = findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock
        ) {
        return -1;
      }
  
      // Queue this function call if we're not currently in an event handler and
      // the user saw it appropriate to do so.
      if (!JSEvents.canPerformEventHandlerRequests()) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(requestPointerLock, 2 /* priority below fullscreen */, [target]);
          return 1;
        }
        return -2;
      }
  
      return requestPointerLock(target);
    };

  var getHeapMax = () =>
      HEAPU8.length;
  
  
  var abortOnCannotGrowMemory = (requestedSize) => {
      abort(`Cannot enlarge memory arrays to size ${requestedSize} bytes (OOM). Either (1) compile with -sINITIAL_MEMORY=X with X higher than the current value ${HEAP8.length}, (2) compile with -sALLOW_MEMORY_GROWTH which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with -sABORTING_MALLOC=0`);
    };
  var _emscripten_resize_heap = (requestedSize) => {
      var oldSize = HEAPU8.length;
      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
      requestedSize >>>= 0;
      abortOnCannotGrowMemory(requestedSize);
    };

  /** @suppress {checkTypes} */
  var _emscripten_sample_gamepad_data = () => {
      try {
        if (navigator.getGamepads) return (JSEvents.lastGamepadState = navigator.getGamepads())
          ? 0 : -1;
      } catch(e) {
        err(`navigator.getGamepads() exists, but failed to execute with exception ${e}. Disabling Gamepad access.`);
        navigator.getGamepads = null; // Disable getGamepads() so that it won't be attempted to be used again.
      }
      return -1;
    };

  
  
  
  var registerBeforeUnloadEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) => {
      var beforeUnloadEventHandlerFunc = (e = event) => {
        // Note: This is always called on the main browser thread, since it needs synchronously return a value!
        var confirmationMessage = getWasmTableEntry(callbackfunc)(eventTypeId, 0, userData);
  
        if (confirmationMessage) {
          confirmationMessage = UTF8ToString(confirmationMessage);
        }
        if (confirmationMessage) {
          e.preventDefault();
          e.returnValue = confirmationMessage;
          return confirmationMessage;
        }
      };
  
      var eventHandler = {
        target: findEventTarget(target),
        eventTypeString,
        callbackfunc,
        handlerFunc: beforeUnloadEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_beforeunload_callback_on_thread = (userData, callbackfunc, targetThread) => {
      if (typeof onbeforeunload == 'undefined') return -1;
      // beforeunload callback can only be registered on the main browser thread, because the page will go away immediately after returning from the handler,
      // and there is no time to start proxying it anywhere.
      if (targetThread !== 1) return -5;
      return registerBeforeUnloadEventCallback(2, userData, true, callbackfunc, 28, "beforeunload");
    };

  
  
  
  
  var registerFocusEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      if (!JSEvents.focusEvent) JSEvents.focusEvent = _malloc(256);
  
      var focusEventHandlerFunc = (e = event) => {
        var nodeName = JSEvents.getNodeNameForTarget(e.target);
        var id = e.target.id ? e.target.id : '';
  
        var focusEvent = JSEvents.focusEvent;
        stringToUTF8(nodeName, focusEvent + 0, 128);
        stringToUTF8(id, focusEvent + 128, 128);
  
        if (getWasmTableEntry(callbackfunc)(eventTypeId, focusEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: findEventTarget(target),
        eventTypeString,
        callbackfunc,
        handlerFunc: focusEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_blur_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerFocusEventCallback(target, userData, useCapture, callbackfunc, 12, "blur", targetThread);


  
  var _emscripten_set_element_css_size = (target, width, height) => {
      target = findEventTarget(target);
      if (!target) return -4;
  
      target.style.width = width + "px";
      target.style.height = height + "px";
  
      return 0;
    };

  var _emscripten_set_focus_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerFocusEventCallback(target, userData, useCapture, callbackfunc, 13, "focus", targetThread);

  
  
  
  var fillFullscreenChangeEventData = (eventStruct) => {
      var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
      var isFullscreen = !!fullscreenElement;
      // Assigning a boolean to HEAP32 with expected type coercion.
      /** @suppress{checkTypes} */
      HEAP8[eventStruct] = isFullscreen;
      HEAP8[(eventStruct)+(1)] = JSEvents.fullscreenEnabled();
      // If transitioning to fullscreen, report info about the element that is now fullscreen.
      // If transitioning to windowed mode, report info about the element that just was fullscreen.
      var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
      var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
      var id = reportedElement?.id || '';
      stringToUTF8(nodeName, eventStruct + 2, 128);
      stringToUTF8(id, eventStruct + 130, 128);
      HEAP32[(((eventStruct)+(260))>>2)] = reportedElement ? reportedElement.clientWidth : 0;
      HEAP32[(((eventStruct)+(264))>>2)] = reportedElement ? reportedElement.clientHeight : 0;
      HEAP32[(((eventStruct)+(268))>>2)] = screen.width;
      HEAP32[(((eventStruct)+(272))>>2)] = screen.height;
      if (isFullscreen) {
        JSEvents.previousFullscreenElement = fullscreenElement;
      }
    };
  
  
  
  var registerFullscreenChangeEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      if (!JSEvents.fullscreenChangeEvent) JSEvents.fullscreenChangeEvent = _malloc(276);
  
      var fullscreenChangeEventhandlerFunc = (e = event) => {
        var fullscreenChangeEvent = JSEvents.fullscreenChangeEvent;
  
        fillFullscreenChangeEventData(fullscreenChangeEvent);
  
        if (getWasmTableEntry(callbackfunc)(eventTypeId, fullscreenChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        eventTypeString,
        callbackfunc,
        handlerFunc: fullscreenChangeEventhandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  
  
  var _emscripten_set_fullscreenchange_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) => {
      if (!JSEvents.fullscreenEnabled()) return -1;
      target = findEventTarget(target);
      if (!target) return -4;
  
      // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
      // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
      registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
  
      return registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
    };

  
  
  
  
  var registerGamepadEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      if (!JSEvents.gamepadEvent) JSEvents.gamepadEvent = _malloc(1240);
  
      var gamepadEventHandlerFunc = (e = event) => {
        var gamepadEvent = JSEvents.gamepadEvent;
        fillGamepadEventData(gamepadEvent, e["gamepad"]);
  
        if (getWasmTableEntry(callbackfunc)(eventTypeId, gamepadEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: findEventTarget(target),
        allowsDeferredCalls: true,
        eventTypeString,
        callbackfunc,
        handlerFunc: gamepadEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  
  var _emscripten_set_gamepadconnected_callback_on_thread = (userData, useCapture, callbackfunc, targetThread) => {
      if (_emscripten_sample_gamepad_data()) return -1;
      return registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 26, "gamepadconnected", targetThread);
    };

  
  var _emscripten_set_gamepaddisconnected_callback_on_thread = (userData, useCapture, callbackfunc, targetThread) => {
      if (_emscripten_sample_gamepad_data()) return -1;
      return registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 27, "gamepaddisconnected", targetThread);
    };

  
  
  
  
  var registerKeyEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      if (!JSEvents.keyEvent) JSEvents.keyEvent = _malloc(160);
  
      var keyEventHandlerFunc = (e) => {
        assert(e);
  
        var keyEventData = JSEvents.keyEvent;
        HEAPF64[((keyEventData)>>3)] = e.timeStamp;
  
        var idx = ((keyEventData)>>2);
  
        HEAP32[idx + 2] = e.location;
        HEAP8[keyEventData + 12] = e.ctrlKey;
        HEAP8[keyEventData + 13] = e.shiftKey;
        HEAP8[keyEventData + 14] = e.altKey;
        HEAP8[keyEventData + 15] = e.metaKey;
        HEAP8[keyEventData + 16] = e.repeat;
        HEAP32[idx + 5] = e.charCode;
        HEAP32[idx + 6] = e.keyCode;
        HEAP32[idx + 7] = e.which;
        stringToUTF8(e.key || '', keyEventData + 32, 32);
        stringToUTF8(e.code || '', keyEventData + 64, 32);
        stringToUTF8(e.char || '', keyEventData + 96, 32);
        stringToUTF8(e.locale || '', keyEventData + 128, 32);
  
        if (getWasmTableEntry(callbackfunc)(eventTypeId, keyEventData, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: findEventTarget(target),
        eventTypeString,
        callbackfunc,
        handlerFunc: keyEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_keydown_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown", targetThread);

  var _emscripten_set_keypress_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);

  var _emscripten_set_keyup_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup", targetThread);

  
  
  var _emscripten_set_main_loop_arg = (func, arg, fps, simulateInfiniteLoop) => {
      var browserIterationFunc = () => getWasmTableEntry(func)(arg);
      setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop, arg);
    };

  
  
  
  var fillMouseEventData = (eventStruct, e, target) => {
      assert(eventStruct % 4 == 0);
      HEAPF64[((eventStruct)>>3)] = e.timeStamp;
      var idx = ((eventStruct)>>2);
      HEAP32[idx + 2] = e.screenX;
      HEAP32[idx + 3] = e.screenY;
      HEAP32[idx + 4] = e.clientX;
      HEAP32[idx + 5] = e.clientY;
      HEAP8[eventStruct + 24] = e.ctrlKey;
      HEAP8[eventStruct + 25] = e.shiftKey;
      HEAP8[eventStruct + 26] = e.altKey;
      HEAP8[eventStruct + 27] = e.metaKey;
      HEAP16[idx*2 + 14] = e.button;
      HEAP16[idx*2 + 15] = e.buttons;
  
      HEAP32[idx + 8] = e["movementX"]
        ;
  
      HEAP32[idx + 9] = e["movementY"]
        ;
  
      // Note: rect contains doubles (truncated to placate SAFE_HEAP, which is the same behaviour when writing to HEAP32 anyway)
      var rect = getBoundingClientRect(target);
      HEAP32[idx + 10] = e.clientX - (rect.left | 0);
      HEAP32[idx + 11] = e.clientY - (rect.top  | 0);
  
    };
  
  
  
  var registerMouseEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      if (!JSEvents.mouseEvent) JSEvents.mouseEvent = _malloc(64);
      target = findEventTarget(target);
  
      var mouseEventHandlerFunc = (e = event) => {
        // TODO: Make this access thread safe, or this could update live while app is reading it.
        fillMouseEventData(JSEvents.mouseEvent, e, target);
  
        if (getWasmTableEntry(callbackfunc)(eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
        eventTypeString,
        callbackfunc,
        handlerFunc: mouseEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_mousedown_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown", targetThread);

  var _emscripten_set_mouseenter_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 33, "mouseenter", targetThread);

  var _emscripten_set_mouseleave_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave", targetThread);

  var _emscripten_set_mousemove_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove", targetThread);

  var _emscripten_set_mouseup_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup", targetThread);

  
  
  
  var fillPointerlockChangeEventData = (eventStruct) => {
      var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
      var isPointerlocked = !!pointerLockElement;
      // Assigning a boolean to HEAP32 with expected type coercion.
      /** @suppress{checkTypes} */
      HEAP8[eventStruct] = isPointerlocked;
      var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
      var id = pointerLockElement?.id || '';
      stringToUTF8(nodeName, eventStruct + 1, 128);
      stringToUTF8(id, eventStruct + 129, 128);
    };
  
  
  
  var registerPointerlockChangeEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      if (!JSEvents.pointerlockChangeEvent) JSEvents.pointerlockChangeEvent = _malloc(257);
  
      var pointerlockChangeEventHandlerFunc = (e = event) => {
        var pointerlockChangeEvent = JSEvents.pointerlockChangeEvent;
        fillPointerlockChangeEventData(pointerlockChangeEvent);
  
        if (getWasmTableEntry(callbackfunc)(eventTypeId, pointerlockChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        eventTypeString,
        callbackfunc,
        handlerFunc: pointerlockChangeEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  
  
  /** @suppress {missingProperties} */
  var _emscripten_set_pointerlockchange_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) => {
      // TODO: Currently not supported in pthreads or in --proxy-to-worker mode. (In pthreads mode, document object is not defined)
      if (!document || !document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
  
      target = findEventTarget(target);
      if (!target) return -4;
      registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mozpointerlockchange", targetThread);
      registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "webkitpointerlockchange", targetThread);
      registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mspointerlockchange", targetThread);
      return registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "pointerlockchange", targetThread);
    };

  
  
  
  var registerUiEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      if (!JSEvents.uiEvent) JSEvents.uiEvent = _malloc(36);
  
      target = findEventTarget(target);
  
      var uiEventHandlerFunc = (e = event) => {
        if (e.target != target) {
          // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
          // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
          // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
          // causing a new scroll, etc..
          return;
        }
        var b = document.body; // Take document.body to a variable, Closure compiler does not outline access to it on its own.
        if (!b) {
          // During a page unload 'body' can be null, with "Cannot read property 'clientWidth' of null" being thrown
          return;
        }
        var uiEvent = JSEvents.uiEvent;
        HEAP32[((uiEvent)>>2)] = 0; // always zero for resize and scroll
        HEAP32[(((uiEvent)+(4))>>2)] = b.clientWidth;
        HEAP32[(((uiEvent)+(8))>>2)] = b.clientHeight;
        HEAP32[(((uiEvent)+(12))>>2)] = innerWidth;
        HEAP32[(((uiEvent)+(16))>>2)] = innerHeight;
        HEAP32[(((uiEvent)+(20))>>2)] = outerWidth;
        HEAP32[(((uiEvent)+(24))>>2)] = outerHeight;
        HEAP32[(((uiEvent)+(28))>>2)] = pageXOffset | 0; // scroll offsets are float
        HEAP32[(((uiEvent)+(32))>>2)] = pageYOffset | 0;
        if (getWasmTableEntry(callbackfunc)(eventTypeId, uiEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        eventTypeString,
        callbackfunc,
        handlerFunc: uiEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_resize_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize", targetThread);

  
  
  
  
  var registerTouchEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      if (!JSEvents.touchEvent) JSEvents.touchEvent = _malloc(1552);
  
      target = findEventTarget(target);
  
      var touchEventHandlerFunc = (e) => {
        assert(e);
        var t, touches = {}, et = e.touches;
        // To ease marshalling different kinds of touches that browser reports (all touches are listed in e.touches,
        // only changed touches in e.changedTouches, and touches on target at a.targetTouches), mark a boolean in
        // each Touch object so that we can later loop only once over all touches we see to marshall over to Wasm.
  
        for (let t of et) {
          // Browser might recycle the generated Touch objects between each frame (Firefox on Android), so reset any
          // changed/target states we may have set from previous frame.
          t.isChanged = t.onTarget = 0;
          touches[t.identifier] = t;
        }
        // Mark which touches are part of the changedTouches list.
        for (let t of e.changedTouches) {
          t.isChanged = 1;
          touches[t.identifier] = t;
        }
        // Mark which touches are part of the targetTouches list.
        for (let t of e.targetTouches) {
          touches[t.identifier].onTarget = 1;
        }
  
        var touchEvent = JSEvents.touchEvent;
        HEAPF64[((touchEvent)>>3)] = e.timeStamp;
        HEAP8[touchEvent + 12] = e.ctrlKey;
        HEAP8[touchEvent + 13] = e.shiftKey;
        HEAP8[touchEvent + 14] = e.altKey;
        HEAP8[touchEvent + 15] = e.metaKey;
        var idx = touchEvent + 16;
        var targetRect = getBoundingClientRect(target);
        var numTouches = 0;
        for (let t of Object.values(touches)) {
          var idx32 = ((idx)>>2); // Pre-shift the ptr to index to HEAP32 to save code size
          HEAP32[idx32 + 0] = t.identifier;
          HEAP32[idx32 + 1] = t.screenX;
          HEAP32[idx32 + 2] = t.screenY;
          HEAP32[idx32 + 3] = t.clientX;
          HEAP32[idx32 + 4] = t.clientY;
          HEAP32[idx32 + 5] = t.pageX;
          HEAP32[idx32 + 6] = t.pageY;
          HEAP8[idx + 28] = t.isChanged;
          HEAP8[idx + 29] = t.onTarget;
          HEAP32[idx32 + 8] = t.clientX - (targetRect.left | 0);
          HEAP32[idx32 + 9] = t.clientY - (targetRect.top  | 0);
  
          idx += 48;
  
          if (++numTouches > 31) {
            break;
          }
        }
        HEAP32[(((touchEvent)+(8))>>2)] = numTouches;
  
        if (getWasmTableEntry(callbackfunc)(eventTypeId, touchEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
        eventTypeString,
        callbackfunc,
        handlerFunc: touchEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  var _emscripten_set_touchcancel_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);

  var _emscripten_set_touchend_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);

  var _emscripten_set_touchmove_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);

  var _emscripten_set_touchstart_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) =>
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);

  
  var fillVisibilityChangeEventData = (eventStruct) => {
      var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
      var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
      // Assigning a boolean to HEAP32 with expected type coercion.
      /** @suppress{checkTypes} */
      HEAP8[eventStruct] = document.hidden;
      HEAP32[(((eventStruct)+(4))>>2)] = visibilityState;
    };
  
  
  
  var registerVisibilityChangeEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      if (!JSEvents.visibilityChangeEvent) JSEvents.visibilityChangeEvent = _malloc(8);
  
      var visibilityChangeEventHandlerFunc = (e = event) => {
        var visibilityChangeEvent = JSEvents.visibilityChangeEvent;
  
        fillVisibilityChangeEventData(visibilityChangeEvent);
  
        if (getWasmTableEntry(callbackfunc)(eventTypeId, visibilityChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        eventTypeString,
        callbackfunc,
        handlerFunc: visibilityChangeEventHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  
  var _emscripten_set_visibilitychange_callback_on_thread = (userData, useCapture, callbackfunc, targetThread) => {
    if (!specialHTMLTargets[1]) {
      return -4;
    }
      return registerVisibilityChangeEventCallback(specialHTMLTargets[1], userData, useCapture, callbackfunc, 21, "visibilitychange", targetThread);
    };

  
  
  
  
  
  var registerWheelEventCallback = (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) => {
      if (!JSEvents.wheelEvent) JSEvents.wheelEvent = _malloc(96);
  
      // The DOM Level 3 events spec event 'wheel'
      var wheelHandlerFunc = (e = event) => {
        var wheelEvent = JSEvents.wheelEvent;
        fillMouseEventData(wheelEvent, e, target);
        HEAPF64[(((wheelEvent)+(64))>>3)] = e["deltaX"];
        HEAPF64[(((wheelEvent)+(72))>>3)] = e["deltaY"];
        HEAPF64[(((wheelEvent)+(80))>>3)] = e["deltaZ"];
        HEAP32[(((wheelEvent)+(88))>>2)] = e["deltaMode"];
        if (getWasmTableEntry(callbackfunc)(eventTypeId, wheelEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target,
        allowsDeferredCalls: true,
        eventTypeString,
        callbackfunc,
        handlerFunc: wheelHandlerFunc,
        useCapture
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
  
  var _emscripten_set_wheel_callback_on_thread = (target, userData, useCapture, callbackfunc, targetThread) => {
      target = findEventTarget(target);
      if (!target) return -4;
      if (typeof target.onwheel != 'undefined') {
        return registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel", targetThread);
      } else {
        return -1;
      }
    };

  
  var _emscripten_set_window_title = (title) => document.title = UTF8ToString(title);

  var _emscripten_sleep = () => {
      throw 'Please compile your program with async support in order to use asynchronous operations like emscripten_sleep';
    };

  var ENV = {
  };
  
  var getExecutableName = () => {
      return thisProgram || './this.program';
    };
  var getEnvStrings = () => {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator == 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          // x is a key in ENV; if ENV[x] is undefined, that means it was
          // explicitly set to be so. We allow user code to do that to
          // force variables with default values to remain unset.
          if (ENV[x] === undefined) delete env[x];
          else env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(`${x}=${env[x]}`);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    };
  
  var stringToAscii = (str, buffer) => {
      for (var i = 0; i < str.length; ++i) {
        assert(str.charCodeAt(i) === (str.charCodeAt(i) & 0xff));
        HEAP8[buffer++] = str.charCodeAt(i);
      }
      // Null-terminate the string
      HEAP8[buffer] = 0;
    };
  var _environ_get = (__environ, environ_buf) => {
      var bufSize = 0;
      getEnvStrings().forEach((string, i) => {
        var ptr = environ_buf + bufSize;
        HEAPU32[(((__environ)+(i*4))>>2)] = ptr;
        stringToAscii(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    };

  var _environ_sizes_get = (penviron_count, penviron_buf_size) => {
      var strings = getEnvStrings();
      HEAPU32[((penviron_count)>>2)] = strings.length;
      var bufSize = 0;
      strings.forEach((string) => bufSize += string.length + 1);
      HEAPU32[((penviron_buf_size)>>2)] = bufSize;
      return 0;
    };

  function _fd_close(fd) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  /** @param {number=} offset */
  var doReadv = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.read(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) break; // nothing more to read
        if (typeof offset != 'undefined') {
          offset += curr;
        }
      }
      return ret;
    };
  
  function _fd_read(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doReadv(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  
  var convertI32PairToI53Checked = (lo, hi) => {
      assert(lo == (lo >>> 0) || lo == (lo|0)); // lo should either be a i32 or a u32
      assert(hi === (hi|0));                    // hi should be a i32
      return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
    };
  function _fd_seek(fd,offset_low, offset_high,whence,newOffset) {
    var offset = convertI32PairToI53Checked(offset_low, offset_high);
  
    
  try {
  
      if (isNaN(offset)) return 61;
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble = stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  ;
  }

  /** @param {number=} offset */
  var doWritev = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.write(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) {
          // No more space to write.
          break;
        }
        if (typeof offset != 'undefined') {
          offset += curr;
        }
      }
      return ret;
    };
  
  function _fd_write(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doWritev(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }



































  var listenOnce = (object, event, func) => {
      object.addEventListener(event, func, { 'once': true });
    };
  /** @param {Object=} elements */
  var autoResumeAudioContext = (ctx, elements) => {
      if (!elements) {
        elements = [document, document.getElementById('canvas')];
      }
      ['keydown', 'mousedown', 'touchstart'].forEach((event) => {
        elements.forEach((element) => {
          if (element) {
            listenOnce(element, event, () => {
              if (ctx.state === 'suspended') ctx.resume();
            });
          }
        });
      });
    };

  var dynCallLegacy = (sig, ptr, args) => {
      sig = sig.replace(/p/g, 'i')
      assert(('dynCall_' + sig) in Module, `bad function pointer type - dynCall function not found for sig '${sig}'`);
      if (args?.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      var f = Module['dynCall_' + sig];
      return f(ptr, ...args);
    };
  
  
  var dynCall = (sig, ptr, args = []) => {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of their signature, so we rely on the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.includes('j')) {
        return dynCallLegacy(sig, ptr, args);
      }
      assert(getWasmTableEntry(ptr), `missing table entry in dynCall: ${ptr}`);
      var rtn = getWasmTableEntry(ptr)(...args);
      return rtn;
    };




  var FS_createPath = FS.createPath;



  var FS_unlink = (path) => FS.unlink(path);

  var FS_createLazyFile = FS.createLazyFile;

  var FS_createDevice = FS.createDevice;

  FS.createPreloadedFile = FS_createPreloadedFile;
  FS.staticInit();
  // Set module methods based on EXPORTED_RUNTIME_METHODS
  Module["FS_createPath"] = FS.createPath;
  Module["FS_createDataFile"] = FS.createDataFile;
  Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
  Module["FS_unlink"] = FS.unlink;
  Module["FS_createLazyFile"] = FS.createLazyFile;
  Module["FS_createDevice"] = FS.createDevice;
  ;

      // exports
      Module["requestFullscreen"] = Browser.requestFullscreen;
      Module["requestFullScreen"] = Browser.requestFullScreen;
      Module["requestAnimationFrame"] = Browser.requestAnimationFrame;
      Module["setCanvasSize"] = Browser.setCanvasSize;
      Module["pauseMainLoop"] = Browser.mainLoop.pause;
      Module["resumeMainLoop"] = Browser.mainLoop.resume;
      Module["getUserMedia"] = Browser.getUserMedia;
      Module["createContext"] = Browser.createContext;
      var preloadedImages = {};
      var preloadedAudios = {};;
for (var i = 0; i < 32; ++i) tempFixedLengthArray.push(new Array(i));;
var miniTempWebGLFloatBuffersStorage = new Float32Array(288);
  // Create GL_POOL_TEMP_BUFFERS_SIZE+1 temporary buffers, for uploads of size 0 through GL_POOL_TEMP_BUFFERS_SIZE inclusive
  for (/**@suppress{duplicate}*/var i = 0; i <= 288; ++i) {
    miniTempWebGLFloatBuffers[i] = miniTempWebGLFloatBuffersStorage.subarray(0, i);
  };
var miniTempWebGLIntBuffersStorage = new Int32Array(288);
  // Create GL_POOL_TEMP_BUFFERS_SIZE+1 temporary buffers, for uploads of size 0 through GL_POOL_TEMP_BUFFERS_SIZE inclusive
  for (/**@suppress{duplicate}*/var i = 0; i <= 288; ++i) {
    miniTempWebGLIntBuffers[i] = miniTempWebGLIntBuffersStorage.subarray(0, i);
  };
function checkIncomingModuleAPI() {
  ignoredModuleProp('fetchSettings');
}
var wasmImports = {
  /** @export */
  __assert_fail: ___assert_fail,
  /** @export */
  __cxa_throw: ___cxa_throw,
  /** @export */
  __syscall_fcntl64: ___syscall_fcntl64,
  /** @export */
  __syscall_ioctl: ___syscall_ioctl,
  /** @export */
  __syscall_openat: ___syscall_openat,
  /** @export */
  _abort_js: __abort_js,
  /** @export */
  _emscripten_get_now_is_monotonic: __emscripten_get_now_is_monotonic,
  /** @export */
  _emscripten_memcpy_js: __emscripten_memcpy_js,
  /** @export */
  eglBindAPI: _eglBindAPI,
  /** @export */
  eglChooseConfig: _eglChooseConfig,
  /** @export */
  eglCreateContext: _eglCreateContext,
  /** @export */
  eglCreateWindowSurface: _eglCreateWindowSurface,
  /** @export */
  eglDestroyContext: _eglDestroyContext,
  /** @export */
  eglDestroySurface: _eglDestroySurface,
  /** @export */
  eglGetConfigAttrib: _eglGetConfigAttrib,
  /** @export */
  eglGetDisplay: _eglGetDisplay,
  /** @export */
  eglGetError: _eglGetError,
  /** @export */
  eglInitialize: _eglInitialize,
  /** @export */
  eglMakeCurrent: _eglMakeCurrent,
  /** @export */
  eglQueryString: _eglQueryString,
  /** @export */
  eglSwapBuffers: _eglSwapBuffers,
  /** @export */
  eglSwapInterval: _eglSwapInterval,
  /** @export */
  eglTerminate: _eglTerminate,
  /** @export */
  eglWaitGL: _eglWaitGL,
  /** @export */
  eglWaitNative: _eglWaitNative,
  /** @export */
  emscripten_asm_const_int: _emscripten_asm_const_int,
  /** @export */
  emscripten_asm_const_int_sync_on_main_thread: _emscripten_asm_const_int_sync_on_main_thread,
  /** @export */
  emscripten_asm_const_ptr_sync_on_main_thread: _emscripten_asm_const_ptr_sync_on_main_thread,
  /** @export */
  emscripten_date_now: _emscripten_date_now,
  /** @export */
  emscripten_exit_fullscreen: _emscripten_exit_fullscreen,
  /** @export */
  emscripten_exit_pointerlock: _emscripten_exit_pointerlock,
  /** @export */
  emscripten_get_device_pixel_ratio: _emscripten_get_device_pixel_ratio,
  /** @export */
  emscripten_get_element_css_size: _emscripten_get_element_css_size,
  /** @export */
  emscripten_get_gamepad_status: _emscripten_get_gamepad_status,
  /** @export */
  emscripten_get_now: _emscripten_get_now,
  /** @export */
  emscripten_get_num_gamepads: _emscripten_get_num_gamepads,
  /** @export */
  emscripten_get_screen_size: _emscripten_get_screen_size,
  /** @export */
  emscripten_glActiveTexture: _emscripten_glActiveTexture,
  /** @export */
  emscripten_glAttachShader: _emscripten_glAttachShader,
  /** @export */
  emscripten_glBeginQueryEXT: _emscripten_glBeginQueryEXT,
  /** @export */
  emscripten_glBindAttribLocation: _emscripten_glBindAttribLocation,
  /** @export */
  emscripten_glBindBuffer: _emscripten_glBindBuffer,
  /** @export */
  emscripten_glBindFramebuffer: _emscripten_glBindFramebuffer,
  /** @export */
  emscripten_glBindRenderbuffer: _emscripten_glBindRenderbuffer,
  /** @export */
  emscripten_glBindTexture: _emscripten_glBindTexture,
  /** @export */
  emscripten_glBindVertexArrayOES: _emscripten_glBindVertexArrayOES,
  /** @export */
  emscripten_glBlendColor: _emscripten_glBlendColor,
  /** @export */
  emscripten_glBlendEquation: _emscripten_glBlendEquation,
  /** @export */
  emscripten_glBlendEquationSeparate: _emscripten_glBlendEquationSeparate,
  /** @export */
  emscripten_glBlendFunc: _emscripten_glBlendFunc,
  /** @export */
  emscripten_glBlendFuncSeparate: _emscripten_glBlendFuncSeparate,
  /** @export */
  emscripten_glBufferData: _emscripten_glBufferData,
  /** @export */
  emscripten_glBufferSubData: _emscripten_glBufferSubData,
  /** @export */
  emscripten_glCheckFramebufferStatus: _emscripten_glCheckFramebufferStatus,
  /** @export */
  emscripten_glClear: _emscripten_glClear,
  /** @export */
  emscripten_glClearColor: _emscripten_glClearColor,
  /** @export */
  emscripten_glClearDepthf: _emscripten_glClearDepthf,
  /** @export */
  emscripten_glClearStencil: _emscripten_glClearStencil,
  /** @export */
  emscripten_glClipControlEXT: _emscripten_glClipControlEXT,
  /** @export */
  emscripten_glColorMask: _emscripten_glColorMask,
  /** @export */
  emscripten_glCompileShader: _emscripten_glCompileShader,
  /** @export */
  emscripten_glCompressedTexImage2D: _emscripten_glCompressedTexImage2D,
  /** @export */
  emscripten_glCompressedTexSubImage2D: _emscripten_glCompressedTexSubImage2D,
  /** @export */
  emscripten_glCopyTexImage2D: _emscripten_glCopyTexImage2D,
  /** @export */
  emscripten_glCopyTexSubImage2D: _emscripten_glCopyTexSubImage2D,
  /** @export */
  emscripten_glCreateProgram: _emscripten_glCreateProgram,
  /** @export */
  emscripten_glCreateShader: _emscripten_glCreateShader,
  /** @export */
  emscripten_glCullFace: _emscripten_glCullFace,
  /** @export */
  emscripten_glDeleteBuffers: _emscripten_glDeleteBuffers,
  /** @export */
  emscripten_glDeleteFramebuffers: _emscripten_glDeleteFramebuffers,
  /** @export */
  emscripten_glDeleteProgram: _emscripten_glDeleteProgram,
  /** @export */
  emscripten_glDeleteQueriesEXT: _emscripten_glDeleteQueriesEXT,
  /** @export */
  emscripten_glDeleteRenderbuffers: _emscripten_glDeleteRenderbuffers,
  /** @export */
  emscripten_glDeleteShader: _emscripten_glDeleteShader,
  /** @export */
  emscripten_glDeleteTextures: _emscripten_glDeleteTextures,
  /** @export */
  emscripten_glDeleteVertexArraysOES: _emscripten_glDeleteVertexArraysOES,
  /** @export */
  emscripten_glDepthFunc: _emscripten_glDepthFunc,
  /** @export */
  emscripten_glDepthMask: _emscripten_glDepthMask,
  /** @export */
  emscripten_glDepthRangef: _emscripten_glDepthRangef,
  /** @export */
  emscripten_glDetachShader: _emscripten_glDetachShader,
  /** @export */
  emscripten_glDisable: _emscripten_glDisable,
  /** @export */
  emscripten_glDisableVertexAttribArray: _emscripten_glDisableVertexAttribArray,
  /** @export */
  emscripten_glDrawArrays: _emscripten_glDrawArrays,
  /** @export */
  emscripten_glDrawArraysInstancedANGLE: _emscripten_glDrawArraysInstancedANGLE,
  /** @export */
  emscripten_glDrawBuffersWEBGL: _emscripten_glDrawBuffersWEBGL,
  /** @export */
  emscripten_glDrawElements: _emscripten_glDrawElements,
  /** @export */
  emscripten_glDrawElementsInstancedANGLE: _emscripten_glDrawElementsInstancedANGLE,
  /** @export */
  emscripten_glEnable: _emscripten_glEnable,
  /** @export */
  emscripten_glEnableVertexAttribArray: _emscripten_glEnableVertexAttribArray,
  /** @export */
  emscripten_glEndQueryEXT: _emscripten_glEndQueryEXT,
  /** @export */
  emscripten_glFinish: _emscripten_glFinish,
  /** @export */
  emscripten_glFlush: _emscripten_glFlush,
  /** @export */
  emscripten_glFramebufferRenderbuffer: _emscripten_glFramebufferRenderbuffer,
  /** @export */
  emscripten_glFramebufferTexture2D: _emscripten_glFramebufferTexture2D,
  /** @export */
  emscripten_glFrontFace: _emscripten_glFrontFace,
  /** @export */
  emscripten_glGenBuffers: _emscripten_glGenBuffers,
  /** @export */
  emscripten_glGenFramebuffers: _emscripten_glGenFramebuffers,
  /** @export */
  emscripten_glGenQueriesEXT: _emscripten_glGenQueriesEXT,
  /** @export */
  emscripten_glGenRenderbuffers: _emscripten_glGenRenderbuffers,
  /** @export */
  emscripten_glGenTextures: _emscripten_glGenTextures,
  /** @export */
  emscripten_glGenVertexArraysOES: _emscripten_glGenVertexArraysOES,
  /** @export */
  emscripten_glGenerateMipmap: _emscripten_glGenerateMipmap,
  /** @export */
  emscripten_glGetActiveAttrib: _emscripten_glGetActiveAttrib,
  /** @export */
  emscripten_glGetActiveUniform: _emscripten_glGetActiveUniform,
  /** @export */
  emscripten_glGetAttachedShaders: _emscripten_glGetAttachedShaders,
  /** @export */
  emscripten_glGetAttribLocation: _emscripten_glGetAttribLocation,
  /** @export */
  emscripten_glGetBooleanv: _emscripten_glGetBooleanv,
  /** @export */
  emscripten_glGetBufferParameteriv: _emscripten_glGetBufferParameteriv,
  /** @export */
  emscripten_glGetError: _emscripten_glGetError,
  /** @export */
  emscripten_glGetFloatv: _emscripten_glGetFloatv,
  /** @export */
  emscripten_glGetFramebufferAttachmentParameteriv: _emscripten_glGetFramebufferAttachmentParameteriv,
  /** @export */
  emscripten_glGetIntegerv: _emscripten_glGetIntegerv,
  /** @export */
  emscripten_glGetProgramInfoLog: _emscripten_glGetProgramInfoLog,
  /** @export */
  emscripten_glGetProgramiv: _emscripten_glGetProgramiv,
  /** @export */
  emscripten_glGetQueryObjecti64vEXT: _emscripten_glGetQueryObjecti64vEXT,
  /** @export */
  emscripten_glGetQueryObjectivEXT: _emscripten_glGetQueryObjectivEXT,
  /** @export */
  emscripten_glGetQueryObjectui64vEXT: _emscripten_glGetQueryObjectui64vEXT,
  /** @export */
  emscripten_glGetQueryObjectuivEXT: _emscripten_glGetQueryObjectuivEXT,
  /** @export */
  emscripten_glGetQueryivEXT: _emscripten_glGetQueryivEXT,
  /** @export */
  emscripten_glGetRenderbufferParameteriv: _emscripten_glGetRenderbufferParameteriv,
  /** @export */
  emscripten_glGetShaderInfoLog: _emscripten_glGetShaderInfoLog,
  /** @export */
  emscripten_glGetShaderPrecisionFormat: _emscripten_glGetShaderPrecisionFormat,
  /** @export */
  emscripten_glGetShaderSource: _emscripten_glGetShaderSource,
  /** @export */
  emscripten_glGetShaderiv: _emscripten_glGetShaderiv,
  /** @export */
  emscripten_glGetString: _emscripten_glGetString,
  /** @export */
  emscripten_glGetTexParameterfv: _emscripten_glGetTexParameterfv,
  /** @export */
  emscripten_glGetTexParameteriv: _emscripten_glGetTexParameteriv,
  /** @export */
  emscripten_glGetUniformLocation: _emscripten_glGetUniformLocation,
  /** @export */
  emscripten_glGetUniformfv: _emscripten_glGetUniformfv,
  /** @export */
  emscripten_glGetUniformiv: _emscripten_glGetUniformiv,
  /** @export */
  emscripten_glGetVertexAttribPointerv: _emscripten_glGetVertexAttribPointerv,
  /** @export */
  emscripten_glGetVertexAttribfv: _emscripten_glGetVertexAttribfv,
  /** @export */
  emscripten_glGetVertexAttribiv: _emscripten_glGetVertexAttribiv,
  /** @export */
  emscripten_glHint: _emscripten_glHint,
  /** @export */
  emscripten_glIsBuffer: _emscripten_glIsBuffer,
  /** @export */
  emscripten_glIsEnabled: _emscripten_glIsEnabled,
  /** @export */
  emscripten_glIsFramebuffer: _emscripten_glIsFramebuffer,
  /** @export */
  emscripten_glIsProgram: _emscripten_glIsProgram,
  /** @export */
  emscripten_glIsQueryEXT: _emscripten_glIsQueryEXT,
  /** @export */
  emscripten_glIsRenderbuffer: _emscripten_glIsRenderbuffer,
  /** @export */
  emscripten_glIsShader: _emscripten_glIsShader,
  /** @export */
  emscripten_glIsTexture: _emscripten_glIsTexture,
  /** @export */
  emscripten_glIsVertexArrayOES: _emscripten_glIsVertexArrayOES,
  /** @export */
  emscripten_glLineWidth: _emscripten_glLineWidth,
  /** @export */
  emscripten_glLinkProgram: _emscripten_glLinkProgram,
  /** @export */
  emscripten_glPixelStorei: _emscripten_glPixelStorei,
  /** @export */
  emscripten_glPolygonModeWEBGL: _emscripten_glPolygonModeWEBGL,
  /** @export */
  emscripten_glPolygonOffset: _emscripten_glPolygonOffset,
  /** @export */
  emscripten_glPolygonOffsetClampEXT: _emscripten_glPolygonOffsetClampEXT,
  /** @export */
  emscripten_glQueryCounterEXT: _emscripten_glQueryCounterEXT,
  /** @export */
  emscripten_glReadPixels: _emscripten_glReadPixels,
  /** @export */
  emscripten_glReleaseShaderCompiler: _emscripten_glReleaseShaderCompiler,
  /** @export */
  emscripten_glRenderbufferStorage: _emscripten_glRenderbufferStorage,
  /** @export */
  emscripten_glSampleCoverage: _emscripten_glSampleCoverage,
  /** @export */
  emscripten_glScissor: _emscripten_glScissor,
  /** @export */
  emscripten_glShaderBinary: _emscripten_glShaderBinary,
  /** @export */
  emscripten_glShaderSource: _emscripten_glShaderSource,
  /** @export */
  emscripten_glStencilFunc: _emscripten_glStencilFunc,
  /** @export */
  emscripten_glStencilFuncSeparate: _emscripten_glStencilFuncSeparate,
  /** @export */
  emscripten_glStencilMask: _emscripten_glStencilMask,
  /** @export */
  emscripten_glStencilMaskSeparate: _emscripten_glStencilMaskSeparate,
  /** @export */
  emscripten_glStencilOp: _emscripten_glStencilOp,
  /** @export */
  emscripten_glStencilOpSeparate: _emscripten_glStencilOpSeparate,
  /** @export */
  emscripten_glTexImage2D: _emscripten_glTexImage2D,
  /** @export */
  emscripten_glTexParameterf: _emscripten_glTexParameterf,
  /** @export */
  emscripten_glTexParameterfv: _emscripten_glTexParameterfv,
  /** @export */
  emscripten_glTexParameteri: _emscripten_glTexParameteri,
  /** @export */
  emscripten_glTexParameteriv: _emscripten_glTexParameteriv,
  /** @export */
  emscripten_glTexSubImage2D: _emscripten_glTexSubImage2D,
  /** @export */
  emscripten_glUniform1f: _emscripten_glUniform1f,
  /** @export */
  emscripten_glUniform1fv: _emscripten_glUniform1fv,
  /** @export */
  emscripten_glUniform1i: _emscripten_glUniform1i,
  /** @export */
  emscripten_glUniform1iv: _emscripten_glUniform1iv,
  /** @export */
  emscripten_glUniform2f: _emscripten_glUniform2f,
  /** @export */
  emscripten_glUniform2fv: _emscripten_glUniform2fv,
  /** @export */
  emscripten_glUniform2i: _emscripten_glUniform2i,
  /** @export */
  emscripten_glUniform2iv: _emscripten_glUniform2iv,
  /** @export */
  emscripten_glUniform3f: _emscripten_glUniform3f,
  /** @export */
  emscripten_glUniform3fv: _emscripten_glUniform3fv,
  /** @export */
  emscripten_glUniform3i: _emscripten_glUniform3i,
  /** @export */
  emscripten_glUniform3iv: _emscripten_glUniform3iv,
  /** @export */
  emscripten_glUniform4f: _emscripten_glUniform4f,
  /** @export */
  emscripten_glUniform4fv: _emscripten_glUniform4fv,
  /** @export */
  emscripten_glUniform4i: _emscripten_glUniform4i,
  /** @export */
  emscripten_glUniform4iv: _emscripten_glUniform4iv,
  /** @export */
  emscripten_glUniformMatrix2fv: _emscripten_glUniformMatrix2fv,
  /** @export */
  emscripten_glUniformMatrix3fv: _emscripten_glUniformMatrix3fv,
  /** @export */
  emscripten_glUniformMatrix4fv: _emscripten_glUniformMatrix4fv,
  /** @export */
  emscripten_glUseProgram: _emscripten_glUseProgram,
  /** @export */
  emscripten_glValidateProgram: _emscripten_glValidateProgram,
  /** @export */
  emscripten_glVertexAttrib1f: _emscripten_glVertexAttrib1f,
  /** @export */
  emscripten_glVertexAttrib1fv: _emscripten_glVertexAttrib1fv,
  /** @export */
  emscripten_glVertexAttrib2f: _emscripten_glVertexAttrib2f,
  /** @export */
  emscripten_glVertexAttrib2fv: _emscripten_glVertexAttrib2fv,
  /** @export */
  emscripten_glVertexAttrib3f: _emscripten_glVertexAttrib3f,
  /** @export */
  emscripten_glVertexAttrib3fv: _emscripten_glVertexAttrib3fv,
  /** @export */
  emscripten_glVertexAttrib4f: _emscripten_glVertexAttrib4f,
  /** @export */
  emscripten_glVertexAttrib4fv: _emscripten_glVertexAttrib4fv,
  /** @export */
  emscripten_glVertexAttribDivisorANGLE: _emscripten_glVertexAttribDivisorANGLE,
  /** @export */
  emscripten_glVertexAttribPointer: _emscripten_glVertexAttribPointer,
  /** @export */
  emscripten_glViewport: _emscripten_glViewport,
  /** @export */
  emscripten_has_asyncify: _emscripten_has_asyncify,
  /** @export */
  emscripten_request_fullscreen_strategy: _emscripten_request_fullscreen_strategy,
  /** @export */
  emscripten_request_pointerlock: _emscripten_request_pointerlock,
  /** @export */
  emscripten_resize_heap: _emscripten_resize_heap,
  /** @export */
  emscripten_sample_gamepad_data: _emscripten_sample_gamepad_data,
  /** @export */
  emscripten_set_beforeunload_callback_on_thread: _emscripten_set_beforeunload_callback_on_thread,
  /** @export */
  emscripten_set_blur_callback_on_thread: _emscripten_set_blur_callback_on_thread,
  /** @export */
  emscripten_set_canvas_element_size: _emscripten_set_canvas_element_size,
  /** @export */
  emscripten_set_element_css_size: _emscripten_set_element_css_size,
  /** @export */
  emscripten_set_focus_callback_on_thread: _emscripten_set_focus_callback_on_thread,
  /** @export */
  emscripten_set_fullscreenchange_callback_on_thread: _emscripten_set_fullscreenchange_callback_on_thread,
  /** @export */
  emscripten_set_gamepadconnected_callback_on_thread: _emscripten_set_gamepadconnected_callback_on_thread,
  /** @export */
  emscripten_set_gamepaddisconnected_callback_on_thread: _emscripten_set_gamepaddisconnected_callback_on_thread,
  /** @export */
  emscripten_set_keydown_callback_on_thread: _emscripten_set_keydown_callback_on_thread,
  /** @export */
  emscripten_set_keypress_callback_on_thread: _emscripten_set_keypress_callback_on_thread,
  /** @export */
  emscripten_set_keyup_callback_on_thread: _emscripten_set_keyup_callback_on_thread,
  /** @export */
  emscripten_set_main_loop_arg: _emscripten_set_main_loop_arg,
  /** @export */
  emscripten_set_mousedown_callback_on_thread: _emscripten_set_mousedown_callback_on_thread,
  /** @export */
  emscripten_set_mouseenter_callback_on_thread: _emscripten_set_mouseenter_callback_on_thread,
  /** @export */
  emscripten_set_mouseleave_callback_on_thread: _emscripten_set_mouseleave_callback_on_thread,
  /** @export */
  emscripten_set_mousemove_callback_on_thread: _emscripten_set_mousemove_callback_on_thread,
  /** @export */
  emscripten_set_mouseup_callback_on_thread: _emscripten_set_mouseup_callback_on_thread,
  /** @export */
  emscripten_set_pointerlockchange_callback_on_thread: _emscripten_set_pointerlockchange_callback_on_thread,
  /** @export */
  emscripten_set_resize_callback_on_thread: _emscripten_set_resize_callback_on_thread,
  /** @export */
  emscripten_set_touchcancel_callback_on_thread: _emscripten_set_touchcancel_callback_on_thread,
  /** @export */
  emscripten_set_touchend_callback_on_thread: _emscripten_set_touchend_callback_on_thread,
  /** @export */
  emscripten_set_touchmove_callback_on_thread: _emscripten_set_touchmove_callback_on_thread,
  /** @export */
  emscripten_set_touchstart_callback_on_thread: _emscripten_set_touchstart_callback_on_thread,
  /** @export */
  emscripten_set_visibilitychange_callback_on_thread: _emscripten_set_visibilitychange_callback_on_thread,
  /** @export */
  emscripten_set_wheel_callback_on_thread: _emscripten_set_wheel_callback_on_thread,
  /** @export */
  emscripten_set_window_title: _emscripten_set_window_title,
  /** @export */
  emscripten_sleep: _emscripten_sleep,
  /** @export */
  environ_get: _environ_get,
  /** @export */
  environ_sizes_get: _environ_sizes_get,
  /** @export */
  fd_close: _fd_close,
  /** @export */
  fd_read: _fd_read,
  /** @export */
  fd_seek: _fd_seek,
  /** @export */
  fd_write: _fd_write,
  /** @export */
  glAttachShader: _glAttachShader,
  /** @export */
  glBindAttribLocation: _glBindAttribLocation,
  /** @export */
  glBindBuffer: _glBindBuffer,
  /** @export */
  glBindTexture: _glBindTexture,
  /** @export */
  glBlendFunc: _glBlendFunc,
  /** @export */
  glBufferData: _glBufferData,
  /** @export */
  glClear: _glClear,
  /** @export */
  glClearColor: _glClearColor,
  /** @export */
  glCompileShader: _glCompileShader,
  /** @export */
  glCreateProgram: _glCreateProgram,
  /** @export */
  glCreateShader: _glCreateShader,
  /** @export */
  glDeleteBuffers: _glDeleteBuffers,
  /** @export */
  glDeleteTextures: _glDeleteTextures,
  /** @export */
  glDisableVertexAttribArray: _glDisableVertexAttribArray,
  /** @export */
  glDrawArrays: _glDrawArrays,
  /** @export */
  glEnable: _glEnable,
  /** @export */
  glEnableVertexAttribArray: _glEnableVertexAttribArray,
  /** @export */
  glGenBuffers: _glGenBuffers,
  /** @export */
  glGenTextures: _glGenTextures,
  /** @export */
  glGetError: _glGetError,
  /** @export */
  glGetUniformLocation: _glGetUniformLocation,
  /** @export */
  glLinkProgram: _glLinkProgram,
  /** @export */
  glShaderSource: _glShaderSource,
  /** @export */
  glTexImage2D: _glTexImage2D,
  /** @export */
  glTexParameteri: _glTexParameteri,
  /** @export */
  glUniform1f: _glUniform1f,
  /** @export */
  glUniform1i: _glUniform1i,
  /** @export */
  glUniform2fv: _glUniform2fv,
  /** @export */
  glUseProgram: _glUseProgram,
  /** @export */
  glVertexAttribPointer: _glVertexAttribPointer,
  /** @export */
  glViewport: _glViewport
};
var wasmExports = createWasm();
var ___wasm_call_ctors = createExportWrapper('__wasm_call_ctors', 0);
var _main = Module['_main'] = createExportWrapper('__main_argc_argv', 2);
var _malloc = createExportWrapper('malloc', 1);
var _fflush = createExportWrapper('fflush', 1);
var _strerror = createExportWrapper('strerror', 1);
var _emscripten_stack_init = () => (_emscripten_stack_init = wasmExports['emscripten_stack_init'])();
var _emscripten_stack_get_free = () => (_emscripten_stack_get_free = wasmExports['emscripten_stack_get_free'])();
var _emscripten_stack_get_base = () => (_emscripten_stack_get_base = wasmExports['emscripten_stack_get_base'])();
var _emscripten_stack_get_end = () => (_emscripten_stack_get_end = wasmExports['emscripten_stack_get_end'])();
var __emscripten_stack_restore = (a0) => (__emscripten_stack_restore = wasmExports['_emscripten_stack_restore'])(a0);
var __emscripten_stack_alloc = (a0) => (__emscripten_stack_alloc = wasmExports['_emscripten_stack_alloc'])(a0);
var _emscripten_stack_get_current = () => (_emscripten_stack_get_current = wasmExports['emscripten_stack_get_current'])();
var dynCall_jiji = Module['dynCall_jiji'] = createExportWrapper('dynCall_jiji', 5);
var dynCall_ji = Module['dynCall_ji'] = createExportWrapper('dynCall_ji', 2);


// include: postamble.js
// === Auto-generated postamble setup entry stuff ===

Module['addRunDependency'] = addRunDependency;
Module['removeRunDependency'] = removeRunDependency;
Module['FS_createPreloadedFile'] = FS_createPreloadedFile;
Module['FS_unlink'] = FS_unlink;
Module['FS_createPath'] = FS_createPath;
Module['FS_createDevice'] = FS_createDevice;
Module['FS_createDataFile'] = FS_createDataFile;
Module['FS_createLazyFile'] = FS_createLazyFile;
var missingLibrarySymbols = [
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'convertI32PairToI53',
  'convertU32PairToI53',
  'getTempRet0',
  'setTempRet0',
  'growMemory',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'emscriptenLog',
  'getDynCaller',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'asmjsMangle',
  'HandleAllocator',
  'getNativeTypeSize',
  'STACK_SIZE',
  'STACK_ALIGN',
  'POINTER_SIZE',
  'ASSERTIONS',
  'getCFunc',
  'ccall',
  'cwrap',
  'uleb128Encode',
  'sigToWasmTypes',
  'generateFuncType',
  'convertJsFunctionToWasm',
  'getEmptyTableSlot',
  'updateTableMap',
  'getFunctionAddress',
  'addFunction',
  'removeFunction',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'intArrayToString',
  'AsciiToString',
  'UTF16ToString',
  'stringToUTF16',
  'lengthBytesUTF16',
  'UTF32ToString',
  'stringToUTF32',
  'lengthBytesUTF32',
  'writeArrayToMemory',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'softFullscreenResizeWebGLRenderTarget',
  'registerPointerlockErrorEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'jsStackTrace',
  'getCallstack',
  'convertPCtoSourceLocation',
  'checkWasiClock',
  'wasiRightsToMuslOFlags',
  'wasiOFlagsToMuslOFlags',
  'createDyncallWrapper',
  'setImmediateWrapped',
  'clearImmediateWrapped',
  'polyfillSetImmediate',
  'getPromise',
  'makePromise',
  'idsToPromises',
  'makePromiseCallback',
  'findMatchingCatch',
  'Browser_asyncPrepareDataCounter',
  'isLeapYear',
  'ydayFromDate',
  'arraySum',
  'addDays',
  'getSocketFromFD',
  'getSocketAddress',
  'FS_mkdirTree',
  '_setNetworkCallback',
  'writeGLArray',
  'registerWebGlEventCallback',
  'runAndAbortIfError',
  'ALLOC_NORMAL',
  'ALLOC_STACK',
  'allocate',
  'writeStringToMemory',
  'writeAsciiToMemory',
  'setErrNo',
  'demangle',
  'stackTrace',
];
missingLibrarySymbols.forEach(missingLibrarySymbol)

var unexportedSymbols = [
  'run',
  'addOnPreRun',
  'addOnInit',
  'addOnPreMain',
  'addOnExit',
  'addOnPostRun',
  'out',
  'err',
  'callMain',
  'abort',
  'wasmMemory',
  'wasmExports',
  'writeStackCookie',
  'checkStackCookie',
  'writeI53ToI64',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53Checked',
  'stackSave',
  'stackRestore',
  'stackAlloc',
  'ptrToString',
  'zeroMemory',
  'exitJS',
  'getHeapMax',
  'abortOnCannotGrowMemory',
  'ENV',
  'ERRNO_CODES',
  'strError',
  'DNS',
  'Protocols',
  'Sockets',
  'initRandomFill',
  'randomFill',
  'timers',
  'warnOnce',
  'readEmAsmArgsArray',
  'readEmAsmArgs',
  'runEmAsmFunction',
  'runMainThreadEmAsm',
  'jstoi_q',
  'jstoi_s',
  'getExecutableName',
  'listenOnce',
  'autoResumeAudioContext',
  'dynCallLegacy',
  'dynCall',
  'handleException',
  'keepRuntimeAlive',
  'callUserCallback',
  'maybeExit',
  'asyncLoad',
  'alignMemory',
  'mmapAlloc',
  'wasmTable',
  'noExitRuntime',
  'freeTableIndexes',
  'functionsInTableMap',
  'setValue',
  'getValue',
  'PATH',
  'PATH_FS',
  'UTF8Decoder',
  'UTF8ArrayToString',
  'UTF8ToString',
  'stringToUTF8Array',
  'stringToUTF8',
  'lengthBytesUTF8',
  'intArrayFromString',
  'stringToAscii',
  'UTF16Decoder',
  'stringToNewUTF8',
  'stringToUTF8OnStack',
  'JSEvents',
  'registerKeyEventCallback',
  'specialHTMLTargets',
  'maybeCStringToJsString',
  'findEventTarget',
  'findCanvasEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'setLetterbox',
  'currentFullscreenStrategy',
  'restoreOldWindowedStyle',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'registerBeforeUnloadEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'UNWIND_CACHE',
  'ExitStatus',
  'getEnvStrings',
  'doReadv',
  'doWritev',
  'safeSetTimeout',
  'promiseMap',
  'uncaughtExceptionCount',
  'exceptionLast',
  'exceptionCaught',
  'ExceptionInfo',
  'Browser',
  'setMainLoop',
  'getPreloadedImageData__data',
  'wget',
  'MONTH_DAYS_REGULAR',
  'MONTH_DAYS_LEAP',
  'MONTH_DAYS_REGULAR_CUMULATIVE',
  'MONTH_DAYS_LEAP_CUMULATIVE',
  'SYSCALLS',
  'preloadPlugins',
  'FS_modeStringToFlags',
  'FS_getMode',
  'FS_stdin_getChar_buffer',
  'FS_stdin_getChar',
  'FS_readFile',
  'FS',
  'MEMFS',
  'TTY',
  'PIPEFS',
  'SOCKFS',
  'tempFixedLengthArray',
  'miniTempWebGLFloatBuffers',
  'miniTempWebGLIntBuffers',
  'heapObjectForWebGLType',
  'toTypedArrayIndex',
  'webgl_enable_ANGLE_instanced_arrays',
  'webgl_enable_OES_vertex_array_object',
  'webgl_enable_WEBGL_draw_buffers',
  'webgl_enable_WEBGL_multi_draw',
  'webgl_enable_EXT_polygon_offset_clamp',
  'webgl_enable_EXT_clip_control',
  'webgl_enable_WEBGL_polygon_mode',
  'GL',
  'emscriptenWebGLGet',
  'computeUnpackAlignedImageSize',
  'colorChannelsInGlTextureFormat',
  'emscriptenWebGLGetTexPixelData',
  'emscriptenWebGLGetUniform',
  'webglGetUniformLocation',
  'webglPrepareUniformLocationsBeforeFirstUse',
  'webglGetLeftBracePos',
  'emscriptenWebGLGetVertexAttrib',
  '__glGetActiveAttribOrUniform',
  'AL',
  'GLUT',
  'EGL',
  'GLEW',
  'IDBStore',
  'allocateUTF8',
  'allocateUTF8OnStack',
  'print',
  'printErr',
];
unexportedSymbols.forEach(unexportedRuntimeSymbol);



var calledRun;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args = []) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = _main;

  args.unshift(thisProgram);

  var argc = args.length;
  var argv = stackAlloc((argc + 1) * 4);
  var argv_ptr = argv;
  args.forEach((arg) => {
    HEAPU32[((argv_ptr)>>2)] = stringToUTF8OnStack(arg);
    argv_ptr += 4;
  });
  HEAPU32[((argv_ptr)>>2)] = 0;

  try {

    var ret = entryFunction(argc, argv);

    // if we're not running an evented main loop, it's time to exit
    exitJS(ret, /* implicit = */ true);
    return ret;
  }
  catch (e) {
    return handleException(e);
  }
}

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

function run(args = arguments_) {

  if (runDependencies > 0) {
    return;
  }

    stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    Module['onRuntimeInitialized']?.();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(() => {
      setTimeout(() => Module['setStatus'](''), 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = (x) => {
    has = true;
  }
  try { // it doesn't matter if it fails
    _fflush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach((name) => {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty?.output?.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the Emscripten FAQ), or make sure to emit a newline when you printf etc.');
  }
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;

run();

// end include: postamble.js

